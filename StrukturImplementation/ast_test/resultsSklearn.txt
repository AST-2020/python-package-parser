"{\n   \"function\": {\n      \"sklearn.__check_build.__init__\": {\n         \"raise_build_error\": [\n            \"e\"\n         ]\n      },\n      \"sklearn.__check_build.setup\": {\n         \"configuration\": [\n            \"parent_package\",\n            \"top_path\"\n         ]\n      },\n      \"sklearn.__init__\": {\n         \"setup_module\": [\n            \"module\"\n         ]\n      },\n      \"sklearn._build_utils.__init__\": {\n         \"_check_cython_version\": [],\n         \"cythonize_extensions\": [\n            \"top_path\",\n            \"config\"\n         ],\n         \"gen_from_templates\": [\n            \"templates\",\n            \"top_path\"\n         ]\n      },\n      \"sklearn._build_utils.deprecated_modules\": {\n         \"_clean_deprecated_modules_files\": [],\n         \"_create_deprecated_modules_files\": [],\n         \"_get_deprecated_path\": [\n            \"deprecated_path\"\n         ]\n      },\n      \"sklearn._build_utils.openmp_helpers\": {\n         \"check_openmp_support\": [],\n         \"get_openmp_flag\": [\n            \"compiler\"\n         ]\n      },\n      \"sklearn._build_utils.pre_build_helpers\": {\n         \"basic_check_build\": [],\n         \"compile_test_program\": [\n            \"code\",\n            \"extra_preargs\",\n            \"extra_postargs\"\n         ]\n      },\n      \"sklearn._config\": {\n         \"config_context\": [],\n         \"get_config\": [],\n         \"set_config\": [\n            \"assume_finite\",\n            \"working_memory\",\n            \"print_changed_only\"\n         ]\n      },\n      \"sklearn.base\": {\n         \"_pprint\": [\n            \"params\",\n            \"offset\",\n            \"printer\"\n         ],\n         \"clone\": [\n            \"estimator\",\n            \"safe\"\n         ],\n         \"is_classifier\": [\n            \"estimator\"\n         ],\n         \"is_outlier_detector\": [\n            \"estimator\"\n         ],\n         \"is_regressor\": [\n            \"estimator\"\n         ]\n      },\n      \"sklearn.calibration\": {\n         \"_sigmoid_calibration\": [\n            \"df\",\n            \"y\",\n            \"sample_weight\"\n         ],\n         \"calibration_curve\": [\n            \"y_true\",\n            \"y_prob\",\n            \"normalize\",\n            \"n_bins\",\n            \"strategy\"\n         ]\n      },\n      \"sklearn.cluster._affinity_propagation\": {\n         \"_equal_similarities_and_preferences\": [\n            \"S\",\n            \"preference\"\n         ],\n         \"affinity_propagation\": [\n            \"S\",\n            \"preference\",\n            \"convergence_iter\",\n            \"max_iter\",\n            \"damping\",\n            \"copy\",\n            \"verbose\",\n            \"return_n_iter\"\n         ]\n      },\n      \"sklearn.cluster._agglomerative\": {\n         \"_average_linkage\": [],\n         \"_complete_linkage\": [],\n         \"_fix_connectivity\": [\n            \"X\",\n            \"connectivity\",\n            \"affinity\"\n         ],\n         \"_hc_cut\": [\n            \"n_clusters\",\n            \"children\",\n            \"n_leaves\"\n         ],\n         \"_single_linkage\": [],\n         \"_single_linkage_tree\": [\n            \"connectivity\",\n            \"n_samples\",\n            \"n_nodes\",\n            \"n_clusters\",\n            \"n_connected_components\",\n            \"return_distance\"\n         ],\n         \"linkage_tree\": [\n            \"X\",\n            \"connectivity\",\n            \"n_clusters\",\n            \"linkage\",\n            \"affinity\",\n            \"return_distance\"\n         ],\n         \"ward_tree\": [\n            \"X\",\n            \"connectivity\",\n            \"n_clusters\",\n            \"return_distance\"\n         ]\n      },\n      \"sklearn.cluster._bicluster\": {\n         \"_bistochastic_normalize\": [\n            \"X\",\n            \"max_iter\",\n            \"tol\"\n         ],\n         \"_log_normalize\": [\n            \"X\"\n         ],\n         \"_scale_normalize\": [\n            \"X\"\n         ]\n      },\n      \"sklearn.cluster._birch\": {\n         \"_iterate_sparse_X\": [\n            \"X\"\n         ],\n         \"_split_node\": [\n            \"node\",\n            \"threshold\",\n            \"branching_factor\"\n         ]\n      },\n      \"sklearn.cluster._dbscan\": {\n         \"dbscan\": [\n            \"X\",\n            \"eps\",\n            \"min_samples\",\n            \"metric\",\n            \"metric_params\",\n            \"algorithm\",\n            \"leaf_size\",\n            \"p\",\n            \"sample_weight\",\n            \"n_jobs\"\n         ]\n      },\n      \"sklearn.cluster._kmeans\": {\n         \"_check_normalize_sample_weight\": [\n            \"sample_weight\",\n            \"X\"\n         ],\n         \"_init_centroids\": [\n            \"X\",\n            \"k\",\n            \"init\",\n            \"random_state\",\n            \"x_squared_norms\",\n            \"init_size\"\n         ],\n         \"_k_init\": [\n            \"X\",\n            \"n_clusters\",\n            \"x_squared_norms\",\n            \"random_state\",\n            \"n_local_trials\"\n         ],\n         \"_kmeans_single_elkan\": [\n            \"X\",\n            \"sample_weight\",\n            \"n_clusters\",\n            \"max_iter\",\n            \"init\",\n            \"verbose\",\n            \"x_squared_norms\",\n            \"random_state\",\n            \"tol\",\n            \"precompute_distances\"\n         ],\n         \"_kmeans_single_lloyd\": [\n            \"X\",\n            \"sample_weight\",\n            \"n_clusters\",\n            \"max_iter\",\n            \"init\",\n            \"verbose\",\n            \"x_squared_norms\",\n            \"random_state\",\n            \"tol\",\n            \"precompute_distances\"\n         ],\n         \"_labels_inertia\": [\n            \"X\",\n            \"sample_weight\",\n            \"x_squared_norms\",\n            \"centers\",\n            \"precompute_distances\",\n            \"distances\"\n         ],\n         \"_labels_inertia_precompute_dense\": [\n            \"X\",\n            \"sample_weight\",\n            \"x_squared_norms\",\n            \"centers\",\n            \"distances\"\n         ],\n         \"_mini_batch_convergence\": [\n            \"model\",\n            \"iteration_idx\",\n            \"n_iter\",\n            \"tol\",\n            \"n_samples\",\n            \"centers_squared_diff\",\n            \"batch_inertia\",\n            \"context\",\n            \"verbose\"\n         ],\n         \"_mini_batch_step\": [\n            \"X\",\n            \"sample_weight\",\n            \"x_squared_norms\",\n            \"centers\",\n            \"weight_sums\",\n            \"old_center_buffer\",\n            \"compute_squared_diff\",\n            \"distances\",\n            \"random_reassign\",\n            \"random_state\",\n            \"reassignment_ratio\",\n            \"verbose\"\n         ],\n         \"_tolerance\": [\n            \"X\",\n            \"tol\"\n         ],\n         \"_validate_center_shape\": [\n            \"X\",\n            \"n_centers\",\n            \"centers\"\n         ],\n         \"k_means\": [\n            \"X\",\n            \"n_clusters\",\n            \"sample_weight\",\n            \"init\",\n            \"precompute_distances\",\n            \"n_init\",\n            \"max_iter\",\n            \"verbose\",\n            \"tol\",\n            \"random_state\",\n            \"copy_x\",\n            \"n_jobs\",\n            \"algorithm\",\n            \"return_n_iter\"\n         ]\n      },\n      \"sklearn.cluster._mean_shift\": {\n         \"_mean_shift_single_seed\": [\n            \"my_mean\",\n            \"X\",\n            \"nbrs\",\n            \"max_iter\"\n         ],\n         \"estimate_bandwidth\": [\n            \"X\",\n            \"quantile\",\n            \"n_samples\",\n            \"random_state\",\n            \"n_jobs\"\n         ],\n         \"get_bin_seeds\": [\n            \"X\",\n            \"bin_size\",\n            \"min_bin_freq\"\n         ],\n         \"mean_shift\": [\n            \"X\",\n            \"bandwidth\",\n            \"seeds\",\n            \"bin_seeding\",\n            \"min_bin_freq\",\n            \"cluster_all\",\n            \"max_iter\",\n            \"n_jobs\"\n         ]\n      },\n      \"sklearn.cluster._optics\": {\n         \"_compute_core_distances_\": [\n            \"X\",\n            \"neighbors\",\n            \"min_samples\",\n            \"working_memory\"\n         ],\n         \"_correct_predecessor\": [\n            \"reachability_plot\",\n            \"predecessor_plot\",\n            \"ordering\",\n            \"s\",\n            \"e\"\n         ],\n         \"_extend_region\": [\n            \"steep_point\",\n            \"xward_point\",\n            \"start\",\n            \"min_samples\"\n         ],\n         \"_extract_xi_labels\": [\n            \"ordering\",\n            \"clusters\"\n         ],\n         \"_set_reach_dist\": [\n            \"core_distances_\",\n            \"reachability_\",\n            \"predecessor_\",\n            \"point_index\",\n            \"processed\",\n            \"X\",\n            \"nbrs\",\n            \"metric\",\n            \"metric_params\",\n            \"p\",\n            \"max_eps\"\n         ],\n         \"_update_filter_sdas\": [\n            \"sdas\",\n            \"mib\",\n            \"xi_complement\",\n            \"reachability_plot\"\n         ],\n         \"_validate_size\": [\n            \"size\",\n            \"n_samples\",\n            \"param_name\"\n         ],\n         \"_xi_cluster\": [\n            \"reachability_plot\",\n            \"predecessor_plot\",\n            \"ordering\",\n            \"xi\",\n            \"min_samples\",\n            \"min_cluster_size\",\n            \"predecessor_correction\"\n         ],\n         \"cluster_optics_dbscan\": [\n            \"reachability\",\n            \"core_distances\",\n            \"ordering\",\n            \"eps\"\n         ],\n         \"cluster_optics_xi\": [\n            \"reachability\",\n            \"predecessor\",\n            \"ordering\",\n            \"min_samples\",\n            \"min_cluster_size\",\n            \"xi\",\n            \"predecessor_correction\"\n         ],\n         \"compute_optics_graph\": [\n            \"X\",\n            \"min_samples\",\n            \"max_eps\",\n            \"metric\",\n            \"p\",\n            \"metric_params\",\n            \"algorithm\",\n            \"leaf_size\",\n            \"n_jobs\"\n         ]\n      },\n      \"sklearn.cluster._spectral\": {\n         \"discretize\": [\n            \"vectors\",\n            \"copy\",\n            \"max_svd_restarts\",\n            \"n_iter_max\",\n            \"random_state\"\n         ],\n         \"spectral_clustering\": [\n            \"affinity\",\n            \"n_clusters\",\n            \"n_components\",\n            \"eigen_solver\",\n            \"random_state\",\n            \"n_init\",\n            \"eigen_tol\",\n            \"assign_labels\"\n         ]\n      },\n      \"sklearn.cluster.affinity_propagation_\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.cluster.bicluster\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.cluster.birch\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.cluster.dbscan_\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.cluster.hierarchical\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.cluster.k_means_\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.cluster.mean_shift_\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.cluster.optics_\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.cluster.setup\": {\n         \"configuration\": [\n            \"parent_package\",\n            \"top_path\"\n         ]\n      },\n      \"sklearn.cluster.spectral\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.cluster.tests.common\": {\n         \"generate_clustered_data\": [\n            \"seed\",\n            \"n_clusters\",\n            \"n_features\",\n            \"n_samples_per_cluster\",\n            \"std\"\n         ]\n      },\n      \"sklearn.cluster.tests.test_affinity_propagation\": {\n         \"test_affinity_propagation\": [],\n         \"test_affinity_propagation_convergence_warning_dense_sparse\": [\n            \"centers\"\n         ],\n         \"test_affinity_propagation_equal_mutual_similarities\": [],\n         \"test_affinity_propagation_fit_non_convergence\": [],\n         \"test_affinity_propagation_non_convergence_regressiontest\": [],\n         \"test_affinity_propagation_predict\": [],\n         \"test_affinity_propagation_predict_error\": [],\n         \"test_affinity_propagation_predict_non_convergence\": [],\n         \"test_equal_similarities_and_preferences\": []\n      },\n      \"sklearn.cluster.tests.test_bicluster\": {\n         \"_do_bistochastic_test\": [\n            \"scaled\"\n         ],\n         \"_do_scale_test\": [\n            \"scaled\"\n         ],\n         \"_test_shape_indices\": [\n            \"model\"\n         ],\n         \"test_bistochastic_normalize\": [],\n         \"test_errors\": [\n            \"args\"\n         ],\n         \"test_fit_best_piecewise\": [],\n         \"test_get_submatrix\": [],\n         \"test_log_normalize\": [],\n         \"test_perfect_checkerboard\": [],\n         \"test_project_and_cluster\": [],\n         \"test_scale_normalize\": [],\n         \"test_spectral_biclustering\": [],\n         \"test_spectral_coclustering\": [],\n         \"test_wrong_shape\": []\n      },\n      \"sklearn.cluster.tests.test_birch\": {\n         \"check_branching_factor\": [\n            \"node\",\n            \"branching_factor\"\n         ],\n         \"check_threshold\": [\n            \"birch_instance\",\n            \"threshold\"\n         ],\n         \"test_birch_predict\": [],\n         \"test_branching_factor\": [],\n         \"test_n_clusters\": [],\n         \"test_n_samples_leaves_roots\": [],\n         \"test_partial_fit\": [],\n         \"test_sparse_X\": [],\n         \"test_threshold\": []\n      },\n      \"sklearn.cluster.tests.test_dbscan\": {\n         \"test_boundaries\": [],\n         \"test_dbscan_badargs\": [\n            \"args\"\n         ],\n         \"test_dbscan_balltree\": [],\n         \"test_dbscan_callable\": [],\n         \"test_dbscan_core_samples_toy\": [\n            \"algorithm\"\n         ],\n         \"test_dbscan_feature\": [],\n         \"test_dbscan_input_not_modified\": [\n            \"use_sparse\",\n            \"metric\"\n         ],\n         \"test_dbscan_metric_params\": [],\n         \"test_dbscan_no_core_samples\": [],\n         \"test_dbscan_precomputed_metric_with_degenerate_input_arrays\": [],\n         \"test_dbscan_precomputed_metric_with_initial_rows_zero\": [],\n         \"test_dbscan_similarity\": [],\n         \"test_dbscan_sparse\": [],\n         \"test_dbscan_sparse_precomputed\": [\n            \"include_self\"\n         ],\n         \"test_dbscan_sparse_precomputed_different_eps\": [],\n         \"test_input_validation\": [],\n         \"test_pickle\": [],\n         \"test_weighted_dbscan\": []\n      },\n      \"sklearn.cluster.tests.test_feature_agglomeration\": {\n         \"test_feature_agglomeration\": []\n      },\n      \"sklearn.cluster.tests.test_hierarchical\": {\n         \"assess_same_labelling\": [\n            \"cut1\",\n            \"cut2\"\n         ],\n         \"test_affinity_passed_to_fix_connectivity\": [],\n         \"test_agg_n_clusters\": [],\n         \"test_agglomerative_clustering\": [],\n         \"test_agglomerative_clustering_with_distance_threshold\": [\n            \"linkage\"\n         ],\n         \"test_agglomerative_clustering_with_distance_threshold_edge_case\": [\n            \"linkage\",\n            \"threshold\",\n            \"y_true\"\n         ],\n         \"test_agglomerative_clustering_wrong_arg_memory\": [],\n         \"test_cluster_distances_with_distance_threshold\": [],\n         \"test_compute_full_tree\": [],\n         \"test_connectivity_callable\": [],\n         \"test_connectivity_fixing_non_lil\": [],\n         \"test_connectivity_ignores_diagonal\": [],\n         \"test_connectivity_propagation\": [],\n         \"test_dist_threshold_invalid_parameters\": [],\n         \"test_height_linkage_tree\": [],\n         \"test_identical_points\": [],\n         \"test_int_float_dict\": [],\n         \"test_linkage_misc\": [],\n         \"test_n_components\": [],\n         \"test_n_components_deprecation\": [],\n         \"test_scikit_vs_scipy\": [],\n         \"test_single_linkage_clustering\": [],\n         \"test_small_distance_threshold\": [],\n         \"test_structured_linkage_tree\": [],\n         \"test_unstructured_linkage_tree\": [],\n         \"test_ward_agglomeration\": [],\n         \"test_ward_linkage_tree_return_distance\": [],\n         \"test_ward_tree_children_order\": [],\n         \"test_zero_cosine_linkage_tree\": []\n      },\n      \"sklearn.cluster.tests.test_k_means\": {\n         \"_check_fitted_model\": [\n            \"km\"\n         ],\n         \"_sort_centers\": [\n            \"centers\"\n         ],\n         \"test_check_normalize_sample_weight\": [],\n         \"test_elkan_results\": [\n            \"distribution\",\n            \"tol\"\n         ],\n         \"test_fit_transform\": [],\n         \"test_float_precision\": [\n            \"Estimator\",\n            \"is_sparse\"\n         ],\n         \"test_full_vs_elkan\": [],\n         \"test_int_input\": [],\n         \"test_iter_attribute\": [],\n         \"test_k_means_copyx\": [],\n         \"test_k_means_empty_cluster_relocated\": [],\n         \"test_k_means_explicit_init_shape\": [\n            \"Class\"\n         ],\n         \"test_k_means_fit_predict\": [\n            \"algo\",\n            \"dtype\",\n            \"constructor\",\n            \"seed\",\n            \"max_iter\",\n            \"tol\"\n         ],\n         \"test_k_means_fortran_aligned_data\": [],\n         \"test_k_means_function\": [],\n         \"test_k_means_init\": [\n            \"data\",\n            \"init\"\n         ],\n         \"test_k_means_init_centers\": [],\n         \"test_k_means_init_fitted_centers\": [\n            \"data\"\n         ],\n         \"test_k_means_invalid_init\": [\n            \"Estimator\"\n         ],\n         \"test_k_means_n_init\": [],\n         \"test_k_means_new_centers\": [],\n         \"test_k_means_non_collapsed\": [],\n         \"test_k_means_plus_plus_init_2_jobs\": [],\n         \"test_k_means_plus_plus_init_not_precomputed\": [],\n         \"test_k_means_precompute_distances_flag\": [],\n         \"test_k_means_random_init_not_precomputed\": [],\n         \"test_kmeans_results\": [\n            \"representation\",\n            \"algo\",\n            \"dtype\"\n         ],\n         \"test_labels_assignment_and_inertia\": [],\n         \"test_less_centers_than_unique_points\": [],\n         \"test_max_iter_error\": [],\n         \"test_mb_kmeans_verbose\": [],\n         \"test_mini_batch_k_means_random_init_partial_fit\": [],\n         \"test_minibatch_default_init_size\": [],\n         \"test_minibatch_init_with_large_k\": [],\n         \"test_minibatch_k_means_init\": [\n            \"data\",\n            \"init\"\n         ],\n         \"test_minibatch_k_means_init_multiple_runs_with_explicit_centers\": [],\n         \"test_minibatch_kmeans_partial_fit_int_data\": [],\n         \"test_minibatch_reassign\": [],\n         \"test_minibatch_sensible_reassign_fit\": [],\n         \"test_minibatch_sensible_reassign_partial_fit\": [],\n         \"test_minibatch_set_init_size\": [],\n         \"test_minibatch_tol\": [],\n         \"test_minibatch_update_consistency\": [],\n         \"test_minibatch_with_many_reassignments\": [],\n         \"test_n_init\": [],\n         \"test_predict\": [\n            \"Estimator\",\n            \"data\",\n            \"init\"\n         ],\n         \"test_predict_equal_labels\": [\n            \"algo\"\n         ],\n         \"test_predict_minibatch_dense_sparse\": [\n            \"init\"\n         ],\n         \"test_result_of_kmeans_equal_in_diff_n_jobs\": [],\n         \"test_sample_weight_length\": [],\n         \"test_scaled_weights\": [],\n         \"test_score\": [\n            \"algo\"\n         ],\n         \"test_sparse_mb_k_means_callable_init\": [],\n         \"test_sparse_validate_centers\": [],\n         \"test_transform\": [],\n         \"test_unit_weights_vs_no_weights\": [],\n         \"test_weighted_vs_repeated\": [],\n         \"test_x_squared_norms_init_centroids\": []\n      },\n      \"sklearn.cluster.tests.test_mean_shift\": {\n         \"test_bin_seeds\": [],\n         \"test_cluster_intensity_tie\": [],\n         \"test_estimate_bandwidth\": [],\n         \"test_estimate_bandwidth_1sample\": [],\n         \"test_estimate_bandwidth_with_sparse_matrix\": [],\n         \"test_max_iter\": [\n            \"max_iter\"\n         ],\n         \"test_mean_shift\": [\n            \"bandwidth\",\n            \"cluster_all\",\n            \"expected\",\n            \"first_cluster_label\"\n         ],\n         \"test_mean_shift_negative_bandwidth\": [],\n         \"test_meanshift_all_orphans\": [],\n         \"test_meanshift_predict\": [],\n         \"test_parallel\": [],\n         \"test_unfitted\": []\n      },\n      \"sklearn.cluster.tests.test_optics\": {\n         \"test_bad_extract\": [],\n         \"test_bad_reachability\": [],\n         \"test_close_extract\": [],\n         \"test_cluster_hierarchy_\": [],\n         \"test_compare_to_ELKI\": [],\n         \"test_correct_number_of_clusters\": [],\n         \"test_dbscan_optics_parity\": [\n            \"eps\",\n            \"min_samples\"\n         ],\n         \"test_extend_downward\": [\n            \"r_plot\",\n            \"end\"\n         ],\n         \"test_extend_upward\": [\n            \"r_plot\",\n            \"end\"\n         ],\n         \"test_extract_dbscan\": [],\n         \"test_extract_xi\": [],\n         \"test_min_cluster_size\": [\n            \"min_cluster_size\"\n         ],\n         \"test_min_cluster_size_invalid\": [\n            \"min_cluster_size\"\n         ],\n         \"test_min_cluster_size_invalid2\": [],\n         \"test_min_samples_edge_case\": [],\n         \"test_minimum_number_of_sample_check\": [],\n         \"test_precomputed_dists\": [],\n         \"test_processing_order\": [],\n         \"test_the_extract_xi_labels\": [\n            \"ordering\",\n            \"clusters\",\n            \"expected\"\n         ],\n         \"test_wrong_cluster_method\": []\n      },\n      \"sklearn.cluster.tests.test_spectral\": {\n         \"test_affinities\": [],\n         \"test_discretize\": [\n            \"n_samples\"\n         ],\n         \"test_n_components\": [],\n         \"test_precomputed_nearest_neighbors_filtering\": [],\n         \"test_spectral_clustering\": [\n            \"eigen_solver\",\n            \"assign_labels\"\n         ],\n         \"test_spectral_clustering_sparse\": [],\n         \"test_spectral_clustering_with_arpack_amg_solvers\": [],\n         \"test_spectral_unknown_assign_labels\": [],\n         \"test_spectral_unknown_mode\": []\n      },\n      \"sklearn.compose._column_transformer\": {\n         \"_check_X\": [\n            \"X\"\n         ],\n         \"_get_transformer_list\": [\n            \"estimators\"\n         ],\n         \"_is_empty_column_selection\": [\n            \"column\"\n         ],\n         \"_is_negative_indexing\": [\n            \"key\"\n         ],\n         \"make_column_transformer\": []\n      },\n      \"sklearn.compose.tests.test_column_transformer\": {\n         \"test_2D_transformer_output\": [],\n         \"test_2D_transformer_output_pandas\": [],\n         \"test_column_transformer\": [],\n         \"test_column_transformer_callable_specifier\": [],\n         \"test_column_transformer_cloning\": [],\n         \"test_column_transformer_dataframe\": [],\n         \"test_column_transformer_drop_all_sparse_remainder_transformer\": [],\n         \"test_column_transformer_drops_all_remainder_transformer\": [],\n         \"test_column_transformer_empty_columns\": [\n            \"pandas\",\n            \"column\"\n         ],\n         \"test_column_transformer_error_msg_1D\": [],\n         \"test_column_transformer_get_feature_names\": [],\n         \"test_column_transformer_get_set_params\": [],\n         \"test_column_transformer_get_set_params_with_remainder\": [],\n         \"test_column_transformer_invalid_columns\": [\n            \"remainder\"\n         ],\n         \"test_column_transformer_invalid_transformer\": [],\n         \"test_column_transformer_list\": [],\n         \"test_column_transformer_mask_indexing\": [\n            \"array_type\"\n         ],\n         \"test_column_transformer_mixed_cols_sparse\": [],\n         \"test_column_transformer_named_estimators\": [],\n         \"test_column_transformer_negative_column_indexes\": [],\n         \"test_column_transformer_no_estimators\": [],\n         \"test_column_transformer_no_estimators_set_params\": [],\n         \"test_column_transformer_no_remaining_remainder_transformer\": [],\n         \"test_column_transformer_remainder\": [],\n         \"test_column_transformer_remainder_numpy\": [\n            \"key\"\n         ],\n         \"test_column_transformer_remainder_pandas\": [\n            \"key\"\n         ],\n         \"test_column_transformer_remainder_transformer\": [\n            \"key\"\n         ],\n         \"test_column_transformer_reordered_column_names_remainder\": [\n            \"explicit_colname\"\n         ],\n         \"test_column_transformer_sparse_array\": [],\n         \"test_column_transformer_sparse_remainder_transformer\": [],\n         \"test_column_transformer_sparse_stacking\": [],\n         \"test_column_transformer_sparse_threshold\": [],\n         \"test_column_transformer_special_strings\": [],\n         \"test_column_transformer_verbose\": [\n            \"est\",\n            \"pattern\",\n            \"method\",\n            \"capsys\"\n         ],\n         \"test_column_transformer_with_make_column_selector\": [],\n         \"test_feature_name_validation\": [],\n         \"test_make_column_selector_error\": [],\n         \"test_make_column_selector_pickle\": [],\n         \"test_make_column_selector_with_select_dtypes\": [\n            \"cols\",\n            \"pattern\",\n            \"include\",\n            \"exclude\"\n         ],\n         \"test_make_column_transformer\": [],\n         \"test_make_column_transformer_kwargs\": [],\n         \"test_make_column_transformer_pandas\": [],\n         \"test_make_column_transformer_remainder_transformer\": []\n      },\n      \"sklearn.compose.tests.test_target\": {\n         \"_check_shifted_by_one\": [\n            \"y\",\n            \"y_pred\"\n         ],\n         \"_check_standard_scaled\": [\n            \"y\",\n            \"y_pred\"\n         ],\n         \"test_transform_target_regressor_1d_transformer\": [\n            \"X\",\n            \"y\"\n         ],\n         \"test_transform_target_regressor_2d_transformer\": [\n            \"X\",\n            \"y\"\n         ],\n         \"test_transform_target_regressor_2d_transformer_multioutput\": [],\n         \"test_transform_target_regressor_count_fit\": [\n            \"check_inverse\"\n         ],\n         \"test_transform_target_regressor_ensure_y_array\": [],\n         \"test_transform_target_regressor_error\": [],\n         \"test_transform_target_regressor_functions\": [],\n         \"test_transform_target_regressor_functions_multioutput\": [],\n         \"test_transform_target_regressor_invertible\": [],\n         \"test_transform_target_regressor_multi_to_single\": [],\n         \"test_transform_target_regressor_pass_fit_parameters\": [],\n         \"test_transform_target_regressor_route_pipeline\": []\n      },\n      \"sklearn.conftest\": {\n         \"pyplot\": []\n      },\n      \"sklearn.covariance._empirical_covariance\": {\n         \"empirical_covariance\": [\n            \"X\",\n            \"assume_centered\"\n         ],\n         \"log_likelihood\": [\n            \"emp_cov\",\n            \"precision\"\n         ]\n      },\n      \"sklearn.covariance._graph_lasso\": {\n         \"_dual_gap\": [\n            \"emp_cov\",\n            \"precision_\",\n            \"alpha\"\n         ],\n         \"_objective\": [\n            \"mle\",\n            \"precision_\",\n            \"alpha\"\n         ],\n         \"alpha_max\": [\n            \"emp_cov\"\n         ],\n         \"graphical_lasso\": [\n            \"emp_cov\",\n            \"alpha\",\n            \"cov_init\",\n            \"mode\",\n            \"tol\",\n            \"enet_tol\",\n            \"max_iter\",\n            \"verbose\",\n            \"return_costs\",\n            \"eps\",\n            \"return_n_iter\"\n         ],\n         \"graphical_lasso_path\": [\n            \"X\",\n            \"alphas\",\n            \"cov_init\",\n            \"X_test\",\n            \"mode\",\n            \"tol\",\n            \"enet_tol\",\n            \"max_iter\",\n            \"verbose\"\n         ]\n      },\n      \"sklearn.covariance._robust_covariance\": {\n         \"_c_step\": [\n            \"X\",\n            \"n_support\",\n            \"random_state\",\n            \"remaining_iterations\",\n            \"initial_estimates\",\n            \"verbose\",\n            \"cov_computation_method\"\n         ],\n         \"c_step\": [\n            \"X\",\n            \"n_support\",\n            \"remaining_iterations\",\n            \"initial_estimates\",\n            \"verbose\",\n            \"cov_computation_method\",\n            \"random_state\"\n         ],\n         \"fast_mcd\": [\n            \"X\",\n            \"support_fraction\",\n            \"cov_computation_method\",\n            \"random_state\"\n         ],\n         \"select_candidates\": [\n            \"X\",\n            \"n_support\",\n            \"n_trials\",\n            \"select\",\n            \"n_iter\",\n            \"verbose\",\n            \"cov_computation_method\",\n            \"random_state\"\n         ]\n      },\n      \"sklearn.covariance._shrunk_covariance\": {\n         \"ledoit_wolf\": [\n            \"X\",\n            \"assume_centered\",\n            \"block_size\"\n         ],\n         \"ledoit_wolf_shrinkage\": [\n            \"X\",\n            \"assume_centered\",\n            \"block_size\"\n         ],\n         \"oas\": [\n            \"X\",\n            \"assume_centered\"\n         ],\n         \"shrunk_covariance\": [\n            \"emp_cov\",\n            \"shrinkage\"\n         ]\n      },\n      \"sklearn.covariance.elliptic_envelope\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.covariance.empirical_covariance_\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.covariance.graph_lasso_\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.covariance.robust_covariance\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.covariance.shrunk_covariance_\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.covariance.tests.test_covariance\": {\n         \"_naive_ledoit_wolf_shrinkage\": [\n            \"X\"\n         ],\n         \"test_covariance\": [],\n         \"test_ledoit_wolf\": [],\n         \"test_ledoit_wolf_large\": [],\n         \"test_ledoit_wolf_small\": [],\n         \"test_oas\": [],\n         \"test_shrunk_covariance\": []\n      },\n      \"sklearn.covariance.tests.test_elliptic_envelope\": {\n         \"test_elliptic_envelope\": [],\n         \"test_score_samples\": []\n      },\n      \"sklearn.covariance.tests.test_graphical_lasso\": {\n         \"test_graph_lasso_2D\": [],\n         \"test_graphical_lasso\": [\n            \"random_state\"\n         ],\n         \"test_graphical_lasso_cv\": [\n            \"random_state\"\n         ],\n         \"test_graphical_lasso_iris\": [],\n         \"test_graphical_lasso_iris_singular\": []\n      },\n      \"sklearn.covariance.tests.test_robust_covariance\": {\n         \"launch_mcd_on_dataset\": [\n            \"n_samples\",\n            \"n_features\",\n            \"n_outliers\",\n            \"tol_loc\",\n            \"tol_cov\",\n            \"tol_support\"\n         ],\n         \"test_fast_mcd_on_invalid_input\": [],\n         \"test_mcd\": [],\n         \"test_mcd_class_on_invalid_input\": [],\n         \"test_mcd_increasing_det_warning\": [],\n         \"test_mcd_issue1127\": [],\n         \"test_mcd_issue3367\": [],\n         \"test_mcd_support_covariance_is_zero\": []\n      },\n      \"sklearn.cross_decomposition._pls\": {\n         \"_center_scale_xy\": [\n            \"X\",\n            \"Y\",\n            \"scale\"\n         ],\n         \"_nipals_twoblocks_inner_loop\": [\n            \"X\",\n            \"Y\",\n            \"mode\",\n            \"max_iter\",\n            \"tol\",\n            \"norm_y_weights\"\n         ],\n         \"_svd_cross_product\": [\n            \"X\",\n            \"Y\"\n         ]\n      },\n      \"sklearn.cross_decomposition.cca_\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.cross_decomposition.pls_\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.cross_decomposition.tests.test_pls\": {\n         \"test_PLSSVD\": [],\n         \"test_convergence_fail\": [],\n         \"test_pls\": [],\n         \"test_pls_errors\": [],\n         \"test_pls_scaling\": [],\n         \"test_predict_transform_copy\": [],\n         \"test_scale_and_stability\": [],\n         \"test_univariate_pls_regression\": []\n      },\n      \"sklearn.datasets._base\": {\n         \"_fetch_remote\": [\n            \"remote\",\n            \"dirname\"\n         ],\n         \"_pkl_filepath\": [],\n         \"_refresh_cache\": [\n            \"files\",\n            \"compress\"\n         ],\n         \"_sha256\": [\n            \"path\"\n         ],\n         \"clear_data_home\": [\n            \"data_home\"\n         ],\n         \"get_data_home\": [\n            \"data_home\"\n         ],\n         \"load_boston\": [\n            \"return_X_y\"\n         ],\n         \"load_breast_cancer\": [\n            \"return_X_y\"\n         ],\n         \"load_data\": [\n            \"module_path\",\n            \"data_file_name\"\n         ],\n         \"load_diabetes\": [\n            \"return_X_y\"\n         ],\n         \"load_digits\": [\n            \"n_class\",\n            \"return_X_y\"\n         ],\n         \"load_files\": [\n            \"container_path\",\n            \"description\",\n            \"categories\",\n            \"load_content\",\n            \"shuffle\",\n            \"encoding\",\n            \"decode_error\",\n            \"random_state\"\n         ],\n         \"load_iris\": [\n            \"return_X_y\"\n         ],\n         \"load_linnerud\": [\n            \"return_X_y\"\n         ],\n         \"load_sample_image\": [\n            \"image_name\"\n         ],\n         \"load_sample_images\": [],\n         \"load_wine\": [\n            \"return_X_y\"\n         ]\n      },\n      \"sklearn.datasets._california_housing\": {\n         \"fetch_california_housing\": [\n            \"data_home\",\n            \"download_if_missing\",\n            \"return_X_y\"\n         ]\n      },\n      \"sklearn.datasets._covtype\": {\n         \"fetch_covtype\": [\n            \"data_home\",\n            \"download_if_missing\",\n            \"random_state\",\n            \"shuffle\",\n            \"return_X_y\"\n         ]\n      },\n      \"sklearn.datasets._kddcup99\": {\n         \"_fetch_brute_kddcup99\": [\n            \"data_home\",\n            \"download_if_missing\",\n            \"percent10\"\n         ],\n         \"_mkdirp\": [\n            \"d\"\n         ],\n         \"fetch_kddcup99\": [\n            \"subset\",\n            \"data_home\",\n            \"shuffle\",\n            \"random_state\",\n            \"percent10\",\n            \"download_if_missing\",\n            \"return_X_y\"\n         ]\n      },\n      \"sklearn.datasets._lfw\": {\n         \"_check_fetch_lfw\": [\n            \"data_home\",\n            \"funneled\",\n            \"download_if_missing\"\n         ],\n         \"_fetch_lfw_pairs\": [\n            \"index_file_path\",\n            \"data_folder_path\",\n            \"slice_\",\n            \"color\",\n            \"resize\"\n         ],\n         \"_fetch_lfw_people\": [\n            \"data_folder_path\",\n            \"slice_\",\n            \"color\",\n            \"resize\",\n            \"min_faces_per_person\"\n         ],\n         \"_load_imgs\": [\n            \"file_paths\",\n            \"slice_\",\n            \"color\",\n            \"resize\"\n         ],\n         \"fetch_lfw_pairs\": [\n            \"subset\",\n            \"data_home\",\n            \"funneled\",\n            \"resize\",\n            \"color\",\n            \"slice_\",\n            \"download_if_missing\"\n         ],\n         \"fetch_lfw_people\": [\n            \"data_home\",\n            \"funneled\",\n            \"resize\",\n            \"min_faces_per_person\",\n            \"color\",\n            \"slice_\",\n            \"download_if_missing\",\n            \"return_X_y\"\n         ]\n      },\n      \"sklearn.datasets._olivetti_faces\": {\n         \"fetch_olivetti_faces\": [\n            \"data_home\",\n            \"shuffle\",\n            \"random_state\",\n            \"download_if_missing\",\n            \"return_X_y\"\n         ]\n      },\n      \"sklearn.datasets._openml\": {\n         \"_convert_arff_data\": [\n            \"arff_data\",\n            \"col_slice_x\",\n            \"col_slice_y\",\n            \"shape\"\n         ],\n         \"_convert_arff_data_dataframe\": [\n            \"arff\",\n            \"columns\",\n            \"features_dict\"\n         ],\n         \"_download_data_arff\": [\n            \"file_id\",\n            \"sparse\",\n            \"data_home\",\n            \"encode_nominal\"\n         ],\n         \"_feature_to_dtype\": [\n            \"feature\"\n         ],\n         \"_get_data_description_by_id\": [\n            \"data_id\",\n            \"data_home\"\n         ],\n         \"_get_data_features\": [\n            \"data_id\",\n            \"data_home\"\n         ],\n         \"_get_data_info_by_name\": [\n            \"name\",\n            \"version\",\n            \"data_home\"\n         ],\n         \"_get_data_qualities\": [\n            \"data_id\",\n            \"data_home\"\n         ],\n         \"_get_json_content_from_openml_api\": [\n            \"url\",\n            \"error_message\",\n            \"raise_if_error\",\n            \"data_home\"\n         ],\n         \"_get_local_path\": [\n            \"openml_path\",\n            \"data_home\"\n         ],\n         \"_get_num_samples\": [\n            \"data_qualities\"\n         ],\n         \"_open_openml_url\": [\n            \"openml_path\",\n            \"data_home\"\n         ],\n         \"_retry_with_clean_cache\": [\n            \"openml_path\",\n            \"data_home\"\n         ],\n         \"_sparse_data_to_array\": [\n            \"arff_data\",\n            \"include_columns\"\n         ],\n         \"_split_sparse_columns\": [\n            \"arff_data\",\n            \"include_columns\"\n         ],\n         \"_valid_data_column_names\": [\n            \"features_list\",\n            \"target_columns\"\n         ],\n         \"_verify_target_data_type\": [\n            \"features_dict\",\n            \"target_columns\"\n         ],\n         \"fetch_openml\": [\n            \"name\",\n            \"version\",\n            \"data_id\",\n            \"data_home\",\n            \"target_column\",\n            \"cache\",\n            \"return_X_y\",\n            \"as_frame\"\n         ]\n      },\n      \"sklearn.datasets._rcv1\": {\n         \"_find_permutation\": [\n            \"a\",\n            \"b\"\n         ],\n         \"_inverse_permutation\": [\n            \"p\"\n         ],\n         \"fetch_rcv1\": [\n            \"data_home\",\n            \"subset\",\n            \"download_if_missing\",\n            \"random_state\",\n            \"shuffle\",\n            \"return_X_y\"\n         ]\n      },\n      \"sklearn.datasets._samples_generator\": {\n         \"_generate_hypercube\": [\n            \"samples\",\n            \"dimensions\",\n            \"rng\"\n         ],\n         \"_shuffle\": [\n            \"data\",\n            \"random_state\"\n         ],\n         \"make_biclusters\": [\n            \"shape\",\n            \"n_clusters\",\n            \"noise\",\n            \"minval\",\n            \"maxval\",\n            \"shuffle\",\n            \"random_state\"\n         ],\n         \"make_blobs\": [\n            \"n_samples\",\n            \"n_features\",\n            \"centers\",\n            \"cluster_std\",\n            \"center_box\",\n            \"shuffle\",\n            \"random_state\"\n         ],\n         \"make_checkerboard\": [\n            \"shape\",\n            \"n_clusters\",\n            \"noise\",\n            \"minval\",\n            \"maxval\",\n            \"shuffle\",\n            \"random_state\"\n         ],\n         \"make_circles\": [\n            \"n_samples\",\n            \"shuffle\",\n            \"noise\",\n            \"random_state\",\n            \"factor\"\n         ],\n         \"make_classification\": [\n            \"n_samples\",\n            \"n_features\",\n            \"n_informative\",\n            \"n_redundant\",\n            \"n_repeated\",\n            \"n_classes\",\n            \"n_clusters_per_class\",\n            \"weights\",\n            \"flip_y\",\n            \"class_sep\",\n            \"hypercube\",\n            \"shift\",\n            \"scale\",\n            \"shuffle\",\n            \"random_state\"\n         ],\n         \"make_friedman1\": [\n            \"n_samples\",\n            \"n_features\",\n            \"noise\",\n            \"random_state\"\n         ],\n         \"make_friedman2\": [\n            \"n_samples\",\n            \"noise\",\n            \"random_state\"\n         ],\n         \"make_friedman3\": [\n            \"n_samples\",\n            \"noise\",\n            \"random_state\"\n         ],\n         \"make_gaussian_quantiles\": [\n            \"mean\",\n            \"cov\",\n            \"n_samples\",\n            \"n_features\",\n            \"n_classes\",\n            \"shuffle\",\n            \"random_state\"\n         ],\n         \"make_hastie_10_2\": [\n            \"n_samples\",\n            \"random_state\"\n         ],\n         \"make_low_rank_matrix\": [\n            \"n_samples\",\n            \"n_features\",\n            \"effective_rank\",\n            \"tail_strength\",\n            \"random_state\"\n         ],\n         \"make_moons\": [\n            \"n_samples\",\n            \"shuffle\",\n            \"noise\",\n            \"random_state\"\n         ],\n         \"make_multilabel_classification\": [\n            \"n_samples\",\n            \"n_features\",\n            \"n_classes\",\n            \"n_labels\",\n            \"length\",\n            \"allow_unlabeled\",\n            \"sparse\",\n            \"return_indicator\",\n            \"return_distributions\",\n            \"random_state\"\n         ],\n         \"make_regression\": [\n            \"n_samples\",\n            \"n_features\",\n            \"n_informative\",\n            \"n_targets\",\n            \"bias\",\n            \"effective_rank\",\n            \"tail_strength\",\n            \"noise\",\n            \"shuffle\",\n            \"coef\",\n            \"random_state\"\n         ],\n         \"make_s_curve\": [\n            \"n_samples\",\n            \"noise\",\n            \"random_state\"\n         ],\n         \"make_sparse_coded_signal\": [\n            \"n_samples\",\n            \"n_components\",\n            \"n_features\",\n            \"n_nonzero_coefs\",\n            \"random_state\"\n         ],\n         \"make_sparse_spd_matrix\": [\n            \"dim\",\n            \"alpha\",\n            \"norm_diag\",\n            \"smallest_coef\",\n            \"largest_coef\",\n            \"random_state\"\n         ],\n         \"make_sparse_uncorrelated\": [\n            \"n_samples\",\n            \"n_features\",\n            \"random_state\"\n         ],\n         \"make_spd_matrix\": [\n            \"n_dim\",\n            \"random_state\"\n         ],\n         \"make_swiss_roll\": [\n            \"n_samples\",\n            \"noise\",\n            \"random_state\"\n         ]\n      },\n      \"sklearn.datasets._species_distributions\": {\n         \"_load_coverage\": [\n            \"F\",\n            \"header_length\",\n            \"dtype\"\n         ],\n         \"_load_csv\": [\n            \"F\"\n         ],\n         \"construct_grids\": [\n            \"batch\"\n         ],\n         \"fetch_species_distributions\": [\n            \"data_home\",\n            \"download_if_missing\"\n         ]\n      },\n      \"sklearn.datasets._svmlight_format_io\": {\n         \"_dump_svmlight\": [\n            \"X\",\n            \"y\",\n            \"f\",\n            \"multilabel\",\n            \"one_based\",\n            \"comment\",\n            \"query_id\"\n         ],\n         \"_gen_open\": [\n            \"f\"\n         ],\n         \"_load_svmlight_file\": [],\n         \"_open_and_load\": [\n            \"f\",\n            \"dtype\",\n            \"multilabel\",\n            \"zero_based\",\n            \"query_id\",\n            \"offset\",\n            \"length\"\n         ],\n         \"dump_svmlight_file\": [\n            \"X\",\n            \"y\",\n            \"f\",\n            \"zero_based\",\n            \"comment\",\n            \"query_id\",\n            \"multilabel\"\n         ],\n         \"load_svmlight_file\": [\n            \"f\",\n            \"n_features\",\n            \"dtype\",\n            \"multilabel\",\n            \"zero_based\",\n            \"query_id\",\n            \"offset\",\n            \"length\"\n         ],\n         \"load_svmlight_files\": [\n            \"files\",\n            \"n_features\",\n            \"dtype\",\n            \"multilabel\",\n            \"zero_based\",\n            \"query_id\",\n            \"offset\",\n            \"length\"\n         ]\n      },\n      \"sklearn.datasets._twenty_newsgroups\": {\n         \"_download_20newsgroups\": [\n            \"target_dir\",\n            \"cache_path\"\n         ],\n         \"fetch_20newsgroups\": [\n            \"data_home\",\n            \"subset\",\n            \"categories\",\n            \"shuffle\",\n            \"random_state\",\n            \"remove\",\n            \"download_if_missing\",\n            \"return_X_y\"\n         ],\n         \"fetch_20newsgroups_vectorized\": [\n            \"subset\",\n            \"remove\",\n            \"data_home\",\n            \"download_if_missing\",\n            \"return_X_y\",\n            \"normalize\"\n         ],\n         \"strip_newsgroup_footer\": [\n            \"text\"\n         ],\n         \"strip_newsgroup_header\": [\n            \"text\"\n         ],\n         \"strip_newsgroup_quoting\": [\n            \"text\"\n         ]\n      },\n      \"sklearn.datasets.base\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.datasets.california_housing\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.datasets.covtype\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.datasets.kddcup99\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.datasets.lfw\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.datasets.olivetti_faces\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.datasets.openml\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.datasets.rcv1\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.datasets.samples_generator\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.datasets.setup\": {\n         \"configuration\": [\n            \"parent_package\",\n            \"top_path\"\n         ]\n      },\n      \"sklearn.datasets.species_distributions\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.datasets.svmlight_format\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.datasets.tests.test_20news\": {\n         \"test_20news\": [],\n         \"test_20news_length_consistency\": [],\n         \"test_20news_normalization\": [],\n         \"test_20news_vectorized\": []\n      },\n      \"sklearn.datasets.tests.test_base\": {\n         \"_remove_dir\": [\n            \"path\"\n         ],\n         \"data_home\": [\n            \"tmpdir_factory\"\n         ],\n         \"load_files_root\": [\n            \"tmpdir_factory\"\n         ],\n         \"test_bunch_dir\": [],\n         \"test_bunch_pickle_generated_with_0_16_and_read_with_0_17\": [],\n         \"test_category_dir_1\": [\n            \"load_files_root\"\n         ],\n         \"test_category_dir_2\": [\n            \"load_files_root\"\n         ],\n         \"test_data_home\": [\n            \"data_home\"\n         ],\n         \"test_default_empty_load_files\": [\n            \"load_files_root\"\n         ],\n         \"test_default_load_files\": [\n            \"test_category_dir_1\",\n            \"test_category_dir_2\",\n            \"load_files_root\"\n         ],\n         \"test_load_boston\": [],\n         \"test_load_breast_cancer\": [],\n         \"test_load_diabetes\": [],\n         \"test_load_digits\": [],\n         \"test_load_digits_n_class_lt_10\": [],\n         \"test_load_files_w_categories_desc_and_encoding\": [\n            \"test_category_dir_1\",\n            \"test_category_dir_2\",\n            \"load_files_root\"\n         ],\n         \"test_load_files_wo_load_content\": [\n            \"test_category_dir_1\",\n            \"test_category_dir_2\",\n            \"load_files_root\"\n         ],\n         \"test_load_iris\": [],\n         \"test_load_linnerud\": [],\n         \"test_load_missing_sample_image_error\": [],\n         \"test_load_sample_image\": [],\n         \"test_load_sample_images\": [],\n         \"test_load_wine\": [],\n         \"test_loads_dumps_bunch\": [],\n         \"test_refresh_cache\": [\n            \"monkeypatch\"\n         ]\n      },\n      \"sklearn.datasets.tests.test_california_housing\": {\n         \"fetch\": [],\n         \"test_fetch\": []\n      },\n      \"sklearn.datasets.tests.test_common\": {\n         \"check_return_X_y\": [\n            \"bunch\",\n            \"fetch_func_partial\"\n         ]\n      },\n      \"sklearn.datasets.tests.test_covtype\": {\n         \"fetch\": [],\n         \"test_fetch\": []\n      },\n      \"sklearn.datasets.tests.test_kddcup99\": {\n         \"test_percent10\": [],\n         \"test_shuffle\": []\n      },\n      \"sklearn.datasets.tests.test_lfw\": {\n         \"setup_module\": [],\n         \"teardown_module\": [],\n         \"test_load_empty_lfw_pairs\": [],\n         \"test_load_empty_lfw_people\": [],\n         \"test_load_fake_lfw_pairs\": [],\n         \"test_load_fake_lfw_people\": [],\n         \"test_load_fake_lfw_people_too_restrictive\": []\n      },\n      \"sklearn.datasets.tests.test_olivetti_faces\": {\n         \"_is_olivetti_faces_not_available\": [],\n         \"test_olivetti_faces\": []\n      },\n      \"sklearn.datasets.tests.test_openml\": {\n         \"_fetch_dataset_from_openml\": [\n            \"data_id\",\n            \"data_name\",\n            \"data_version\",\n            \"target_column\",\n            \"expected_observations\",\n            \"expected_features\",\n            \"expected_missing\",\n            \"expected_data_dtype\",\n            \"expected_target_dtype\",\n            \"expect_sparse\",\n            \"compare_default_target\"\n         ],\n         \"_monkey_patch_webbased_functions\": [\n            \"context\",\n            \"data_id\",\n            \"gzip_response\"\n         ],\n         \"_test_features_list\": [\n            \"data_id\"\n         ],\n         \"test_convert_arff_data_dataframe_warning_low_memory_pandas\": [\n            \"monkeypatch\"\n         ],\n         \"test_dataset_with_openml_error\": [\n            \"monkeypatch\",\n            \"gzip_response\"\n         ],\n         \"test_dataset_with_openml_warning\": [\n            \"monkeypatch\",\n            \"gzip_response\"\n         ],\n         \"test_decode_anneal\": [\n            \"monkeypatch\"\n         ],\n         \"test_decode_cpu\": [\n            \"monkeypatch\"\n         ],\n         \"test_decode_emotions\": [\n            \"monkeypatch\"\n         ],\n         \"test_decode_iris\": [\n            \"monkeypatch\"\n         ],\n         \"test_feature_to_dtype\": [\n            \"feature\",\n            \"expected_dtype\"\n         ],\n         \"test_feature_to_dtype_error\": [\n            \"feature\"\n         ],\n         \"test_fetch_nonexiting\": [\n            \"monkeypatch\",\n            \"gzip_response\"\n         ],\n         \"test_fetch_openml_adultcensus\": [\n            \"monkeypatch\",\n            \"gzip_response\"\n         ],\n         \"test_fetch_openml_adultcensus_pandas\": [\n            \"monkeypatch\"\n         ],\n         \"test_fetch_openml_adultcensus_pandas_return_X_y\": [\n            \"monkeypatch\"\n         ],\n         \"test_fetch_openml_anneal\": [\n            \"monkeypatch\",\n            \"gzip_response\"\n         ],\n         \"test_fetch_openml_anneal_multitarget\": [\n            \"monkeypatch\",\n            \"gzip_response\"\n         ],\n         \"test_fetch_openml_anneal_pandas\": [\n            \"monkeypatch\"\n         ],\n         \"test_fetch_openml_australian\": [\n            \"monkeypatch\",\n            \"gzip_response\"\n         ],\n         \"test_fetch_openml_australian_pandas_error_sparse\": [\n            \"monkeypatch\"\n         ],\n         \"test_fetch_openml_cache\": [\n            \"monkeypatch\",\n            \"gzip_response\",\n            \"tmpdir\"\n         ],\n         \"test_fetch_openml_cpu\": [\n            \"monkeypatch\",\n            \"gzip_response\"\n         ],\n         \"test_fetch_openml_cpu_pandas\": [\n            \"monkeypatch\"\n         ],\n         \"test_fetch_openml_emotions\": [\n            \"monkeypatch\",\n            \"gzip_response\"\n         ],\n         \"test_fetch_openml_emotions_pandas\": [\n            \"monkeypatch\"\n         ],\n         \"test_fetch_openml_inactive\": [\n            \"monkeypatch\",\n            \"gzip_response\"\n         ],\n         \"test_fetch_openml_iris\": [\n            \"monkeypatch\",\n            \"gzip_response\"\n         ],\n         \"test_fetch_openml_iris_multitarget\": [\n            \"monkeypatch\",\n            \"gzip_response\"\n         ],\n         \"test_fetch_openml_iris_multitarget_pandas\": [\n            \"monkeypatch\"\n         ],\n         \"test_fetch_openml_iris_pandas\": [\n            \"monkeypatch\"\n         ],\n         \"test_fetch_openml_iris_pandas_equal_to_no_frame\": [\n            \"monkeypatch\"\n         ],\n         \"test_fetch_openml_miceprotein\": [\n            \"monkeypatch\",\n            \"gzip_response\"\n         ],\n         \"test_fetch_openml_miceprotein_pandas\": [\n            \"monkeypatch\"\n         ],\n         \"test_fetch_openml_notarget\": [\n            \"monkeypatch\",\n            \"gzip_response\"\n         ],\n         \"test_fetch_openml_raises_illegal_argument\": [],\n         \"test_fetch_openml_raises_missing_values_target\": [\n            \"monkeypatch\",\n            \"gzip_response\"\n         ],\n         \"test_fetch_openml_titanic_pandas\": [\n            \"monkeypatch\"\n         ],\n         \"test_fetch_openml_with_ignored_feature\": [\n            \"monkeypatch\",\n            \"gzip_response\"\n         ],\n         \"test_illegal_column\": [\n            \"monkeypatch\",\n            \"gzip_response\"\n         ],\n         \"test_open_openml_url_cache\": [\n            \"monkeypatch\",\n            \"gzip_response\",\n            \"tmpdir\"\n         ],\n         \"test_open_openml_url_unlinks_local_path\": [\n            \"monkeypatch\",\n            \"gzip_response\",\n            \"tmpdir\",\n            \"write_to_disk\"\n         ],\n         \"test_raises_illegal_multitarget\": [\n            \"monkeypatch\",\n            \"gzip_response\"\n         ],\n         \"test_retry_with_clean_cache\": [\n            \"tmpdir\"\n         ],\n         \"test_retry_with_clean_cache_http_error\": [\n            \"tmpdir\"\n         ],\n         \"test_string_attribute_without_dataframe\": [\n            \"monkeypatch\",\n            \"gzip_response\"\n         ],\n         \"test_warn_ignore_attribute\": [\n            \"monkeypatch\",\n            \"gzip_response\"\n         ]\n      },\n      \"sklearn.datasets.tests.test_rcv1\": {\n         \"test_fetch_rcv1\": []\n      },\n      \"sklearn.datasets.tests.test_samples_generator\": {\n         \"test_make_biclusters\": [],\n         \"test_make_blobs\": [],\n         \"test_make_blobs_error\": [],\n         \"test_make_blobs_n_samples_centers_none\": [\n            \"n_samples\"\n         ],\n         \"test_make_blobs_n_samples_list\": [],\n         \"test_make_blobs_n_samples_list_with_centers\": [],\n         \"test_make_checkerboard\": [],\n         \"test_make_circles\": [],\n         \"test_make_classification\": [],\n         \"test_make_classification_informative_features\": [],\n         \"test_make_classification_weights_array_or_list_ok\": [\n            \"kwargs\"\n         ],\n         \"test_make_classification_weights_type\": [\n            \"weights\",\n            \"err_type\",\n            \"err_msg\"\n         ],\n         \"test_make_friedman1\": [],\n         \"test_make_friedman2\": [],\n         \"test_make_friedman3\": [],\n         \"test_make_hastie_10_2\": [],\n         \"test_make_low_rank_matrix\": [],\n         \"test_make_moons\": [],\n         \"test_make_multilabel_classification_return_indicator\": [],\n         \"test_make_multilabel_classification_return_indicator_sparse\": [],\n         \"test_make_multilabel_classification_return_sequences\": [],\n         \"test_make_regression\": [],\n         \"test_make_regression_multitarget\": [],\n         \"test_make_s_curve\": [],\n         \"test_make_sparse_coded_signal\": [],\n         \"test_make_sparse_uncorrelated\": [],\n         \"test_make_spd_matrix\": [],\n         \"test_make_swiss_roll\": []\n      },\n      \"sklearn.datasets.tests.test_svmlight_format\": {\n         \"test_dump\": [],\n         \"test_dump_comment\": [],\n         \"test_dump_concise\": [],\n         \"test_dump_invalid\": [],\n         \"test_dump_multilabel\": [],\n         \"test_dump_query_id\": [],\n         \"test_invalid_filename\": [],\n         \"test_load_compressed\": [],\n         \"test_load_invalid_file\": [],\n         \"test_load_invalid_file2\": [],\n         \"test_load_invalid_order_file\": [],\n         \"test_load_large_qid\": [],\n         \"test_load_offset_exhaustive_splits\": [],\n         \"test_load_svmlight_file\": [],\n         \"test_load_svmlight_file_fd\": [],\n         \"test_load_svmlight_file_multilabel\": [],\n         \"test_load_svmlight_file_n_features\": [],\n         \"test_load_svmlight_files\": [],\n         \"test_load_with_long_qid\": [],\n         \"test_load_with_offsets\": [\n            \"sparsity\",\n            \"n_samples\",\n            \"n_features\"\n         ],\n         \"test_load_with_offsets_error\": [],\n         \"test_load_with_qid\": [],\n         \"test_load_zero_based\": [],\n         \"test_load_zero_based_auto\": [],\n         \"test_load_zeros\": [],\n         \"test_not_a_filename\": []\n      },\n      \"sklearn.datasets.twenty_newsgroups\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.decomposition._dict_learning\": {\n         \"_check_positive_coding\": [\n            \"method\",\n            \"positive\"\n         ],\n         \"_sparse_encode\": [\n            \"X\",\n            \"dictionary\",\n            \"gram\",\n            \"cov\",\n            \"algorithm\",\n            \"regularization\",\n            \"copy_cov\",\n            \"init\",\n            \"max_iter\",\n            \"check_input\",\n            \"verbose\",\n            \"positive\"\n         ],\n         \"_update_dict\": [\n            \"dictionary\",\n            \"Y\",\n            \"code\",\n            \"verbose\",\n            \"return_r2\",\n            \"random_state\",\n            \"positive\"\n         ],\n         \"dict_learning\": [\n            \"X\",\n            \"n_components\",\n            \"alpha\",\n            \"max_iter\",\n            \"tol\",\n            \"method\",\n            \"n_jobs\",\n            \"dict_init\",\n            \"code_init\",\n            \"callback\",\n            \"verbose\",\n            \"random_state\",\n            \"return_n_iter\",\n            \"positive_dict\",\n            \"positive_code\",\n            \"method_max_iter\"\n         ],\n         \"dict_learning_online\": [\n            \"X\",\n            \"n_components\",\n            \"alpha\",\n            \"n_iter\",\n            \"return_code\",\n            \"dict_init\",\n            \"callback\",\n            \"batch_size\",\n            \"verbose\",\n            \"shuffle\",\n            \"n_jobs\",\n            \"method\",\n            \"iter_offset\",\n            \"random_state\",\n            \"return_inner_stats\",\n            \"inner_stats\",\n            \"return_n_iter\",\n            \"positive_dict\",\n            \"positive_code\",\n            \"method_max_iter\"\n         ],\n         \"sparse_encode\": [\n            \"X\",\n            \"dictionary\",\n            \"gram\",\n            \"cov\",\n            \"algorithm\",\n            \"n_nonzero_coefs\",\n            \"alpha\",\n            \"copy_cov\",\n            \"init\",\n            \"max_iter\",\n            \"n_jobs\",\n            \"check_input\",\n            \"verbose\",\n            \"positive\"\n         ]\n      },\n      \"sklearn.decomposition._fastica\": {\n         \"_cube\": [\n            \"x\",\n            \"fun_args\"\n         ],\n         \"_exp\": [\n            \"x\",\n            \"fun_args\"\n         ],\n         \"_gs_decorrelation\": [\n            \"w\",\n            \"W\",\n            \"j\"\n         ],\n         \"_ica_def\": [\n            \"X\",\n            \"tol\",\n            \"g\",\n            \"fun_args\",\n            \"max_iter\",\n            \"w_init\"\n         ],\n         \"_ica_par\": [\n            \"X\",\n            \"tol\",\n            \"g\",\n            \"fun_args\",\n            \"max_iter\",\n            \"w_init\"\n         ],\n         \"_logcosh\": [\n            \"x\",\n            \"fun_args\"\n         ],\n         \"_sym_decorrelation\": [\n            \"W\"\n         ],\n         \"fastica\": [\n            \"X\",\n            \"n_components\",\n            \"algorithm\",\n            \"whiten\",\n            \"fun\",\n            \"fun_args\",\n            \"max_iter\",\n            \"tol\",\n            \"w_init\",\n            \"random_state\",\n            \"return_X_mean\",\n            \"compute_sources\",\n            \"return_n_iter\"\n         ]\n      },\n      \"sklearn.decomposition._lda\": {\n         \"_update_doc_distribution\": [\n            \"X\",\n            \"exp_topic_word_distr\",\n            \"doc_topic_prior\",\n            \"max_iters\",\n            \"mean_change_tol\",\n            \"cal_sstats\",\n            \"random_state\"\n         ]\n      },\n      \"sklearn.decomposition._nmf\": {\n         \"_beta_divergence\": [\n            \"X\",\n            \"W\",\n            \"H\",\n            \"beta\",\n            \"square_root\"\n         ],\n         \"_beta_loss_to_float\": [\n            \"beta_loss\"\n         ],\n         \"_check_init\": [\n            \"A\",\n            \"shape\",\n            \"whom\"\n         ],\n         \"_check_string_param\": [\n            \"solver\",\n            \"regularization\",\n            \"beta_loss\",\n            \"init\"\n         ],\n         \"_compute_regularization\": [\n            \"alpha\",\n            \"l1_ratio\",\n            \"regularization\"\n         ],\n         \"_fit_coordinate_descent\": [\n            \"X\",\n            \"W\",\n            \"H\",\n            \"tol\",\n            \"max_iter\",\n            \"l1_reg_W\",\n            \"l1_reg_H\",\n            \"l2_reg_W\",\n            \"l2_reg_H\",\n            \"update_H\",\n            \"verbose\",\n            \"shuffle\",\n            \"random_state\"\n         ],\n         \"_fit_multiplicative_update\": [\n            \"X\",\n            \"W\",\n            \"H\",\n            \"beta_loss\",\n            \"max_iter\",\n            \"tol\",\n            \"l1_reg_W\",\n            \"l1_reg_H\",\n            \"l2_reg_W\",\n            \"l2_reg_H\",\n            \"update_H\",\n            \"verbose\"\n         ],\n         \"_initialize_nmf\": [\n            \"X\",\n            \"n_components\",\n            \"init\",\n            \"eps\",\n            \"random_state\"\n         ],\n         \"_multiplicative_update_h\": [\n            \"X\",\n            \"W\",\n            \"H\",\n            \"beta_loss\",\n            \"l1_reg_H\",\n            \"l2_reg_H\",\n            \"gamma\"\n         ],\n         \"_multiplicative_update_w\": [\n            \"X\",\n            \"W\",\n            \"H\",\n            \"beta_loss\",\n            \"l1_reg_W\",\n            \"l2_reg_W\",\n            \"gamma\",\n            \"H_sum\",\n            \"HHt\",\n            \"XHt\",\n            \"update_H\"\n         ],\n         \"_special_sparse_dot\": [\n            \"W\",\n            \"H\",\n            \"X\"\n         ],\n         \"_update_coordinate_descent\": [\n            \"X\",\n            \"W\",\n            \"Ht\",\n            \"l1_reg\",\n            \"l2_reg\",\n            \"shuffle\",\n            \"random_state\"\n         ],\n         \"non_negative_factorization\": [\n            \"X\",\n            \"W\",\n            \"H\",\n            \"n_components\",\n            \"init\",\n            \"update_H\",\n            \"solver\",\n            \"beta_loss\",\n            \"tol\",\n            \"max_iter\",\n            \"alpha\",\n            \"l1_ratio\",\n            \"regularization\",\n            \"random_state\",\n            \"verbose\",\n            \"shuffle\"\n         ],\n         \"norm\": [\n            \"x\"\n         ],\n         \"trace_dot\": [\n            \"X\",\n            \"Y\"\n         ]\n      },\n      \"sklearn.decomposition._pca\": {\n         \"_assess_dimension_\": [\n            \"spectrum\",\n            \"rank\",\n            \"n_samples\",\n            \"n_features\"\n         ],\n         \"_infer_dimension_\": [\n            \"spectrum\",\n            \"n_samples\",\n            \"n_features\"\n         ]\n      },\n      \"sklearn.decomposition._sparse_pca\": {\n         \"_check_normalize_components\": [\n            \"normalize_components\",\n            \"estimator_name\"\n         ]\n      },\n      \"sklearn.decomposition.base\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.decomposition.cdnmf_fast\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.decomposition.dict_learning\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.decomposition.factor_analysis\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.decomposition.fastica_\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.decomposition.incremental_pca\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.decomposition.kernel_pca\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.decomposition.nmf\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.decomposition.online_lda\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.decomposition.online_lda_fast\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.decomposition.pca\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.decomposition.setup\": {\n         \"configuration\": [\n            \"parent_package\",\n            \"top_path\"\n         ]\n      },\n      \"sklearn.decomposition.sparse_pca\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.decomposition.tests.test_dict_learning\": {\n         \"test_dict_learning_lars_code_positivity\": [],\n         \"test_dict_learning_lars_dict_positivity\": [\n            \"positive_dict\"\n         ],\n         \"test_dict_learning_lars_positive_parameter\": [],\n         \"test_dict_learning_lassocd_readonly_data\": [],\n         \"test_dict_learning_nonzero_coefs\": [],\n         \"test_dict_learning_online_estimator_shapes\": [],\n         \"test_dict_learning_online_initialization\": [],\n         \"test_dict_learning_online_lars_positive_parameter\": [],\n         \"test_dict_learning_online_overcomplete\": [],\n         \"test_dict_learning_online_partial_fit\": [],\n         \"test_dict_learning_online_positivity\": [\n            \"positive_code\",\n            \"positive_dict\"\n         ],\n         \"test_dict_learning_online_readonly_initialization\": [],\n         \"test_dict_learning_online_shapes\": [],\n         \"test_dict_learning_online_verbosity\": [],\n         \"test_dict_learning_overcomplete\": [],\n         \"test_dict_learning_positivity\": [\n            \"transform_algorithm\",\n            \"positive_code\",\n            \"positive_dict\"\n         ],\n         \"test_dict_learning_reconstruction\": [],\n         \"test_dict_learning_reconstruction_parallel\": [],\n         \"test_dict_learning_shapes\": [],\n         \"test_dict_learning_split\": [],\n         \"test_dict_learning_unknown_fit_algorithm\": [],\n         \"test_max_iter\": [],\n         \"test_minibatch_dictionary_learning_lars\": [\n            \"positive_dict\"\n         ],\n         \"test_minibatch_dictionary_learning_positivity\": [\n            \"transform_algorithm\",\n            \"positive_code\",\n            \"positive_dict\"\n         ],\n         \"test_sparse_coder_estimator\": [],\n         \"test_sparse_coder_parallel_mmap\": [],\n         \"test_sparse_encode_error\": [],\n         \"test_sparse_encode_error_default_sparsity\": [],\n         \"test_sparse_encode_input\": [],\n         \"test_sparse_encode_positivity\": [\n            \"algo\",\n            \"positive\"\n         ],\n         \"test_sparse_encode_shapes\": [],\n         \"test_sparse_encode_shapes_omp\": [],\n         \"test_sparse_encode_unavailable_positivity\": [\n            \"algo\"\n         ],\n         \"test_unknown_method\": []\n      },\n      \"sklearn.decomposition.tests.test_factor_analysis\": {\n         \"test_factor_analysis\": []\n      },\n      \"sklearn.decomposition.tests.test_fastica\": {\n         \"center_and_norm\": [\n            \"x\",\n            \"axis\"\n         ],\n         \"test_fastica_convergence_fail\": [],\n         \"test_fastica_errors\": [],\n         \"test_fastica_nowhiten\": [],\n         \"test_fastica_output_shape\": [\n            \"whiten\",\n            \"return_X_mean\",\n            \"return_n_iter\"\n         ],\n         \"test_fastica_simple\": [\n            \"add_noise\",\n            \"seed\"\n         ],\n         \"test_fit_transform\": [],\n         \"test_gs\": [],\n         \"test_inverse_transform\": [],\n         \"test_non_square_fastica\": [\n            \"add_noise\"\n         ]\n      },\n      \"sklearn.decomposition.tests.test_incremental_pca\": {\n         \"test_explained_variances\": [],\n         \"test_incremental_pca\": [],\n         \"test_incremental_pca_against_pca_iris\": [],\n         \"test_incremental_pca_against_pca_random_data\": [],\n         \"test_incremental_pca_batch_rank\": [],\n         \"test_incremental_pca_batch_signs\": [],\n         \"test_incremental_pca_batch_values\": [],\n         \"test_incremental_pca_check_projection\": [],\n         \"test_incremental_pca_inverse\": [],\n         \"test_incremental_pca_num_features_change\": [],\n         \"test_incremental_pca_partial_fit\": [],\n         \"test_incremental_pca_partial_fit_float_division\": [],\n         \"test_incremental_pca_set_params\": [],\n         \"test_incremental_pca_sparse\": [\n            \"matrix_class\"\n         ],\n         \"test_incremental_pca_validation\": [],\n         \"test_n_components_none\": [],\n         \"test_singular_values\": [],\n         \"test_whitening\": []\n      },\n      \"sklearn.decomposition.tests.test_kernel_pca\": {\n         \"test_gridsearch_pipeline\": [],\n         \"test_gridsearch_pipeline_precomputed\": [],\n         \"test_kernel_conditioning\": [],\n         \"test_kernel_pca\": [],\n         \"test_kernel_pca_consistent_transform\": [],\n         \"test_kernel_pca_deterministic_output\": [],\n         \"test_kernel_pca_invalid_kernel\": [],\n         \"test_kernel_pca_invalid_parameters\": [],\n         \"test_kernel_pca_linear_kernel\": [],\n         \"test_kernel_pca_n_components\": [],\n         \"test_kernel_pca_precomputed\": [],\n         \"test_kernel_pca_sparse\": [],\n         \"test_leave_zero_eig\": [],\n         \"test_nested_circles\": [],\n         \"test_remove_zero_eig\": []\n      },\n      \"sklearn.decomposition.tests.test_nmf\": {\n         \"_beta_divergence_dense\": [\n            \"X\",\n            \"W\",\n            \"H\",\n            \"beta\"\n         ],\n         \"test_beta_divergence\": [],\n         \"test_initialize_close\": [],\n         \"test_initialize_nn_output\": [],\n         \"test_initialize_variants\": [],\n         \"test_n_components_greater_n_features\": [],\n         \"test_nmf_decreasing\": [],\n         \"test_nmf_fit_close\": [\n            \"solver\"\n         ],\n         \"test_nmf_fit_nn_output\": [],\n         \"test_nmf_inverse_transform\": [\n            \"solver\"\n         ],\n         \"test_nmf_multiplicative_update_sparse\": [],\n         \"test_nmf_negative_beta_loss\": [],\n         \"test_nmf_regularization\": [],\n         \"test_nmf_sparse_input\": [],\n         \"test_nmf_sparse_transform\": [],\n         \"test_nmf_transform\": [\n            \"solver\"\n         ],\n         \"test_nmf_transform_custom_init\": [],\n         \"test_nmf_underflow\": [],\n         \"test_non_negative_factorization_checking\": [],\n         \"test_non_negative_factorization_consistency\": [],\n         \"test_parameter_checking\": [],\n         \"test_special_sparse_dot\": []\n      },\n      \"sklearn.decomposition.tests.test_online_lda\": {\n         \"_build_sparse_mtx\": [],\n         \"check_verbosity\": [\n            \"verbose\",\n            \"evaluate_every\",\n            \"expected_lines\",\n            \"expected_perplexities\"\n         ],\n         \"test_dirichlet_expectation\": [],\n         \"test_invalid_params\": [],\n         \"test_lda_default_prior_params\": [],\n         \"test_lda_dense_input\": [],\n         \"test_lda_empty_docs\": [],\n         \"test_lda_fit_batch\": [],\n         \"test_lda_fit_online\": [],\n         \"test_lda_fit_perplexity\": [],\n         \"test_lda_fit_transform\": [\n            \"method\"\n         ],\n         \"test_lda_multi_jobs\": [\n            \"method\"\n         ],\n         \"test_lda_negative_input\": [],\n         \"test_lda_no_component_error\": [],\n         \"test_lda_partial_fit\": [],\n         \"test_lda_partial_fit_dim_mismatch\": [],\n         \"test_lda_partial_fit_multi_jobs\": [],\n         \"test_lda_perplexity\": [\n            \"method\"\n         ],\n         \"test_lda_preplexity_mismatch\": [],\n         \"test_lda_score\": [\n            \"method\"\n         ],\n         \"test_lda_score_perplexity\": [],\n         \"test_lda_transform\": [],\n         \"test_lda_transform_mismatch\": [],\n         \"test_perplexity_input_format\": [],\n         \"test_verbosity\": [\n            \"verbose\",\n            \"evaluate_every\",\n            \"expected_lines\",\n            \"expected_perplexities\"\n         ]\n      },\n      \"sklearn.decomposition.tests.test_pca\": {\n         \"check_pca_float_dtype_preservation\": [\n            \"svd_solver\"\n         ],\n         \"check_pca_int_dtype_upcast_to_double\": [\n            \"svd_solver\"\n         ],\n         \"test_infer_dim_1\": [],\n         \"test_infer_dim_2\": [],\n         \"test_infer_dim_3\": [],\n         \"test_infer_dim_by_explained_variance\": [\n            \"X\",\n            \"n_components\",\n            \"n_components_validated\"\n         ],\n         \"test_n_components_mle\": [\n            \"svd_solver\"\n         ],\n         \"test_n_components_mle_error\": [\n            \"svd_solver\"\n         ],\n         \"test_n_components_none\": [\n            \"data\",\n            \"solver\",\n            \"n_components_\"\n         ],\n         \"test_no_empty_slice_warning\": [],\n         \"test_pca\": [\n            \"svd_solver\",\n            \"n_components\"\n         ],\n         \"test_pca_bad_solver\": [],\n         \"test_pca_check_projection\": [\n            \"svd_solver\"\n         ],\n         \"test_pca_check_projection_list\": [\n            \"svd_solver\"\n         ],\n         \"test_pca_deterministic_output\": [\n            \"svd_solver\"\n         ],\n         \"test_pca_dim\": [],\n         \"test_pca_dtype_preservation\": [\n            \"svd_solver\"\n         ],\n         \"test_pca_explained_variance_empirical\": [\n            \"X\",\n            \"svd_solver\"\n         ],\n         \"test_pca_explained_variance_equivalence_solver\": [\n            \"svd_solver\"\n         ],\n         \"test_pca_inverse\": [\n            \"svd_solver\",\n            \"whiten\"\n         ],\n         \"test_pca_sanity_noise_variance\": [\n            \"svd_solver\"\n         ],\n         \"test_pca_score\": [\n            \"svd_solver\"\n         ],\n         \"test_pca_score3\": [],\n         \"test_pca_score_consistency_solvers\": [\n            \"svd_solver\"\n         ],\n         \"test_pca_singular_values\": [\n            \"svd_solver\"\n         ],\n         \"test_pca_singular_values_consistency\": [\n            \"svd_solver\"\n         ],\n         \"test_pca_sparse_input\": [\n            \"svd_solver\"\n         ],\n         \"test_pca_svd_solver_auto\": [\n            \"data\",\n            \"n_components\",\n            \"expected_solver\"\n         ],\n         \"test_pca_validation\": [\n            \"svd_solver\",\n            \"data\",\n            \"n_components\",\n            \"err_msg\"\n         ],\n         \"test_pca_zero_noise_variance_edge_cases\": [\n            \"svd_solver\"\n         ],\n         \"test_whitening\": [\n            \"solver\",\n            \"copy\"\n         ]\n      },\n      \"sklearn.decomposition.tests.test_sparse_pca\": {\n         \"generate_toy_data\": [\n            \"n_components\",\n            \"n_samples\",\n            \"image_size\",\n            \"random_state\"\n         ],\n         \"test_correct_shapes\": [],\n         \"test_fit_transform\": [],\n         \"test_fit_transform_parallel\": [],\n         \"test_fit_transform_tall\": [],\n         \"test_initialization\": [],\n         \"test_mini_batch_correct_shapes\": [],\n         \"test_mini_batch_fit_transform\": [],\n         \"test_pca_vs_spca\": [],\n         \"test_scaling_fit_transform\": [],\n         \"test_spca_deprecation_warning\": [\n            \"spca\"\n         ],\n         \"test_spca_error_unormalized_components\": [\n            \"spca\"\n         ],\n         \"test_transform_nan\": []\n      },\n      \"sklearn.decomposition.tests.test_truncated_svd\": {\n         \"X_sparse\": [],\n         \"test_attributes\": [\n            \"n_components\",\n            \"X_sparse\"\n         ],\n         \"test_explained_variance\": [\n            \"X_sparse\",\n            \"kind\",\n            \"n_components\",\n            \"solver\"\n         ],\n         \"test_explained_variance_components_10_20\": [\n            \"X_sparse\",\n            \"kind\",\n            \"solver\"\n         ],\n         \"test_integers\": [\n            \"X_sparse\"\n         ],\n         \"test_inverse_transform\": [\n            \"algo\",\n            \"X_sparse\"\n         ],\n         \"test_singular_values_consistency\": [\n            \"solver\"\n         ],\n         \"test_singular_values_expected\": [\n            \"solver\"\n         ],\n         \"test_solvers\": [\n            \"X_sparse\",\n            \"solver\",\n            \"kind\"\n         ],\n         \"test_sparse_formats\": [\n            \"fmt\",\n            \"X_sparse\"\n         ],\n         \"test_too_many_components\": [\n            \"algorithm\",\n            \"X_sparse\"\n         ],\n         \"test_truncated_svd_eq_pca\": [\n            \"X_sparse\"\n         ]\n      },\n      \"sklearn.decomposition.truncated_svd\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.discriminant_analysis\": {\n         \"_class_cov\": [\n            \"X\",\n            \"y\",\n            \"priors\",\n            \"shrinkage\"\n         ],\n         \"_class_means\": [\n            \"X\",\n            \"y\"\n         ],\n         \"_cov\": [\n            \"X\",\n            \"shrinkage\"\n         ]\n      },\n      \"sklearn.ensemble._bagging\": {\n         \"_generate_bagging_indices\": [\n            \"random_state\",\n            \"bootstrap_features\",\n            \"bootstrap_samples\",\n            \"n_features\",\n            \"n_samples\",\n            \"max_features\",\n            \"max_samples\"\n         ],\n         \"_generate_indices\": [\n            \"random_state\",\n            \"bootstrap\",\n            \"n_population\",\n            \"n_samples\"\n         ],\n         \"_parallel_build_estimators\": [\n            \"n_estimators\",\n            \"ensemble\",\n            \"X\",\n            \"y\",\n            \"sample_weight\",\n            \"seeds\",\n            \"total_n_estimators\",\n            \"verbose\"\n         ],\n         \"_parallel_decision_function\": [\n            \"estimators\",\n            \"estimators_features\",\n            \"X\"\n         ],\n         \"_parallel_predict_log_proba\": [\n            \"estimators\",\n            \"estimators_features\",\n            \"X\",\n            \"n_classes\"\n         ],\n         \"_parallel_predict_proba\": [\n            \"estimators\",\n            \"estimators_features\",\n            \"X\",\n            \"n_classes\"\n         ],\n         \"_parallel_predict_regression\": [\n            \"estimators\",\n            \"estimators_features\",\n            \"X\"\n         ]\n      },\n      \"sklearn.ensemble._base\": {\n         \"_parallel_fit_estimator\": [\n            \"estimator\",\n            \"X\",\n            \"y\",\n            \"sample_weight\"\n         ],\n         \"_partition_estimators\": [\n            \"n_estimators\",\n            \"n_jobs\"\n         ],\n         \"_set_random_states\": [\n            \"estimator\",\n            \"random_state\"\n         ]\n      },\n      \"sklearn.ensemble._forest\": {\n         \"_accumulate_prediction\": [\n            \"predict\",\n            \"X\",\n            \"out\",\n            \"lock\"\n         ],\n         \"_generate_sample_indices\": [\n            \"random_state\",\n            \"n_samples\",\n            \"n_samples_bootstrap\"\n         ],\n         \"_generate_unsampled_indices\": [\n            \"random_state\",\n            \"n_samples\",\n            \"n_samples_bootstrap\"\n         ],\n         \"_get_n_samples_bootstrap\": [\n            \"n_samples\",\n            \"max_samples\"\n         ],\n         \"_parallel_build_trees\": [\n            \"tree\",\n            \"forest\",\n            \"X\",\n            \"y\",\n            \"sample_weight\",\n            \"tree_idx\",\n            \"n_trees\",\n            \"verbose\",\n            \"class_weight\",\n            \"n_samples_bootstrap\"\n         ]\n      },\n      \"sklearn.ensemble._hist_gradient_boosting.binning\": {\n         \"_find_binning_thresholds\": [\n            \"data\",\n            \"max_bins\",\n            \"subsample\",\n            \"random_state\"\n         ]\n      },\n      \"sklearn.ensemble._hist_gradient_boosting.grower\": {\n         \"_fill_predictor_node_array\": [\n            \"predictor_nodes\",\n            \"grower_node\",\n            \"bin_thresholds\",\n            \"n_bins_non_missing\",\n            \"next_free_idx\"\n         ]\n      },\n      \"sklearn.ensemble._hist_gradient_boosting.tests.test_binning\": {\n         \"_find_binning_thresholds\": [\n            \"data\",\n            \"max_bins\",\n            \"subsample\",\n            \"random_state\"\n         ],\n         \"test_bin_mapper_idempotence\": [\n            \"max_bins_small\",\n            \"max_bins_large\"\n         ],\n         \"test_bin_mapper_identity_repeated_values\": [\n            \"max_bins\",\n            \"n_distinct\",\n            \"multiplier\"\n         ],\n         \"test_bin_mapper_identity_small\": [\n            \"max_bins\",\n            \"scale\",\n            \"offset\"\n         ],\n         \"test_bin_mapper_n_features_transform\": [],\n         \"test_bin_mapper_random_data\": [\n            \"max_bins\"\n         ],\n         \"test_bin_mapper_repeated_values_invariance\": [\n            \"n_distinct\"\n         ],\n         \"test_bin_mapper_small_random_data\": [\n            \"n_samples\",\n            \"max_bins\"\n         ],\n         \"test_find_binning_thresholds_low_n_bins\": [],\n         \"test_find_binning_thresholds_random_data\": [],\n         \"test_find_binning_thresholds_regular_data\": [],\n         \"test_find_binning_thresholds_small_regular_data\": [],\n         \"test_infinite_values\": [],\n         \"test_invalid_n_bins\": [\n            \"n_bins\"\n         ],\n         \"test_map_to_bins\": [\n            \"max_bins\"\n         ],\n         \"test_missing_values_support\": [\n            \"n_bins\",\n            \"n_bins_non_missing\",\n            \"X_trans_expected\"\n         ],\n         \"test_n_bins_non_missing\": [\n            \"n_bins\",\n            \"diff\"\n         ],\n         \"test_subsample\": []\n      },\n      \"sklearn.ensemble._hist_gradient_boosting.tests.test_compare_lightgbm\": {\n         \"test_same_predictions_classification\": [\n            \"seed\",\n            \"min_samples_leaf\",\n            \"n_samples\",\n            \"max_leaf_nodes\"\n         ],\n         \"test_same_predictions_multiclass_classification\": [\n            \"seed\",\n            \"min_samples_leaf\",\n            \"n_samples\",\n            \"max_leaf_nodes\"\n         ],\n         \"test_same_predictions_regression\": [\n            \"seed\",\n            \"min_samples_leaf\",\n            \"n_samples\",\n            \"max_leaf_nodes\"\n         ]\n      },\n      \"sklearn.ensemble._hist_gradient_boosting.tests.test_gradient_boosting\": {\n         \"test_binning_train_validation_are_separated\": [],\n         \"test_crossentropy_binary_problem\": [],\n         \"test_early_stopping_classification\": [\n            \"data\",\n            \"scoring\",\n            \"validation_fraction\",\n            \"n_iter_no_change\",\n            \"tol\"\n         ],\n         \"test_early_stopping_regression\": [\n            \"scoring\",\n            \"validation_fraction\",\n            \"n_iter_no_change\",\n            \"tol\"\n         ],\n         \"test_infinite_values\": [],\n         \"test_infinite_values_missing_values\": [],\n         \"test_init_parameters_validation\": [\n            \"GradientBoosting\",\n            \"X\",\n            \"y\",\n            \"params\",\n            \"err_msg\"\n         ],\n         \"test_invalid_classification_loss\": [],\n         \"test_least_absolute_deviation\": [],\n         \"test_missing_values_minmax_imputation\": [],\n         \"test_missing_values_resilience\": [\n            \"problem\",\n            \"missing_proportion\",\n            \"expected_min_score_classification\",\n            \"expected_min_score_regression\"\n         ],\n         \"test_missing_values_trivial\": [],\n         \"test_should_stop\": [\n            \"scores\",\n            \"n_iter_no_change\",\n            \"tol\",\n            \"stopping\"\n         ],\n         \"test_small_trainset\": [],\n         \"test_string_target_early_stopping\": [\n            \"scoring\"\n         ],\n         \"test_zero_division_hessians\": [\n            \"data\"\n         ]\n      },\n      \"sklearn.ensemble._hist_gradient_boosting.tests.test_grower\": {\n         \"_check_children_consistency\": [\n            \"parent\",\n            \"left\",\n            \"right\"\n         ],\n         \"_make_training_data\": [\n            \"n_bins\",\n            \"constant_hessian\"\n         ],\n         \"test_grow_tree\": [\n            \"n_bins\",\n            \"constant_hessian\",\n            \"stopping_param\",\n            \"shrinkage\"\n         ],\n         \"test_init_parameters_validation\": [],\n         \"test_input_validation\": [],\n         \"test_max_depth\": [\n            \"max_depth\"\n         ],\n         \"test_min_samples_leaf\": [\n            \"n_samples\",\n            \"min_samples_leaf\",\n            \"n_bins\",\n            \"constant_hessian\",\n            \"noise\"\n         ],\n         \"test_min_samples_leaf_root\": [\n            \"n_samples\",\n            \"min_samples_leaf\"\n         ],\n         \"test_missing_value_predict_only\": [],\n         \"test_predictor_from_grower\": [],\n         \"test_split_on_nan_with_infinite_values\": []\n      },\n      \"sklearn.ensemble._hist_gradient_boosting.tests.test_histogram\": {\n         \"test_build_histogram\": [\n            \"build_func\"\n         ],\n         \"test_hist_subtraction\": [\n            \"constant_hessian\"\n         ],\n         \"test_histogram_sample_order_independence\": [],\n         \"test_unrolled_equivalent_to_naive\": [\n            \"constant_hessian\"\n         ]\n      },\n      \"sklearn.ensemble._hist_gradient_boosting.tests.test_loss\": {\n         \"get_derivatives_helper\": [\n            \"loss\"\n         ],\n         \"test_baseline_binary_crossentropy\": [],\n         \"test_baseline_categorical_crossentropy\": [],\n         \"test_baseline_least_absolute_deviation\": [],\n         \"test_baseline_least_squares\": [],\n         \"test_derivatives\": [\n            \"loss\",\n            \"x0\",\n            \"y_true\"\n         ],\n         \"test_numerical_gradients\": [\n            \"loss\",\n            \"n_classes\",\n            \"prediction_dim\",\n            \"seed\"\n         ]\n      },\n      \"sklearn.ensemble._hist_gradient_boosting.tests.test_predictor\": {\n         \"test_boston_dataset\": [\n            \"n_bins\"\n         ],\n         \"test_infinite_values_and_thresholds\": [\n            \"threshold\",\n            \"expected_predictions\"\n         ]\n      },\n      \"sklearn.ensemble._hist_gradient_boosting.tests.test_splitting\": {\n         \"test_gradient_and_hessian_sanity\": [\n            \"constant_hessian\"\n         ],\n         \"test_histogram_split\": [\n            \"n_bins\"\n         ],\n         \"test_min_gain_to_split\": [],\n         \"test_split_indices\": [],\n         \"test_splitting_missing_values\": [\n            \"X_binned\",\n            \"all_gradients\",\n            \"has_missing_values\",\n            \"n_bins_non_missing\",\n            \"expected_split_on_nan\",\n            \"expected_bin_idx\",\n            \"expected_go_to_left\"\n         ]\n      },\n      \"sklearn.ensemble._hist_gradient_boosting.tests.test_warm_start\": {\n         \"_assert_predictor_equal\": [\n            \"gb_1\",\n            \"gb_2\",\n            \"X\"\n         ],\n         \"test_max_iter_with_warm_start_validation\": [\n            \"GradientBoosting\",\n            \"X\",\n            \"y\"\n         ],\n         \"test_random_seeds_warm_start\": [\n            \"GradientBoosting\",\n            \"X\",\n            \"y\",\n            \"rng_type\"\n         ],\n         \"test_warm_start_clear\": [\n            \"GradientBoosting\",\n            \"X\",\n            \"y\"\n         ],\n         \"test_warm_start_early_stopping\": [\n            \"GradientBoosting\",\n            \"X\",\n            \"y\",\n            \"scoring\"\n         ],\n         \"test_warm_start_equal_n_estimators\": [\n            \"GradientBoosting\",\n            \"X\",\n            \"y\"\n         ],\n         \"test_warm_start_max_depth\": [\n            \"GradientBoosting\",\n            \"X\",\n            \"y\"\n         ],\n         \"test_warm_start_yields_identical_results\": [\n            \"GradientBoosting\",\n            \"X\",\n            \"y\"\n         ]\n      },\n      \"sklearn.ensemble._iforest\": {\n         \"_average_path_length\": [\n            \"n_samples_leaf\"\n         ]\n      },\n      \"sklearn.ensemble._weight_boosting\": {\n         \"_samme_proba\": [\n            \"estimator\",\n            \"n_classes\",\n            \"X\"\n         ]\n      },\n      \"sklearn.ensemble.bagging\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.ensemble.base\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.ensemble.forest\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.ensemble.gradient_boosting\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.ensemble.iforest\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.ensemble.partial_dependence\": {\n         \"_grid_from_X\": [\n            \"X\",\n            \"percentiles\",\n            \"grid_resolution\"\n         ],\n         \"partial_dependence\": [\n            \"gbrt\",\n            \"target_variables\",\n            \"grid\",\n            \"X\",\n            \"percentiles\",\n            \"grid_resolution\"\n         ],\n         \"plot_partial_dependence\": [\n            \"gbrt\",\n            \"X\",\n            \"features\",\n            \"feature_names\",\n            \"label\",\n            \"n_cols\",\n            \"grid_resolution\",\n            \"percentiles\",\n            \"n_jobs\",\n            \"verbose\",\n            \"ax\",\n            \"line_kw\",\n            \"contour_kw\"\n         ]\n      },\n      \"sklearn.ensemble.setup\": {\n         \"configuration\": [\n            \"parent_package\",\n            \"top_path\"\n         ]\n      },\n      \"sklearn.ensemble.tests.test_bagging\": {\n         \"replace\": [\n            \"X\"\n         ],\n         \"test_bagging_classifier_with_missing_inputs\": [],\n         \"test_bagging_regressor_with_missing_inputs\": [],\n         \"test_bagging_sample_weight_unsupported_but_passed\": [],\n         \"test_bagging_small_max_features\": [],\n         \"test_bagging_with_pipeline\": [],\n         \"test_base_estimator\": [],\n         \"test_bootstrap_features\": [],\n         \"test_bootstrap_samples\": [],\n         \"test_classification\": [],\n         \"test_error\": [],\n         \"test_estimators_samples\": [],\n         \"test_estimators_samples_deterministic\": [],\n         \"test_gridsearch\": [],\n         \"test_max_samples_consistency\": [],\n         \"test_oob_score_classification\": [],\n         \"test_oob_score_consistency\": [],\n         \"test_oob_score_regression\": [],\n         \"test_oob_score_removed_on_warm_start\": [],\n         \"test_parallel_classification\": [],\n         \"test_parallel_regression\": [],\n         \"test_probability\": [],\n         \"test_regression\": [],\n         \"test_set_oob_score_label_encoding\": [],\n         \"test_single_estimator\": [],\n         \"test_sparse_classification\": [],\n         \"test_sparse_regression\": [],\n         \"test_warm_start\": [\n            \"random_state\"\n         ],\n         \"test_warm_start_equal_n_estimators\": [],\n         \"test_warm_start_equivalence\": [],\n         \"test_warm_start_smaller_n_estimators\": [],\n         \"test_warm_start_with_oob_score_fails\": []\n      },\n      \"sklearn.ensemble.tests.test_base\": {\n         \"test_base\": [],\n         \"test_base_not_int_n_estimators\": [],\n         \"test_base_zero_n_estimators\": [],\n         \"test_set_random_states\": []\n      },\n      \"sklearn.ensemble.tests.test_common\": {\n         \"test_ensemble_heterogeneous_estimators_all_dropped\": [\n            \"X\",\n            \"y\",\n            \"estimator\"\n         ],\n         \"test_ensemble_heterogeneous_estimators_behavior\": [\n            \"X\",\n            \"y\",\n            \"estimator\"\n         ],\n         \"test_ensemble_heterogeneous_estimators_name_validation\": [\n            \"X\",\n            \"y\",\n            \"Ensemble\"\n         ],\n         \"test_ensemble_heterogeneous_estimators_type\": [\n            \"Ensemble\"\n         ]\n      },\n      \"sklearn.ensemble.tests.test_forest\": {\n         \"check_1d_input\": [\n            \"name\",\n            \"X\",\n            \"X_2d\",\n            \"y\"\n         ],\n         \"check_boston_criterion\": [\n            \"name\",\n            \"criterion\"\n         ],\n         \"check_class_weight_balanced_and_bootstrap_multi_output\": [\n            \"name\"\n         ],\n         \"check_class_weight_errors\": [\n            \"name\"\n         ],\n         \"check_class_weights\": [\n            \"name\"\n         ],\n         \"check_classes_shape\": [\n            \"name\"\n         ],\n         \"check_classification_toy\": [\n            \"name\"\n         ],\n         \"check_decision_path\": [\n            \"name\"\n         ],\n         \"check_gridsearch\": [\n            \"name\"\n         ],\n         \"check_importances\": [\n            \"name\",\n            \"criterion\",\n            \"dtype\",\n            \"tolerance\"\n         ],\n         \"check_iris_criterion\": [\n            \"name\",\n            \"criterion\"\n         ],\n         \"check_max_leaf_nodes_max_depth\": [\n            \"name\"\n         ],\n         \"check_memory_layout\": [\n            \"name\",\n            \"dtype\"\n         ],\n         \"check_min_samples_leaf\": [\n            \"name\"\n         ],\n         \"check_min_samples_split\": [\n            \"name\"\n         ],\n         \"check_min_weight_fraction_leaf\": [\n            \"name\"\n         ],\n         \"check_multioutput\": [\n            \"name\"\n         ],\n         \"check_oob_score\": [\n            \"name\",\n            \"X\",\n            \"y\",\n            \"n_estimators\"\n         ],\n         \"check_oob_score_raise_error\": [\n            \"name\"\n         ],\n         \"check_parallel\": [\n            \"name\",\n            \"X\",\n            \"y\"\n         ],\n         \"check_pickle\": [\n            \"name\",\n            \"X\",\n            \"y\"\n         ],\n         \"check_probability\": [\n            \"name\"\n         ],\n         \"check_regressor_attributes\": [\n            \"name\"\n         ],\n         \"check_sparse_input\": [\n            \"name\",\n            \"X\",\n            \"X_sparse\",\n            \"y\"\n         ],\n         \"check_warm_start\": [\n            \"name\",\n            \"random_state\"\n         ],\n         \"check_warm_start_clear\": [\n            \"name\"\n         ],\n         \"check_warm_start_equal_n_estimators\": [\n            \"name\"\n         ],\n         \"check_warm_start_oob\": [\n            \"name\"\n         ],\n         \"check_warm_start_smaller_n_estimators\": [\n            \"name\"\n         ],\n         \"test_1d_input\": [\n            \"name\"\n         ],\n         \"test_backend_respected\": [],\n         \"test_boston\": [\n            \"name\",\n            \"criterion\"\n         ],\n         \"test_class_weight_balanced_and_bootstrap_multi_output\": [\n            \"name\"\n         ],\n         \"test_class_weight_errors\": [\n            \"name\"\n         ],\n         \"test_class_weights\": [\n            \"name\"\n         ],\n         \"test_classes_shape\": [\n            \"name\"\n         ],\n         \"test_classification_toy\": [\n            \"name\"\n         ],\n         \"test_decision_path\": [\n            \"name\"\n         ],\n         \"test_distribution\": [],\n         \"test_dtype_convert\": [\n            \"n_classes\"\n         ],\n         \"test_forest_degenerate_feature_importances\": [],\n         \"test_forest_feature_importances_sum\": [],\n         \"test_gridsearch\": [\n            \"name\"\n         ],\n         \"test_importances\": [\n            \"dtype\",\n            \"name\",\n            \"criterion\"\n         ],\n         \"test_importances_asymptotic\": [],\n         \"test_iris\": [\n            \"name\",\n            \"criterion\"\n         ],\n         \"test_little_tree_with_small_max_samples\": [\n            \"ForestClass\"\n         ],\n         \"test_max_leaf_nodes_max_depth\": [\n            \"name\"\n         ],\n         \"test_max_samples_exceptions\": [\n            \"name\",\n            \"max_samples\",\n            \"exc_type\",\n            \"exc_msg\"\n         ],\n         \"test_memory_layout\": [\n            \"name\",\n            \"dtype\"\n         ],\n         \"test_min_impurity_decrease\": [],\n         \"test_min_impurity_split\": [],\n         \"test_min_samples_leaf\": [\n            \"name\"\n         ],\n         \"test_min_samples_split\": [\n            \"name\"\n         ],\n         \"test_min_weight_fraction_leaf\": [\n            \"name\"\n         ],\n         \"test_multioutput\": [\n            \"name\"\n         ],\n         \"test_multioutput_string\": [\n            \"name\"\n         ],\n         \"test_oob_score_classifiers\": [\n            \"name\"\n         ],\n         \"test_oob_score_raise_error\": [\n            \"name\"\n         ],\n         \"test_oob_score_regressors\": [\n            \"name\"\n         ],\n         \"test_parallel\": [\n            \"name\"\n         ],\n         \"test_parallel_train\": [],\n         \"test_pickle\": [\n            \"name\"\n         ],\n         \"test_probability\": [\n            \"name\"\n         ],\n         \"test_random_hasher\": [],\n         \"test_random_hasher_sparse_data\": [],\n         \"test_random_trees_dense_equal\": [],\n         \"test_random_trees_dense_type\": [],\n         \"test_regressor_attributes\": [\n            \"name\"\n         ],\n         \"test_sparse_input\": [\n            \"name\",\n            \"sparse_matrix\"\n         ],\n         \"test_unfitted_feature_importances\": [\n            \"name\"\n         ],\n         \"test_warm_start\": [\n            \"name\"\n         ],\n         \"test_warm_start_clear\": [\n            \"name\"\n         ],\n         \"test_warm_start_equal_n_estimators\": [\n            \"name\"\n         ],\n         \"test_warm_start_oob\": [\n            \"name\"\n         ],\n         \"test_warm_start_smaller_n_estimators\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.ensemble.tests.test_gradient_boosting\": {\n         \"_make_multiclass\": [],\n         \"check_boston\": [\n            \"loss\",\n            \"subsample\"\n         ],\n         \"check_classification_synthetic\": [\n            \"loss\"\n         ],\n         \"check_classification_toy\": [\n            \"loss\"\n         ],\n         \"check_iris\": [\n            \"subsample\",\n            \"sample_weight\"\n         ],\n         \"check_sparse_input\": [\n            \"EstimatorClass\",\n            \"X\",\n            \"X_sparse\",\n            \"y\"\n         ],\n         \"early_stopping_monitor\": [\n            \"i\",\n            \"est\",\n            \"locals\"\n         ],\n         \"test_boston\": [\n            \"loss\",\n            \"subsample\"\n         ],\n         \"test_check_inputs\": [],\n         \"test_check_inputs_predict\": [],\n         \"test_check_inputs_predict_stages\": [],\n         \"test_check_max_features\": [],\n         \"test_classification_synthetic\": [\n            \"loss\"\n         ],\n         \"test_classification_toy\": [\n            \"loss\"\n         ],\n         \"test_classifier_parameter_checks\": [],\n         \"test_complete_classification\": [],\n         \"test_complete_regression\": [],\n         \"test_degenerate_targets\": [],\n         \"test_early_stopping_n_classes\": [],\n         \"test_early_stopping_stratified\": [],\n         \"test_feature_importance_regression\": [],\n         \"test_feature_importances\": [],\n         \"test_float_class_labels\": [],\n         \"test_gbr_degenerate_feature_importances\": [],\n         \"test_gradient_boosting_early_stopping\": [],\n         \"test_gradient_boosting_init_wrong_methods\": [\n            \"estimator\",\n            \"missing_method\"\n         ],\n         \"test_gradient_boosting_validation_fraction\": [],\n         \"test_gradient_boosting_with_init\": [\n            \"gb\",\n            \"dataset_maker\",\n            \"init_estimator\"\n         ],\n         \"test_gradient_boosting_with_init_pipeline\": [],\n         \"test_iris\": [\n            \"subsample\",\n            \"sample_weight\"\n         ],\n         \"test_loss_function\": [],\n         \"test_max_feature_auto\": [],\n         \"test_max_feature_regression\": [],\n         \"test_max_leaf_nodes_max_depth\": [\n            \"GBEstimator\"\n         ],\n         \"test_mem_layout\": [],\n         \"test_min_impurity_decrease\": [\n            \"GBEstimator\"\n         ],\n         \"test_min_impurity_split\": [\n            \"GBEstimator\"\n         ],\n         \"test_monitor_early_stopping\": [\n            \"Cls\"\n         ],\n         \"test_more_verbose_output\": [],\n         \"test_non_uniform_weights_toy_edge_case_clf\": [],\n         \"test_non_uniform_weights_toy_edge_case_reg\": [],\n         \"test_oob_improvement\": [],\n         \"test_oob_improvement_raise\": [],\n         \"test_oob_multilcass_iris\": [],\n         \"test_presort_deprecated\": [\n            \"Cls\",\n            \"presort\"\n         ],\n         \"test_probability_exponential\": [],\n         \"test_probability_log\": [],\n         \"test_quantile_loss\": [],\n         \"test_regression_synthetic\": [],\n         \"test_regressor_parameter_checks\": [],\n         \"test_serialization\": [],\n         \"test_shape_y\": [],\n         \"test_sparse_input\": [\n            \"EstimatorClass\",\n            \"sparse_matrix\"\n         ],\n         \"test_staged_functions_defensive\": [\n            \"Estimator\"\n         ],\n         \"test_staged_predict\": [],\n         \"test_staged_predict_proba\": [],\n         \"test_symbol_labels\": [],\n         \"test_verbose_output\": [],\n         \"test_warm_start\": [\n            \"Cls\"\n         ],\n         \"test_warm_start_clear\": [\n            \"Cls\"\n         ],\n         \"test_warm_start_equal_n_estimators\": [\n            \"Cls\"\n         ],\n         \"test_warm_start_fortran\": [\n            \"Cls\"\n         ],\n         \"test_warm_start_max_depth\": [\n            \"Cls\"\n         ],\n         \"test_warm_start_n_estimators\": [\n            \"Cls\"\n         ],\n         \"test_warm_start_oob\": [\n            \"Cls\"\n         ],\n         \"test_warm_start_oob_switch\": [\n            \"Cls\"\n         ],\n         \"test_warm_start_smaller_n_estimators\": [\n            \"Cls\"\n         ],\n         \"test_warm_start_sparse\": [\n            \"Cls\"\n         ],\n         \"test_warm_start_wo_nestimators_change\": [],\n         \"test_warm_start_zero_n_estimators\": [\n            \"Cls\"\n         ],\n         \"test_zero_estimator_clf\": [],\n         \"test_zero_estimator_reg\": []\n      },\n      \"sklearn.ensemble.tests.test_gradient_boosting_loss_functions\": {\n         \"test_binomial_deviance\": [],\n         \"test_init_raw_predictions_shapes\": [],\n         \"test_init_raw_predictions_values\": [],\n         \"test_lad_equals_quantile_50\": [\n            \"seed\"\n         ],\n         \"test_quantile_loss_function\": [],\n         \"test_sample_weight_deviance\": [],\n         \"test_sample_weight_init_estimators\": [],\n         \"test_sample_weight_smoke\": [],\n         \"test_weighted_percentile\": [],\n         \"test_weighted_percentile_equal\": [],\n         \"test_weighted_percentile_zero_weight\": []\n      },\n      \"sklearn.ensemble.tests.test_iforest\": {\n         \"test_iforest\": [],\n         \"test_iforest_average_path_length\": [],\n         \"test_iforest_chunks_works1\": [\n            \"mocked_get_chunk\",\n            \"contamination\",\n            \"n_predict_calls\"\n         ],\n         \"test_iforest_chunks_works2\": [\n            \"mocked_get_chunk\",\n            \"contamination\",\n            \"n_predict_calls\"\n         ],\n         \"test_iforest_deprecation\": [],\n         \"test_iforest_error\": [],\n         \"test_iforest_parallel_regression\": [],\n         \"test_iforest_performance\": [],\n         \"test_iforest_sparse\": [],\n         \"test_iforest_subsampled_features\": [],\n         \"test_iforest_warm_start\": [],\n         \"test_iforest_with_uniform_data\": [],\n         \"test_iforest_works\": [\n            \"contamination\"\n         ],\n         \"test_max_samples_attribute\": [],\n         \"test_max_samples_consistency\": [],\n         \"test_recalculate_max_depth\": [],\n         \"test_score_samples\": []\n      },\n      \"sklearn.ensemble.tests.test_partial_dependence\": {\n         \"test_partial_dependecy_input\": [],\n         \"test_partial_dependence_classifier\": [],\n         \"test_partial_dependence_multiclass\": [],\n         \"test_partial_dependence_regressor\": [],\n         \"test_partial_dependence_sample_weight\": [],\n         \"test_plot_partial_dependence\": [\n            \"pyplot\"\n         ],\n         \"test_plot_partial_dependence_input\": [\n            \"pyplot\"\n         ],\n         \"test_plot_partial_dependence_multiclass\": [\n            \"pyplot\"\n         ],\n         \"test_raise_deprecation_warning\": [\n            \"pyplot\",\n            \"func\",\n            \"params\"\n         ]\n      },\n      \"sklearn.ensemble.tests.test_stacking\": {\n         \"test_check_estimators_stacking_estimator\": [\n            \"estimator\"\n         ],\n         \"test_stacking_classifier_drop_binary_prob\": [],\n         \"test_stacking_classifier_drop_column_binary_classification\": [],\n         \"test_stacking_classifier_drop_estimator\": [],\n         \"test_stacking_classifier_error\": [\n            \"y\",\n            \"params\",\n            \"type_err\",\n            \"msg_err\"\n         ],\n         \"test_stacking_classifier_iris\": [\n            \"cv\",\n            \"final_estimator\",\n            \"passthrough\"\n         ],\n         \"test_stacking_classifier_sparse_passthrough\": [\n            \"fmt\"\n         ],\n         \"test_stacking_classifier_stratify_default\": [],\n         \"test_stacking_cv_influence\": [\n            \"stacker\",\n            \"X\",\n            \"y\"\n         ],\n         \"test_stacking_randomness\": [\n            \"estimator\",\n            \"X\",\n            \"y\"\n         ],\n         \"test_stacking_regressor_diabetes\": [\n            \"cv\",\n            \"final_estimator\",\n            \"predict_params\",\n            \"passthrough\"\n         ],\n         \"test_stacking_regressor_drop_estimator\": [],\n         \"test_stacking_regressor_error\": [\n            \"y\",\n            \"params\",\n            \"type_err\",\n            \"msg_err\"\n         ],\n         \"test_stacking_regressor_sparse_passthrough\": [\n            \"fmt\"\n         ],\n         \"test_stacking_with_sample_weight\": [\n            \"stacker\",\n            \"X\",\n            \"y\"\n         ]\n      },\n      \"sklearn.ensemble.tests.test_voting\": {\n         \"test_check_estimators_voting_estimator\": [\n            \"estimator\"\n         ],\n         \"test_deprecate_none_transformer\": [\n            \"Voter\",\n            \"BaseEstimator\"\n         ],\n         \"test_estimator_weights_format\": [],\n         \"test_gridsearch\": [],\n         \"test_majority_label_iris\": [],\n         \"test_multilabel\": [],\n         \"test_none_estimator_with_weights\": [\n            \"X\",\n            \"y\",\n            \"voter\",\n            \"drop\"\n         ],\n         \"test_notfitted\": [],\n         \"test_parallel_fit\": [],\n         \"test_predict_on_toy_problem\": [],\n         \"test_predict_proba_on_toy_problem\": [],\n         \"test_predictproba_hardvoting\": [],\n         \"test_sample_weight\": [],\n         \"test_sample_weight_kwargs\": [],\n         \"test_set_estimator_none\": [\n            \"drop\"\n         ],\n         \"test_tie_situation\": [],\n         \"test_transform\": [],\n         \"test_voting_classifier_estimator_init\": [\n            \"params\",\n            \"err_msg\"\n         ],\n         \"test_voting_classifier_set_params\": [],\n         \"test_weights_iris\": [],\n         \"test_weights_regressor\": []\n      },\n      \"sklearn.ensemble.tests.test_weight_boosting\": {\n         \"test_adaboost_consistent_predict\": [\n            \"algorithm\"\n         ],\n         \"test_adaboost_negative_weight_error\": [\n            \"model\",\n            \"X\",\n            \"y\"\n         ],\n         \"test_adaboostclassifier_without_sample_weight\": [\n            \"algorithm\"\n         ],\n         \"test_adaboostregressor_sample_weight\": [],\n         \"test_base_estimator\": [],\n         \"test_boston\": [\n            \"loss\"\n         ],\n         \"test_classification_toy\": [\n            \"algorithm\"\n         ],\n         \"test_error\": [],\n         \"test_gridsearch\": [],\n         \"test_importances\": [],\n         \"test_iris\": [],\n         \"test_multidimensional_X\": [],\n         \"test_oneclass_adaboost_proba\": [],\n         \"test_pickle\": [],\n         \"test_regression_toy\": [],\n         \"test_samme_proba\": [],\n         \"test_sample_weight_adaboost_regressor\": [],\n         \"test_sparse_classification\": [],\n         \"test_sparse_regression\": [],\n         \"test_staged_predict\": [\n            \"algorithm\"\n         ]\n      },\n      \"sklearn.ensemble.voting\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.ensemble.weight_boosting\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.experimental.tests.test_enable_hist_gradient_boosting\": {\n         \"test_imports_strategies\": []\n      },\n      \"sklearn.experimental.tests.test_enable_iterative_imputer\": {\n         \"test_imports_strategies\": []\n      },\n      \"sklearn.externals._arff\": {\n         \"_build_re_values\": [],\n         \"_escape_sub_callback\": [\n            \"match\"\n         ],\n         \"_get_data_object_for_decoding\": [\n            \"matrix_type\"\n         ],\n         \"_get_data_object_for_encoding\": [\n            \"matrix\"\n         ],\n         \"_parse_values\": [\n            \"s\"\n         ],\n         \"_unescape_sub_callback\": [\n            \"match\"\n         ],\n         \"_unquote\": [\n            \"v\"\n         ],\n         \"dump\": [\n            \"obj\",\n            \"fp\"\n         ],\n         \"dumps\": [\n            \"obj\"\n         ],\n         \"encode_string\": [\n            \"s\"\n         ],\n         \"load\": [\n            \"fp\",\n            \"encode_nominal\",\n            \"return_type\"\n         ],\n         \"loads\": [\n            \"s\",\n            \"encode_nominal\",\n            \"return_type\"\n         ]\n      },\n      \"sklearn.externals._lobpcg\": {\n         \"_applyConstraints\": [\n            \"blockVectorV\",\n            \"factYBY\",\n            \"blockVectorBY\",\n            \"blockVectorY\"\n         ],\n         \"_as2d\": [\n            \"ar\"\n         ],\n         \"_b_orthonormalize\": [\n            \"B\",\n            \"blockVectorV\",\n            \"blockVectorBV\",\n            \"retInvR\"\n         ],\n         \"_get_indx\": [\n            \"_lambda\",\n            \"num\",\n            \"largest\"\n         ],\n         \"_makeOperator\": [\n            \"operatorInput\",\n            \"expectedShape\"\n         ],\n         \"_report_nonhermitian\": [\n            \"M\",\n            \"name\"\n         ],\n         \"_save\": [\n            \"ar\",\n            \"fileName\"\n         ],\n         \"bmat\": [],\n         \"lobpcg\": [\n            \"A\",\n            \"X\",\n            \"B\",\n            \"M\",\n            \"Y\",\n            \"tol\",\n            \"maxiter\",\n            \"largest\",\n            \"verbosityLevel\",\n            \"retLambdaHistory\",\n            \"retResidualNormsHistory\"\n         ]\n      },\n      \"sklearn.externals._pilutil\": {\n         \"bytescale\": [\n            \"data\",\n            \"cmin\",\n            \"cmax\",\n            \"high\",\n            \"low\"\n         ],\n         \"fromimage\": [\n            \"im\",\n            \"flatten\",\n            \"mode\"\n         ],\n         \"imread\": [\n            \"name\",\n            \"flatten\",\n            \"mode\"\n         ],\n         \"imresize\": [\n            \"arr\",\n            \"size\",\n            \"interp\",\n            \"mode\"\n         ],\n         \"imsave\": [\n            \"name\",\n            \"arr\",\n            \"format\"\n         ],\n         \"toimage\": [\n            \"arr\",\n            \"high\",\n            \"low\",\n            \"cmin\",\n            \"cmax\",\n            \"pal\",\n            \"mode\",\n            \"channel_axis\"\n         ]\n      },\n      \"sklearn.externals._scipy_linalg\": {\n         \"pinvh\": [\n            \"a\",\n            \"cond\",\n            \"rcond\",\n            \"lower\",\n            \"return_rank\",\n            \"check_finite\"\n         ]\n      },\n      \"sklearn.externals.conftest\": {\n         \"pytest_ignore_collect\": [\n            \"path\",\n            \"config\"\n         ]\n      },\n      \"sklearn.externals.setup\": {\n         \"configuration\": [\n            \"parent_package\",\n            \"top_path\"\n         ]\n      },\n      \"sklearn.externals.six\": {\n         \"_add_doc\": [\n            \"func\",\n            \"doc\"\n         ],\n         \"_import_module\": [\n            \"name\"\n         ],\n         \"add_metaclass\": [\n            \"metaclass\"\n         ],\n         \"add_move\": [\n            \"move\"\n         ],\n         \"advance_iterator\": [\n            \"it\"\n         ],\n         \"b\": [\n            \"s\"\n         ],\n         \"byte2int\": [\n            \"bs\"\n         ],\n         \"callable\": [\n            \"obj\"\n         ],\n         \"create_bound_method\": [\n            \"func\",\n            \"obj\"\n         ],\n         \"exec_\": [\n            \"_code_\",\n            \"_globs_\",\n            \"_locs_\"\n         ],\n         \"get_unbound_function\": [\n            \"unbound\"\n         ],\n         \"indexbytes\": [\n            \"buf\",\n            \"i\"\n         ],\n         \"int2byte\": [\n            \"i\"\n         ],\n         \"iterbytes\": [\n            \"buf\"\n         ],\n         \"iteritems\": [\n            \"d\"\n         ],\n         \"iterkeys\": [\n            \"d\"\n         ],\n         \"iterlists\": [\n            \"d\"\n         ],\n         \"itervalues\": [\n            \"d\"\n         ],\n         \"print_\": [],\n         \"remove_move\": [\n            \"name\"\n         ],\n         \"reraise\": [\n            \"tp\",\n            \"value\",\n            \"tb\"\n         ],\n         \"u\": [\n            \"s\"\n         ],\n         \"with_metaclass\": [\n            \"meta\"\n         ]\n      },\n      \"sklearn.feature_extraction._dict_vectorizer\": {\n         \"_tosequence\": [\n            \"X\"\n         ]\n      },\n      \"sklearn.feature_extraction._hash\": {\n         \"_hashing_transform\": [],\n         \"_iteritems\": [\n            \"d\"\n         ]\n      },\n      \"sklearn.feature_extraction.dict_vectorizer\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.feature_extraction.hashing\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.feature_extraction.image\": {\n         \"_compute_gradient_3d\": [\n            \"edges\",\n            \"img\"\n         ],\n         \"_compute_n_patches\": [\n            \"i_h\",\n            \"i_w\",\n            \"p_h\",\n            \"p_w\",\n            \"max_patches\"\n         ],\n         \"_extract_patches\": [\n            \"arr\",\n            \"patch_shape\",\n            \"extraction_step\"\n         ],\n         \"_make_edges_3d\": [\n            \"n_x\",\n            \"n_y\",\n            \"n_z\"\n         ],\n         \"_mask_edges_weights\": [\n            \"mask\",\n            \"edges\",\n            \"weights\"\n         ],\n         \"_to_graph\": [\n            \"n_x\",\n            \"n_y\",\n            \"n_z\",\n            \"mask\",\n            \"img\",\n            \"return_as\",\n            \"dtype\"\n         ],\n         \"extract_patches\": [\n            \"arr\",\n            \"patch_shape\",\n            \"extraction_step\"\n         ],\n         \"extract_patches_2d\": [\n            \"image\",\n            \"patch_size\",\n            \"max_patches\",\n            \"random_state\"\n         ],\n         \"grid_to_graph\": [\n            \"n_x\",\n            \"n_y\",\n            \"n_z\",\n            \"mask\",\n            \"return_as\",\n            \"dtype\"\n         ],\n         \"img_to_graph\": [\n            \"img\",\n            \"mask\",\n            \"return_as\",\n            \"dtype\"\n         ],\n         \"reconstruct_from_patches_2d\": [\n            \"patches\",\n            \"image_size\"\n         ]\n      },\n      \"sklearn.feature_extraction.setup\": {\n         \"configuration\": [\n            \"parent_package\",\n            \"top_path\"\n         ]\n      },\n      \"sklearn.feature_extraction.stop_words\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.feature_extraction.tests.test_dict_vectorizer\": {\n         \"test_deterministic_vocabulary\": [],\n         \"test_dictvectorizer\": [\n            \"sparse\",\n            \"dtype\",\n            \"sort\",\n            \"iterable\"\n         ],\n         \"test_feature_selection\": [],\n         \"test_one_of_k\": [],\n         \"test_unseen_or_no_features\": []\n      },\n      \"sklearn.feature_extraction.tests.test_feature_hasher\": {\n         \"test_feature_hasher_dicts\": [],\n         \"test_feature_hasher_pairs\": [],\n         \"test_feature_hasher_pairs_with_string_values\": [],\n         \"test_feature_hasher_strings\": [],\n         \"test_hash_collisions\": [],\n         \"test_hash_empty_input\": [],\n         \"test_hasher_alternate_sign\": [],\n         \"test_hasher_invalid_input\": [],\n         \"test_hasher_set_params\": [],\n         \"test_hasher_zeros\": [],\n         \"test_hashing_transform_seed\": []\n      },\n      \"sklearn.feature_extraction.tests.test_image\": {\n         \"_downsampled_face\": [],\n         \"_make_images\": [\n            \"face\"\n         ],\n         \"_orange_face\": [\n            \"face\"\n         ],\n         \"test_connect_regions\": [],\n         \"test_connect_regions_with_grid\": [],\n         \"test_extract_patch_same_size_image\": [],\n         \"test_extract_patches_all\": [],\n         \"test_extract_patches_all_color\": [],\n         \"test_extract_patches_all_rect\": [],\n         \"test_extract_patches_deprecated\": [],\n         \"test_extract_patches_less_than_max_patches\": [],\n         \"test_extract_patches_max_patches\": [],\n         \"test_extract_patches_square\": [],\n         \"test_extract_patches_strided\": [],\n         \"test_grid_to_graph\": [],\n         \"test_img_to_graph\": [],\n         \"test_patch_extractor_all_patches\": [],\n         \"test_patch_extractor_color\": [],\n         \"test_patch_extractor_fit\": [],\n         \"test_patch_extractor_max_patches\": [],\n         \"test_patch_extractor_max_patches_default\": [],\n         \"test_reconstruct_patches_perfect\": [],\n         \"test_reconstruct_patches_perfect_color\": [],\n         \"test_width_patch\": []\n      },\n      \"sklearn.feature_extraction.tests.test_text\": {\n         \"_check_stop_words_consistency\": [\n            \"estimator\"\n         ],\n         \"lazy_analyze\": [\n            \"s\"\n         ],\n         \"split_tokenize\": [\n            \"s\"\n         ],\n         \"strip_eacute\": [\n            \"s\"\n         ],\n         \"test_callable_analyzer_change_behavior\": [\n            \"Estimator\",\n            \"analyzer\",\n            \"input_type\"\n         ],\n         \"test_callable_analyzer_error\": [\n            \"Estimator\",\n            \"input_type\",\n            \"err_type\",\n            \"err_msg\"\n         ],\n         \"test_callable_analyzer_reraise_error\": [\n            \"tmpdir\",\n            \"Estimator\"\n         ],\n         \"test_char_ngram_analyzer\": [],\n         \"test_char_wb_ngram_analyzer\": [],\n         \"test_count_binary_occurrences\": [],\n         \"test_count_vectorizer_max_features\": [],\n         \"test_count_vectorizer_pipeline_grid_selection\": [],\n         \"test_countvectorizer_custom_vocabulary\": [],\n         \"test_countvectorizer_custom_vocabulary_gap_index\": [],\n         \"test_countvectorizer_custom_vocabulary_pipeline\": [],\n         \"test_countvectorizer_custom_vocabulary_repeated_indices\": [],\n         \"test_countvectorizer_empty_vocabulary\": [],\n         \"test_countvectorizer_sort_features_64bit_sparse_indices\": [],\n         \"test_countvectorizer_stop_words\": [],\n         \"test_countvectorizer_vocab_dicts_when_pickling\": [],\n         \"test_countvectorizer_vocab_sets_when_pickling\": [],\n         \"test_feature_names\": [],\n         \"test_fit_countvectorizer_twice\": [],\n         \"test_hashed_binary_occurrences\": [],\n         \"test_hashing_vectorizer\": [],\n         \"test_hashingvectorizer_nan_in_docs\": [],\n         \"test_non_unique_vocab\": [],\n         \"test_pickling_built_processors\": [\n            \"factory\"\n         ],\n         \"test_pickling_transformer\": [],\n         \"test_pickling_vectorizer\": [],\n         \"test_stop_word_validation_custom_preprocessor\": [\n            \"Estimator\"\n         ],\n         \"test_stop_words_removal\": [],\n         \"test_strip_accents\": [],\n         \"test_sublinear_tf\": [],\n         \"test_tf_idf_smoothing\": [],\n         \"test_tfidf_no_smoothing\": [],\n         \"test_tfidf_transformer_sparse\": [],\n         \"test_tfidf_transformer_type\": [\n            \"X_dtype\"\n         ],\n         \"test_tfidf_vectorizer_deprecationwarning\": [],\n         \"test_tfidf_vectorizer_setter\": [],\n         \"test_tfidf_vectorizer_setters\": [],\n         \"test_tfidf_vectorizer_type\": [\n            \"vectorizer_dtype\",\n            \"output_dtype\",\n            \"warning_expected\"\n         ],\n         \"test_tfidf_vectorizer_with_fixed_vocabulary\": [],\n         \"test_tfidfvectorizer_binary\": [],\n         \"test_tfidfvectorizer_export_idf\": [],\n         \"test_tfidfvectorizer_invalid_idf_attr\": [],\n         \"test_to_ascii\": [],\n         \"test_transformer_idf_setter\": [],\n         \"test_unicode_decode_error\": [],\n         \"test_unused_parameters_warn\": [\n            \"Vectorizer\",\n            \"stop_words\",\n            \"tokenizer\",\n            \"preprocessor\",\n            \"ngram_range\",\n            \"token_pattern\",\n            \"analyzer\",\n            \"unused_name\",\n            \"ovrd_name\",\n            \"ovrd_msg\"\n         ],\n         \"test_vectorizer\": [],\n         \"test_vectorizer_inverse_transform\": [\n            \"Vectorizer\"\n         ],\n         \"test_vectorizer_max_df\": [],\n         \"test_vectorizer_max_features\": [\n            \"Vectorizer\"\n         ],\n         \"test_vectorizer_min_df\": [],\n         \"test_vectorizer_pipeline_cross_validation\": [],\n         \"test_vectorizer_pipeline_grid_selection\": [],\n         \"test_vectorizer_stop_words_inconsistent\": [],\n         \"test_vectorizer_string_object_as_input\": [\n            \"Vectorizer\"\n         ],\n         \"test_vectorizer_unicode\": [],\n         \"test_vectorizer_vocab_clone\": [],\n         \"test_vectorizermixin_is_deprecated\": [],\n         \"test_vectorizers_invalid_ngram_range\": [\n            \"vec\"\n         ],\n         \"test_word_analyzer_unigrams\": [\n            \"Vectorizer\"\n         ],\n         \"test_word_analyzer_unigrams_and_bigrams\": [],\n         \"test_word_ngram_analyzer\": [],\n         \"uppercase\": [\n            \"s\"\n         ]\n      },\n      \"sklearn.feature_extraction.text\": {\n         \"_analyze\": [\n            \"doc\",\n            \"analyzer\",\n            \"tokenizer\",\n            \"ngrams\",\n            \"preprocessor\",\n            \"decoder\",\n            \"stop_words\"\n         ],\n         \"_check_stop_list\": [\n            \"stop\"\n         ],\n         \"_document_frequency\": [\n            \"X\"\n         ],\n         \"_make_int_array\": [],\n         \"_preprocess\": [\n            \"doc\",\n            \"accent_function\",\n            \"lower\"\n         ],\n         \"strip_accents_ascii\": [\n            \"s\"\n         ],\n         \"strip_accents_unicode\": [\n            \"s\"\n         ],\n         \"strip_tags\": [\n            \"s\"\n         ]\n      },\n      \"sklearn.feature_selection._from_model\": {\n         \"_calculate_threshold\": [\n            \"estimator\",\n            \"importances\",\n            \"threshold\"\n         ],\n         \"_get_feature_importances\": [\n            \"estimator\",\n            \"norm_order\"\n         ]\n      },\n      \"sklearn.feature_selection._mutual_info\": {\n         \"_compute_mi\": [\n            \"x\",\n            \"y\",\n            \"x_discrete\",\n            \"y_discrete\",\n            \"n_neighbors\"\n         ],\n         \"_compute_mi_cc\": [\n            \"x\",\n            \"y\",\n            \"n_neighbors\"\n         ],\n         \"_compute_mi_cd\": [\n            \"c\",\n            \"d\",\n            \"n_neighbors\"\n         ],\n         \"_estimate_mi\": [\n            \"X\",\n            \"y\",\n            \"discrete_features\",\n            \"discrete_target\",\n            \"n_neighbors\",\n            \"copy\",\n            \"random_state\"\n         ],\n         \"_iterate_columns\": [\n            \"X\",\n            \"columns\"\n         ],\n         \"mutual_info_classif\": [\n            \"X\",\n            \"y\",\n            \"discrete_features\",\n            \"n_neighbors\",\n            \"copy\",\n            \"random_state\"\n         ],\n         \"mutual_info_regression\": [\n            \"X\",\n            \"y\",\n            \"discrete_features\",\n            \"n_neighbors\",\n            \"copy\",\n            \"random_state\"\n         ]\n      },\n      \"sklearn.feature_selection._rfe\": {\n         \"_rfe_single_fit\": [\n            \"rfe\",\n            \"estimator\",\n            \"X\",\n            \"y\",\n            \"train\",\n            \"test\",\n            \"scorer\"\n         ]\n      },\n      \"sklearn.feature_selection._univariate_selection\": {\n         \"_chisquare\": [\n            \"f_obs\",\n            \"f_exp\"\n         ],\n         \"_clean_nans\": [\n            \"scores\"\n         ],\n         \"chi2\": [\n            \"X\",\n            \"y\"\n         ],\n         \"f_classif\": [\n            \"X\",\n            \"y\"\n         ],\n         \"f_oneway\": [],\n         \"f_regression\": [\n            \"X\",\n            \"y\",\n            \"center\"\n         ]\n      },\n      \"sklearn.feature_selection.base\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.feature_selection.from_model\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.feature_selection.mutual_info\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.feature_selection.rfe\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.feature_selection.tests.test_base\": {\n         \"test_get_support\": [],\n         \"test_inverse_transform_dense\": [],\n         \"test_inverse_transform_sparse\": [],\n         \"test_transform_dense\": [],\n         \"test_transform_sparse\": []\n      },\n      \"sklearn.feature_selection.tests.test_chi2\": {\n         \"mkchi2\": [\n            \"k\"\n         ],\n         \"test_chi2\": [],\n         \"test_chi2_coo\": [],\n         \"test_chi2_negative\": [],\n         \"test_chi2_unused_feature\": [],\n         \"test_chisquare\": []\n      },\n      \"sklearn.feature_selection.tests.test_feature_select\": {\n         \"assert_best_scores_kept\": [\n            \"score_filter\"\n         ],\n         \"test_boundary_case_ch2\": [],\n         \"test_f_classif\": [],\n         \"test_f_classif_constant_feature\": [],\n         \"test_f_classif_multi_class\": [],\n         \"test_f_oneway_ints\": [],\n         \"test_f_oneway_vs_scipy_stats\": [],\n         \"test_f_regression\": [],\n         \"test_f_regression_center\": [],\n         \"test_f_regression_input_dtype\": [],\n         \"test_invalid_k\": [],\n         \"test_invalid_percentile\": [],\n         \"test_mutual_info_classif\": [],\n         \"test_mutual_info_regression\": [],\n         \"test_nans\": [],\n         \"test_no_feature_selected\": [],\n         \"test_score_func_error\": [],\n         \"test_scorefunc_multilabel\": [],\n         \"test_select_fdr_regression\": [\n            \"alpha\",\n            \"n_informative\"\n         ],\n         \"test_select_fwe_regression\": [],\n         \"test_select_heuristics_classif\": [],\n         \"test_select_heuristics_regression\": [],\n         \"test_select_kbest_all\": [],\n         \"test_select_kbest_classif\": [],\n         \"test_select_kbest_regression\": [],\n         \"test_select_kbest_zero\": [],\n         \"test_select_percentile_classif\": [],\n         \"test_select_percentile_classif_sparse\": [],\n         \"test_select_percentile_regression\": [],\n         \"test_select_percentile_regression_full\": [],\n         \"test_selectkbest_tiebreaking\": [],\n         \"test_selectpercentile_tiebreaking\": [],\n         \"test_tied_pvalues\": [],\n         \"test_tied_scores\": []\n      },\n      \"sklearn.feature_selection.tests.test_from_model\": {\n         \"test_2d_coef\": [],\n         \"test_allow_nan_tag_comes_from_estimator\": [],\n         \"test_calling_fit_reinitializes\": [],\n         \"test_coef_default_threshold\": [],\n         \"test_feature_importances\": [],\n         \"test_fit_accepts_nan_inf\": [],\n         \"test_input_estimator_unchanged\": [],\n         \"test_invalid_input\": [],\n         \"test_max_features\": [],\n         \"test_max_features_dim\": [\n            \"max_features\"\n         ],\n         \"test_max_features_error\": [\n            \"max_features\",\n            \"err_type\",\n            \"err_msg\"\n         ],\n         \"test_max_features_tiebreak\": [],\n         \"test_partial_fit\": [],\n         \"test_prefit\": [],\n         \"test_sample_weight\": [],\n         \"test_threshold_and_max_features\": [],\n         \"test_threshold_string\": [],\n         \"test_threshold_without_refitting\": [],\n         \"test_transform_accepts_nan_inf\": []\n      },\n      \"sklearn.feature_selection.tests.test_mutual_info\": {\n         \"test_compute_mi_cc\": [],\n         \"test_compute_mi_cd\": [],\n         \"test_compute_mi_cd_unique_label\": [],\n         \"test_compute_mi_dd\": [],\n         \"test_mutual_info_classif_discrete\": [],\n         \"test_mutual_info_classif_mixed\": [],\n         \"test_mutual_info_options\": [],\n         \"test_mutual_info_regression\": []\n      },\n      \"sklearn.feature_selection.tests.test_rfe\": {\n         \"test_number_of_subsets_of_features\": [],\n         \"test_rfe\": [],\n         \"test_rfe_allow_nan_inf_in_x\": [\n            \"cv\"\n         ],\n         \"test_rfe_cv_groups\": [],\n         \"test_rfe_cv_n_jobs\": [],\n         \"test_rfe_estimator_tags\": [],\n         \"test_rfe_features_importance\": [],\n         \"test_rfe_min_step\": [],\n         \"test_rfe_mockclassifier\": [],\n         \"test_rfecv\": [],\n         \"test_rfecv_grid_scores_size\": [],\n         \"test_rfecv_mockclassifier\": [],\n         \"test_rfecv_verbose_output\": []\n      },\n      \"sklearn.feature_selection.tests.test_variance_threshold\": {\n         \"test_variance_nan\": [],\n         \"test_variance_threshold\": [],\n         \"test_zero_variance\": [],\n         \"test_zero_variance_floating_point_error\": []\n      },\n      \"sklearn.feature_selection.univariate_selection\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.feature_selection.variance_threshold\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.gaussian_process.gpc\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.gaussian_process.gpr\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.gaussian_process.kernels\": {\n         \"_approx_fprime\": [\n            \"xk\",\n            \"f\",\n            \"epsilon\",\n            \"args\"\n         ],\n         \"_check_length_scale\": [\n            \"X\",\n            \"length_scale\"\n         ]\n      },\n      \"sklearn.gaussian_process.tests.test_gpc\": {\n         \"f\": [\n            \"x\"\n         ],\n         \"test_converged_to_local_maximum\": [\n            \"kernel\"\n         ],\n         \"test_custom_optimizer\": [\n            \"kernel\"\n         ],\n         \"test_lml_gradient\": [\n            \"kernel\"\n         ],\n         \"test_lml_improving\": [\n            \"kernel\"\n         ],\n         \"test_lml_precomputed\": [\n            \"kernel\"\n         ],\n         \"test_lml_without_cloning_kernel\": [\n            \"kernel\"\n         ],\n         \"test_multi_class\": [\n            \"kernel\"\n         ],\n         \"test_multi_class_n_jobs\": [\n            \"kernel\"\n         ],\n         \"test_predict_consistent\": [\n            \"kernel\"\n         ],\n         \"test_predict_consistent_structured\": [],\n         \"test_random_starts\": []\n      },\n      \"sklearn.gaussian_process.tests.test_gpr\": {\n         \"f\": [\n            \"x\"\n         ],\n         \"test_K_inv_reset\": [\n            \"kernel\"\n         ],\n         \"test_anisotropic_kernel\": [],\n         \"test_converged_to_local_maximum\": [\n            \"kernel\"\n         ],\n         \"test_custom_optimizer\": [\n            \"kernel\"\n         ],\n         \"test_duplicate_input\": [\n            \"kernel\"\n         ],\n         \"test_gpr_correct_error_message\": [],\n         \"test_gpr_interpolation\": [\n            \"kernel\"\n         ],\n         \"test_gpr_interpolation_structured\": [],\n         \"test_lml_gradient\": [\n            \"kernel\"\n         ],\n         \"test_lml_improving\": [\n            \"kernel\"\n         ],\n         \"test_lml_precomputed\": [\n            \"kernel\"\n         ],\n         \"test_lml_without_cloning_kernel\": [\n            \"kernel\"\n         ],\n         \"test_no_fit_default_predict\": [],\n         \"test_no_optimizer\": [],\n         \"test_predict_cov_vs_std\": [\n            \"kernel\"\n         ],\n         \"test_prior\": [\n            \"kernel\"\n         ],\n         \"test_random_starts\": [],\n         \"test_sample_statistics\": [\n            \"kernel\"\n         ],\n         \"test_solution_inside_bounds\": [\n            \"kernel\"\n         ],\n         \"test_y_multioutput\": [],\n         \"test_y_normalization\": [\n            \"kernel\"\n         ]\n      },\n      \"sklearn.gaussian_process.tests.test_kernels\": {\n         \"check_hyperparameters_equal\": [\n            \"kernel1\",\n            \"kernel2\"\n         ],\n         \"test_auto_vs_cross\": [\n            \"kernel\"\n         ],\n         \"test_compound_kernel_input_type\": [],\n         \"test_kernel_anisotropic\": [],\n         \"test_kernel_clone\": [\n            \"kernel\"\n         ],\n         \"test_kernel_clone_after_set_params\": [\n            \"kernel\"\n         ],\n         \"test_kernel_diag\": [\n            \"kernel\"\n         ],\n         \"test_kernel_gradient\": [\n            \"kernel\"\n         ],\n         \"test_kernel_input_type\": [\n            \"kernel\"\n         ],\n         \"test_kernel_operator_commutative\": [],\n         \"test_kernel_stationary\": [\n            \"kernel\"\n         ],\n         \"test_kernel_theta\": [\n            \"kernel\"\n         ],\n         \"test_kernel_versus_pairwise\": [\n            \"kernel\"\n         ],\n         \"test_matern_kernel\": [],\n         \"test_rational_quadratic_kernel\": [],\n         \"test_repr_kernels\": [\n            \"kernel\"\n         ],\n         \"test_set_get_params\": [\n            \"kernel\"\n         ],\n         \"test_warns_on_get_params_non_attribute\": []\n      },\n      \"sklearn.impute._base\": {\n         \"_check_inputs_dtype\": [\n            \"X\",\n            \"missing_values\"\n         ],\n         \"_most_frequent\": [\n            \"array\",\n            \"extra_value\",\n            \"n_repeat\"\n         ]\n      },\n      \"sklearn.impute.tests.test_base\": {\n         \"data\": [],\n         \"test_base_imputer_not_fit\": [\n            \"data\"\n         ],\n         \"test_base_imputer_not_transform\": [\n            \"data\"\n         ]\n      },\n      \"sklearn.impute.tests.test_common\": {\n         \"test_imputation_missing_value_in_test_array\": [\n            \"imputer\"\n         ],\n         \"test_imputers_add_indicator\": [\n            \"marker\",\n            \"imputer\"\n         ],\n         \"test_imputers_add_indicator_sparse\": [\n            \"imputer\",\n            \"marker\"\n         ]\n      },\n      \"sklearn.impute.tests.test_impute\": {\n         \"_check_statistics\": [\n            \"X\",\n            \"X_true\",\n            \"strategy\",\n            \"statistics\",\n            \"missing_values\"\n         ],\n         \"safe_mean\": [\n            \"arr\"\n         ],\n         \"safe_median\": [\n            \"arr\"\n         ],\n         \"test_imputation_const_mostf_error_invalid_types\": [\n            \"strategy\",\n            \"dtype\"\n         ],\n         \"test_imputation_constant_error_invalid_type\": [\n            \"X_data\",\n            \"missing_value\"\n         ],\n         \"test_imputation_constant_float\": [\n            \"array_constructor\"\n         ],\n         \"test_imputation_constant_integer\": [],\n         \"test_imputation_constant_object\": [\n            \"marker\"\n         ],\n         \"test_imputation_constant_pandas\": [\n            \"dtype\"\n         ],\n         \"test_imputation_copy\": [],\n         \"test_imputation_deletion_warning\": [\n            \"strategy\"\n         ],\n         \"test_imputation_error_invalid_strategy\": [\n            \"strategy\"\n         ],\n         \"test_imputation_error_sparse_0\": [\n            \"strategy\"\n         ],\n         \"test_imputation_mean_median\": [],\n         \"test_imputation_mean_median_error_invalid_type\": [\n            \"strategy\",\n            \"dtype\"\n         ],\n         \"test_imputation_mean_median_error_invalid_type_list_pandas\": [\n            \"strategy\",\n            \"type\"\n         ],\n         \"test_imputation_median_special_cases\": [],\n         \"test_imputation_most_frequent\": [],\n         \"test_imputation_most_frequent_objects\": [\n            \"marker\"\n         ],\n         \"test_imputation_most_frequent_pandas\": [\n            \"dtype\"\n         ],\n         \"test_imputation_order\": [\n            \"order\",\n            \"idx_order\"\n         ],\n         \"test_imputation_pipeline_grid_search\": [],\n         \"test_imputation_shape\": [\n            \"strategy\"\n         ],\n         \"test_imputer_without_indicator\": [\n            \"imputer_constructor\"\n         ],\n         \"test_inconsistent_dtype_X_missing_values\": [\n            \"imputer_constructor\",\n            \"imputer_missing_values\",\n            \"missing_value\",\n            \"err_msg\"\n         ],\n         \"test_iterative_imputer_additive_matrix\": [],\n         \"test_iterative_imputer_all_missing\": [],\n         \"test_iterative_imputer_catch_warning\": [],\n         \"test_iterative_imputer_clip\": [],\n         \"test_iterative_imputer_clip_truncnorm\": [],\n         \"test_iterative_imputer_early_stopping\": [],\n         \"test_iterative_imputer_error_param\": [\n            \"max_iter\",\n            \"tol\",\n            \"error_type\",\n            \"warning\"\n         ],\n         \"test_iterative_imputer_estimators\": [\n            \"estimator\"\n         ],\n         \"test_iterative_imputer_imputation_order\": [\n            \"imputation_order\"\n         ],\n         \"test_iterative_imputer_missing_at_transform\": [\n            \"strategy\"\n         ],\n         \"test_iterative_imputer_no_missing\": [],\n         \"test_iterative_imputer_one_feature\": [\n            \"X\"\n         ],\n         \"test_iterative_imputer_rank_one\": [],\n         \"test_iterative_imputer_skip_non_missing\": [\n            \"skip_complete\"\n         ],\n         \"test_iterative_imputer_transform_recovery\": [\n            \"rank\"\n         ],\n         \"test_iterative_imputer_transform_stochasticity\": [],\n         \"test_iterative_imputer_truncated_normal_posterior\": [],\n         \"test_iterative_imputer_verbose\": [],\n         \"test_iterative_imputer_zero_iters\": [],\n         \"test_missing_indicator_error\": [\n            \"X_fit\",\n            \"X_trans\",\n            \"params\",\n            \"msg_err\"\n         ],\n         \"test_missing_indicator_new\": [\n            \"missing_values\",\n            \"arr_type\",\n            \"dtype\",\n            \"param_features\",\n            \"n_features\",\n            \"features_indices\"\n         ],\n         \"test_missing_indicator_no_missing\": [],\n         \"test_missing_indicator_raise_on_sparse_with_missing_0\": [\n            \"arr_type\"\n         ],\n         \"test_missing_indicator_sparse_no_explicit_zeros\": [],\n         \"test_missing_indicator_sparse_param\": [\n            \"arr_type\",\n            \"missing_values\",\n            \"param_sparse\"\n         ],\n         \"test_missing_indicator_string\": [],\n         \"test_missing_indicator_with_imputer\": [\n            \"X\",\n            \"missing_values\",\n            \"X_trans_exp\"\n         ],\n         \"test_simple_imputation_add_indicator_sparse_matrix\": [\n            \"arr_type\"\n         ]\n      },\n      \"sklearn.impute.tests.test_knn\": {\n         \"_missing_mean\": [\n            \"X\",\n            \"missing_value\"\n         ],\n         \"test_knn_imputer_all_samples_are_neighbors\": [\n            \"na\"\n         ],\n         \"test_knn_imputer_callable_metric\": [],\n         \"test_knn_imputer_default_with_invalid_input\": [\n            \"na\"\n         ],\n         \"test_knn_imputer_distance_weighted_not_enough_neighbors\": [\n            \"na\"\n         ],\n         \"test_knn_imputer_drops_all_nan_features\": [\n            \"na\"\n         ],\n         \"test_knn_imputer_not_enough_valid_distances\": [\n            \"na\",\n            \"weights\"\n         ],\n         \"test_knn_imputer_one_n_neighbors\": [\n            \"na\"\n         ],\n         \"test_knn_imputer_removes_all_na_features\": [\n            \"na\"\n         ],\n         \"test_knn_imputer_shape\": [\n            \"weights\",\n            \"n_neighbors\"\n         ],\n         \"test_knn_imputer_verify\": [\n            \"na\"\n         ],\n         \"test_knn_imputer_weight_distance\": [\n            \"na\"\n         ],\n         \"test_knn_imputer_weight_uniform\": [\n            \"na\"\n         ],\n         \"test_knn_imputer_with_simple_example\": [\n            \"na\"\n         ],\n         \"test_knn_imputer_zero_nan_imputes_the_same\": [\n            \"na\"\n         ],\n         \"test_knn_tags\": [\n            \"na\",\n            \"allow_nan\"\n         ]\n      },\n      \"sklearn.inspection._partial_dependence\": {\n         \"_grid_from_X\": [\n            \"X\",\n            \"percentiles\",\n            \"grid_resolution\"\n         ],\n         \"_partial_dependence_brute\": [\n            \"est\",\n            \"grid\",\n            \"features\",\n            \"X\",\n            \"response_method\"\n         ],\n         \"_partial_dependence_recursion\": [\n            \"est\",\n            \"grid\",\n            \"features\"\n         ],\n         \"partial_dependence\": [\n            \"estimator\",\n            \"X\",\n            \"features\",\n            \"response_method\",\n            \"percentiles\",\n            \"grid_resolution\",\n            \"method\"\n         ],\n         \"plot_partial_dependence\": [\n            \"estimator\",\n            \"X\",\n            \"features\",\n            \"feature_names\",\n            \"target\",\n            \"response_method\",\n            \"n_cols\",\n            \"grid_resolution\",\n            \"percentiles\",\n            \"method\",\n            \"n_jobs\",\n            \"verbose\",\n            \"fig\",\n            \"line_kw\",\n            \"contour_kw\",\n            \"ax\"\n         ]\n      },\n      \"sklearn.inspection._permutation_importance\": {\n         \"_calculate_permutation_scores\": [\n            \"estimator\",\n            \"X\",\n            \"y\",\n            \"col_idx\",\n            \"random_state\",\n            \"n_repeats\",\n            \"scorer\"\n         ],\n         \"permutation_importance\": [\n            \"estimator\",\n            \"X\",\n            \"y\",\n            \"scoring\",\n            \"n_repeats\",\n            \"n_jobs\",\n            \"random_state\"\n         ]\n      },\n      \"sklearn.inspection.partial_dependence\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.inspection.tests.test_partial_dependence\": {\n         \"test_grid_from_X\": [],\n         \"test_grid_from_X_error\": [\n            \"grid_resolution\",\n            \"percentiles\",\n            \"err_msg\"\n         ],\n         \"test_multiclass_multioutput\": [\n            \"Estimator\"\n         ],\n         \"test_output_shape\": [\n            \"Estimator\",\n            \"method\",\n            \"data\",\n            \"grid_resolution\",\n            \"features\"\n         ],\n         \"test_partial_dependence_X_list\": [\n            \"estimator\"\n         ],\n         \"test_partial_dependence_dataframe\": [\n            \"estimator\",\n            \"preprocessor\",\n            \"features\"\n         ],\n         \"test_partial_dependence_easy_target\": [\n            \"est\",\n            \"power\"\n         ],\n         \"test_partial_dependence_error\": [\n            \"estimator\",\n            \"params\",\n            \"err_msg\"\n         ],\n         \"test_partial_dependence_feature_type\": [\n            \"features\",\n            \"expected_pd_shape\"\n         ],\n         \"test_partial_dependence_helpers\": [\n            \"est\",\n            \"method\",\n            \"target_feature\"\n         ],\n         \"test_partial_dependence_pipeline\": [],\n         \"test_partial_dependence_sample_weight\": [],\n         \"test_partial_dependence_slice_error\": [\n            \"with_dataframe\",\n            \"err_msg\"\n         ],\n         \"test_partial_dependence_unfitted\": [\n            \"estimator\"\n         ],\n         \"test_partial_dependence_unknown_feature_indices\": [\n            \"estimator\",\n            \"features\"\n         ],\n         \"test_partial_dependence_unknown_feature_string\": [\n            \"estimator\"\n         ],\n         \"test_recursion_decision_function\": [\n            \"est\",\n            \"target_feature\"\n         ],\n         \"test_warning_recursion_non_constant_init\": []\n      },\n      \"sklearn.inspection.tests.test_permutation_importance\": {\n         \"test_permutation_importance_correlated_feature_regression\": [\n            \"n_jobs\"\n         ],\n         \"test_permutation_importance_correlated_feature_regression_pandas\": [\n            \"n_jobs\"\n         ],\n         \"test_permutation_importance_equivalence_array_dataframe\": [\n            \"n_jobs\"\n         ],\n         \"test_permutation_importance_equivalence_sequential_parallel\": [],\n         \"test_permutation_importance_large_memmaped_data\": [\n            \"input_type\"\n         ],\n         \"test_permutation_importance_linear_regresssion\": [],\n         \"test_permutation_importance_mixed_types\": [],\n         \"test_permutation_importance_mixed_types_pandas\": []\n      },\n      \"sklearn.inspection.tests.test_plot_partial_dependence\": {\n         \"boston\": [],\n         \"clf_boston\": [\n            \"boston\"\n         ],\n         \"test_plot_partial_dependence\": [\n            \"grid_resolution\",\n            \"pyplot\",\n            \"clf_boston\",\n            \"boston\"\n         ],\n         \"test_plot_partial_dependence_custom_axes\": [\n            \"pyplot\",\n            \"clf_boston\",\n            \"boston\"\n         ],\n         \"test_plot_partial_dependence_dataframe\": [\n            \"pyplot\",\n            \"clf_boston\",\n            \"boston\"\n         ],\n         \"test_plot_partial_dependence_error\": [\n            \"pyplot\",\n            \"data\",\n            \"params\",\n            \"err_msg\"\n         ],\n         \"test_plot_partial_dependence_feature_name_reuse\": [\n            \"pyplot\",\n            \"clf_boston\",\n            \"boston\"\n         ],\n         \"test_plot_partial_dependence_fig_deprecated\": [\n            \"pyplot\"\n         ],\n         \"test_plot_partial_dependence_incorrent_num_axes\": [\n            \"pyplot\",\n            \"clf_boston\",\n            \"boston\",\n            \"nrows\",\n            \"ncols\"\n         ],\n         \"test_plot_partial_dependence_multiclass\": [\n            \"pyplot\"\n         ],\n         \"test_plot_partial_dependence_multiclass_error\": [\n            \"pyplot\",\n            \"params\",\n            \"err_msg\"\n         ],\n         \"test_plot_partial_dependence_multioutput\": [\n            \"pyplot\",\n            \"target\"\n         ],\n         \"test_plot_partial_dependence_passing_numpy_axes\": [\n            \"pyplot\",\n            \"clf_boston\",\n            \"boston\"\n         ],\n         \"test_plot_partial_dependence_str_features\": [\n            \"pyplot\",\n            \"clf_boston\",\n            \"boston\",\n            \"input_type\",\n            \"feature_names_type\"\n         ],\n         \"test_plot_partial_dependence_with_same_axes\": [\n            \"pyplot\",\n            \"clf_boston\",\n            \"boston\"\n         ]\n      },\n      \"sklearn.isotonic\": {\n         \"check_increasing\": [\n            \"x\",\n            \"y\"\n         ],\n         \"isotonic_regression\": [\n            \"y\",\n            \"sample_weight\",\n            \"y_min\",\n            \"y_max\",\n            \"increasing\"\n         ]\n      },\n      \"sklearn.linear_model._base\": {\n         \"_pre_fit\": [\n            \"X\",\n            \"y\",\n            \"Xy\",\n            \"precompute\",\n            \"normalize\",\n            \"fit_intercept\",\n            \"copy\",\n            \"check_input\"\n         ],\n         \"_preprocess_data\": [\n            \"X\",\n            \"y\",\n            \"fit_intercept\",\n            \"normalize\",\n            \"copy\",\n            \"sample_weight\",\n            \"return_mean\",\n            \"check_input\"\n         ],\n         \"_rescale_data\": [\n            \"X\",\n            \"y\",\n            \"sample_weight\"\n         ],\n         \"make_dataset\": [\n            \"X\",\n            \"y\",\n            \"sample_weight\",\n            \"random_state\"\n         ]\n      },\n      \"sklearn.linear_model._coordinate_descent\": {\n         \"_alpha_grid\": [\n            \"X\",\n            \"y\",\n            \"Xy\",\n            \"l1_ratio\",\n            \"fit_intercept\",\n            \"eps\",\n            \"n_alphas\",\n            \"normalize\",\n            \"copy_X\"\n         ],\n         \"_path_residuals\": [\n            \"X\",\n            \"y\",\n            \"train\",\n            \"test\",\n            \"path\",\n            \"path_params\",\n            \"alphas\",\n            \"l1_ratio\",\n            \"X_order\",\n            \"dtype\"\n         ],\n         \"enet_path\": [\n            \"X\",\n            \"y\",\n            \"l1_ratio\",\n            \"eps\",\n            \"n_alphas\",\n            \"alphas\",\n            \"precompute\",\n            \"Xy\",\n            \"copy_X\",\n            \"coef_init\",\n            \"verbose\",\n            \"return_n_iter\",\n            \"positive\",\n            \"check_input\"\n         ],\n         \"lasso_path\": [\n            \"X\",\n            \"y\",\n            \"eps\",\n            \"n_alphas\",\n            \"alphas\",\n            \"precompute\",\n            \"Xy\",\n            \"copy_X\",\n            \"coef_init\",\n            \"verbose\",\n            \"return_n_iter\",\n            \"positive\"\n         ]\n      },\n      \"sklearn.linear_model._huber\": {\n         \"_huber_loss_and_gradient\": [\n            \"w\",\n            \"X\",\n            \"y\",\n            \"epsilon\",\n            \"alpha\",\n            \"sample_weight\"\n         ]\n      },\n      \"sklearn.linear_model._least_angle\": {\n         \"_check_copy_and_writeable\": [\n            \"array\",\n            \"copy\"\n         ],\n         \"_lars_path_residues\": [\n            \"X_train\",\n            \"y_train\",\n            \"X_test\",\n            \"y_test\",\n            \"Gram\",\n            \"copy\",\n            \"method\",\n            \"verbose\",\n            \"fit_intercept\",\n            \"normalize\",\n            \"max_iter\",\n            \"eps\",\n            \"positive\"\n         ],\n         \"_lars_path_solver\": [\n            \"X\",\n            \"y\",\n            \"Xy\",\n            \"Gram\",\n            \"n_samples\",\n            \"max_iter\",\n            \"alpha_min\",\n            \"method\",\n            \"copy_X\",\n            \"eps\",\n            \"copy_Gram\",\n            \"verbose\",\n            \"return_path\",\n            \"return_n_iter\",\n            \"positive\"\n         ],\n         \"lars_path\": [\n            \"X\",\n            \"y\",\n            \"Xy\",\n            \"Gram\",\n            \"max_iter\",\n            \"alpha_min\",\n            \"method\",\n            \"copy_X\",\n            \"eps\",\n            \"copy_Gram\",\n            \"verbose\",\n            \"return_path\",\n            \"return_n_iter\",\n            \"positive\"\n         ],\n         \"lars_path_gram\": [\n            \"Xy\",\n            \"Gram\",\n            \"n_samples\",\n            \"max_iter\",\n            \"alpha_min\",\n            \"method\",\n            \"copy_X\",\n            \"eps\",\n            \"copy_Gram\",\n            \"verbose\",\n            \"return_path\",\n            \"return_n_iter\",\n            \"positive\"\n         ]\n      },\n      \"sklearn.linear_model._logistic\": {\n         \"_check_multi_class\": [\n            \"multi_class\",\n            \"solver\",\n            \"n_classes\"\n         ],\n         \"_check_solver\": [\n            \"solver\",\n            \"penalty\",\n            \"dual\"\n         ],\n         \"_intercept_dot\": [\n            \"w\",\n            \"X\",\n            \"y\"\n         ],\n         \"_log_reg_scoring_path\": [\n            \"X\",\n            \"y\",\n            \"train\",\n            \"test\",\n            \"pos_class\",\n            \"Cs\",\n            \"scoring\",\n            \"fit_intercept\",\n            \"max_iter\",\n            \"tol\",\n            \"class_weight\",\n            \"verbose\",\n            \"solver\",\n            \"penalty\",\n            \"dual\",\n            \"intercept_scaling\",\n            \"multi_class\",\n            \"random_state\",\n            \"max_squared_sum\",\n            \"sample_weight\",\n            \"l1_ratio\"\n         ],\n         \"_logistic_grad_hess\": [\n            \"w\",\n            \"X\",\n            \"y\",\n            \"alpha\",\n            \"sample_weight\"\n         ],\n         \"_logistic_loss\": [\n            \"w\",\n            \"X\",\n            \"y\",\n            \"alpha\",\n            \"sample_weight\"\n         ],\n         \"_logistic_loss_and_grad\": [\n            \"w\",\n            \"X\",\n            \"y\",\n            \"alpha\",\n            \"sample_weight\"\n         ],\n         \"_logistic_regression_path\": [\n            \"X\",\n            \"y\",\n            \"pos_class\",\n            \"Cs\",\n            \"fit_intercept\",\n            \"max_iter\",\n            \"tol\",\n            \"verbose\",\n            \"solver\",\n            \"coef\",\n            \"class_weight\",\n            \"dual\",\n            \"penalty\",\n            \"intercept_scaling\",\n            \"multi_class\",\n            \"random_state\",\n            \"check_input\",\n            \"max_squared_sum\",\n            \"sample_weight\",\n            \"l1_ratio\"\n         ],\n         \"_multinomial_grad_hess\": [\n            \"w\",\n            \"X\",\n            \"Y\",\n            \"alpha\",\n            \"sample_weight\"\n         ],\n         \"_multinomial_loss\": [\n            \"w\",\n            \"X\",\n            \"Y\",\n            \"alpha\",\n            \"sample_weight\"\n         ],\n         \"_multinomial_loss_grad\": [\n            \"w\",\n            \"X\",\n            \"Y\",\n            \"alpha\",\n            \"sample_weight\"\n         ],\n         \"logistic_regression_path\": [\n            \"X\",\n            \"y\",\n            \"pos_class\",\n            \"Cs\",\n            \"fit_intercept\",\n            \"max_iter\",\n            \"tol\",\n            \"verbose\",\n            \"solver\",\n            \"coef\",\n            \"class_weight\",\n            \"dual\",\n            \"penalty\",\n            \"intercept_scaling\",\n            \"multi_class\",\n            \"random_state\",\n            \"check_input\",\n            \"max_squared_sum\",\n            \"sample_weight\",\n            \"l1_ratio\"\n         ]\n      },\n      \"sklearn.linear_model._omp\": {\n         \"_cholesky_omp\": [\n            \"X\",\n            \"y\",\n            \"n_nonzero_coefs\",\n            \"tol\",\n            \"copy_X\",\n            \"return_path\"\n         ],\n         \"_gram_omp\": [\n            \"Gram\",\n            \"Xy\",\n            \"n_nonzero_coefs\",\n            \"tol_0\",\n            \"tol\",\n            \"copy_Gram\",\n            \"copy_Xy\",\n            \"return_path\"\n         ],\n         \"_omp_path_residues\": [\n            \"X_train\",\n            \"y_train\",\n            \"X_test\",\n            \"y_test\",\n            \"copy\",\n            \"fit_intercept\",\n            \"normalize\",\n            \"max_iter\"\n         ],\n         \"orthogonal_mp\": [\n            \"X\",\n            \"y\",\n            \"n_nonzero_coefs\",\n            \"tol\",\n            \"precompute\",\n            \"copy_X\",\n            \"return_path\",\n            \"return_n_iter\"\n         ],\n         \"orthogonal_mp_gram\": [\n            \"Gram\",\n            \"Xy\",\n            \"n_nonzero_coefs\",\n            \"tol\",\n            \"norms_squared\",\n            \"copy_Gram\",\n            \"copy_Xy\",\n            \"return_path\",\n            \"return_n_iter\"\n         ]\n      },\n      \"sklearn.linear_model._ransac\": {\n         \"_dynamic_max_trials\": [\n            \"n_inliers\",\n            \"n_samples\",\n            \"min_samples\",\n            \"probability\"\n         ]\n      },\n      \"sklearn.linear_model._ridge\": {\n         \"_check_gcv_mode\": [\n            \"X\",\n            \"gcv_mode\"\n         ],\n         \"_find_smallest_angle\": [\n            \"query\",\n            \"vectors\"\n         ],\n         \"_get_valid_accept_sparse\": [\n            \"is_X_sparse\",\n            \"solver\"\n         ],\n         \"_ridge_regression\": [\n            \"X\",\n            \"y\",\n            \"alpha\",\n            \"sample_weight\",\n            \"solver\",\n            \"max_iter\",\n            \"tol\",\n            \"verbose\",\n            \"random_state\",\n            \"return_n_iter\",\n            \"return_intercept\",\n            \"X_scale\",\n            \"X_offset\",\n            \"check_input\"\n         ],\n         \"_solve_cholesky\": [\n            \"X\",\n            \"y\",\n            \"alpha\"\n         ],\n         \"_solve_cholesky_kernel\": [\n            \"K\",\n            \"y\",\n            \"alpha\",\n            \"sample_weight\",\n            \"copy\"\n         ],\n         \"_solve_lsqr\": [\n            \"X\",\n            \"y\",\n            \"alpha\",\n            \"max_iter\",\n            \"tol\"\n         ],\n         \"_solve_sparse_cg\": [\n            \"X\",\n            \"y\",\n            \"alpha\",\n            \"max_iter\",\n            \"tol\",\n            \"verbose\",\n            \"X_offset\",\n            \"X_scale\"\n         ],\n         \"_solve_svd\": [\n            \"X\",\n            \"y\",\n            \"alpha\"\n         ],\n         \"ridge_regression\": [\n            \"X\",\n            \"y\",\n            \"alpha\",\n            \"sample_weight\",\n            \"solver\",\n            \"max_iter\",\n            \"tol\",\n            \"verbose\",\n            \"random_state\",\n            \"return_n_iter\",\n            \"return_intercept\",\n            \"check_input\"\n         ]\n      },\n      \"sklearn.linear_model._sag\": {\n         \"get_auto_step_size\": [\n            \"max_squared_sum\",\n            \"alpha_scaled\",\n            \"loss\",\n            \"fit_intercept\",\n            \"n_samples\",\n            \"is_saga\"\n         ],\n         \"sag_solver\": [\n            \"X\",\n            \"y\",\n            \"sample_weight\",\n            \"loss\",\n            \"alpha\",\n            \"beta\",\n            \"max_iter\",\n            \"tol\",\n            \"verbose\",\n            \"random_state\",\n            \"check_input\",\n            \"max_squared_sum\",\n            \"warm_start_mem\",\n            \"is_saga\"\n         ]\n      },\n      \"sklearn.linear_model._stochastic_gradient\": {\n         \"_prepare_fit_binary\": [\n            \"est\",\n            \"y\",\n            \"i\"\n         ],\n         \"fit_binary\": [\n            \"est\",\n            \"i\",\n            \"X\",\n            \"y\",\n            \"alpha\",\n            \"C\",\n            \"learning_rate\",\n            \"max_iter\",\n            \"pos_weight\",\n            \"neg_weight\",\n            \"sample_weight\",\n            \"validation_mask\",\n            \"random_state\"\n         ]\n      },\n      \"sklearn.linear_model._theil_sen\": {\n         \"_breakdown_point\": [\n            \"n_samples\",\n            \"n_subsamples\"\n         ],\n         \"_lstsq\": [\n            \"X\",\n            \"y\",\n            \"indices\",\n            \"fit_intercept\"\n         ],\n         \"_modified_weiszfeld_step\": [\n            \"X\",\n            \"x_old\"\n         ],\n         \"_spatial_median\": [\n            \"X\",\n            \"max_iter\",\n            \"tol\"\n         ]\n      },\n      \"sklearn.linear_model.base\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.linear_model.bayes\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.linear_model.cd_fast\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.linear_model.coordinate_descent\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.linear_model.huber\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.linear_model.least_angle\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.linear_model.logistic\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.linear_model.omp\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.linear_model.passive_aggressive\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.linear_model.perceptron\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.linear_model.ransac\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.linear_model.ridge\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.linear_model.sag\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.linear_model.sag_fast\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.linear_model.setup\": {\n         \"configuration\": [\n            \"parent_package\",\n            \"top_path\"\n         ]\n      },\n      \"sklearn.linear_model.sgd_fast\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.linear_model.stochastic_gradient\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.linear_model.tests.test_base\": {\n         \"test_csr_preprocess_data\": [],\n         \"test_dtype_preprocess_data\": [],\n         \"test_fit_intercept\": [],\n         \"test_fused_types_make_dataset\": [],\n         \"test_linear_regression\": [],\n         \"test_linear_regression_multiple_outcome\": [\n            \"random_state\"\n         ],\n         \"test_linear_regression_sample_weights\": [],\n         \"test_linear_regression_sparse\": [\n            \"random_state\"\n         ],\n         \"test_linear_regression_sparse_equal_dense\": [\n            \"normalize\",\n            \"fit_intercept\"\n         ],\n         \"test_linear_regression_sparse_multiple_outcome\": [\n            \"random_state\"\n         ],\n         \"test_preprocess_copy_data_no_checks\": [\n            \"is_sparse\",\n            \"to_copy\"\n         ],\n         \"test_preprocess_data\": [],\n         \"test_preprocess_data_multioutput\": [],\n         \"test_preprocess_data_weighted\": [],\n         \"test_raises_value_error_if_sample_weights_greater_than_1d\": [],\n         \"test_rescale_data\": [],\n         \"test_sparse_preprocess_data_with_return_mean\": []\n      },\n      \"sklearn.linear_model.tests.test_bayes\": {\n         \"test_ard_accuracy_on_easy_problem\": [],\n         \"test_bayesian_initial_params\": [],\n         \"test_bayesian_ridge_parameter\": [],\n         \"test_bayesian_ridge_score_values\": [],\n         \"test_bayesian_ridge_scores\": [],\n         \"test_bayesian_sample_weights\": [],\n         \"test_n_iter\": [],\n         \"test_prediction_bayesian_ridge_ard_with_constant_input\": [],\n         \"test_return_std\": [],\n         \"test_std_bayesian_ridge_ard_with_constant_input\": [],\n         \"test_toy_ard_object\": [],\n         \"test_toy_bayesian_ridge_object\": [],\n         \"test_update_of_sigma_in_ard\": []\n      },\n      \"sklearn.linear_model.tests.test_coordinate_descent\": {\n         \"build_dataset\": [\n            \"n_samples\",\n            \"n_features\",\n            \"n_informative_features\",\n            \"n_targets\"\n         ],\n         \"test_1d_multioutput_enet_and_multitask_enet_cv\": [],\n         \"test_1d_multioutput_lasso_and_multitask_lasso_cv\": [],\n         \"test_check_input_false\": [],\n         \"test_coef_shape_not_zero\": [],\n         \"test_convergence_warnings\": [],\n         \"test_enet_coordinate_descent\": [\n            \"klass\",\n            \"n_classes\",\n            \"kwargs\"\n         ],\n         \"test_enet_copy_X_False_check_input_False\": [],\n         \"test_enet_copy_X_True\": [\n            \"check_input\"\n         ],\n         \"test_enet_cv_positive_constraint\": [],\n         \"test_enet_float_precision\": [],\n         \"test_enet_l1_ratio\": [],\n         \"test_enet_multitarget\": [],\n         \"test_enet_path\": [],\n         \"test_enet_path_positive\": [],\n         \"test_enet_positive_constraint\": [],\n         \"test_enet_toy\": [],\n         \"test_lassoCV_does_not_set_precompute\": [\n            \"monkeypatch\",\n            \"precompute\",\n            \"inner_precompute\"\n         ],\n         \"test_lasso_alpha_warning\": [],\n         \"test_lasso_cv\": [],\n         \"test_lasso_cv_positive_constraint\": [],\n         \"test_lasso_cv_with_some_model_selection\": [],\n         \"test_lasso_non_float_y\": [\n            \"model\"\n         ],\n         \"test_lasso_path_return_models_vs_new_return_gives_same_coefficients\": [],\n         \"test_lasso_positive_constraint\": [],\n         \"test_lasso_readonly_data\": [],\n         \"test_lasso_toy\": [],\n         \"test_lasso_zero\": [],\n         \"test_multi_task_lasso_and_enet\": [],\n         \"test_multi_task_lasso_cv_dtype\": [],\n         \"test_multi_task_lasso_readonly_data\": [],\n         \"test_multioutput_enetcv_error\": [],\n         \"test_multitask_enet_and_lasso_cv\": [],\n         \"test_overrided_gram_matrix\": [],\n         \"test_path_parameters\": [],\n         \"test_precompute_invalid_argument\": [],\n         \"test_random_descent\": [],\n         \"test_sparse_dense_descent_paths\": [],\n         \"test_sparse_input_convergence_warning\": [],\n         \"test_sparse_input_dtype_enet_and_lassocv\": [],\n         \"test_uniform_targets\": [],\n         \"test_warm_start\": [],\n         \"test_warm_start_convergence\": [],\n         \"test_warm_start_convergence_with_regularizer_decrement\": [],\n         \"test_warm_start_multitask_lasso\": []\n      },\n      \"sklearn.linear_model.tests.test_huber\": {\n         \"make_regression_with_outliers\": [\n            \"n_samples\",\n            \"n_features\"\n         ],\n         \"test_huber_and_sgd_same_results\": [],\n         \"test_huber_better_r2_score\": [],\n         \"test_huber_bool\": [],\n         \"test_huber_equals_lr_for_high_epsilon\": [],\n         \"test_huber_gradient\": [],\n         \"test_huber_max_iter\": [],\n         \"test_huber_sample_weights\": [],\n         \"test_huber_scaling_invariant\": [],\n         \"test_huber_sparse\": [],\n         \"test_huber_warm_start\": []\n      },\n      \"sklearn.linear_model.tests.test_least_angle\": {\n         \"_assert_same_lars_path_result\": [\n            \"output1\",\n            \"output2\"\n         ],\n         \"test_all_precomputed\": [],\n         \"test_collinearity\": [],\n         \"test_estimatorclasses_positive_constraint\": [],\n         \"test_lars_add_features\": [],\n         \"test_lars_cv\": [],\n         \"test_lars_cv_max_iter\": [\n            \"recwarn\"\n         ],\n         \"test_lars_lstsq\": [],\n         \"test_lars_n_nonzero_coefs\": [\n            \"verbose\"\n         ],\n         \"test_lars_path_gram_equivalent\": [\n            \"method\",\n            \"return_path\"\n         ],\n         \"test_lars_path_positive_constraint\": [],\n         \"test_lars_path_readonly_data\": [],\n         \"test_lars_precompute\": [\n            \"classifier\"\n         ],\n         \"test_lasso_gives_lstsq_solution\": [],\n         \"test_lasso_lars_copyX_behaviour\": [\n            \"copy_X\"\n         ],\n         \"test_lasso_lars_fit_copyX_behaviour\": [\n            \"copy_X\"\n         ],\n         \"test_lasso_lars_ic\": [],\n         \"test_lasso_lars_path_length\": [],\n         \"test_lasso_lars_vs_R_implementation\": [],\n         \"test_lasso_lars_vs_lasso_cd\": [],\n         \"test_lasso_lars_vs_lasso_cd_early_stopping\": [],\n         \"test_lasso_lars_vs_lasso_cd_ill_conditioned\": [],\n         \"test_lasso_lars_vs_lasso_cd_ill_conditioned2\": [],\n         \"test_lasso_lars_vs_lasso_cd_positive\": [],\n         \"test_multitarget\": [],\n         \"test_no_path\": [],\n         \"test_no_path_all_precomputed\": [],\n         \"test_no_path_precomputed\": [],\n         \"test_rank_deficient_design\": [],\n         \"test_simple\": [],\n         \"test_simple_precomputed\": [],\n         \"test_singular_matrix\": [],\n         \"test_x_none_gram_none_raises_value_error\": []\n      },\n      \"sklearn.linear_model.tests.test_logistic\": {\n         \"_compute_class_weight_dictionary\": [\n            \"y\"\n         ],\n         \"check_predictions\": [\n            \"clf\",\n            \"X\",\n            \"y\"\n         ],\n         \"test_LogisticRegressionCV_GridSearchCV_elastic_net\": [\n            \"multi_class\"\n         ],\n         \"test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr\": [],\n         \"test_LogisticRegressionCV_elasticnet_attribute_shapes\": [],\n         \"test_LogisticRegressionCV_no_refit\": [\n            \"penalty\",\n            \"multi_class\"\n         ],\n         \"test_LogisticRegression_elastic_net_objective\": [\n            \"C\",\n            \"l1_ratio\"\n         ],\n         \"test_check_solver_option\": [\n            \"LR\"\n         ],\n         \"test_consistency_path\": [],\n         \"test_dtype_match\": [\n            \"solver\",\n            \"multi_class\",\n            \"fit_intercept\"\n         ],\n         \"test_elastic_net_coeffs\": [],\n         \"test_elastic_net_l1_l2_equivalence\": [\n            \"C\",\n            \"penalty\",\n            \"l1_ratio\"\n         ],\n         \"test_elastic_net_versus_sgd\": [\n            \"C\",\n            \"l1_ratio\"\n         ],\n         \"test_elastic_net_vs_l1_l2\": [\n            \"C\"\n         ],\n         \"test_error\": [],\n         \"test_inconsistent_input\": [],\n         \"test_intercept_logistic_helper\": [],\n         \"test_l1_ratio_param\": [\n            \"l1_ratio\"\n         ],\n         \"test_l1_ratios_param\": [\n            \"l1_ratios\"\n         ],\n         \"test_liblinear_decision_function_zero\": [],\n         \"test_liblinear_dual_random_state\": [],\n         \"test_liblinear_logregcv_sparse\": [],\n         \"test_logistic_cv\": [],\n         \"test_logistic_cv_mock_scorer\": [],\n         \"test_logistic_cv_multinomial_score\": [\n            \"scoring\",\n            \"multiclass_agg_list\"\n         ],\n         \"test_logistic_cv_score_does_not_warn_by_default\": [],\n         \"test_logistic_cv_sparse\": [],\n         \"test_logistic_grad_hess\": [],\n         \"test_logistic_loss_and_grad\": [],\n         \"test_logistic_regression_class_weights\": [],\n         \"test_logistic_regression_cv_refit\": [\n            \"random_seed\",\n            \"penalty\"\n         ],\n         \"test_logistic_regression_multi_class_auto\": [\n            \"est\",\n            \"solver\"\n         ],\n         \"test_logistic_regression_multinomial\": [],\n         \"test_logistic_regression_path_coefs_multinomial\": [],\n         \"test_logistic_regression_path_convergence_fail\": [],\n         \"test_logistic_regression_path_deprecation\": [],\n         \"test_logistic_regression_sample_weights\": [],\n         \"test_logistic_regression_solvers\": [],\n         \"test_logistic_regression_solvers_multiclass\": [],\n         \"test_logistic_regressioncv_class_weights\": [],\n         \"test_logisticregression_liblinear_sample_weight\": [\n            \"params\"\n         ],\n         \"test_logreg_intercept_scaling\": [],\n         \"test_logreg_intercept_scaling_zero\": [],\n         \"test_logreg_l1\": [],\n         \"test_logreg_l1_sparse_data\": [],\n         \"test_logreg_predict_proba_multinomial\": [],\n         \"test_lr_liblinear_warning\": [],\n         \"test_max_iter\": [],\n         \"test_multinomial_binary\": [\n            \"solver\"\n         ],\n         \"test_multinomial_binary_probabilities\": [],\n         \"test_multinomial_grad_hess\": [],\n         \"test_multinomial_logistic_regression_string_inputs\": [],\n         \"test_multinomial_validation\": [\n            \"solver\"\n         ],\n         \"test_n_iter\": [\n            \"solver\"\n         ],\n         \"test_nan\": [],\n         \"test_ovr_multinomial_iris\": [],\n         \"test_penalty_none\": [\n            \"solver\"\n         ],\n         \"test_predict_2_classes\": [],\n         \"test_predict_3_classes\": [],\n         \"test_predict_iris\": [],\n         \"test_saga_sparse\": [],\n         \"test_saga_vs_liblinear\": [],\n         \"test_scores_attribute_layout_elasticnet\": [],\n         \"test_sparsify\": [],\n         \"test_warm_start\": [\n            \"solver\",\n            \"warm_start\",\n            \"fit_intercept\",\n            \"multi_class\"\n         ],\n         \"test_warm_start_converge_LR\": [],\n         \"test_write_parameters\": []\n      },\n      \"sklearn.linear_model.tests.test_omp\": {\n         \"test_bad_input\": [],\n         \"test_correct_shapes\": [],\n         \"test_correct_shapes_gram\": [],\n         \"test_estimator\": [],\n         \"test_identical_regressors\": [],\n         \"test_n_nonzero_coefs\": [],\n         \"test_no_atoms\": [],\n         \"test_omp_cv\": [],\n         \"test_omp_path\": [],\n         \"test_omp_reaches_least_squares\": [],\n         \"test_omp_return_path_prop_with_gram\": [],\n         \"test_orthogonal_mp_gram_readonly\": [],\n         \"test_perfect_signal_recovery\": [],\n         \"test_swapped_regressors\": [],\n         \"test_tol\": [],\n         \"test_unreachable_accuracy\": [],\n         \"test_with_without_gram\": [],\n         \"test_with_without_gram_tol\": []\n      },\n      \"sklearn.linear_model.tests.test_passive_aggressive\": {\n         \"test_class_weights\": [],\n         \"test_classifier_accuracy\": [],\n         \"test_classifier_correctness\": [\n            \"loss\"\n         ],\n         \"test_classifier_partial_fit\": [],\n         \"test_classifier_refit\": [],\n         \"test_classifier_undefined_methods\": [],\n         \"test_equal_class_weight\": [],\n         \"test_partial_fit_weight_class_balanced\": [],\n         \"test_regressor_correctness\": [\n            \"loss\"\n         ],\n         \"test_regressor_mse\": [],\n         \"test_regressor_partial_fit\": [],\n         \"test_regressor_undefined_methods\": [],\n         \"test_wrong_class_weight_format\": [],\n         \"test_wrong_class_weight_label\": []\n      },\n      \"sklearn.linear_model.tests.test_perceptron\": {\n         \"test_perceptron_accuracy\": [],\n         \"test_perceptron_correctness\": [],\n         \"test_undefined_methods\": []\n      },\n      \"sklearn.linear_model.tests.test_ransac\": {\n         \"test_ransac_default_residual_threshold\": [],\n         \"test_ransac_dynamic_max_trials\": [],\n         \"test_ransac_exceed_max_skips\": [],\n         \"test_ransac_fit_sample_weight\": [],\n         \"test_ransac_inliers_outliers\": [],\n         \"test_ransac_is_data_valid\": [],\n         \"test_ransac_is_model_valid\": [],\n         \"test_ransac_max_trials\": [],\n         \"test_ransac_min_n_samples\": [],\n         \"test_ransac_multi_dimensional_targets\": [],\n         \"test_ransac_no_valid_data\": [],\n         \"test_ransac_no_valid_model\": [],\n         \"test_ransac_none_estimator\": [],\n         \"test_ransac_predict\": [],\n         \"test_ransac_resid_thresh_no_inliers\": [],\n         \"test_ransac_residual_loss\": [],\n         \"test_ransac_score\": [],\n         \"test_ransac_sparse_coo\": [],\n         \"test_ransac_sparse_csc\": [],\n         \"test_ransac_sparse_csr\": [],\n         \"test_ransac_stop_n_inliers\": [],\n         \"test_ransac_stop_score\": [],\n         \"test_ransac_warn_exceed_max_skips\": []\n      },\n      \"sklearn.linear_model.tests.test_ridge\": {\n         \"_make_sparse_offset_regression\": [\n            \"n_samples\",\n            \"n_features\",\n            \"proportion_nonzero\",\n            \"n_informative\",\n            \"n_targets\",\n            \"bias\",\n            \"X_offset\",\n            \"noise\",\n            \"shuffle\",\n            \"coef\",\n            \"random_state\"\n         ],\n         \"_test_multi_ridge_diabetes\": [\n            \"filter_\"\n         ],\n         \"_test_ridge_classifiers\": [\n            \"filter_\"\n         ],\n         \"_test_ridge_cv\": [\n            \"filter_\"\n         ],\n         \"_test_ridge_cv_normalize\": [\n            \"filter_\"\n         ],\n         \"_test_ridge_diabetes\": [\n            \"filter_\"\n         ],\n         \"_test_ridge_loo\": [\n            \"filter_\"\n         ],\n         \"_test_tolerance\": [\n            \"filter_\"\n         ],\n         \"check_dense_sparse\": [\n            \"test_func\"\n         ],\n         \"test_X_CenterStackOp\": [\n            \"n_col\"\n         ],\n         \"test_check_gcv_mode_choice\": [\n            \"sparse\",\n            \"mode\",\n            \"mode_n_greater_than_p\",\n            \"mode_p_greater_than_n\"\n         ],\n         \"test_check_gcv_mode_error\": [\n            \"mode\"\n         ],\n         \"test_class_weight_vs_sample_weight\": [\n            \"reg\"\n         ],\n         \"test_class_weights\": [],\n         \"test_class_weights_cv\": [],\n         \"test_compute_covariance\": [\n            \"shape\",\n            \"uniform_weights\"\n         ],\n         \"test_compute_gram\": [\n            \"shape\",\n            \"uniform_weights\"\n         ],\n         \"test_dense_sparse\": [\n            \"test_func\"\n         ],\n         \"test_dtype_match\": [\n            \"solver\"\n         ],\n         \"test_dtype_match_cholesky\": [],\n         \"test_n_iter\": [],\n         \"test_primal_dual_relationship\": [],\n         \"test_raises_value_error_if_sample_weights_greater_than_1d\": [],\n         \"test_raises_value_error_if_solver_not_supported\": [],\n         \"test_ridge\": [\n            \"solver\"\n         ],\n         \"test_ridge_classifier_cv_store_cv_values\": [],\n         \"test_ridge_classifier_no_support_multilabel\": [],\n         \"test_ridge_fit_intercept_sparse\": [\n            \"solver\"\n         ],\n         \"test_ridge_fit_intercept_sparse_error\": [\n            \"solver\"\n         ],\n         \"test_ridge_fit_intercept_sparse_sag\": [],\n         \"test_ridge_gcv_sample_weights\": [\n            \"gcv_mode\",\n            \"X_constructor\",\n            \"fit_intercept\",\n            \"n_features\",\n            \"y_shape\",\n            \"noise\"\n         ],\n         \"test_ridge_gcv_vs_ridge_loo_cv\": [\n            \"gcv_mode\",\n            \"X_constructor\",\n            \"X_shape\",\n            \"y_shape\",\n            \"fit_intercept\",\n            \"normalize\",\n            \"noise\"\n         ],\n         \"test_ridge_individual_penalties\": [],\n         \"test_ridge_intercept\": [],\n         \"test_ridge_loo_cv_asym_scoring\": [],\n         \"test_ridge_regression_check_arguments_validity\": [\n            \"return_intercept\",\n            \"sample_weight\",\n            \"arr_type\",\n            \"solver\"\n         ],\n         \"test_ridge_regression_convergence_fail\": [],\n         \"test_ridge_regression_dtype_stability\": [\n            \"solver\",\n            \"seed\"\n         ],\n         \"test_ridge_regression_sample_weights\": [],\n         \"test_ridge_sag_with_X_fortran\": [],\n         \"test_ridge_sample_weights\": [],\n         \"test_ridge_shapes\": [],\n         \"test_ridge_singular\": [],\n         \"test_ridge_sparse_svd\": [],\n         \"test_ridge_vs_lstsq\": [],\n         \"test_ridgecv_int_alphas\": [],\n         \"test_ridgecv_negative_alphas\": [],\n         \"test_ridgecv_sample_weight\": [],\n         \"test_ridgecv_store_cv_values\": [],\n         \"test_solver_consistency\": [\n            \"solver\",\n            \"proportion_nonzero\",\n            \"n_samples\",\n            \"dtype\",\n            \"sparse_X\",\n            \"seed\"\n         ],\n         \"test_sparse_cg_max_iter\": [],\n         \"test_sparse_design_with_sample_weights\": [],\n         \"test_toy_ridge_object\": []\n      },\n      \"sklearn.linear_model.tests.test_sag\": {\n         \"get_pobj\": [\n            \"w\",\n            \"alpha\",\n            \"myX\",\n            \"myy\",\n            \"loss\"\n         ],\n         \"get_step_size\": [\n            \"X\",\n            \"alpha\",\n            \"fit_intercept\",\n            \"classification\"\n         ],\n         \"log_dloss\": [\n            \"p\",\n            \"y\"\n         ],\n         \"log_loss\": [\n            \"p\",\n            \"y\"\n         ],\n         \"sag\": [\n            \"X\",\n            \"y\",\n            \"step_size\",\n            \"alpha\",\n            \"n_iter\",\n            \"dloss\",\n            \"sparse\",\n            \"sample_weight\",\n            \"fit_intercept\",\n            \"saga\"\n         ],\n         \"sag_sparse\": [\n            \"X\",\n            \"y\",\n            \"step_size\",\n            \"alpha\",\n            \"n_iter\",\n            \"dloss\",\n            \"sample_weight\",\n            \"sparse\",\n            \"fit_intercept\",\n            \"saga\",\n            \"random_state\"\n         ],\n         \"squared_dloss\": [\n            \"p\",\n            \"y\"\n         ],\n         \"squared_loss\": [\n            \"p\",\n            \"y\"\n         ],\n         \"test_binary_classifier_class_weight\": [],\n         \"test_classifier_matching\": [],\n         \"test_classifier_results\": [],\n         \"test_classifier_single_class\": [],\n         \"test_get_auto_step_size\": [],\n         \"test_multiclass_classifier_class_weight\": [],\n         \"test_multinomial_loss\": [],\n         \"test_multinomial_loss_ground_truth\": [],\n         \"test_regressor_matching\": [],\n         \"test_sag_classifier_computed_correctly\": [],\n         \"test_sag_classifier_raises_error\": [\n            \"solver\"\n         ],\n         \"test_sag_multiclass_computed_correctly\": [],\n         \"test_sag_pobj_matches_logistic_regression\": [],\n         \"test_sag_pobj_matches_ridge_regression\": [],\n         \"test_sag_regressor\": [],\n         \"test_sag_regressor_computed_correctly\": [],\n         \"test_step_size_alpha_error\": []\n      },\n      \"sklearn.linear_model.tests.test_sgd\": {\n         \"SGDClassifier\": [],\n         \"SGDRegressor\": [],\n         \"SparseSGDClassifier\": [],\n         \"SparseSGDRegressor\": [],\n         \"_test_gradient_common\": [\n            \"loss_function\",\n            \"cases\"\n         ],\n         \"_test_warm_start\": [\n            \"klass\",\n            \"X\",\n            \"Y\",\n            \"lr\"\n         ],\n         \"_update_kwargs\": [\n            \"kwargs\"\n         ],\n         \"asgd\": [\n            \"klass\",\n            \"X\",\n            \"y\",\n            \"eta\",\n            \"alpha\",\n            \"weight_init\",\n            \"intercept_init\"\n         ],\n         \"test_SGDClassifier_fit_for_all_backends\": [\n            \"backend\"\n         ],\n         \"test_adaptive_longer_than_constant\": [\n            \"klass\"\n         ],\n         \"test_argument_coef\": [\n            \"klass\"\n         ],\n         \"test_average_binary_computed_correctly\": [\n            \"klass\"\n         ],\n         \"test_average_sparse\": [\n            \"klass\"\n         ],\n         \"test_balanced_weight\": [\n            \"klass\"\n         ],\n         \"test_class_weights\": [\n            \"klass\"\n         ],\n         \"test_clone\": [\n            \"klass\"\n         ],\n         \"test_early_stopping\": [\n            \"klass\"\n         ],\n         \"test_elasticnet_convergence\": [\n            \"klass\"\n         ],\n         \"test_equal_class_weight\": [\n            \"klass\"\n         ],\n         \"test_fit_then_partial_fit\": [\n            \"klass\"\n         ],\n         \"test_gradient_epsilon_insensitive\": [],\n         \"test_gradient_hinge\": [],\n         \"test_gradient_huber\": [],\n         \"test_gradient_log\": [],\n         \"test_gradient_modified_huber\": [],\n         \"test_gradient_squared_epsilon_insensitive\": [],\n         \"test_gradient_squared_hinge\": [],\n         \"test_gradient_squared_loss\": [],\n         \"test_input_format\": [\n            \"klass\"\n         ],\n         \"test_l1_ratio\": [],\n         \"test_large_regularization\": [\n            \"penalty\"\n         ],\n         \"test_late_onset_averaging_not_reached\": [\n            \"klass\"\n         ],\n         \"test_late_onset_averaging_reached\": [\n            \"klass\"\n         ],\n         \"test_loss_function_epsilon\": [\n            \"klass\"\n         ],\n         \"test_multi_core_gridsearch_and_early_stopping\": [],\n         \"test_multi_thread_multi_class_and_early_stopping\": [],\n         \"test_multiple_fit\": [\n            \"klass\"\n         ],\n         \"test_n_iter_no_change\": [\n            \"klass\"\n         ],\n         \"test_not_enough_sample_for_early_stopping\": [\n            \"klass\"\n         ],\n         \"test_numerical_stability_large_gradient\": [],\n         \"test_partial_fit\": [\n            \"klass\"\n         ],\n         \"test_partial_fit_binary\": [\n            \"klass\"\n         ],\n         \"test_partial_fit_equal_fit\": [\n            \"klass\",\n            \"lr\"\n         ],\n         \"test_partial_fit_equal_fit_classif\": [\n            \"klass\",\n            \"lr\"\n         ],\n         \"test_partial_fit_exception\": [\n            \"klass\"\n         ],\n         \"test_partial_fit_multiclass\": [\n            \"klass\"\n         ],\n         \"test_partial_fit_multiclass_average\": [\n            \"klass\"\n         ],\n         \"test_partial_fit_weight_class_balanced\": [\n            \"klass\"\n         ],\n         \"test_plain_has_no_average_attr\": [\n            \"klass\"\n         ],\n         \"test_provide_coef\": [\n            \"klass\"\n         ],\n         \"test_regression_losses\": [\n            \"klass\"\n         ],\n         \"test_sample_weights\": [\n            \"klass\"\n         ],\n         \"test_set_coef_multiclass\": [\n            \"klass\"\n         ],\n         \"test_set_intercept\": [\n            \"klass\"\n         ],\n         \"test_set_intercept_binary\": [\n            \"klass\"\n         ],\n         \"test_set_intercept_to_intercept\": [\n            \"klass\"\n         ],\n         \"test_sgd_at_least_two_labels\": [\n            \"klass\"\n         ],\n         \"test_sgd_averaged_computed_correctly\": [\n            \"klass\"\n         ],\n         \"test_sgd_averaged_partial_fit\": [\n            \"klass\"\n         ],\n         \"test_sgd_bad_alpha\": [\n            \"klass\"\n         ],\n         \"test_sgd_bad_alpha_for_optimal_learning_rate\": [\n            \"klass\"\n         ],\n         \"test_sgd_bad_eta0\": [\n            \"klass\"\n         ],\n         \"test_sgd_bad_l1_ratio\": [\n            \"klass\"\n         ],\n         \"test_sgd_bad_learning_rate_schedule\": [\n            \"klass\"\n         ],\n         \"test_sgd_bad_loss\": [\n            \"klass\"\n         ],\n         \"test_sgd_bad_penalty\": [\n            \"klass\"\n         ],\n         \"test_sgd_clf\": [\n            \"klass\"\n         ],\n         \"test_sgd_early_stopping_param\": [\n            \"klass\"\n         ],\n         \"test_sgd_early_stopping_with_partial_fit\": [\n            \"klass\"\n         ],\n         \"test_sgd_epsilon_insensitive\": [\n            \"klass\"\n         ],\n         \"test_sgd_huber_fit\": [\n            \"klass\"\n         ],\n         \"test_sgd_l1\": [\n            \"klass\"\n         ],\n         \"test_sgd_least_squares_fit\": [\n            \"klass\"\n         ],\n         \"test_sgd_max_iter_param\": [\n            \"klass\"\n         ],\n         \"test_sgd_multiclass\": [\n            \"klass\"\n         ],\n         \"test_sgd_multiclass_average\": [\n            \"klass\"\n         ],\n         \"test_sgd_multiclass_njobs\": [\n            \"klass\"\n         ],\n         \"test_sgd_multiclass_with_init_coef\": [\n            \"klass\"\n         ],\n         \"test_sgd_n_iter_no_change\": [\n            \"klass\"\n         ],\n         \"test_sgd_predict_proba_method_access\": [\n            \"klass\"\n         ],\n         \"test_sgd_proba\": [\n            \"klass\"\n         ],\n         \"test_sgd_reg\": [\n            \"klass\"\n         ],\n         \"test_sgd_shuffle_param\": [\n            \"klass\"\n         ],\n         \"test_sgd_validation_fraction\": [\n            \"klass\"\n         ],\n         \"test_tol_parameter\": [],\n         \"test_underflow_or_overlow\": [],\n         \"test_validation_set_not_used_for_training\": [\n            \"klass\"\n         ],\n         \"test_warm_start\": [\n            \"klass\",\n            \"lr\"\n         ],\n         \"test_warm_start_multiclass\": [\n            \"klass\"\n         ],\n         \"test_weights_multiplied\": [\n            \"klass\"\n         ],\n         \"test_wrong_class_weight_format\": [\n            \"klass\"\n         ],\n         \"test_wrong_class_weight_label\": [\n            \"klass\"\n         ],\n         \"test_wrong_sample_weights\": [\n            \"klass\"\n         ]\n      },\n      \"sklearn.linear_model.tests.test_sparse_coordinate_descent\": {\n         \"_test_sparse_enet_not_as_toy_dataset\": [\n            \"alpha\",\n            \"fit_intercept\",\n            \"positive\"\n         ],\n         \"make_sparse_data\": [\n            \"n_samples\",\n            \"n_features\",\n            \"n_informative\",\n            \"seed\",\n            \"positive\",\n            \"n_targets\"\n         ],\n         \"test_enet_multitarget\": [],\n         \"test_enet_toy_explicit_sparse_input\": [],\n         \"test_enet_toy_list_input\": [],\n         \"test_lasso_zero\": [],\n         \"test_normalize_option\": [],\n         \"test_path_parameters\": [],\n         \"test_same_multiple_output_sparse_dense\": [],\n         \"test_same_output_sparse_dense_lasso_and_enet_cv\": [],\n         \"test_sparse_coef\": [],\n         \"test_sparse_enet_coordinate_descent\": [],\n         \"test_sparse_enet_not_as_toy_dataset\": [],\n         \"test_sparse_lasso_not_as_toy_dataset\": []\n      },\n      \"sklearn.linear_model.tests.test_theil_sen\": {\n         \"gen_toy_problem_1d\": [\n            \"intercept\"\n         ],\n         \"gen_toy_problem_2d\": [],\n         \"gen_toy_problem_4d\": [],\n         \"no_stdout_stderr\": [],\n         \"test_calc_breakdown_point\": [],\n         \"test_checksubparams_n_subsamples_if_less_samples_than_features\": [],\n         \"test_checksubparams_negative_subpopulation\": [],\n         \"test_checksubparams_too_few_subsamples\": [],\n         \"test_checksubparams_too_many_subsamples\": [],\n         \"test_less_samples_than_features\": [],\n         \"test_modweiszfeld_step_1d\": [],\n         \"test_modweiszfeld_step_2d\": [],\n         \"test_spatial_median_1d\": [],\n         \"test_spatial_median_2d\": [],\n         \"test_subpopulation\": [],\n         \"test_subsamples\": [],\n         \"test_theil_sen_1d\": [],\n         \"test_theil_sen_1d_no_intercept\": [],\n         \"test_theil_sen_2d\": [],\n         \"test_theil_sen_parallel\": [],\n         \"test_verbosity\": []\n      },\n      \"sklearn.linear_model.theil_sen\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.manifold._locally_linear\": {\n         \"barycenter_kneighbors_graph\": [\n            \"X\",\n            \"n_neighbors\",\n            \"reg\",\n            \"n_jobs\"\n         ],\n         \"barycenter_weights\": [\n            \"X\",\n            \"Z\",\n            \"reg\"\n         ],\n         \"locally_linear_embedding\": [\n            \"X\",\n            \"n_neighbors\",\n            \"n_components\",\n            \"reg\",\n            \"eigen_solver\",\n            \"tol\",\n            \"max_iter\",\n            \"method\",\n            \"hessian_tol\",\n            \"modified_tol\",\n            \"random_state\",\n            \"n_jobs\"\n         ],\n         \"null_space\": [\n            \"M\",\n            \"k\",\n            \"k_skip\",\n            \"eigen_solver\",\n            \"tol\",\n            \"max_iter\",\n            \"random_state\"\n         ]\n      },\n      \"sklearn.manifold._mds\": {\n         \"_smacof_single\": [\n            \"dissimilarities\",\n            \"metric\",\n            \"n_components\",\n            \"init\",\n            \"max_iter\",\n            \"verbose\",\n            \"eps\",\n            \"random_state\"\n         ],\n         \"smacof\": [\n            \"dissimilarities\",\n            \"metric\",\n            \"n_components\",\n            \"init\",\n            \"n_init\",\n            \"n_jobs\",\n            \"max_iter\",\n            \"verbose\",\n            \"eps\",\n            \"random_state\",\n            \"return_n_iter\"\n         ]\n      },\n      \"sklearn.manifold._spectral_embedding\": {\n         \"_graph_connected_component\": [\n            \"graph\",\n            \"node_id\"\n         ],\n         \"_graph_is_connected\": [\n            \"graph\"\n         ],\n         \"_set_diag\": [\n            \"laplacian\",\n            \"value\",\n            \"norm_laplacian\"\n         ],\n         \"spectral_embedding\": [\n            \"adjacency\",\n            \"n_components\",\n            \"eigen_solver\",\n            \"random_state\",\n            \"eigen_tol\",\n            \"norm_laplacian\",\n            \"drop_first\"\n         ]\n      },\n      \"sklearn.manifold._t_sne\": {\n         \"_gradient_descent\": [\n            \"objective\",\n            \"p0\",\n            \"it\",\n            \"n_iter\",\n            \"n_iter_check\",\n            \"n_iter_without_progress\",\n            \"momentum\",\n            \"learning_rate\",\n            \"min_gain\",\n            \"min_grad_norm\",\n            \"verbose\",\n            \"args\",\n            \"kwargs\"\n         ],\n         \"_joint_probabilities\": [\n            \"distances\",\n            \"desired_perplexity\",\n            \"verbose\"\n         ],\n         \"_joint_probabilities_nn\": [\n            \"distances\",\n            \"desired_perplexity\",\n            \"verbose\"\n         ],\n         \"_kl_divergence\": [\n            \"params\",\n            \"P\",\n            \"degrees_of_freedom\",\n            \"n_samples\",\n            \"n_components\",\n            \"skip_num_points\",\n            \"compute_error\"\n         ],\n         \"_kl_divergence_bh\": [\n            \"params\",\n            \"P\",\n            \"degrees_of_freedom\",\n            \"n_samples\",\n            \"n_components\",\n            \"angle\",\n            \"skip_num_points\",\n            \"verbose\",\n            \"compute_error\",\n            \"num_threads\"\n         ],\n         \"trustworthiness\": [\n            \"X\",\n            \"X_embedded\",\n            \"n_neighbors\",\n            \"metric\"\n         ]\n      },\n      \"sklearn.manifold.isomap\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.manifold.locally_linear\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.manifold.mds\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.manifold.setup\": {\n         \"configuration\": [\n            \"parent_package\",\n            \"top_path\"\n         ]\n      },\n      \"sklearn.manifold.spectral_embedding_\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.manifold.t_sne\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.manifold.tests.test_isomap\": {\n         \"test_different_metric\": [],\n         \"test_isomap_clone_bug\": [],\n         \"test_isomap_reconstruction_error\": [],\n         \"test_isomap_simple_grid\": [],\n         \"test_pipeline\": [],\n         \"test_pipeline_with_nearest_neighbors_transformer\": [],\n         \"test_sparse_input\": [],\n         \"test_transform\": []\n      },\n      \"sklearn.manifold.tests.test_locally_linear\": {\n         \"test_barycenter_kneighbors_graph\": [],\n         \"test_integer_input\": [],\n         \"test_lle_init_parameters\": [],\n         \"test_lle_manifold\": [],\n         \"test_lle_simple_grid\": [],\n         \"test_pipeline\": [],\n         \"test_singular_matrix\": []\n      },\n      \"sklearn.manifold.tests.test_mds\": {\n         \"test_MDS\": [],\n         \"test_smacof\": [],\n         \"test_smacof_error\": []\n      },\n      \"sklearn.manifold.tests.test_spectral_embedding\": {\n         \"_check_with_col_sign_flipping\": [\n            \"A\",\n            \"B\",\n            \"tol\"\n         ],\n         \"test_connectivity\": [\n            \"seed\"\n         ],\n         \"test_pipeline_spectral_clustering\": [\n            \"seed\"\n         ],\n         \"test_precomputed_nearest_neighbors_filtering\": [],\n         \"test_sparse_graph_connected_component\": [],\n         \"test_spectral_embedding_amg_solver\": [\n            \"seed\"\n         ],\n         \"test_spectral_embedding_amg_solver_failure\": [\n            \"seed\"\n         ],\n         \"test_spectral_embedding_callable_affinity\": [\n            \"X\",\n            \"seed\"\n         ],\n         \"test_spectral_embedding_deterministic\": [],\n         \"test_spectral_embedding_first_eigen_vector\": [],\n         \"test_spectral_embedding_precomputed_affinity\": [\n            \"X\",\n            \"seed\"\n         ],\n         \"test_spectral_embedding_two_components\": [\n            \"seed\"\n         ],\n         \"test_spectral_embedding_unknown_affinity\": [\n            \"seed\"\n         ],\n         \"test_spectral_embedding_unknown_eigensolver\": [\n            \"seed\"\n         ],\n         \"test_spectral_embedding_unnormalized\": []\n      },\n      \"sklearn.manifold.tests.test_t_sne\": {\n         \"_run_answer_test\": [\n            \"pos_input\",\n            \"pos_output\",\n            \"neighbors\",\n            \"grad_output\",\n            \"verbose\",\n            \"perplexity\",\n            \"skip_num_points\"\n         ],\n         \"assert_uniform_grid\": [\n            \"Y\",\n            \"try_name\"\n         ],\n         \"test_64bit\": [\n            \"method\",\n            \"dt\"\n         ],\n         \"test_accessible_kl_divergence\": [],\n         \"test_angle_out_of_range_checks\": [],\n         \"test_answer_gradient_four_points\": [],\n         \"test_answer_gradient_two_points\": [],\n         \"test_bad_precomputed_distances\": [\n            \"method\",\n            \"D\",\n            \"retype\",\n            \"message_regex\"\n         ],\n         \"test_barnes_hut_angle\": [],\n         \"test_bh_match_exact\": [],\n         \"test_binary_perplexity_stability\": [],\n         \"test_binary_search\": [],\n         \"test_binary_search_neighbors\": [],\n         \"test_chebyshev_metric\": [],\n         \"test_distance_not_available\": [],\n         \"test_early_exaggeration_too_small\": [],\n         \"test_early_exaggeration_used\": [],\n         \"test_exact_no_precomputed_sparse\": [],\n         \"test_fit_csr_matrix\": [\n            \"method\"\n         ],\n         \"test_gradient\": [],\n         \"test_gradient_bh_multithread_match_sequential\": [],\n         \"test_gradient_descent_stops\": [],\n         \"test_high_perplexity_precomputed_sparse_distances\": [],\n         \"test_init_ndarray\": [],\n         \"test_init_ndarray_precomputed\": [],\n         \"test_init_not_available\": [],\n         \"test_kl_divergence_not_nan\": [\n            \"method\"\n         ],\n         \"test_method_not_available\": [],\n         \"test_min_grad_norm\": [],\n         \"test_n_components_range\": [],\n         \"test_n_iter_used\": [],\n         \"test_n_iter_without_progress\": [],\n         \"test_non_positive_computed_distances\": [],\n         \"test_optimization_minimizes_kl_divergence\": [],\n         \"test_pca_initialization_not_compatible_with_precomputed_kernel\": [],\n         \"test_preserve_trustworthiness_approximately\": [\n            \"method\",\n            \"init\"\n         ],\n         \"test_preserve_trustworthiness_approximately_with_precomputed_distances\": [],\n         \"test_reduction_to_one_component\": [],\n         \"test_skip_num_points_gradient\": [],\n         \"test_sparse_precomputed_distance\": [],\n         \"test_too_few_iterations\": [],\n         \"test_trustworthiness\": [],\n         \"test_trustworthiness_not_euclidean_metric\": [],\n         \"test_tsne_n_jobs\": [\n            \"method\"\n         ],\n         \"test_tsne_with_different_distance_metrics\": [],\n         \"test_uniform_grid\": [\n            \"method\"\n         ],\n         \"test_verbose\": []\n      },\n      \"sklearn.metrics._base\": {\n         \"_average_binary_score\": [\n            \"binary_metric\",\n            \"y_true\",\n            \"y_score\",\n            \"average\",\n            \"sample_weight\"\n         ],\n         \"_average_multiclass_ovo_score\": [\n            \"binary_metric\",\n            \"y_true\",\n            \"y_score\",\n            \"average\"\n         ]\n      },\n      \"sklearn.metrics._classification\": {\n         \"_check_set_wise_labels\": [\n            \"y_true\",\n            \"y_pred\",\n            \"average\",\n            \"labels\",\n            \"pos_label\"\n         ],\n         \"_check_targets\": [\n            \"y_true\",\n            \"y_pred\"\n         ],\n         \"_check_zero_division\": [\n            \"zero_division\"\n         ],\n         \"_prf_divide\": [\n            \"numerator\",\n            \"denominator\",\n            \"metric\",\n            \"modifier\",\n            \"average\",\n            \"warn_for\",\n            \"zero_division\"\n         ],\n         \"_warn_prf\": [\n            \"average\",\n            \"modifier\",\n            \"msg_start\",\n            \"result_size\"\n         ],\n         \"_weighted_sum\": [\n            \"sample_score\",\n            \"sample_weight\",\n            \"normalize\"\n         ],\n         \"accuracy_score\": [\n            \"y_true\",\n            \"y_pred\",\n            \"normalize\",\n            \"sample_weight\"\n         ],\n         \"balanced_accuracy_score\": [\n            \"y_true\",\n            \"y_pred\",\n            \"sample_weight\",\n            \"adjusted\"\n         ],\n         \"brier_score_loss\": [\n            \"y_true\",\n            \"y_prob\",\n            \"sample_weight\",\n            \"pos_label\"\n         ],\n         \"classification_report\": [\n            \"y_true\",\n            \"y_pred\",\n            \"labels\",\n            \"target_names\",\n            \"sample_weight\",\n            \"digits\",\n            \"output_dict\",\n            \"zero_division\"\n         ],\n         \"cohen_kappa_score\": [\n            \"y1\",\n            \"y2\",\n            \"labels\",\n            \"weights\",\n            \"sample_weight\"\n         ],\n         \"confusion_matrix\": [\n            \"y_true\",\n            \"y_pred\",\n            \"labels\",\n            \"sample_weight\",\n            \"normalize\"\n         ],\n         \"f1_score\": [\n            \"y_true\",\n            \"y_pred\",\n            \"labels\",\n            \"pos_label\",\n            \"average\",\n            \"sample_weight\",\n            \"zero_division\"\n         ],\n         \"fbeta_score\": [\n            \"y_true\",\n            \"y_pred\",\n            \"beta\",\n            \"labels\",\n            \"pos_label\",\n            \"average\",\n            \"sample_weight\",\n            \"zero_division\"\n         ],\n         \"hamming_loss\": [\n            \"y_true\",\n            \"y_pred\",\n            \"labels\",\n            \"sample_weight\"\n         ],\n         \"hinge_loss\": [\n            \"y_true\",\n            \"pred_decision\",\n            \"labels\",\n            \"sample_weight\"\n         ],\n         \"jaccard_score\": [\n            \"y_true\",\n            \"y_pred\",\n            \"labels\",\n            \"pos_label\",\n            \"average\",\n            \"sample_weight\"\n         ],\n         \"jaccard_similarity_score\": [\n            \"y_true\",\n            \"y_pred\",\n            \"normalize\",\n            \"sample_weight\"\n         ],\n         \"log_loss\": [\n            \"y_true\",\n            \"y_pred\",\n            \"eps\",\n            \"normalize\",\n            \"sample_weight\",\n            \"labels\"\n         ],\n         \"matthews_corrcoef\": [\n            \"y_true\",\n            \"y_pred\",\n            \"sample_weight\"\n         ],\n         \"multilabel_confusion_matrix\": [\n            \"y_true\",\n            \"y_pred\",\n            \"sample_weight\",\n            \"labels\",\n            \"samplewise\"\n         ],\n         \"precision_recall_fscore_support\": [\n            \"y_true\",\n            \"y_pred\",\n            \"beta\",\n            \"labels\",\n            \"pos_label\",\n            \"average\",\n            \"warn_for\",\n            \"sample_weight\",\n            \"zero_division\"\n         ],\n         \"precision_score\": [\n            \"y_true\",\n            \"y_pred\",\n            \"labels\",\n            \"pos_label\",\n            \"average\",\n            \"sample_weight\",\n            \"zero_division\"\n         ],\n         \"recall_score\": [\n            \"y_true\",\n            \"y_pred\",\n            \"labels\",\n            \"pos_label\",\n            \"average\",\n            \"sample_weight\",\n            \"zero_division\"\n         ],\n         \"zero_one_loss\": [\n            \"y_true\",\n            \"y_pred\",\n            \"normalize\",\n            \"sample_weight\"\n         ]\n      },\n      \"sklearn.metrics._plot.base\": {\n         \"_check_classifer_response_method\": [\n            \"estimator\",\n            \"response_method\"\n         ]\n      },\n      \"sklearn.metrics._plot.confusion_matrix\": {\n         \"plot_confusion_matrix\": [\n            \"estimator\",\n            \"X\",\n            \"y_true\",\n            \"labels\",\n            \"sample_weight\",\n            \"normalize\",\n            \"display_labels\",\n            \"include_values\",\n            \"xticks_rotation\",\n            \"values_format\",\n            \"cmap\",\n            \"ax\"\n         ]\n      },\n      \"sklearn.metrics._plot.precision_recall_curve\": {\n         \"plot_precision_recall_curve\": [\n            \"estimator\",\n            \"X\",\n            \"y\",\n            \"sample_weight\",\n            \"response_method\",\n            \"name\",\n            \"ax\"\n         ]\n      },\n      \"sklearn.metrics._plot.roc_curve\": {\n         \"plot_roc_curve\": [\n            \"estimator\",\n            \"X\",\n            \"y\",\n            \"sample_weight\",\n            \"drop_intermediate\",\n            \"response_method\",\n            \"name\",\n            \"ax\"\n         ]\n      },\n      \"sklearn.metrics._plot.tests.test_plot_confusion_matrix\": {\n         \"data\": [\n            \"n_classes\"\n         ],\n         \"fitted_clf\": [\n            \"data\"\n         ],\n         \"n_classes\": [],\n         \"test_confusion_matrix_contrast\": [\n            \"pyplot\"\n         ],\n         \"test_confusion_matrix_display\": [\n            \"pyplot\",\n            \"data\",\n            \"fitted_clf\",\n            \"y_pred\",\n            \"n_classes\"\n         ],\n         \"test_confusion_matrix_pipeline\": [\n            \"pyplot\",\n            \"clf\",\n            \"data\",\n            \"n_classes\"\n         ],\n         \"test_confusion_matrix_text_format\": [\n            \"pyplot\",\n            \"data\",\n            \"y_pred\",\n            \"n_classes\",\n            \"fitted_clf\",\n            \"values_format\"\n         ],\n         \"test_error_on_invalid_option\": [\n            \"pyplot\",\n            \"fitted_clf\",\n            \"data\"\n         ],\n         \"test_error_on_regressor\": [\n            \"pyplot\",\n            \"data\"\n         ],\n         \"test_plot_confusion_matrix\": [\n            \"pyplot\",\n            \"data\",\n            \"y_pred\",\n            \"n_classes\",\n            \"fitted_clf\",\n            \"normalize\",\n            \"include_values\"\n         ],\n         \"test_plot_confusion_matrix_custom_labels\": [\n            \"pyplot\",\n            \"data\",\n            \"y_pred\",\n            \"fitted_clf\",\n            \"n_classes\",\n            \"with_labels\",\n            \"with_display_labels\"\n         ],\n         \"y_pred\": [\n            \"data\",\n            \"fitted_clf\"\n         ]\n      },\n      \"sklearn.metrics._plot.tests.test_plot_precision_recall\": {\n         \"test_error_bad_response\": [\n            \"pyplot\",\n            \"response_method\",\n            \"msg\"\n         ],\n         \"test_errors\": [\n            \"pyplot\"\n         ],\n         \"test_plot_precision_recall\": [\n            \"pyplot\",\n            \"response_method\",\n            \"with_sample_weight\"\n         ],\n         \"test_precision_recall_curve_pipeline\": [\n            \"pyplot\",\n            \"clf\"\n         ],\n         \"test_precision_recall_curve_string_labels\": [\n            \"pyplot\"\n         ]\n      },\n      \"sklearn.metrics._plot.tests.test_plot_roc_curve\": {\n         \"data\": [],\n         \"data_binary\": [\n            \"data\"\n         ],\n         \"test_plot_roc_curve\": [\n            \"pyplot\",\n            \"response_method\",\n            \"data_binary\",\n            \"with_sample_weight\",\n            \"drop_intermediate\",\n            \"with_strings\"\n         ],\n         \"test_plot_roc_curve_error_no_response\": [\n            \"pyplot\",\n            \"data_binary\",\n            \"response_method\",\n            \"msg\"\n         ],\n         \"test_plot_roc_curve_error_non_binary\": [\n            \"pyplot\",\n            \"data\"\n         ],\n         \"test_roc_curve_not_fitted_errors\": [\n            \"pyplot\",\n            \"data_binary\",\n            \"clf\"\n         ]\n      },\n      \"sklearn.metrics._ranking\": {\n         \"_binary_clf_curve\": [\n            \"y_true\",\n            \"y_score\",\n            \"pos_label\",\n            \"sample_weight\"\n         ],\n         \"_binary_roc_auc_score\": [\n            \"y_true\",\n            \"y_score\",\n            \"sample_weight\",\n            \"max_fpr\"\n         ],\n         \"_check_dcg_target_type\": [\n            \"y_true\"\n         ],\n         \"_dcg_sample_scores\": [\n            \"y_true\",\n            \"y_score\",\n            \"k\",\n            \"log_base\",\n            \"ignore_ties\"\n         ],\n         \"_multiclass_roc_auc_score\": [\n            \"y_true\",\n            \"y_score\",\n            \"labels\",\n            \"multi_class\",\n            \"average\",\n            \"sample_weight\"\n         ],\n         \"_ndcg_sample_scores\": [\n            \"y_true\",\n            \"y_score\",\n            \"k\",\n            \"ignore_ties\"\n         ],\n         \"_tie_averaged_dcg\": [\n            \"y_true\",\n            \"y_score\",\n            \"discount_cumsum\"\n         ],\n         \"auc\": [\n            \"x\",\n            \"y\"\n         ],\n         \"average_precision_score\": [\n            \"y_true\",\n            \"y_score\",\n            \"average\",\n            \"pos_label\",\n            \"sample_weight\"\n         ],\n         \"coverage_error\": [\n            \"y_true\",\n            \"y_score\",\n            \"sample_weight\"\n         ],\n         \"dcg_score\": [\n            \"y_true\",\n            \"y_score\",\n            \"k\",\n            \"log_base\",\n            \"sample_weight\",\n            \"ignore_ties\"\n         ],\n         \"label_ranking_average_precision_score\": [\n            \"y_true\",\n            \"y_score\",\n            \"sample_weight\"\n         ],\n         \"label_ranking_loss\": [\n            \"y_true\",\n            \"y_score\",\n            \"sample_weight\"\n         ],\n         \"ndcg_score\": [\n            \"y_true\",\n            \"y_score\",\n            \"k\",\n            \"sample_weight\",\n            \"ignore_ties\"\n         ],\n         \"precision_recall_curve\": [\n            \"y_true\",\n            \"probas_pred\",\n            \"pos_label\",\n            \"sample_weight\"\n         ],\n         \"roc_auc_score\": [\n            \"y_true\",\n            \"y_score\",\n            \"average\",\n            \"sample_weight\",\n            \"max_fpr\",\n            \"multi_class\",\n            \"labels\"\n         ],\n         \"roc_curve\": [\n            \"y_true\",\n            \"y_score\",\n            \"pos_label\",\n            \"sample_weight\",\n            \"drop_intermediate\"\n         ]\n      },\n      \"sklearn.metrics._regression\": {\n         \"_check_reg_targets\": [\n            \"y_true\",\n            \"y_pred\",\n            \"multioutput\",\n            \"dtype\"\n         ],\n         \"explained_variance_score\": [\n            \"y_true\",\n            \"y_pred\",\n            \"sample_weight\",\n            \"multioutput\"\n         ],\n         \"max_error\": [\n            \"y_true\",\n            \"y_pred\"\n         ],\n         \"mean_absolute_error\": [\n            \"y_true\",\n            \"y_pred\",\n            \"sample_weight\",\n            \"multioutput\"\n         ],\n         \"mean_gamma_deviance\": [\n            \"y_true\",\n            \"y_pred\",\n            \"sample_weight\"\n         ],\n         \"mean_poisson_deviance\": [\n            \"y_true\",\n            \"y_pred\",\n            \"sample_weight\"\n         ],\n         \"mean_squared_error\": [\n            \"y_true\",\n            \"y_pred\",\n            \"sample_weight\",\n            \"multioutput\",\n            \"squared\"\n         ],\n         \"mean_squared_log_error\": [\n            \"y_true\",\n            \"y_pred\",\n            \"sample_weight\",\n            \"multioutput\"\n         ],\n         \"mean_tweedie_deviance\": [\n            \"y_true\",\n            \"y_pred\",\n            \"sample_weight\",\n            \"power\"\n         ],\n         \"median_absolute_error\": [\n            \"y_true\",\n            \"y_pred\",\n            \"multioutput\"\n         ],\n         \"r2_score\": [\n            \"y_true\",\n            \"y_pred\",\n            \"sample_weight\",\n            \"multioutput\"\n         ]\n      },\n      \"sklearn.metrics._scorer\": {\n         \"_cached_call\": [\n            \"cache\",\n            \"estimator\",\n            \"method\"\n         ],\n         \"_check_multimetric_scoring\": [\n            \"estimator\",\n            \"scoring\"\n         ],\n         \"_passthrough_scorer\": [\n            \"estimator\"\n         ],\n         \"check_scoring\": [\n            \"estimator\",\n            \"scoring\",\n            \"allow_none\"\n         ],\n         \"get_scorer\": [\n            \"scoring\"\n         ],\n         \"make_scorer\": [\n            \"score_func\",\n            \"greater_is_better\",\n            \"needs_proba\",\n            \"needs_threshold\"\n         ]\n      },\n      \"sklearn.metrics.base\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.metrics.classification\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.metrics.cluster._bicluster\": {\n         \"_check_rows_and_columns\": [\n            \"a\",\n            \"b\"\n         ],\n         \"_jaccard\": [\n            \"a_rows\",\n            \"a_cols\",\n            \"b_rows\",\n            \"b_cols\"\n         ],\n         \"_pairwise_similarity\": [\n            \"a\",\n            \"b\",\n            \"similarity\"\n         ],\n         \"consensus_score\": [\n            \"a\",\n            \"b\",\n            \"similarity\"\n         ]\n      },\n      \"sklearn.metrics.cluster._supervised\": {\n         \"_comb2\": [\n            \"n\"\n         ],\n         \"_generalized_average\": [\n            \"U\",\n            \"V\",\n            \"average_method\"\n         ],\n         \"adjusted_mutual_info_score\": [\n            \"labels_true\",\n            \"labels_pred\",\n            \"average_method\"\n         ],\n         \"adjusted_rand_score\": [\n            \"labels_true\",\n            \"labels_pred\"\n         ],\n         \"check_clusterings\": [\n            \"labels_true\",\n            \"labels_pred\"\n         ],\n         \"completeness_score\": [\n            \"labels_true\",\n            \"labels_pred\"\n         ],\n         \"contingency_matrix\": [\n            \"labels_true\",\n            \"labels_pred\",\n            \"eps\",\n            \"sparse\"\n         ],\n         \"entropy\": [\n            \"labels\"\n         ],\n         \"fowlkes_mallows_score\": [\n            \"labels_true\",\n            \"labels_pred\",\n            \"sparse\"\n         ],\n         \"homogeneity_completeness_v_measure\": [\n            \"labels_true\",\n            \"labels_pred\",\n            \"beta\"\n         ],\n         \"homogeneity_score\": [\n            \"labels_true\",\n            \"labels_pred\"\n         ],\n         \"mutual_info_score\": [\n            \"labels_true\",\n            \"labels_pred\",\n            \"contingency\"\n         ],\n         \"normalized_mutual_info_score\": [\n            \"labels_true\",\n            \"labels_pred\",\n            \"average_method\"\n         ],\n         \"v_measure_score\": [\n            \"labels_true\",\n            \"labels_pred\",\n            \"beta\"\n         ]\n      },\n      \"sklearn.metrics.cluster._unsupervised\": {\n         \"_silhouette_reduce\": [\n            \"D_chunk\",\n            \"start\",\n            \"labels\",\n            \"label_freqs\"\n         ],\n         \"calinski_harabasz_score\": [\n            \"X\",\n            \"labels\"\n         ],\n         \"calinski_harabaz_score\": [\n            \"X\",\n            \"labels\"\n         ],\n         \"check_number_of_labels\": [\n            \"n_labels\",\n            \"n_samples\"\n         ],\n         \"davies_bouldin_score\": [\n            \"X\",\n            \"labels\"\n         ],\n         \"silhouette_samples\": [\n            \"X\",\n            \"labels\",\n            \"metric\"\n         ],\n         \"silhouette_score\": [\n            \"X\",\n            \"labels\",\n            \"metric\",\n            \"sample_size\",\n            \"random_state\"\n         ]\n      },\n      \"sklearn.metrics.cluster.bicluster\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.metrics.cluster.expected_mutual_info_fast\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.metrics.cluster.setup\": {\n         \"configuration\": [\n            \"parent_package\",\n            \"top_path\"\n         ]\n      },\n      \"sklearn.metrics.cluster.supervised\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.metrics.cluster.tests.test_bicluster\": {\n         \"test_consensus_score\": [],\n         \"test_consensus_score_issue2445\": [],\n         \"test_jaccard\": []\n      },\n      \"sklearn.metrics.cluster.tests.test_common\": {\n         \"test_format_invariance\": [\n            \"metric_name\"\n         ],\n         \"test_inf_nan_input\": [\n            \"metric_name\",\n            \"metric_func\"\n         ],\n         \"test_non_symmetry\": [\n            \"metric_name\",\n            \"y1\",\n            \"y2\"\n         ],\n         \"test_normalized_output\": [\n            \"metric_name\"\n         ],\n         \"test_permute_labels\": [\n            \"metric_name\"\n         ],\n         \"test_single_sample\": [\n            \"metric\"\n         ],\n         \"test_symmetric_non_symmetric_union\": [],\n         \"test_symmetry\": [\n            \"metric_name\",\n            \"y1\",\n            \"y2\"\n         ]\n      },\n      \"sklearn.metrics.cluster.tests.test_supervised\": {\n         \"test_adjusted_mutual_info_score\": [],\n         \"test_adjustment_for_chance\": [],\n         \"test_beta_parameter\": [],\n         \"test_complete_but_not_homogeneous_labeling\": [],\n         \"test_contingency_matrix\": [],\n         \"test_contingency_matrix_sparse\": [],\n         \"test_entropy\": [],\n         \"test_error_messages_on_wrong_input\": [],\n         \"test_exactly_zero_info_score\": [],\n         \"test_expected_mutual_info_overflow\": [],\n         \"test_fowlkes_mallows_score\": [],\n         \"test_fowlkes_mallows_score_properties\": [],\n         \"test_generalized_average\": [],\n         \"test_homogeneous_but_not_complete_labeling\": [],\n         \"test_int_overflow_mutual_info_fowlkes_mallows_score\": [],\n         \"test_non_consecutive_labels\": [],\n         \"test_not_complete_and_not_homogeneous_labeling\": [],\n         \"test_perfect_matches\": [],\n         \"test_v_measure_and_mutual_information\": [\n            \"seed\"\n         ],\n         \"uniform_labelings_scores\": [\n            \"score_func\",\n            \"n_samples\",\n            \"k_range\",\n            \"n_runs\",\n            \"seed\"\n         ]\n      },\n      \"sklearn.metrics.cluster.tests.test_unsupervised\": {\n         \"assert_raises_on_all_points_same_cluster\": [\n            \"func\"\n         ],\n         \"assert_raises_on_only_one_label\": [\n            \"func\"\n         ],\n         \"test_calinski_harabasz_score\": [],\n         \"test_cluster_size_1\": [],\n         \"test_correct_labelsize\": [],\n         \"test_davies_bouldin_score\": [],\n         \"test_deprecated_calinski_harabaz_score\": [],\n         \"test_non_encoded_labels\": [],\n         \"test_non_numpy_labels\": [],\n         \"test_silhouette\": [],\n         \"test_silhouette_nonzero_diag\": [\n            \"dtype\"\n         ],\n         \"test_silhouette_paper_example\": []\n      },\n      \"sklearn.metrics.cluster.unsupervised\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.metrics.pairwise\": {\n         \"_argmin_min_reduce\": [\n            \"dist\",\n            \"start\"\n         ],\n         \"_check_chunk_size\": [\n            \"reduced\",\n            \"chunk_size\"\n         ],\n         \"_dist_wrapper\": [\n            \"dist_func\",\n            \"dist_matrix\",\n            \"slice_\"\n         ],\n         \"_euclidean_distances_upcast\": [\n            \"X\",\n            \"XX\",\n            \"Y\",\n            \"YY\",\n            \"batch_size\"\n         ],\n         \"_pairwise_callable\": [\n            \"X\",\n            \"Y\",\n            \"metric\",\n            \"force_all_finite\"\n         ],\n         \"_parallel_pairwise\": [\n            \"X\",\n            \"Y\",\n            \"func\",\n            \"n_jobs\"\n         ],\n         \"_precompute_metric_params\": [\n            \"X\",\n            \"Y\",\n            \"metric\"\n         ],\n         \"_return_float_dtype\": [\n            \"X\",\n            \"Y\"\n         ],\n         \"additive_chi2_kernel\": [\n            \"X\",\n            \"Y\"\n         ],\n         \"check_paired_arrays\": [\n            \"X\",\n            \"Y\"\n         ],\n         \"check_pairwise_arrays\": [\n            \"X\",\n            \"Y\",\n            \"precomputed\",\n            \"dtype\",\n            \"accept_sparse\",\n            \"force_all_finite\",\n            \"copy\"\n         ],\n         \"chi2_kernel\": [\n            \"X\",\n            \"Y\",\n            \"gamma\"\n         ],\n         \"cosine_distances\": [\n            \"X\",\n            \"Y\"\n         ],\n         \"cosine_similarity\": [\n            \"X\",\n            \"Y\",\n            \"dense_output\"\n         ],\n         \"distance_metrics\": [],\n         \"euclidean_distances\": [\n            \"X\",\n            \"Y\",\n            \"Y_norm_squared\",\n            \"squared\",\n            \"X_norm_squared\"\n         ],\n         \"haversine_distances\": [\n            \"X\",\n            \"Y\"\n         ],\n         \"kernel_metrics\": [],\n         \"laplacian_kernel\": [\n            \"X\",\n            \"Y\",\n            \"gamma\"\n         ],\n         \"linear_kernel\": [\n            \"X\",\n            \"Y\",\n            \"dense_output\"\n         ],\n         \"manhattan_distances\": [\n            \"X\",\n            \"Y\",\n            \"sum_over_features\"\n         ],\n         \"nan_euclidean_distances\": [\n            \"X\",\n            \"Y\",\n            \"squared\",\n            \"missing_values\",\n            \"copy\"\n         ],\n         \"paired_cosine_distances\": [\n            \"X\",\n            \"Y\"\n         ],\n         \"paired_distances\": [\n            \"X\",\n            \"Y\",\n            \"metric\"\n         ],\n         \"paired_euclidean_distances\": [\n            \"X\",\n            \"Y\"\n         ],\n         \"paired_manhattan_distances\": [\n            \"X\",\n            \"Y\"\n         ],\n         \"pairwise_distances\": [\n            \"X\",\n            \"Y\",\n            \"metric\",\n            \"n_jobs\",\n            \"force_all_finite\"\n         ],\n         \"pairwise_distances_argmin\": [\n            \"X\",\n            \"Y\",\n            \"axis\",\n            \"metric\",\n            \"metric_kwargs\"\n         ],\n         \"pairwise_distances_argmin_min\": [\n            \"X\",\n            \"Y\",\n            \"axis\",\n            \"metric\",\n            \"metric_kwargs\"\n         ],\n         \"pairwise_distances_chunked\": [\n            \"X\",\n            \"Y\",\n            \"reduce_func\",\n            \"metric\",\n            \"n_jobs\",\n            \"working_memory\"\n         ],\n         \"pairwise_kernels\": [\n            \"X\",\n            \"Y\",\n            \"metric\",\n            \"filter_params\",\n            \"n_jobs\"\n         ],\n         \"polynomial_kernel\": [\n            \"X\",\n            \"Y\",\n            \"degree\",\n            \"gamma\",\n            \"coef0\"\n         ],\n         \"rbf_kernel\": [\n            \"X\",\n            \"Y\",\n            \"gamma\"\n         ],\n         \"sigmoid_kernel\": [\n            \"X\",\n            \"Y\",\n            \"gamma\",\n            \"coef0\"\n         ]\n      },\n      \"sklearn.metrics.pairwise_fast\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.metrics.ranking\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.metrics.regression\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.metrics.scorer\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.metrics.setup\": {\n         \"configuration\": [\n            \"parent_package\",\n            \"top_path\"\n         ]\n      },\n      \"sklearn.metrics.tests.test_classification\": {\n         \"make_prediction\": [\n            \"dataset\",\n            \"binary\"\n         ],\n         \"test__check_targets\": [],\n         \"test__check_targets_multiclass_with_both_y_true_and_y_pred_binary\": [],\n         \"test_average_binary_jaccard_score\": [\n            \"recwarn\"\n         ],\n         \"test_average_precision_score_duplicate_values\": [],\n         \"test_average_precision_score_score_non_binary_class\": [],\n         \"test_average_precision_score_tied_values\": [],\n         \"test_balanced_accuracy_score\": [\n            \"y_true\",\n            \"y_pred\"\n         ],\n         \"test_balanced_accuracy_score_unseen\": [],\n         \"test_brier_score_loss\": [],\n         \"test_classification_report_dictionary_output\": [],\n         \"test_classification_report_labels_target_names_unequal_length\": [],\n         \"test_classification_report_multiclass\": [],\n         \"test_classification_report_multiclass_balanced\": [],\n         \"test_classification_report_multiclass_with_digits\": [],\n         \"test_classification_report_multiclass_with_label_detection\": [],\n         \"test_classification_report_multiclass_with_long_string_label\": [],\n         \"test_classification_report_multiclass_with_string_label\": [],\n         \"test_classification_report_multiclass_with_unicode_label\": [],\n         \"test_classification_report_no_labels_target_names_unequal_length\": [],\n         \"test_classification_report_zero_division_warning\": [\n            \"zero_division\"\n         ],\n         \"test_cohen_kappa\": [],\n         \"test_confusion_matrix_binary\": [],\n         \"test_confusion_matrix_dtype\": [],\n         \"test_confusion_matrix_multiclass_subset_labels\": [],\n         \"test_confusion_matrix_normalize\": [\n            \"normalize\",\n            \"cm_dtype\",\n            \"expected_results\"\n         ],\n         \"test_confusion_matrix_normalize_single_class\": [],\n         \"test_confusion_matrix_normalize_wrong_option\": [],\n         \"test_fscore_warnings\": [\n            \"zero_division\"\n         ],\n         \"test_hinge_loss_binary\": [],\n         \"test_hinge_loss_multiclass\": [],\n         \"test_hinge_loss_multiclass_invariance_lists\": [],\n         \"test_hinge_loss_multiclass_missing_labels_with_labels_none\": [],\n         \"test_hinge_loss_multiclass_with_missing_labels\": [],\n         \"test_jaccard_score_validation\": [],\n         \"test_log_loss\": [],\n         \"test_log_loss_pandas_input\": [],\n         \"test_matthews_corrcoef\": [],\n         \"test_matthews_corrcoef_against_jurman\": [],\n         \"test_matthews_corrcoef_against_numpy_corrcoef\": [],\n         \"test_matthews_corrcoef_multiclass\": [],\n         \"test_matthews_corrcoef_nan\": [],\n         \"test_matthews_corrcoef_overflow\": [\n            \"n_points\"\n         ],\n         \"test_multiclass_jaccard_score\": [\n            \"recwarn\"\n         ],\n         \"test_multilabel_accuracy_score_subset_accuracy\": [],\n         \"test_multilabel_classification_report\": [],\n         \"test_multilabel_confusion_matrix_binary\": [],\n         \"test_multilabel_confusion_matrix_errors\": [],\n         \"test_multilabel_confusion_matrix_multiclass\": [],\n         \"test_multilabel_confusion_matrix_multilabel\": [],\n         \"test_multilabel_hamming_loss\": [],\n         \"test_multilabel_jaccard_score\": [\n            \"recwarn\"\n         ],\n         \"test_multilabel_jaccard_similarity_score_deprecation\": [],\n         \"test_multilabel_zero_one_loss_subset\": [],\n         \"test_precision_recall_f1_no_labels\": [\n            \"beta\",\n            \"average\",\n            \"zero_division\"\n         ],\n         \"test_precision_recall_f1_no_labels_average_none\": [\n            \"zero_division\"\n         ],\n         \"test_precision_recall_f1_no_labels_average_none_warn\": [],\n         \"test_precision_recall_f1_no_labels_check_warnings\": [\n            \"average\"\n         ],\n         \"test_precision_recall_f1_score_binary\": [],\n         \"test_precision_recall_f1_score_binary_averaged\": [],\n         \"test_precision_recall_f1_score_multiclass\": [],\n         \"test_precision_recall_f1_score_multilabel_1\": [],\n         \"test_precision_recall_f1_score_multilabel_2\": [],\n         \"test_precision_recall_f1_score_with_an_empty_prediction\": [\n            \"zero_division\"\n         ],\n         \"test_precision_recall_f_binary_single_class\": [],\n         \"test_precision_recall_f_extra_labels\": [],\n         \"test_precision_recall_f_ignored_labels\": [],\n         \"test_precision_recall_f_unused_pos_label\": [],\n         \"test_precision_recall_fscore_support_errors\": [],\n         \"test_precision_refcall_f1_score_multilabel_unordered_labels\": [\n            \"average\"\n         ],\n         \"test_precision_warnings\": [\n            \"zero_division\"\n         ],\n         \"test_prf_average_binary_data_non_binary\": [],\n         \"test_prf_no_warnings_if_zero_division_set\": [\n            \"zero_division\"\n         ],\n         \"test_prf_warnings\": [],\n         \"test_recall_warnings\": [\n            \"zero_division\"\n         ],\n         \"test_zero_precision_recall\": []\n      },\n      \"sklearn.metrics.tests.test_common\": {\n         \"_check_averaging\": [\n            \"metric\",\n            \"y_true\",\n            \"y_pred\",\n            \"y_true_binarize\",\n            \"y_pred_binarize\",\n            \"is_multilabel\"\n         ],\n         \"_require_positive_targets\": [\n            \"y1\",\n            \"y2\"\n         ],\n         \"check_averaging\": [\n            \"name\",\n            \"y_true\",\n            \"y_true_binarize\",\n            \"y_pred\",\n            \"y_pred_binarize\",\n            \"y_score\"\n         ],\n         \"check_sample_weight_invariance\": [\n            \"name\",\n            \"metric\",\n            \"y1\",\n            \"y2\"\n         ],\n         \"check_single_sample\": [\n            \"name\"\n         ],\n         \"check_single_sample_multioutput\": [\n            \"name\"\n         ],\n         \"precision_recall_curve_padded_thresholds\": [],\n         \"test_averaging_binary_multilabel_all_zeroes\": [],\n         \"test_averaging_multiclass\": [\n            \"name\"\n         ],\n         \"test_averaging_multilabel\": [\n            \"name\"\n         ],\n         \"test_averaging_multilabel_all_ones\": [\n            \"name\"\n         ],\n         \"test_averaging_multilabel_all_zeroes\": [\n            \"name\"\n         ],\n         \"test_binary_sample_weight_invariance\": [\n            \"name\"\n         ],\n         \"test_classification_inf_nan_input\": [\n            \"metric\"\n         ],\n         \"test_classification_invariance_string_vs_numbers_labels\": [\n            \"name\"\n         ],\n         \"test_format_invariance_with_1d_vectors\": [\n            \"name\"\n         ],\n         \"test_multiclass_sample_weight_invariance\": [\n            \"name\"\n         ],\n         \"test_multilabel_label_permutations_invariance\": [\n            \"name\"\n         ],\n         \"test_multilabel_representation_invariance\": [],\n         \"test_multilabel_sample_weight_invariance\": [\n            \"name\"\n         ],\n         \"test_multioutput_number_of_output_differ\": [\n            \"name\"\n         ],\n         \"test_multioutput_regression_invariance_to_dimension_shuffling\": [\n            \"name\"\n         ],\n         \"test_no_averaging_labels\": [],\n         \"test_normalize_option_binary_classification\": [\n            \"name\"\n         ],\n         \"test_normalize_option_multiclass_classification\": [\n            \"name\"\n         ],\n         \"test_normalize_option_multilabel_classification\": [],\n         \"test_not_symmetric_metric\": [\n            \"name\"\n         ],\n         \"test_raise_value_error_multilabel_sequences\": [\n            \"name\"\n         ],\n         \"test_regression_sample_weight_invariance\": [\n            \"name\"\n         ],\n         \"test_regression_thresholded_inf_nan_input\": [\n            \"metric\"\n         ],\n         \"test_sample_order_invariance\": [\n            \"name\"\n         ],\n         \"test_sample_order_invariance_multilabel_and_multioutput\": [],\n         \"test_single_sample\": [\n            \"name\"\n         ],\n         \"test_single_sample_multioutput\": [\n            \"name\"\n         ],\n         \"test_symmetric_metric\": [\n            \"name\"\n         ],\n         \"test_symmetry_consistency\": [],\n         \"test_thresholded_invariance_string_vs_numbers_labels\": [\n            \"name\"\n         ],\n         \"test_thresholded_metric_permutation_invariance\": [\n            \"name\"\n         ],\n         \"test_thresholded_multilabel_multioutput_permutations_invariance\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.metrics.tests.test_pairwise\": {\n         \"_reduce_func\": [\n            \"dist\",\n            \"start\"\n         ],\n         \"callable_rbf_kernel\": [\n            \"x\",\n            \"y\"\n         ],\n         \"check_pairwise_distances_chunked\": [\n            \"X\",\n            \"Y\",\n            \"working_memory\",\n            \"metric\"\n         ],\n         \"test_check_XB_returned\": [],\n         \"test_check_dense_matrices\": [],\n         \"test_check_different_dimensions\": [],\n         \"test_check_invalid_dimensions\": [],\n         \"test_check_preserve_type\": [],\n         \"test_check_sparse_arrays\": [],\n         \"test_check_tuple_input\": [],\n         \"test_chi_square_kernel\": [],\n         \"test_cosine_distances\": [],\n         \"test_cosine_similarity\": [],\n         \"test_euclidean_distances\": [\n            \"dtype\",\n            \"x_array_constr\",\n            \"y_array_constr\"\n         ],\n         \"test_euclidean_distances_extreme_values\": [\n            \"dtype\",\n            \"eps\",\n            \"rtol\",\n            \"dim\"\n         ],\n         \"test_euclidean_distances_known_result\": [\n            \"x_array_constr\",\n            \"y_array_constr\"\n         ],\n         \"test_euclidean_distances_sym\": [\n            \"dtype\",\n            \"x_array_constr\"\n         ],\n         \"test_euclidean_distances_upcast\": [\n            \"batch_size\",\n            \"x_array_constr\",\n            \"y_array_constr\"\n         ],\n         \"test_euclidean_distances_upcast_sym\": [\n            \"batch_size\",\n            \"x_array_constr\"\n         ],\n         \"test_euclidean_distances_with_norms\": [\n            \"dtype\",\n            \"y_array_constr\"\n         ],\n         \"test_haversine_distances\": [],\n         \"test_kernel_sparse\": [\n            \"kernel\"\n         ],\n         \"test_kernel_symmetry\": [\n            \"kernel\"\n         ],\n         \"test_laplacian_kernel\": [],\n         \"test_linear_kernel\": [],\n         \"test_nan_euclidean_distances_2x2\": [\n            \"X\",\n            \"X_diag\",\n            \"missing_value\"\n         ],\n         \"test_nan_euclidean_distances_complete_nan\": [\n            \"missing_value\"\n         ],\n         \"test_nan_euclidean_distances_equal_to_euclidean_distance\": [\n            \"squared\"\n         ],\n         \"test_nan_euclidean_distances_infinite_values\": [\n            \"X\",\n            \"Y\"\n         ],\n         \"test_nan_euclidean_distances_not_trival\": [\n            \"missing_value\"\n         ],\n         \"test_nan_euclidean_distances_one_feature_match_positive\": [\n            \"missing_value\"\n         ],\n         \"test_no_data_conversion_warning\": [],\n         \"test_paired_distances\": [\n            \"metric\",\n            \"func\"\n         ],\n         \"test_paired_distances_callable\": [],\n         \"test_paired_euclidean_distances\": [],\n         \"test_paired_manhattan_distances\": [],\n         \"test_pairwise_boolean_distance\": [\n            \"metric\"\n         ],\n         \"test_pairwise_callable_nonstrict_metric\": [],\n         \"test_pairwise_distances\": [],\n         \"test_pairwise_distances_argmin_min\": [],\n         \"test_pairwise_distances_chunked\": [],\n         \"test_pairwise_distances_chunked_diagonal\": [\n            \"metric\"\n         ],\n         \"test_pairwise_distances_chunked_reduce\": [],\n         \"test_pairwise_distances_chunked_reduce_invalid\": [\n            \"bad_reduce\",\n            \"err_type\",\n            \"message\"\n         ],\n         \"test_pairwise_distances_chunked_reduce_valid\": [\n            \"good_reduce\"\n         ],\n         \"test_pairwise_distances_data_derived_params\": [\n            \"n_jobs\",\n            \"metric\",\n            \"dist_function\",\n            \"y_is_x\"\n         ],\n         \"test_pairwise_kernels\": [\n            \"metric\"\n         ],\n         \"test_pairwise_kernels_callable\": [],\n         \"test_pairwise_kernels_filter_param\": [],\n         \"test_pairwise_parallel\": [\n            \"func\",\n            \"metric\",\n            \"kwds\",\n            \"array_constr\",\n            \"dtype\"\n         ],\n         \"test_pairwise_precomputed\": [\n            \"func\"\n         ],\n         \"test_pairwise_precomputed_non_negative\": [],\n         \"test_pairwise_similarity_sparse_output\": [\n            \"metric\",\n            \"pairwise_func\"\n         ],\n         \"test_parallel_pairwise_distances_diagonal\": [\n            \"metric\"\n         ],\n         \"test_rbf_kernel\": [],\n         \"tuplify\": [\n            \"X\"\n         ]\n      },\n      \"sklearn.metrics.tests.test_ranking\": {\n         \"_auc\": [\n            \"y_true\",\n            \"y_score\"\n         ],\n         \"_average_precision\": [\n            \"y_true\",\n            \"y_score\"\n         ],\n         \"_average_precision_slow\": [\n            \"y_true\",\n            \"y_score\"\n         ],\n         \"_my_lrap\": [\n            \"y_true\",\n            \"y_score\"\n         ],\n         \"_partial_roc_auc_score\": [\n            \"y_true\",\n            \"y_predict\",\n            \"max_fpr\"\n         ],\n         \"_test_dcg_score_for\": [\n            \"y_true\",\n            \"y_score\"\n         ],\n         \"_test_ndcg_score_for\": [\n            \"y_true\",\n            \"y_score\"\n         ],\n         \"_test_precision_recall_curve\": [\n            \"y_true\",\n            \"probas_pred\"\n         ],\n         \"check_alternative_lrap_implementation\": [\n            \"lrap_score\",\n            \"n_classes\",\n            \"n_samples\",\n            \"random_state\"\n         ],\n         \"check_lrap_error_raised\": [\n            \"lrap_score\"\n         ],\n         \"check_lrap_only_ties\": [\n            \"lrap_score\"\n         ],\n         \"check_lrap_toy\": [\n            \"lrap_score\"\n         ],\n         \"check_lrap_without_tie_and_increasing_score\": [\n            \"lrap_score\"\n         ],\n         \"check_zero_or_all_relevant_labels\": [\n            \"lrap_score\"\n         ],\n         \"make_prediction\": [\n            \"dataset\",\n            \"binary\"\n         ],\n         \"test_alternative_lrap_implementation\": [\n            \"n_samples\",\n            \"n_classes\",\n            \"random_state\"\n         ],\n         \"test_auc\": [],\n         \"test_auc_errors\": [],\n         \"test_auc_score_non_binary_class\": [],\n         \"test_average_precision_constant_values\": [],\n         \"test_average_precision_score_pos_label_errors\": [],\n         \"test_binary_clf_curve_implicit_pos_label\": [\n            \"curve_func\"\n         ],\n         \"test_binary_clf_curve_multiclass_error\": [],\n         \"test_coverage_error\": [],\n         \"test_coverage_tie_handling\": [],\n         \"test_dcg_score\": [],\n         \"test_dcg_ties\": [],\n         \"test_label_ranking_avp\": [\n            \"check\",\n            \"func\"\n         ],\n         \"test_label_ranking_loss\": [],\n         \"test_lrap_error_raised\": [],\n         \"test_lrap_sample_weighting_zero_labels\": [],\n         \"test_multiclass_ovo_roc_auc_toydata\": [\n            \"y_true\",\n            \"labels\"\n         ],\n         \"test_multiclass_ovo_roc_auc_toydata_binary\": [\n            \"y_true\",\n            \"labels\"\n         ],\n         \"test_multiclass_ovr_roc_auc_toydata\": [\n            \"y_true\",\n            \"labels\"\n         ],\n         \"test_ndcg_ignore_ties_with_k\": [],\n         \"test_ndcg_invariant\": [],\n         \"test_ndcg_score\": [],\n         \"test_ndcg_toy_examples\": [\n            \"ignore_ties\"\n         ],\n         \"test_partial_roc_auc_score\": [],\n         \"test_precision_recall_curve\": [],\n         \"test_precision_recall_curve_errors\": [],\n         \"test_precision_recall_curve_toydata\": [],\n         \"test_ranking_appropriate_input_shape\": [],\n         \"test_ranking_loss_ties_handling\": [],\n         \"test_roc_auc_score_multiclass_error\": [\n            \"msg\",\n            \"kwargs\"\n         ],\n         \"test_roc_auc_score_multiclass_labels_error\": [\n            \"msg\",\n            \"y_true\",\n            \"labels\",\n            \"multi_class\"\n         ],\n         \"test_roc_curve\": [\n            \"drop\"\n         ],\n         \"test_roc_curve_confidence\": [],\n         \"test_roc_curve_drop_intermediate\": [],\n         \"test_roc_curve_end_points\": [],\n         \"test_roc_curve_fpr_tpr_increasing\": [],\n         \"test_roc_curve_hard\": [],\n         \"test_roc_curve_multi\": [],\n         \"test_roc_curve_one_label\": [],\n         \"test_roc_curve_toydata\": [],\n         \"test_roc_returns_consistency\": [],\n         \"test_score_scale_invariance\": []\n      },\n      \"sklearn.metrics.tests.test_regression\": {\n         \"test__check_reg_targets\": [],\n         \"test__check_reg_targets_exception\": [],\n         \"test_multioutput_regression\": [],\n         \"test_regression_custom_weights\": [],\n         \"test_regression_metrics\": [\n            \"n_samples\"\n         ],\n         \"test_regression_metrics_at_limits\": [],\n         \"test_regression_multioutput_array\": [],\n         \"test_regression_single_sample\": [\n            \"metric\"\n         ],\n         \"test_tweedie_deviance_continuity\": []\n      },\n      \"sklearn.metrics.tests.test_score_objects\": {\n         \"_make_estimators\": [\n            \"X_train\",\n            \"y_train\",\n            \"y_ml_train\"\n         ],\n         \"_require_positive_y\": [\n            \"y\"\n         ],\n         \"check_multimetric_scoring_single_metric_wrapper\": [],\n         \"check_scoring_validator_for_single_metric_usecases\": [\n            \"scoring_validator\"\n         ],\n         \"setup_module\": [],\n         \"teardown_module\": [],\n         \"test_all_scorers_repr\": [],\n         \"test_check_scoring_and_check_multimetric_scoring\": [],\n         \"test_check_scoring_gridsearchcv\": [],\n         \"test_classification_scores\": [],\n         \"test_deprecated_scorer\": [],\n         \"test_make_scorer\": [],\n         \"test_multiclass_roc_no_proba_scorer_errors\": [\n            \"scorer_name\"\n         ],\n         \"test_multiclass_roc_proba_scorer\": [\n            \"scorer_name\",\n            \"metric\"\n         ],\n         \"test_multiclass_roc_proba_scorer_label\": [],\n         \"test_multimetric_scorer_calls_method_once\": [\n            \"scorers\",\n            \"expected_predict_count\",\n            \"expected_predict_proba_count\",\n            \"expected_decision_func_count\"\n         ],\n         \"test_multimetric_scorer_calls_method_once_classifier_no_decision\": [],\n         \"test_multimetric_scorer_calls_method_once_regressor_threshold\": [],\n         \"test_multimetric_scorer_sanity_check\": [],\n         \"test_raises_on_score_list\": [],\n         \"test_regression_scorers\": [],\n         \"test_scorer_memmap_input\": [\n            \"name\"\n         ],\n         \"test_scorer_sample_weight\": [],\n         \"test_scoring_is_not_metric\": [],\n         \"test_supervised_cluster_scorers\": [],\n         \"test_thresholded_scorers\": [],\n         \"test_thresholded_scorers_multilabel_indicator_data\": []\n      },\n      \"sklearn.mixture._base\": {\n         \"_check_X\": [\n            \"X\",\n            \"n_components\",\n            \"n_features\",\n            \"ensure_min_samples\"\n         ],\n         \"_check_shape\": [\n            \"param\",\n            \"param_shape\",\n            \"name\"\n         ]\n      },\n      \"sklearn.mixture._bayesian_mixture\": {\n         \"_log_dirichlet_norm\": [\n            \"dirichlet_concentration\"\n         ],\n         \"_log_wishart_norm\": [\n            \"degrees_of_freedom\",\n            \"log_det_precisions_chol\",\n            \"n_features\"\n         ]\n      },\n      \"sklearn.mixture._gaussian_mixture\": {\n         \"_check_means\": [\n            \"means\",\n            \"n_components\",\n            \"n_features\"\n         ],\n         \"_check_precision_matrix\": [\n            \"precision\",\n            \"covariance_type\"\n         ],\n         \"_check_precision_positivity\": [\n            \"precision\",\n            \"covariance_type\"\n         ],\n         \"_check_precisions\": [\n            \"precisions\",\n            \"covariance_type\",\n            \"n_components\",\n            \"n_features\"\n         ],\n         \"_check_precisions_full\": [\n            \"precisions\",\n            \"covariance_type\"\n         ],\n         \"_check_weights\": [\n            \"weights\",\n            \"n_components\"\n         ],\n         \"_compute_log_det_cholesky\": [\n            \"matrix_chol\",\n            \"covariance_type\",\n            \"n_features\"\n         ],\n         \"_compute_precision_cholesky\": [\n            \"covariances\",\n            \"covariance_type\"\n         ],\n         \"_estimate_gaussian_covariances_diag\": [\n            \"resp\",\n            \"X\",\n            \"nk\",\n            \"means\",\n            \"reg_covar\"\n         ],\n         \"_estimate_gaussian_covariances_full\": [\n            \"resp\",\n            \"X\",\n            \"nk\",\n            \"means\",\n            \"reg_covar\"\n         ],\n         \"_estimate_gaussian_covariances_spherical\": [\n            \"resp\",\n            \"X\",\n            \"nk\",\n            \"means\",\n            \"reg_covar\"\n         ],\n         \"_estimate_gaussian_covariances_tied\": [\n            \"resp\",\n            \"X\",\n            \"nk\",\n            \"means\",\n            \"reg_covar\"\n         ],\n         \"_estimate_gaussian_parameters\": [\n            \"X\",\n            \"resp\",\n            \"reg_covar\",\n            \"covariance_type\"\n         ],\n         \"_estimate_log_gaussian_prob\": [\n            \"X\",\n            \"means\",\n            \"precisions_chol\",\n            \"covariance_type\"\n         ]\n      },\n      \"sklearn.mixture.base\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.mixture.bayesian_mixture\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.mixture.gaussian_mixture\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.mixture.tests.test_bayesian_mixture\": {\n         \"test_bayesian_mixture_check_is_fitted\": [],\n         \"test_bayesian_mixture_covariance_type\": [],\n         \"test_bayesian_mixture_fit_predict\": [\n            \"seed\",\n            \"max_iter\",\n            \"tol\"\n         ],\n         \"test_bayesian_mixture_fit_predict_n_init\": [],\n         \"test_bayesian_mixture_mean_prior_initialisation\": [],\n         \"test_bayesian_mixture_precisions_prior_initialisation\": [],\n         \"test_bayesian_mixture_predict_predict_proba\": [],\n         \"test_bayesian_mixture_weight_concentration_prior_type\": [],\n         \"test_bayesian_mixture_weights\": [],\n         \"test_bayesian_mixture_weights_prior_initialisation\": [],\n         \"test_check_covariance_precision\": [],\n         \"test_compare_covar_type\": [],\n         \"test_invariant_translation\": [],\n         \"test_log_dirichlet_norm\": [],\n         \"test_log_wishart_norm\": [],\n         \"test_monotonic_likelihood\": []\n      },\n      \"sklearn.mixture.tests.test_gaussian_mixture\": {\n         \"_naive_lmvnpdf_diag\": [\n            \"X\",\n            \"means\",\n            \"covars\"\n         ],\n         \"generate_data\": [\n            \"n_samples\",\n            \"n_features\",\n            \"weights\",\n            \"means\",\n            \"precisions\",\n            \"covariance_type\"\n         ],\n         \"test_bic_1d_1component\": [],\n         \"test_check_X\": [],\n         \"test_check_means\": [],\n         \"test_check_precisions\": [],\n         \"test_check_weights\": [],\n         \"test_compute_log_det_cholesky\": [],\n         \"test_convergence_detected_with_warm_start\": [],\n         \"test_gaussian_mixture_aic_bic\": [],\n         \"test_gaussian_mixture_attributes\": [],\n         \"test_gaussian_mixture_estimate_log_prob_resp\": [],\n         \"test_gaussian_mixture_fit\": [],\n         \"test_gaussian_mixture_fit_best_params\": [],\n         \"test_gaussian_mixture_fit_convergence_warning\": [],\n         \"test_gaussian_mixture_fit_predict\": [\n            \"seed\",\n            \"max_iter\",\n            \"tol\"\n         ],\n         \"test_gaussian_mixture_fit_predict_n_init\": [],\n         \"test_gaussian_mixture_log_probabilities\": [],\n         \"test_gaussian_mixture_n_parameters\": [],\n         \"test_gaussian_mixture_predict_predict_proba\": [],\n         \"test_gaussian_mixture_verbose\": [],\n         \"test_gaussian_suffstat_sk_spherical\": [],\n         \"test_init\": [],\n         \"test_monotonic_likelihood\": [],\n         \"test_multiple_init\": [],\n         \"test_property\": [],\n         \"test_regularisation\": [],\n         \"test_sample\": [],\n         \"test_score\": [],\n         \"test_score_samples\": [],\n         \"test_suffstat_sk_diag\": [],\n         \"test_suffstat_sk_full\": [],\n         \"test_suffstat_sk_tied\": [],\n         \"test_warm_start\": [\n            \"seed\"\n         ]\n      },\n      \"sklearn.mixture.tests.test_mixture\": {\n         \"test_gaussian_mixture_n_iter\": [\n            \"estimator\"\n         ]\n      },\n      \"sklearn.model_selection._search\": {\n         \"_check_param_grid\": [\n            \"param_grid\"\n         ],\n         \"fit_grid_point\": [\n            \"X\",\n            \"y\",\n            \"estimator\",\n            \"parameters\",\n            \"train\",\n            \"test\",\n            \"scorer\",\n            \"verbose\",\n            \"error_score\"\n         ]\n      },\n      \"sklearn.model_selection._split\": {\n         \"_build_repr\": [\n            \"self\"\n         ],\n         \"_validate_shuffle_split\": [\n            \"n_samples\",\n            \"test_size\",\n            \"train_size\",\n            \"default_test_size\"\n         ],\n         \"check_cv\": [\n            \"cv\",\n            \"y\",\n            \"classifier\"\n         ],\n         \"train_test_split\": []\n      },\n      \"sklearn.model_selection._validation\": {\n         \"_aggregate_score_dicts\": [\n            \"scores\"\n         ],\n         \"_check_is_permutation\": [\n            \"indices\",\n            \"n_samples\"\n         ],\n         \"_enforce_prediction_order\": [\n            \"classes\",\n            \"predictions\",\n            \"n_classes\",\n            \"method\"\n         ],\n         \"_fit_and_predict\": [\n            \"estimator\",\n            \"X\",\n            \"y\",\n            \"train\",\n            \"test\",\n            \"verbose\",\n            \"fit_params\",\n            \"method\"\n         ],\n         \"_fit_and_score\": [\n            \"estimator\",\n            \"X\",\n            \"y\",\n            \"scorer\",\n            \"train\",\n            \"test\",\n            \"verbose\",\n            \"parameters\",\n            \"fit_params\",\n            \"return_train_score\",\n            \"return_parameters\",\n            \"return_n_test_samples\",\n            \"return_times\",\n            \"return_estimator\",\n            \"error_score\"\n         ],\n         \"_incremental_fit_estimator\": [\n            \"estimator\",\n            \"X\",\n            \"y\",\n            \"classes\",\n            \"train\",\n            \"test\",\n            \"train_sizes\",\n            \"scorer\",\n            \"verbose\",\n            \"return_times\"\n         ],\n         \"_permutation_test_score\": [\n            \"estimator\",\n            \"X\",\n            \"y\",\n            \"groups\",\n            \"cv\",\n            \"scorer\"\n         ],\n         \"_score\": [\n            \"estimator\",\n            \"X_test\",\n            \"y_test\",\n            \"scorer\"\n         ],\n         \"_shuffle\": [\n            \"y\",\n            \"groups\",\n            \"random_state\"\n         ],\n         \"_translate_train_sizes\": [\n            \"train_sizes\",\n            \"n_max_training_samples\"\n         ],\n         \"cross_val_predict\": [\n            \"estimator\",\n            \"X\",\n            \"y\",\n            \"groups\",\n            \"cv\",\n            \"n_jobs\",\n            \"verbose\",\n            \"fit_params\",\n            \"pre_dispatch\",\n            \"method\"\n         ],\n         \"cross_val_score\": [\n            \"estimator\",\n            \"X\",\n            \"y\",\n            \"groups\",\n            \"scoring\",\n            \"cv\",\n            \"n_jobs\",\n            \"verbose\",\n            \"fit_params\",\n            \"pre_dispatch\",\n            \"error_score\"\n         ],\n         \"cross_validate\": [\n            \"estimator\",\n            \"X\",\n            \"y\",\n            \"groups\",\n            \"scoring\",\n            \"cv\",\n            \"n_jobs\",\n            \"verbose\",\n            \"fit_params\",\n            \"pre_dispatch\",\n            \"return_train_score\",\n            \"return_estimator\",\n            \"error_score\"\n         ],\n         \"learning_curve\": [\n            \"estimator\",\n            \"X\",\n            \"y\",\n            \"groups\",\n            \"train_sizes\",\n            \"cv\",\n            \"scoring\",\n            \"exploit_incremental_learning\",\n            \"n_jobs\",\n            \"pre_dispatch\",\n            \"verbose\",\n            \"shuffle\",\n            \"random_state\",\n            \"error_score\",\n            \"return_times\"\n         ],\n         \"permutation_test_score\": [\n            \"estimator\",\n            \"X\",\n            \"y\",\n            \"groups\",\n            \"cv\",\n            \"n_permutations\",\n            \"n_jobs\",\n            \"random_state\",\n            \"verbose\",\n            \"scoring\"\n         ],\n         \"validation_curve\": [\n            \"estimator\",\n            \"X\",\n            \"y\",\n            \"param_name\",\n            \"param_range\",\n            \"groups\",\n            \"cv\",\n            \"scoring\",\n            \"n_jobs\",\n            \"pre_dispatch\",\n            \"verbose\",\n            \"error_score\"\n         ]\n      },\n      \"sklearn.model_selection.tests.test_search\": {\n         \"assert_grid_iter_equals_getitem\": [\n            \"grid\"\n         ],\n         \"check_cv_results_array_types\": [\n            \"search\",\n            \"param_keys\",\n            \"score_keys\"\n         ],\n         \"check_cv_results_keys\": [\n            \"cv_results\",\n            \"param_keys\",\n            \"score_keys\",\n            \"n_cand\"\n         ],\n         \"compare_cv_results_multimetric_with_single\": [\n            \"search_multi\",\n            \"search_acc\",\n            \"search_rec\",\n            \"iid\"\n         ],\n         \"compare_refit_methods_when_refit_with_acc\": [\n            \"search_multi\",\n            \"search_acc\",\n            \"refit\"\n         ],\n         \"test_SearchCV_with_fit_params\": [\n            \"SearchCV\"\n         ],\n         \"test_X_as_list\": [],\n         \"test__custom_fit_no_run_search\": [],\n         \"test_classes__property\": [],\n         \"test_custom_run_search\": [],\n         \"test_deprecated_grid_search_iid\": [\n            \"iid\"\n         ],\n         \"test_empty_cv_iterator_error\": [],\n         \"test_fit_grid_point\": [],\n         \"test_grid_search\": [],\n         \"test_grid_search_allows_nans\": [],\n         \"test_grid_search_bad_param_grid\": [],\n         \"test_grid_search_correct_score_results\": [],\n         \"test_grid_search_cv_results\": [],\n         \"test_grid_search_cv_results_multimetric\": [],\n         \"test_grid_search_cv_splits_consistency\": [],\n         \"test_grid_search_error\": [],\n         \"test_grid_search_failing_classifier\": [],\n         \"test_grid_search_failing_classifier_raise\": [],\n         \"test_grid_search_groups\": [],\n         \"test_grid_search_no_score\": [],\n         \"test_grid_search_one_grid_point\": [],\n         \"test_grid_search_pipeline_steps\": [],\n         \"test_grid_search_precomputed_kernel\": [],\n         \"test_grid_search_precomputed_kernel_error_nonsquare\": [],\n         \"test_grid_search_score_method\": [],\n         \"test_grid_search_sparse\": [],\n         \"test_grid_search_sparse_scoring\": [],\n         \"test_grid_search_when_param_grid_includes_range\": [],\n         \"test_grid_search_with_multioutput_data\": [],\n         \"test_gridsearch_nd\": [],\n         \"test_gridsearch_no_predict\": [],\n         \"test_no_refit\": [],\n         \"test_pandas_input\": [],\n         \"test_param_sampler\": [],\n         \"test_parameter_grid\": [],\n         \"test_parameters_sampler_replacement\": [],\n         \"test_pickle\": [],\n         \"test_predict_proba_disabled\": [],\n         \"test_random_search_bad_cv\": [],\n         \"test_random_search_cv_results\": [],\n         \"test_random_search_cv_results_multimetric\": [],\n         \"test_refit\": [],\n         \"test_refit_callable\": [],\n         \"test_refit_callable_invalid_type\": [],\n         \"test_refit_callable_multi_metric\": [],\n         \"test_refit_callable_out_bound\": [\n            \"out_bound_value\",\n            \"search_cv\"\n         ],\n         \"test_scalar_fit_param\": [\n            \"SearchCV\",\n            \"param_search\"\n         ],\n         \"test_scalar_fit_param_compat\": [\n            \"SearchCV\",\n            \"param_search\"\n         ],\n         \"test_search_cv__pairwise_property_delegated_to_base_estimator\": [],\n         \"test_search_cv__pairwise_property_equivalence_of_precomputed\": [],\n         \"test_search_cv_results_none_param\": [],\n         \"test_search_cv_results_rank_tie_breaking\": [],\n         \"test_search_cv_timing\": [],\n         \"test_search_default_iid\": [\n            \"SearchCV\",\n            \"specialized_params\"\n         ],\n         \"test_search_iid_param\": [],\n         \"test_search_train_scores_set_to_false\": [],\n         \"test_stochastic_gradient_loss_param\": [],\n         \"test_transform_inverse_transform_round_trip\": [],\n         \"test_trivial_cv_results_attr\": [],\n         \"test_unsupervised_grid_search\": [],\n         \"test_validate_parameter_input\": [\n            \"klass\",\n            \"input\",\n            \"error_type\",\n            \"error_message\"\n         ],\n         \"test_y_as_list\": []\n      },\n      \"sklearn.model_selection.tests.test_split\": {\n         \"_check_time_series_max_train_size\": [\n            \"splits\",\n            \"check_splits\",\n            \"max_train_size\"\n         ],\n         \"check_cv_coverage\": [\n            \"cv\",\n            \"X\",\n            \"y\",\n            \"groups\",\n            \"expected_n_splits\"\n         ],\n         \"check_valid_split\": [\n            \"train\",\n            \"test\",\n            \"n_samples\"\n         ],\n         \"test_2d_y\": [],\n         \"test_build_repr\": [],\n         \"test_check_cv\": [],\n         \"test_cross_validator_with_default_params\": [],\n         \"test_cv_iterable_wrapper\": [],\n         \"test_get_n_splits_for_repeated_kfold\": [],\n         \"test_get_n_splits_for_repeated_stratified_kfold\": [],\n         \"test_group_kfold\": [],\n         \"test_group_shuffle_split\": [],\n         \"test_group_shuffle_split_default_test_size\": [\n            \"train_size\",\n            \"exp_train\",\n            \"exp_test\"\n         ],\n         \"test_kfold_balance\": [],\n         \"test_kfold_can_detect_dependent_samples_on_digits\": [],\n         \"test_kfold_indices\": [],\n         \"test_kfold_no_shuffle\": [],\n         \"test_kfold_valueerrors\": [],\n         \"test_leave_group_out_changing_groups\": [],\n         \"test_leave_one_out_empty_trainset\": [],\n         \"test_leave_one_p_group_out\": [],\n         \"test_leave_one_p_group_out_error_on_fewer_number_of_groups\": [],\n         \"test_leave_p_out_empty_trainset\": [],\n         \"test_nested_cv\": [],\n         \"test_predefinedsplit_with_kfold_split\": [],\n         \"test_random_state_shuffle_false\": [\n            \"Klass\"\n         ],\n         \"test_repeated_cv_repr\": [\n            \"RepeatedCV\"\n         ],\n         \"test_repeated_cv_value_errors\": [],\n         \"test_repeated_kfold_determinstic_split\": [],\n         \"test_repeated_stratified_kfold_determinstic_split\": [],\n         \"test_shuffle_kfold\": [],\n         \"test_shuffle_kfold_stratifiedkfold_reproducibility\": [],\n         \"test_shuffle_split\": [],\n         \"test_shuffle_split_default_test_size\": [\n            \"split_class\",\n            \"train_size\",\n            \"exp_train\",\n            \"exp_test\"\n         ],\n         \"test_shuffle_split_empty_trainset\": [\n            \"CVSplitter\"\n         ],\n         \"test_shuffle_stratifiedkfold\": [],\n         \"test_shufflesplit_errors\": [\n            \"test_size\",\n            \"train_size\"\n         ],\n         \"test_shufflesplit_reproducible\": [],\n         \"test_stratified_kfold_label_invariance\": [\n            \"k\",\n            \"shuffle\"\n         ],\n         \"test_stratified_kfold_no_shuffle\": [],\n         \"test_stratified_kfold_ratios\": [\n            \"k\",\n            \"shuffle\"\n         ],\n         \"test_stratified_shuffle_split_even\": [],\n         \"test_stratified_shuffle_split_init\": [],\n         \"test_stratified_shuffle_split_iter\": [],\n         \"test_stratified_shuffle_split_multilabel\": [],\n         \"test_stratified_shuffle_split_multilabel_many_labels\": [],\n         \"test_stratified_shuffle_split_overlap_train_test_bug\": [],\n         \"test_stratified_shuffle_split_respects_test_size\": [],\n         \"test_stratifiedkfold_balance\": [],\n         \"test_stratifiedshufflesplit_list_input\": [],\n         \"test_time_series_cv\": [],\n         \"test_time_series_max_train_size\": [],\n         \"test_train_test_split\": [],\n         \"test_train_test_split_allow_nans\": [],\n         \"test_train_test_split_default_test_size\": [\n            \"train_size\",\n            \"exp_train\",\n            \"exp_test\"\n         ],\n         \"test_train_test_split_empty_trainset\": [],\n         \"test_train_test_split_errors\": [],\n         \"test_train_test_split_invalid_sizes1\": [\n            \"train_size\",\n            \"test_size\"\n         ],\n         \"test_train_test_split_invalid_sizes2\": [\n            \"train_size\",\n            \"test_size\"\n         ],\n         \"test_train_test_split_list_input\": [],\n         \"test_train_test_split_mock_pandas\": [],\n         \"test_train_test_split_pandas\": [],\n         \"test_train_test_split_sparse\": []\n      },\n      \"sklearn.model_selection.tests.test_validation\": {\n         \"check_cross_val_predict_binary\": [\n            \"est\",\n            \"X\",\n            \"y\",\n            \"method\"\n         ],\n         \"check_cross_val_predict_multiclass\": [\n            \"est\",\n            \"X\",\n            \"y\",\n            \"method\"\n         ],\n         \"check_cross_val_predict_multilabel\": [\n            \"est\",\n            \"X\",\n            \"y\",\n            \"method\"\n         ],\n         \"check_cross_val_predict_with_method_binary\": [\n            \"est\"\n         ],\n         \"check_cross_val_predict_with_method_multiclass\": [\n            \"est\"\n         ],\n         \"check_cross_validate_multi_metric\": [\n            \"clf\",\n            \"X\",\n            \"y\",\n            \"scores\"\n         ],\n         \"check_cross_validate_single_metric\": [\n            \"clf\",\n            \"X\",\n            \"y\",\n            \"scores\"\n         ],\n         \"get_expected_predictions\": [\n            \"X\",\n            \"y\",\n            \"cv\",\n            \"classes\",\n            \"est\",\n            \"method\"\n         ],\n         \"test_check_is_permutation\": [],\n         \"test_cross_val_predict\": [],\n         \"test_cross_val_predict_class_subset\": [],\n         \"test_cross_val_predict_decision_function_shape\": [],\n         \"test_cross_val_predict_input_types\": [],\n         \"test_cross_val_predict_method_checking\": [],\n         \"test_cross_val_predict_pandas\": [],\n         \"test_cross_val_predict_predict_log_proba_shape\": [],\n         \"test_cross_val_predict_predict_proba_shape\": [],\n         \"test_cross_val_predict_sparse_prediction\": [],\n         \"test_cross_val_predict_unbalanced\": [],\n         \"test_cross_val_predict_with_method\": [],\n         \"test_cross_val_predict_with_method_multilabel_ovr\": [],\n         \"test_cross_val_predict_with_method_multilabel_rf\": [],\n         \"test_cross_val_predict_with_method_multilabel_rf_rare_class\": [],\n         \"test_cross_val_predict_with_method_rare_class\": [],\n         \"test_cross_val_score\": [],\n         \"test_cross_val_score_allow_nans\": [],\n         \"test_cross_val_score_errors\": [],\n         \"test_cross_val_score_fit_params\": [],\n         \"test_cross_val_score_mask\": [],\n         \"test_cross_val_score_multilabel\": [],\n         \"test_cross_val_score_pandas\": [],\n         \"test_cross_val_score_precomputed\": [],\n         \"test_cross_val_score_predict_groups\": [],\n         \"test_cross_val_score_score_func\": [],\n         \"test_cross_val_score_sparse_fit_params\": [],\n         \"test_cross_val_score_with_score_func_classification\": [],\n         \"test_cross_val_score_with_score_func_regression\": [],\n         \"test_cross_validate\": [],\n         \"test_cross_validate_invalid_scoring_param\": [],\n         \"test_cross_validate_many_jobs\": [],\n         \"test_fit_and_score_failing\": [],\n         \"test_fit_and_score_verbosity\": [\n            \"capsys\",\n            \"return_train_score\",\n            \"scorer\",\n            \"expected\"\n         ],\n         \"test_fit_and_score_working\": [],\n         \"test_gridsearchcv_cross_val_predict_with_method\": [],\n         \"test_learning_curve\": [],\n         \"test_learning_curve_batch_and_incremental_learning_are_equal\": [],\n         \"test_learning_curve_incremental_learning\": [],\n         \"test_learning_curve_incremental_learning_not_possible\": [],\n         \"test_learning_curve_incremental_learning_unsupervised\": [],\n         \"test_learning_curve_n_sample_range_out_of_bounds\": [],\n         \"test_learning_curve_remove_duplicate_sample_sizes\": [],\n         \"test_learning_curve_unsupervised\": [],\n         \"test_learning_curve_verbose\": [],\n         \"test_learning_curve_with_boolean_indices\": [],\n         \"test_learning_curve_with_shuffle\": [],\n         \"test_permutation_score\": [],\n         \"test_permutation_test_score_allow_nans\": [],\n         \"test_permutation_test_score_pandas\": [],\n         \"test_score\": [],\n         \"test_score_memmap\": [],\n         \"test_validation_curve\": [],\n         \"test_validation_curve_clone_estimator\": [],\n         \"test_validation_curve_cv_splits_consistency\": [],\n         \"three_params_scorer\": [\n            \"i\",\n            \"j\",\n            \"k\"\n         ]\n      },\n      \"sklearn.multiclass\": {\n         \"_check_estimator\": [\n            \"estimator\"\n         ],\n         \"_fit_binary\": [\n            \"estimator\",\n            \"X\",\n            \"y\",\n            \"classes\"\n         ],\n         \"_fit_ovo_binary\": [\n            \"estimator\",\n            \"X\",\n            \"y\",\n            \"i\",\n            \"j\"\n         ],\n         \"_partial_fit_binary\": [\n            \"estimator\",\n            \"X\",\n            \"y\"\n         ],\n         \"_partial_fit_ovo_binary\": [\n            \"estimator\",\n            \"X\",\n            \"y\",\n            \"i\",\n            \"j\"\n         ],\n         \"_predict_binary\": [\n            \"estimator\",\n            \"X\"\n         ]\n      },\n      \"sklearn.multioutput\": {\n         \"_fit_estimator\": [\n            \"estimator\",\n            \"X\",\n            \"y\",\n            \"sample_weight\"\n         ],\n         \"_partial_fit_estimator\": [\n            \"estimator\",\n            \"X\",\n            \"y\",\n            \"classes\",\n            \"sample_weight\",\n            \"first_time\"\n         ]\n      },\n      \"sklearn.neighbors._base\": {\n         \"_check_precomputed\": [\n            \"X\"\n         ],\n         \"_check_weights\": [\n            \"weights\"\n         ],\n         \"_get_weights\": [\n            \"dist\",\n            \"weights\"\n         ],\n         \"_is_sorted_by_data\": [\n            \"graph\"\n         ],\n         \"_kneighbors_from_graph\": [\n            \"graph\",\n            \"n_neighbors\",\n            \"return_distance\"\n         ],\n         \"_radius_neighbors_from_graph\": [\n            \"graph\",\n            \"radius\",\n            \"return_distance\"\n         ],\n         \"_tree_query_parallel_helper\": [\n            \"tree\"\n         ],\n         \"_tree_query_radius_parallel_helper\": [\n            \"tree\"\n         ]\n      },\n      \"sklearn.neighbors._graph\": {\n         \"_check_params\": [\n            \"X\",\n            \"metric\",\n            \"p\",\n            \"metric_params\"\n         ],\n         \"_query_include_self\": [\n            \"X\",\n            \"include_self\",\n            \"mode\"\n         ],\n         \"kneighbors_graph\": [\n            \"X\",\n            \"n_neighbors\",\n            \"mode\",\n            \"metric\",\n            \"p\",\n            \"metric_params\",\n            \"include_self\",\n            \"n_jobs\"\n         ],\n         \"radius_neighbors_graph\": [\n            \"X\",\n            \"radius\",\n            \"mode\",\n            \"metric\",\n            \"p\",\n            \"metric_params\",\n            \"include_self\",\n            \"n_jobs\"\n         ]\n      },\n      \"sklearn.neighbors.ball_tree\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.neighbors.base\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.neighbors.classification\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.neighbors.dist_metrics\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.neighbors.graph\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.neighbors.kd_tree\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.neighbors.kde\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.neighbors.lof\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.neighbors.nca\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.neighbors.nearest_centroid\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.neighbors.quad_tree\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.neighbors.regression\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.neighbors.setup\": {\n         \"configuration\": [\n            \"parent_package\",\n            \"top_path\"\n         ]\n      },\n      \"sklearn.neighbors.tests.test_ball_tree\": {\n         \"brute_force_neighbors\": [\n            \"X\",\n            \"Y\",\n            \"k\",\n            \"metric\"\n         ],\n         \"compute_kernel_slow\": [\n            \"Y\",\n            \"X\",\n            \"kernel\",\n            \"h\"\n         ],\n         \"dist_func\": [\n            \"x1\",\n            \"x2\",\n            \"p\"\n         ],\n         \"test_ball_tree_kde\": [\n            \"kernel\",\n            \"h\",\n            \"rtol\",\n            \"atol\",\n            \"breadth_first\",\n            \"n_samples\",\n            \"n_features\"\n         ],\n         \"test_ball_tree_query_metrics\": [\n            \"metric\"\n         ],\n         \"test_ball_tree_query_radius\": [\n            \"n_samples\",\n            \"n_features\"\n         ],\n         \"test_ball_tree_query_radius_distance\": [\n            \"n_samples\",\n            \"n_features\"\n         ],\n         \"test_ball_tree_two_point\": [\n            \"n_samples\",\n            \"n_features\"\n         ],\n         \"test_gaussian_kde\": [\n            \"n_samples\"\n         ],\n         \"test_neighbors_heap\": [\n            \"n_pts\",\n            \"n_nbrs\"\n         ],\n         \"test_node_heap\": [\n            \"n_nodes\"\n         ],\n         \"test_query_haversine\": [],\n         \"test_simultaneous_sort\": [\n            \"n_rows\",\n            \"n_pts\"\n         ]\n      },\n      \"sklearn.neighbors.tests.test_dist_metrics\": {\n         \"check_cdist\": [\n            \"metric\",\n            \"kwargs\",\n            \"D_true\"\n         ],\n         \"check_cdist_bool\": [\n            \"metric\",\n            \"D_true\"\n         ],\n         \"check_pdist\": [\n            \"metric\",\n            \"kwargs\",\n            \"D_true\"\n         ],\n         \"check_pdist_bool\": [\n            \"metric\",\n            \"D_true\"\n         ],\n         \"check_pickle\": [\n            \"metric\",\n            \"kwargs\"\n         ],\n         \"dist_func\": [\n            \"x1\",\n            \"x2\",\n            \"p\"\n         ],\n         \"test_bad_pyfunc_metric\": [],\n         \"test_cdist\": [\n            \"metric\"\n         ],\n         \"test_cdist_bool_metric\": [\n            \"metric\"\n         ],\n         \"test_haversine_metric\": [],\n         \"test_input_data_size\": [],\n         \"test_pdist\": [\n            \"metric\"\n         ],\n         \"test_pdist_bool_metrics\": [\n            \"metric\"\n         ],\n         \"test_pickle\": [\n            \"metric\"\n         ],\n         \"test_pickle_bool_metrics\": [\n            \"metric\"\n         ],\n         \"test_pyfunc_metric\": []\n      },\n      \"sklearn.neighbors.tests.test_graph\": {\n         \"_has_explicit_diagonal\": [\n            \"X\"\n         ],\n         \"test_explicit_diagonal\": [],\n         \"test_transformer_result\": []\n      },\n      \"sklearn.neighbors.tests.test_kd_tree\": {\n         \"check_results\": [\n            \"kernel\",\n            \"h\",\n            \"atol\",\n            \"rtol\",\n            \"breadth_first\",\n            \"Y\",\n            \"kdt\",\n            \"dens_true\"\n         ],\n         \"compute_kernel_slow\": [\n            \"Y\",\n            \"X\",\n            \"kernel\",\n            \"h\"\n         ],\n         \"test_gaussian_kde\": [\n            \"n_samples\"\n         ],\n         \"test_kd_tree_kde\": [\n            \"kernel\",\n            \"h\"\n         ],\n         \"test_kd_tree_query_radius\": [\n            \"n_samples\",\n            \"n_features\"\n         ],\n         \"test_kd_tree_query_radius_distance\": [\n            \"n_samples\",\n            \"n_features\"\n         ],\n         \"test_kd_tree_two_point\": [\n            \"dualtree\"\n         ],\n         \"test_neighbors_heap\": [\n            \"n_pts\",\n            \"n_nbrs\"\n         ],\n         \"test_node_heap\": [\n            \"n_nodes\"\n         ],\n         \"test_simultaneous_sort\": [\n            \"n_rows\",\n            \"n_pts\"\n         ]\n      },\n      \"sklearn.neighbors.tests.test_kde\": {\n         \"check_results\": [\n            \"kernel\",\n            \"bandwidth\",\n            \"atol\",\n            \"rtol\",\n            \"X\",\n            \"Y\",\n            \"dens_true\"\n         ],\n         \"compute_kernel_slow\": [\n            \"Y\",\n            \"X\",\n            \"kernel\",\n            \"h\"\n         ],\n         \"test_kde_algorithm_metric_choice\": [\n            \"algorithm\",\n            \"metric\"\n         ],\n         \"test_kde_badargs\": [],\n         \"test_kde_pipeline_gridsearch\": [],\n         \"test_kde_sample_weights\": [],\n         \"test_kde_score\": [\n            \"n_samples\",\n            \"n_features\"\n         ],\n         \"test_kernel_density\": [\n            \"kernel\",\n            \"bandwidth\"\n         ],\n         \"test_kernel_density_sampling\": [\n            \"n_samples\",\n            \"n_features\"\n         ],\n         \"test_pickling\": [\n            \"tmpdir\",\n            \"sample_weight\"\n         ],\n         \"test_sample_weight_invalid\": []\n      },\n      \"sklearn.neighbors.tests.test_lof\": {\n         \"test_contamination\": [],\n         \"test_hasattr_prediction\": [],\n         \"test_lof\": [],\n         \"test_lof_performance\": [],\n         \"test_lof_precomputed\": [\n            \"random_state\"\n         ],\n         \"test_lof_values\": [],\n         \"test_n_neighbors_attribute\": [],\n         \"test_novelty_errors\": [],\n         \"test_novelty_training_scores\": [],\n         \"test_novelty_true_common_tests\": [],\n         \"test_predicted_outlier_number\": [],\n         \"test_score_samples\": []\n      },\n      \"sklearn.neighbors.tests.test_nca\": {\n         \"test_auto_init\": [\n            \"n_samples\",\n            \"n_features\",\n            \"n_classes\",\n            \"n_components\"\n         ],\n         \"test_callback\": [\n            \"capsys\"\n         ],\n         \"test_convergence_warning\": [],\n         \"test_expected_transformation_shape\": [],\n         \"test_finite_differences\": [],\n         \"test_init_transformation\": [],\n         \"test_n_components\": [],\n         \"test_no_verbose\": [\n            \"capsys\"\n         ],\n         \"test_one_class\": [],\n         \"test_parameters_valid_types\": [\n            \"param\",\n            \"value\"\n         ],\n         \"test_params_validation\": [],\n         \"test_simple_example\": [],\n         \"test_singleton_class\": [],\n         \"test_toy_example_collapse_points\": [],\n         \"test_transformation_dimensions\": [],\n         \"test_verbose\": [\n            \"init_name\",\n            \"capsys\"\n         ],\n         \"test_warm_start_effectiveness\": [],\n         \"test_warm_start_validation\": []\n      },\n      \"sklearn.neighbors.tests.test_nearest_centroid\": {\n         \"test_classification_toy\": [],\n         \"test_iris\": [],\n         \"test_iris_shrinkage\": [],\n         \"test_manhattan_metric\": [],\n         \"test_pickle\": [],\n         \"test_precomputed\": [],\n         \"test_predict_translated_data\": [],\n         \"test_shrinkage_correct\": [],\n         \"test_shrinkage_threshold_decoded_y\": []\n      },\n      \"sklearn.neighbors.tests.test_neighbors\": {\n         \"_weight_func\": [\n            \"dist\"\n         ],\n         \"check_object_arrays\": [\n            \"nparray\",\n            \"list_check\"\n         ],\n         \"check_precomputed\": [\n            \"make_train_test\",\n            \"estimators\"\n         ],\n         \"test_KNeighborsClassifier_multioutput\": [],\n         \"test_KNeighborsRegressor_multioutput_uniform_weight\": [],\n         \"test_RadiusNeighborsClassifier_multioutput\": [],\n         \"test_RadiusNeighborsRegressor_multioutput\": [\n            \"n_samples\",\n            \"n_features\",\n            \"n_test_pts\",\n            \"n_neighbors\",\n            \"random_state\"\n         ],\n         \"test_RadiusNeighborsRegressor_multioutput_with_uniform_weight\": [],\n         \"test_callable_metric\": [],\n         \"test_check_precomputed\": [],\n         \"test_dtype_convert\": [],\n         \"test_include_self_neighbors_graph\": [],\n         \"test_is_sorted_by_data\": [],\n         \"test_k_and_radius_neighbors_X_None\": [],\n         \"test_k_and_radius_neighbors_duplicates\": [],\n         \"test_k_and_radius_neighbors_train_is_not_query\": [],\n         \"test_kneighbors_classifier\": [\n            \"n_samples\",\n            \"n_features\",\n            \"n_test_pts\",\n            \"n_neighbors\",\n            \"random_state\"\n         ],\n         \"test_kneighbors_classifier_float_labels\": [\n            \"n_samples\",\n            \"n_features\",\n            \"n_test_pts\",\n            \"n_neighbors\",\n            \"random_state\"\n         ],\n         \"test_kneighbors_classifier_predict_proba\": [],\n         \"test_kneighbors_classifier_sparse\": [\n            \"n_samples\",\n            \"n_features\",\n            \"n_test_pts\",\n            \"n_neighbors\",\n            \"random_state\"\n         ],\n         \"test_kneighbors_graph\": [],\n         \"test_kneighbors_graph_sparse\": [\n            \"seed\"\n         ],\n         \"test_kneighbors_regressor\": [\n            \"n_samples\",\n            \"n_features\",\n            \"n_test_pts\",\n            \"n_neighbors\",\n            \"random_state\"\n         ],\n         \"test_kneighbors_regressor_multioutput\": [\n            \"n_samples\",\n            \"n_features\",\n            \"n_test_pts\",\n            \"n_neighbors\",\n            \"random_state\"\n         ],\n         \"test_kneighbors_regressor_sparse\": [\n            \"n_samples\",\n            \"n_features\",\n            \"n_test_pts\",\n            \"n_neighbors\",\n            \"random_state\"\n         ],\n         \"test_knn_forcing_backend\": [\n            \"backend\",\n            \"algorithm\"\n         ],\n         \"test_metric_params_interface\": [],\n         \"test_n_neighbors_datatype\": [],\n         \"test_neighbors_badargs\": [],\n         \"test_neighbors_digits\": [],\n         \"test_neighbors_iris\": [],\n         \"test_neighbors_metrics\": [\n            \"n_samples\",\n            \"n_features\",\n            \"n_query_pts\",\n            \"n_neighbors\"\n         ],\n         \"test_neighbors_regressors_zero_distance\": [],\n         \"test_non_euclidean_kneighbors\": [],\n         \"test_not_fitted_error_gets_raised\": [],\n         \"test_pairwise_boolean_distance\": [],\n         \"test_pipeline_with_nearest_neighbors_transformer\": [],\n         \"test_precomputed_cross_validation\": [],\n         \"test_precomputed_dense\": [],\n         \"test_precomputed_sparse_invalid\": [],\n         \"test_precomputed_sparse_knn\": [\n            \"fmt\"\n         ],\n         \"test_precomputed_sparse_radius\": [\n            \"fmt\"\n         ],\n         \"test_predict_sparse_ball_kd_tree\": [],\n         \"test_radius_neighbors_boundary_handling\": [],\n         \"test_radius_neighbors_classifier\": [\n            \"n_samples\",\n            \"n_features\",\n            \"n_test_pts\",\n            \"radius\",\n            \"random_state\"\n         ],\n         \"test_radius_neighbors_classifier_outlier_labeling\": [],\n         \"test_radius_neighbors_classifier_when_no_neighbors\": [],\n         \"test_radius_neighbors_classifier_zero_distance\": [],\n         \"test_radius_neighbors_graph\": [],\n         \"test_radius_neighbors_graph_sparse\": [\n            \"seed\"\n         ],\n         \"test_radius_neighbors_predict_proba\": [],\n         \"test_radius_neighbors_regressor\": [\n            \"n_samples\",\n            \"n_features\",\n            \"n_test_pts\",\n            \"radius\",\n            \"random_state\"\n         ],\n         \"test_same_knn_parallel\": [\n            \"algorithm\"\n         ],\n         \"test_same_radius_neighbors_parallel\": [\n            \"algorithm\"\n         ],\n         \"test_sparse_metric_callable\": [],\n         \"test_unsupervised_inputs\": [],\n         \"test_unsupervised_kneighbors\": [\n            \"n_samples\",\n            \"n_features\",\n            \"n_query_pts\",\n            \"n_neighbors\"\n         ],\n         \"test_unsupervised_radius_neighbors\": [\n            \"n_samples\",\n            \"n_features\",\n            \"n_query_pts\",\n            \"radius\",\n            \"random_state\"\n         ],\n         \"test_valid_brute_metric_for_auto_algorithm\": []\n      },\n      \"sklearn.neighbors.tests.test_neighbors_pipeline\": {\n         \"test_dbscan\": [],\n         \"test_isomap\": [],\n         \"test_kneighbors_regressor\": [],\n         \"test_lof_novelty_false\": [],\n         \"test_lof_novelty_true\": [],\n         \"test_spectral_clustering\": [],\n         \"test_spectral_embedding\": [],\n         \"test_tsne\": []\n      },\n      \"sklearn.neighbors.tests.test_neighbors_tree\": {\n         \"brute_force_neighbors\": [\n            \"X\",\n            \"Y\",\n            \"k\",\n            \"metric\"\n         ],\n         \"dist_func\": [\n            \"x1\",\n            \"x2\",\n            \"p\"\n         ],\n         \"test_nn_tree_query\": [\n            \"Cls\",\n            \"metric\",\n            \"k\",\n            \"dualtree\",\n            \"breadth_first\"\n         ],\n         \"test_pickle\": [\n            \"Cls\",\n            \"metric\",\n            \"protocol\"\n         ]\n      },\n      \"sklearn.neighbors.tests.test_quad_tree\": {\n         \"test_qt_insert_duplicate\": [\n            \"n_dimensions\"\n         ],\n         \"test_quad_tree_pickle\": [\n            \"n_dimensions\",\n            \"protocol\"\n         ],\n         \"test_quadtree_boundary_computation\": [],\n         \"test_quadtree_similar_point\": [],\n         \"test_summarize\": []\n      },\n      \"sklearn.neighbors.typedefs\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.neighbors.unsupervised\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.neural_network._base\": {\n         \"binary_log_loss\": [\n            \"y_true\",\n            \"y_prob\"\n         ],\n         \"identity\": [\n            \"X\"\n         ],\n         \"inplace_identity_derivative\": [\n            \"Z\",\n            \"delta\"\n         ],\n         \"inplace_logistic_derivative\": [\n            \"Z\",\n            \"delta\"\n         ],\n         \"inplace_relu_derivative\": [\n            \"Z\",\n            \"delta\"\n         ],\n         \"inplace_tanh_derivative\": [\n            \"Z\",\n            \"delta\"\n         ],\n         \"log_loss\": [\n            \"y_true\",\n            \"y_prob\"\n         ],\n         \"logistic\": [\n            \"X\"\n         ],\n         \"relu\": [\n            \"X\"\n         ],\n         \"softmax\": [\n            \"X\"\n         ],\n         \"squared_loss\": [\n            \"y_true\",\n            \"y_pred\"\n         ],\n         \"tanh\": [\n            \"X\"\n         ]\n      },\n      \"sklearn.neural_network._multilayer_perceptron\": {\n         \"_pack\": [\n            \"coefs_\",\n            \"intercepts_\"\n         ]\n      },\n      \"sklearn.neural_network.multilayer_perceptron\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.neural_network.rbm\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.neural_network.tests.test_mlp\": {\n         \"test_adaptive_learning_rate\": [],\n         \"test_alpha\": [],\n         \"test_early_stopping\": [],\n         \"test_early_stopping_stratified\": [],\n         \"test_fit\": [],\n         \"test_gradient\": [],\n         \"test_lbfgs_classification\": [\n            \"X\",\n            \"y\"\n         ],\n         \"test_lbfgs_classification_maxfun\": [\n            \"X\",\n            \"y\"\n         ],\n         \"test_lbfgs_regression\": [\n            \"X\",\n            \"y\"\n         ],\n         \"test_lbfgs_regression_maxfun\": [\n            \"X\",\n            \"y\"\n         ],\n         \"test_learning_rate_warmstart\": [],\n         \"test_multilabel_classification\": [],\n         \"test_multioutput_regression\": [],\n         \"test_n_iter_no_change\": [],\n         \"test_n_iter_no_change_inf\": [],\n         \"test_params_errors\": [\n            \"args\"\n         ],\n         \"test_partial_fit_classes_error\": [],\n         \"test_partial_fit_classification\": [],\n         \"test_partial_fit_errors\": [],\n         \"test_partial_fit_regression\": [],\n         \"test_partial_fit_unseen_classes\": [],\n         \"test_predict_proba_binary\": [],\n         \"test_predict_proba_multiclass\": [],\n         \"test_predict_proba_multilabel\": [],\n         \"test_shuffle\": [],\n         \"test_sparse_matrices\": [],\n         \"test_tolerance\": [],\n         \"test_verbose_sgd\": [],\n         \"test_warm_start\": []\n      },\n      \"sklearn.neural_network.tests.test_rbm\": {\n         \"test_fit\": [],\n         \"test_fit_gibbs\": [],\n         \"test_fit_gibbs_sparse\": [],\n         \"test_gibbs_smoke\": [],\n         \"test_partial_fit\": [],\n         \"test_rbm_verbose\": [],\n         \"test_sample_hiddens\": [],\n         \"test_score_samples\": [],\n         \"test_small_sparse\": [],\n         \"test_small_sparse_partial_fit\": [],\n         \"test_sparse_and_verbose\": [],\n         \"test_transform\": []\n      },\n      \"sklearn.neural_network.tests.test_stochastic_optimizers\": {\n         \"test_adam_optimizer\": [],\n         \"test_base_optimizer\": [],\n         \"test_sgd_optimizer_momentum\": [],\n         \"test_sgd_optimizer_nesterovs_momentum\": [],\n         \"test_sgd_optimizer_no_momentum\": [],\n         \"test_sgd_optimizer_trigger_stopping\": []\n      },\n      \"sklearn.pipeline\": {\n         \"_fit_one\": [\n            \"transformer\",\n            \"X\",\n            \"y\",\n            \"weight\",\n            \"message_clsname\",\n            \"message\"\n         ],\n         \"_fit_transform_one\": [\n            \"transformer\",\n            \"X\",\n            \"y\",\n            \"weight\",\n            \"message_clsname\",\n            \"message\"\n         ],\n         \"_name_estimators\": [\n            \"estimators\"\n         ],\n         \"_transform_one\": [\n            \"transformer\",\n            \"X\",\n            \"y\",\n            \"weight\"\n         ],\n         \"make_pipeline\": [],\n         \"make_union\": []\n      },\n      \"sklearn.preprocessing._data\": {\n         \"_handle_zeros_in_scale\": [\n            \"scale\",\n            \"copy\"\n         ],\n         \"add_dummy_feature\": [\n            \"X\",\n            \"value\"\n         ],\n         \"binarize\": [\n            \"X\",\n            \"threshold\",\n            \"copy\"\n         ],\n         \"maxabs_scale\": [\n            \"X\",\n            \"axis\",\n            \"copy\"\n         ],\n         \"minmax_scale\": [\n            \"X\",\n            \"feature_range\",\n            \"axis\",\n            \"copy\"\n         ],\n         \"normalize\": [\n            \"X\",\n            \"norm\",\n            \"axis\",\n            \"copy\",\n            \"return_norm\"\n         ],\n         \"power_transform\": [\n            \"X\",\n            \"method\",\n            \"standardize\",\n            \"copy\"\n         ],\n         \"quantile_transform\": [\n            \"X\",\n            \"axis\",\n            \"n_quantiles\",\n            \"output_distribution\",\n            \"ignore_implicit_zeros\",\n            \"subsample\",\n            \"random_state\",\n            \"copy\"\n         ],\n         \"robust_scale\": [\n            \"X\",\n            \"axis\",\n            \"with_centering\",\n            \"with_scaling\",\n            \"quantile_range\",\n            \"copy\"\n         ],\n         \"scale\": [\n            \"X\",\n            \"axis\",\n            \"with_mean\",\n            \"with_std\",\n            \"copy\"\n         ]\n      },\n      \"sklearn.preprocessing._function_transformer\": {\n         \"_identity\": [\n            \"X\"\n         ]\n      },\n      \"sklearn.preprocessing._label\": {\n         \"_encode\": [\n            \"values\",\n            \"uniques\",\n            \"encode\",\n            \"check_unknown\"\n         ],\n         \"_encode_check_unknown\": [\n            \"values\",\n            \"uniques\",\n            \"return_mask\"\n         ],\n         \"_encode_numpy\": [\n            \"values\",\n            \"uniques\",\n            \"encode\",\n            \"check_unknown\"\n         ],\n         \"_encode_python\": [\n            \"values\",\n            \"uniques\",\n            \"encode\"\n         ],\n         \"_inverse_binarize_multiclass\": [\n            \"y\",\n            \"classes\"\n         ],\n         \"_inverse_binarize_thresholding\": [\n            \"y\",\n            \"output_type\",\n            \"classes\",\n            \"threshold\"\n         ],\n         \"label_binarize\": [\n            \"y\",\n            \"classes\",\n            \"neg_label\",\n            \"pos_label\",\n            \"sparse_output\"\n         ]\n      },\n      \"sklearn.preprocessing.data\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.preprocessing.label\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.preprocessing.setup\": {\n         \"configuration\": [\n            \"parent_package\",\n            \"top_path\"\n         ]\n      },\n      \"sklearn.preprocessing.tests.test_common\": {\n         \"_get_valid_samples_by_column\": [\n            \"X\",\n            \"col\"\n         ],\n         \"test_missing_value_handling\": [\n            \"est\",\n            \"func\",\n            \"support_sparse\",\n            \"strictly_positive\"\n         ]\n      },\n      \"sklearn.preprocessing.tests.test_data\": {\n         \"_check_dim_1axis\": [\n            \"a\"\n         ],\n         \"_check_identity_scalers_attributes\": [\n            \"scaler_1\",\n            \"scaler_2\"\n         ],\n         \"assert_correct_incr\": [\n            \"i\",\n            \"batch_start\",\n            \"batch_stop\",\n            \"n\",\n            \"chunk_size\",\n            \"n_samples_seen\"\n         ],\n         \"test_add_dummy_feature\": [],\n         \"test_add_dummy_feature_coo\": [],\n         \"test_add_dummy_feature_csc\": [],\n         \"test_add_dummy_feature_csr\": [],\n         \"test_binarizer\": [],\n         \"test_center_kernel\": [],\n         \"test_cv_pipeline_precomputed\": [],\n         \"test_deprecated_quantile_transform_copy\": [],\n         \"test_fit_cold_start\": [],\n         \"test_fit_transform\": [],\n         \"test_handle_zeros_in_scale\": [],\n         \"test_maxabs_scaler_1d\": [],\n         \"test_maxabs_scaler_large_negative_value\": [],\n         \"test_maxabs_scaler_partial_fit\": [],\n         \"test_maxabs_scaler_transform_one_row_csr\": [],\n         \"test_maxabs_scaler_zero_variance_features\": [],\n         \"test_min_max_scaler_1d\": [],\n         \"test_min_max_scaler_iris\": [],\n         \"test_min_max_scaler_zero_variance_features\": [],\n         \"test_minmax_scale_axis1\": [],\n         \"test_minmax_scaler_partial_fit\": [],\n         \"test_normalize\": [],\n         \"test_normalizer_l1\": [],\n         \"test_normalizer_l2\": [],\n         \"test_normalizer_max\": [],\n         \"test_optimization_power_transformer\": [\n            \"method\",\n            \"lmbda\"\n         ],\n         \"test_partial_fit_sparse_input\": [],\n         \"test_polynomial_feature_array_order\": [],\n         \"test_polynomial_feature_names\": [],\n         \"test_polynomial_features\": [],\n         \"test_polynomial_features_csc_X\": [\n            \"deg\",\n            \"include_bias\",\n            \"interaction_only\",\n            \"dtype\"\n         ],\n         \"test_polynomial_features_csr_X\": [\n            \"deg\",\n            \"include_bias\",\n            \"interaction_only\",\n            \"dtype\"\n         ],\n         \"test_polynomial_features_csr_X_degree_4\": [\n            \"include_bias\",\n            \"interaction_only\"\n         ],\n         \"test_polynomial_features_csr_X_dim_edges\": [\n            \"deg\",\n            \"dim\",\n            \"interaction_only\"\n         ],\n         \"test_polynomial_features_csr_X_floats\": [\n            \"deg\",\n            \"include_bias\",\n            \"interaction_only\",\n            \"dtype\"\n         ],\n         \"test_polynomial_features_csr_X_zero_row\": [\n            \"zero_row_index\",\n            \"deg\",\n            \"interaction_only\"\n         ],\n         \"test_power_transform_default_method\": [],\n         \"test_power_transformer_1d\": [],\n         \"test_power_transformer_2d\": [],\n         \"test_power_transformer_boxcox_strictly_positive_exception\": [],\n         \"test_power_transformer_copy_False\": [\n            \"method\",\n            \"standardize\"\n         ],\n         \"test_power_transformer_copy_True\": [\n            \"method\",\n            \"standardize\"\n         ],\n         \"test_power_transformer_fit_transform\": [\n            \"method\",\n            \"standardize\"\n         ],\n         \"test_power_transformer_inverse\": [\n            \"method\",\n            \"standardize\",\n            \"X\"\n         ],\n         \"test_power_transformer_lambda_one\": [],\n         \"test_power_transformer_lambda_zero\": [],\n         \"test_power_transformer_method_exception\": [],\n         \"test_power_transformer_nans\": [\n            \"method\"\n         ],\n         \"test_power_transformer_notfitted\": [\n            \"method\"\n         ],\n         \"test_power_transformer_shape_exception\": [\n            \"method\"\n         ],\n         \"test_power_transformer_yeojohnson_any_input\": [\n            \"X\"\n         ],\n         \"test_quantile_transform_and_inverse\": [],\n         \"test_quantile_transform_axis1\": [],\n         \"test_quantile_transform_bounds\": [],\n         \"test_quantile_transform_check_error\": [],\n         \"test_quantile_transform_dense_toy\": [],\n         \"test_quantile_transform_iris\": [],\n         \"test_quantile_transform_nan\": [],\n         \"test_quantile_transform_sparse_ignore_zeros\": [],\n         \"test_quantile_transform_sparse_toy\": [],\n         \"test_quantile_transform_subsampling\": [],\n         \"test_quantile_transform_valid_axis\": [],\n         \"test_quantile_transformer_sorted_quantiles\": [\n            \"array_type\"\n         ],\n         \"test_robust_scale_1d_array\": [],\n         \"test_robust_scale_axis1\": [],\n         \"test_robust_scaler_2d_arrays\": [],\n         \"test_robust_scaler_attributes\": [\n            \"X\",\n            \"with_centering\",\n            \"with_scaling\"\n         ],\n         \"test_robust_scaler_col_zero_sparse\": [],\n         \"test_robust_scaler_equivalence_dense_sparse\": [\n            \"density\",\n            \"strictly_signed\"\n         ],\n         \"test_robust_scaler_error_sparse\": [],\n         \"test_robust_scaler_invalid_range\": [],\n         \"test_robust_scaler_iris\": [],\n         \"test_robust_scaler_iris_quantiles\": [],\n         \"test_robust_scaler_transform_one_row_csr\": [],\n         \"test_robust_scaler_zero_variance_features\": [],\n         \"test_scale_1d\": [],\n         \"test_scale_function_without_centering\": [],\n         \"test_scale_input_finiteness_validation\": [],\n         \"test_scale_sparse_with_mean_raise_exception\": [],\n         \"test_scaler_2d_arrays\": [],\n         \"test_scaler_float16_overflow\": [],\n         \"test_scaler_int\": [],\n         \"test_scaler_n_samples_seen_with_nan\": [\n            \"with_mean\",\n            \"with_std\",\n            \"array_constructor\"\n         ],\n         \"test_scaler_return_identity\": [],\n         \"test_scaler_without_centering\": [],\n         \"test_scaler_without_copy\": [],\n         \"test_standard_scaler_1d\": [],\n         \"test_standard_scaler_dtype\": [],\n         \"test_standard_scaler_numerical_stability\": [],\n         \"test_standard_scaler_partial_fit\": [],\n         \"test_standard_scaler_partial_fit_numerical_stability\": [],\n         \"test_standard_scaler_trasform_with_partial_fit\": [],\n         \"test_yeo_johnson_darwin_example\": [],\n         \"toarray\": [\n            \"a\"\n         ]\n      },\n      \"sklearn.preprocessing.tests.test_discretization\": {\n         \"test_encode_options\": [],\n         \"test_fit_transform\": [\n            \"strategy\",\n            \"expected\"\n         ],\n         \"test_fit_transform_n_bins_array\": [\n            \"strategy\",\n            \"expected\"\n         ],\n         \"test_invalid_encode_option\": [],\n         \"test_invalid_n_bins\": [],\n         \"test_invalid_n_bins_array\": [],\n         \"test_invalid_n_features\": [],\n         \"test_invalid_strategy_option\": [],\n         \"test_inverse_transform\": [\n            \"strategy\",\n            \"encode\",\n            \"expected_inv\"\n         ],\n         \"test_nonuniform_strategies\": [\n            \"strategy\",\n            \"expected_2bins\",\n            \"expected_3bins\",\n            \"expected_5bins\"\n         ],\n         \"test_numeric_stability\": [\n            \"i\"\n         ],\n         \"test_overwrite\": [],\n         \"test_percentile_numeric_stability\": [],\n         \"test_redundant_bins\": [\n            \"strategy\",\n            \"expected_bin_edges\"\n         ],\n         \"test_same_min_max\": [\n            \"strategy\"\n         ],\n         \"test_transform_1d_behavior\": [],\n         \"test_transform_outside_fit_range\": [\n            \"strategy\"\n         ],\n         \"test_valid_n_bins\": []\n      },\n      \"sklearn.preprocessing.tests.test_encoders\": {\n         \"check_categorical_onehot\": [\n            \"X\"\n         ],\n         \"test_X_is_not_1D\": [\n            \"X\",\n            \"method\"\n         ],\n         \"test_X_is_not_1D_pandas\": [\n            \"method\"\n         ],\n         \"test_categories\": [\n            \"density\",\n            \"drop\"\n         ],\n         \"test_encoder_dtypes\": [],\n         \"test_encoder_dtypes_pandas\": [],\n         \"test_encoders_has_categorical_tags\": [\n            \"Encoder\"\n         ],\n         \"test_invalid_drop_length\": [\n            \"drop\"\n         ],\n         \"test_one_hot_encoder\": [\n            \"X\"\n         ],\n         \"test_one_hot_encoder_categories\": [\n            \"X\",\n            \"cat_exp\",\n            \"cat_dtype\"\n         ],\n         \"test_one_hot_encoder_diff_n_features\": [],\n         \"test_one_hot_encoder_drop_manual\": [],\n         \"test_one_hot_encoder_dtype\": [\n            \"input_dtype\",\n            \"output_dtype\"\n         ],\n         \"test_one_hot_encoder_dtype_pandas\": [\n            \"output_dtype\"\n         ],\n         \"test_one_hot_encoder_feature_names\": [],\n         \"test_one_hot_encoder_feature_names_drop\": [\n            \"drop\",\n            \"expected_names\"\n         ],\n         \"test_one_hot_encoder_feature_names_unicode\": [],\n         \"test_one_hot_encoder_handle_unknown\": [],\n         \"test_one_hot_encoder_handle_unknown_strings\": [],\n         \"test_one_hot_encoder_invalid_params\": [\n            \"X_fit\",\n            \"params\",\n            \"err_msg\"\n         ],\n         \"test_one_hot_encoder_inverse\": [\n            \"sparse_\",\n            \"drop\"\n         ],\n         \"test_one_hot_encoder_not_fitted\": [],\n         \"test_one_hot_encoder_pandas\": [],\n         \"test_one_hot_encoder_raise_missing\": [\n            \"X\",\n            \"as_data_frame\",\n            \"handle_unknown\"\n         ],\n         \"test_one_hot_encoder_set_params\": [],\n         \"test_one_hot_encoder_sparse_dense\": [],\n         \"test_one_hot_encoder_specified_categories\": [\n            \"X\",\n            \"X2\",\n            \"cats\",\n            \"cat_dtype\"\n         ],\n         \"test_one_hot_encoder_specified_categories_mixed_columns\": [],\n         \"test_one_hot_encoder_unsorted_categories\": [],\n         \"test_one_hot_encoder_warning\": [],\n         \"test_ordinal_encoder\": [\n            \"X\"\n         ],\n         \"test_ordinal_encoder_inverse\": [],\n         \"test_ordinal_encoder_raise_categories_shape\": [],\n         \"test_ordinal_encoder_raise_missing\": [\n            \"X\"\n         ],\n         \"test_ordinal_encoder_specified_categories\": [\n            \"X\",\n            \"X2\",\n            \"cats\",\n            \"cat_dtype\"\n         ],\n         \"toarray\": [\n            \"a\"\n         ]\n      },\n      \"sklearn.preprocessing.tests.test_function_transformer\": {\n         \"_make_func\": [\n            \"args_store\",\n            \"kwargs_store\",\n            \"func\"\n         ],\n         \"test_check_inverse\": [],\n         \"test_delegate_to_func\": [],\n         \"test_function_transformer_frame\": [],\n         \"test_inverse_transform\": [],\n         \"test_kw_arg\": [],\n         \"test_kw_arg_reset\": [],\n         \"test_kw_arg_update\": [],\n         \"test_np_log\": []\n      },\n      \"sklearn.preprocessing.tests.test_label\": {\n         \"check_binarized_results\": [\n            \"y\",\n            \"classes\",\n            \"pos_label\",\n            \"neg_label\",\n            \"expected\"\n         ],\n         \"test_encode_check_unknown\": [],\n         \"test_encode_util\": [\n            \"values\",\n            \"expected\"\n         ],\n         \"test_invalid_input_label_binarize\": [],\n         \"test_inverse_binarize_multiclass\": [],\n         \"test_label_binarize_binary\": [],\n         \"test_label_binarize_multiclass\": [],\n         \"test_label_binarize_multilabel\": [],\n         \"test_label_binarize_with_class_order\": [],\n         \"test_label_binarizer\": [],\n         \"test_label_binarizer_errors\": [],\n         \"test_label_binarizer_set_label_encoding\": [],\n         \"test_label_binarizer_unseen_labels\": [],\n         \"test_label_encoder\": [\n            \"values\",\n            \"classes\",\n            \"unknown\"\n         ],\n         \"test_label_encoder_empty_array\": [\n            \"values\"\n         ],\n         \"test_label_encoder_errors\": [],\n         \"test_label_encoder_negative_ints\": [],\n         \"test_label_encoder_str_bad_shape\": [\n            \"dtype\"\n         ],\n         \"test_multilabel_binarizer\": [],\n         \"test_multilabel_binarizer_empty_sample\": [],\n         \"test_multilabel_binarizer_given_classes\": [],\n         \"test_multilabel_binarizer_inverse_validation\": [],\n         \"test_multilabel_binarizer_multiple_calls\": [],\n         \"test_multilabel_binarizer_non_integer_labels\": [],\n         \"test_multilabel_binarizer_non_unique\": [],\n         \"test_multilabel_binarizer_same_length_sequence\": [],\n         \"test_multilabel_binarizer_unknown_class\": [],\n         \"test_sparse_output_multilabel_binarizer\": [],\n         \"toarray\": [\n            \"a\"\n         ]\n      },\n      \"sklearn.random_projection\": {\n         \"_check_density\": [\n            \"density\",\n            \"n_features\"\n         ],\n         \"_check_input_size\": [\n            \"n_components\",\n            \"n_features\"\n         ],\n         \"_gaussian_random_matrix\": [\n            \"n_components\",\n            \"n_features\",\n            \"random_state\"\n         ],\n         \"_sparse_random_matrix\": [\n            \"n_components\",\n            \"n_features\",\n            \"density\",\n            \"random_state\"\n         ],\n         \"gaussian_random_matrix\": [\n            \"n_components\",\n            \"n_features\",\n            \"random_state\"\n         ],\n         \"johnson_lindenstrauss_min_dim\": [\n            \"n_samples\",\n            \"eps\"\n         ],\n         \"sparse_random_matrix\": [\n            \"n_components\",\n            \"n_features\",\n            \"density\",\n            \"random_state\"\n         ]\n      },\n      \"sklearn.semi_supervised.label_propagation\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.semi_supervised.tests.test_label_propagation\": {\n         \"test_convergence_speed\": [],\n         \"test_convergence_warning\": [],\n         \"test_distribution\": [],\n         \"test_fit_transduction\": [],\n         \"test_label_propagation_closed_form\": [],\n         \"test_label_spreading_closed_form\": [],\n         \"test_predict\": [],\n         \"test_predict_proba\": [],\n         \"test_predict_sparse_callable_kernel\": [],\n         \"test_valid_alpha\": []\n      },\n      \"sklearn.setup\": {\n         \"configuration\": [\n            \"parent_package\",\n            \"top_path\"\n         ]\n      },\n      \"sklearn.svm._base\": {\n         \"_fit_liblinear\": [\n            \"X\",\n            \"y\",\n            \"C\",\n            \"fit_intercept\",\n            \"intercept_scaling\",\n            \"class_weight\",\n            \"penalty\",\n            \"dual\",\n            \"verbose\",\n            \"max_iter\",\n            \"tol\",\n            \"random_state\",\n            \"multi_class\",\n            \"loss\",\n            \"epsilon\",\n            \"sample_weight\"\n         ],\n         \"_get_liblinear_solver_type\": [\n            \"multi_class\",\n            \"penalty\",\n            \"loss\",\n            \"dual\"\n         ],\n         \"_one_vs_one_coef\": [\n            \"dual_coef\",\n            \"n_support\",\n            \"support_vectors\"\n         ]\n      },\n      \"sklearn.svm._bounds\": {\n         \"l1_min_c\": [\n            \"X\",\n            \"y\",\n            \"loss\",\n            \"fit_intercept\",\n            \"intercept_scaling\"\n         ]\n      },\n      \"sklearn.svm.base\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.svm.bounds\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.svm.classes\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.svm.liblinear\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.svm.libsvm\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.svm.libsvm_sparse\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.svm.setup\": {\n         \"configuration\": [\n            \"parent_package\",\n            \"top_path\"\n         ]\n      },\n      \"sklearn.svm.tests.test_bounds\": {\n         \"check_l1_min_c\": [\n            \"X\",\n            \"y\",\n            \"loss\",\n            \"fit_intercept\",\n            \"intercept_scaling\"\n         ],\n         \"test_ill_posed_min_c\": [],\n         \"test_l1_min_c\": [\n            \"loss\",\n            \"X_label\",\n            \"Y_label\",\n            \"intercept_label\"\n         ],\n         \"test_l1_min_c_l2_loss\": [],\n         \"test_unsupported_loss\": []\n      },\n      \"sklearn.svm.tests.test_sparse\": {\n         \"check_svm_model_equal\": [\n            \"dense_svm\",\n            \"sparse_svm\",\n            \"X_train\",\n            \"y_train\",\n            \"X_test\"\n         ],\n         \"test_consistent_proba\": [],\n         \"test_error\": [],\n         \"test_linearsvc\": [],\n         \"test_linearsvc_iris\": [],\n         \"test_sample_weights\": [],\n         \"test_sparse_decision_function\": [],\n         \"test_sparse_liblinear_intercept_handling\": [],\n         \"test_sparse_oneclasssvm\": [\n            \"datasets_index\",\n            \"kernel\"\n         ],\n         \"test_sparse_realdata\": [],\n         \"test_sparse_svc_clone_with_callable_kernel\": [],\n         \"test_svc\": [],\n         \"test_svc_iris\": [],\n         \"test_svc_with_custom_kernel\": [],\n         \"test_timeout\": [],\n         \"test_unsorted_indices\": [],\n         \"test_weight\": []\n      },\n      \"sklearn.svm.tests.test_svm\": {\n         \"test_auto_weight\": [],\n         \"test_bad_input\": [],\n         \"test_consistent_proba\": [],\n         \"test_crammer_singer_binary\": [],\n         \"test_decision_function\": [],\n         \"test_decision_function_shape\": [],\n         \"test_decision_function_shape_two_class\": [],\n         \"test_dense_liblinear_intercept_handling\": [\n            \"classifier\"\n         ],\n         \"test_gamma_auto\": [],\n         \"test_gamma_scale\": [],\n         \"test_hasattr_predict_proba\": [],\n         \"test_immutable_coef_property\": [],\n         \"test_liblinear_set_coef\": [],\n         \"test_libsvm_iris\": [],\n         \"test_libsvm_parameters\": [],\n         \"test_linear_svc_intercept_scaling\": [],\n         \"test_linear_svm_convergence_warnings\": [],\n         \"test_linear_svx_uppercase_loss_penality_raises_error\": [],\n         \"test_linearsvc\": [],\n         \"test_linearsvc_crammer_singer\": [],\n         \"test_linearsvc_fit_sampleweight\": [],\n         \"test_linearsvc_iris\": [],\n         \"test_linearsvc_parameters\": [],\n         \"test_linearsvc_verbose\": [],\n         \"test_linearsvm_liblinear_sample_weight\": [\n            \"SVM\",\n            \"params\"\n         ],\n         \"test_linearsvr\": [],\n         \"test_linearsvr_fit_sampleweight\": [],\n         \"test_linearsvx_loss_penalty_deprecations\": [],\n         \"test_lsvc_intercept_scaling_zero\": [],\n         \"test_n_support_oneclass_svr\": [],\n         \"test_negative_sample_weights_mask_all_samples\": [\n            \"Estimator\",\n            \"err_msg\",\n            \"sample_weight\"\n         ],\n         \"test_negative_weight_equal_coeffs\": [\n            \"Estimator\",\n            \"sample_weight\"\n         ],\n         \"test_negative_weights_svc_leave_just_one_label\": [\n            \"Classifier\",\n            \"err_msg\",\n            \"sample_weight\"\n         ],\n         \"test_negative_weights_svc_leave_two_labels\": [\n            \"Classifier\",\n            \"model\",\n            \"sample_weight\",\n            \"mask_side\"\n         ],\n         \"test_oneclass\": [],\n         \"test_oneclass_decision_function\": [],\n         \"test_oneclass_score_samples\": [],\n         \"test_ovr_decision_function\": [],\n         \"test_precomputed\": [],\n         \"test_probability\": [],\n         \"test_sparse_fit_support_vectors_empty\": [],\n         \"test_sparse_precomputed\": [],\n         \"test_svc_bad_kernel\": [],\n         \"test_svc_clone_with_callable_kernel\": [],\n         \"test_svc_invalid_break_ties_param\": [\n            \"SVCClass\"\n         ],\n         \"test_svc_ovr_tie_breaking\": [\n            \"SVCClass\"\n         ],\n         \"test_svm_classifier_sided_sample_weight\": [\n            \"estimator\"\n         ],\n         \"test_svm_equivalence_sample_weight_C\": [],\n         \"test_svm_gamma_error\": [\n            \"Estimator\",\n            \"data\"\n         ],\n         \"test_svm_regressor_sided_sample_weight\": [\n            \"estimator\"\n         ],\n         \"test_svr\": [],\n         \"test_svr_coef_sign\": [],\n         \"test_svr_errors\": [],\n         \"test_svr_predict\": [],\n         \"test_timeout\": [],\n         \"test_tweak_params\": [],\n         \"test_unfitted\": [],\n         \"test_unicode_kernel\": [],\n         \"test_weight\": []\n      },\n      \"sklearn.tests.test_base\": {\n         \"test_clone\": [],\n         \"test_clone_2\": [],\n         \"test_clone_buggy\": [],\n         \"test_clone_empty_array\": [],\n         \"test_clone_estimator_types\": [],\n         \"test_clone_nan\": [],\n         \"test_clone_pandas_dataframe\": [],\n         \"test_clone_sparse_matrices\": [],\n         \"test_get_params\": [],\n         \"test_is_classifier\": [],\n         \"test_pickle_version_no_warning_is_issued_with_non_sklearn_estimator\": [],\n         \"test_pickle_version_warning_is_issued_upon_different_version\": [],\n         \"test_pickle_version_warning_is_issued_when_no_version_info_in_pickle\": [],\n         \"test_pickle_version_warning_is_not_raised_with_matching_version\": [],\n         \"test_pickling_when_getstate_is_overwritten_by_mixin\": [],\n         \"test_pickling_when_getstate_is_overwritten_by_mixin_outside_of_sklearn\": [],\n         \"test_pickling_works_when_getstate_is_overwritten_in_the_child_class\": [],\n         \"test_regressormixin_score_multioutput\": [],\n         \"test_repr\": [],\n         \"test_score_sample_weight\": [],\n         \"test_set_params\": [],\n         \"test_set_params_passes_all_parameters\": [],\n         \"test_set_params_updates_valid_params\": [],\n         \"test_str\": [],\n         \"test_tag_inheritance\": [],\n         \"test_warns_on_get_params_non_attribute\": []\n      },\n      \"sklearn.tests.test_build\": {\n         \"test_openmp_parallelism_enabled\": []\n      },\n      \"sklearn.tests.test_calibration\": {\n         \"test_calibration\": [],\n         \"test_calibration_accepts_ndarray\": [\n            \"X\"\n         ],\n         \"test_calibration_curve\": [],\n         \"test_calibration_less_classes\": [],\n         \"test_calibration_multiclass\": [],\n         \"test_calibration_nan_imputer\": [],\n         \"test_calibration_prefit\": [],\n         \"test_calibration_prob_sum\": [],\n         \"test_sample_weight\": [],\n         \"test_sigmoid_calibration\": []\n      },\n      \"sklearn.tests.test_check_build\": {\n         \"test_raise_build_error\": []\n      },\n      \"sklearn.tests.test_common\": {\n         \"_sample_func\": [\n            \"x\",\n            \"y\"\n         ],\n         \"_tested_estimators\": [],\n         \"_tested_linear_classifiers\": [],\n         \"test_all_estimator_no_base_class\": [],\n         \"test_all_tests_are_importable\": [],\n         \"test_check_estimator_generate_only\": [],\n         \"test_class_weight_balanced_linear_classifiers\": [\n            \"name\",\n            \"Classifier\"\n         ],\n         \"test_configure\": [],\n         \"test_estimators\": [\n            \"estimator\",\n            \"check\"\n         ],\n         \"test_import_all_consistency\": [],\n         \"test_parameters_default_constructible\": [\n            \"name\",\n            \"Estimator\"\n         ],\n         \"test_root_import_all_completeness\": [],\n         \"test_set_check_estimator_ids\": [\n            \"val\",\n            \"expected\"\n         ]\n      },\n      \"sklearn.tests.test_config\": {\n         \"test_config_context\": [],\n         \"test_config_context_exception\": [],\n         \"test_set_config\": []\n      },\n      \"sklearn.tests.test_discriminant_analysis\": {\n         \"test_covariance\": [],\n         \"test_lda_coefs\": [],\n         \"test_lda_dimension_warning\": [\n            \"n_classes\",\n            \"n_features\"\n         ],\n         \"test_lda_dtype_match\": [\n            \"data_type\",\n            \"expected_type\"\n         ],\n         \"test_lda_explained_variance_ratio\": [],\n         \"test_lda_numeric_consistency_float32_float64\": [],\n         \"test_lda_orthogonality\": [],\n         \"test_lda_predict\": [],\n         \"test_lda_predict_proba\": [\n            \"solver\",\n            \"n_classes\"\n         ],\n         \"test_lda_priors\": [],\n         \"test_lda_scaling\": [],\n         \"test_lda_store_covariance\": [],\n         \"test_lda_transform\": [],\n         \"test_qda\": [],\n         \"test_qda_priors\": [],\n         \"test_qda_regularization\": [],\n         \"test_qda_store_covariance\": [],\n         \"test_raises_value_error_on_same_number_of_classes_and_samples\": [\n            \"solver\"\n         ]\n      },\n      \"sklearn.tests.test_docstring_parameters\": {\n         \"test_docstring_parameters\": [],\n         \"test_tabs\": []\n      },\n      \"sklearn.tests.test_dummy\": {\n         \"_check_behavior_2d\": [\n            \"clf\"\n         ],\n         \"_check_behavior_2d_for_constant\": [\n            \"clf\"\n         ],\n         \"_check_equality_regressor\": [\n            \"statistic\",\n            \"y_learn\",\n            \"y_pred_learn\",\n            \"y_test\",\n            \"y_pred_test\"\n         ],\n         \"_check_predict_proba\": [\n            \"clf\",\n            \"X\",\n            \"y\"\n         ],\n         \"test_classification_sample_weight\": [],\n         \"test_classifier_exceptions\": [],\n         \"test_classifier_prediction_independent_of_X\": [\n            \"strategy\"\n         ],\n         \"test_classifier_score_with_None\": [\n            \"y\",\n            \"y_test\"\n         ],\n         \"test_constant_size_multioutput_regressor\": [],\n         \"test_constant_strategy\": [],\n         \"test_constant_strategy_exceptions\": [\n            \"y\",\n            \"params\",\n            \"err_msg\"\n         ],\n         \"test_constant_strategy_multioutput\": [],\n         \"test_constant_strategy_multioutput_regressor\": [],\n         \"test_constant_strategy_regressor\": [],\n         \"test_constant_strategy_sparse_target\": [],\n         \"test_constants_not_specified_regressor\": [],\n         \"test_dtype_of_classifier_probas\": [\n            \"strategy\"\n         ],\n         \"test_dummy_classifier_on_3D_array\": [],\n         \"test_dummy_regressor_on_3D_array\": [],\n         \"test_dummy_regressor_return_std\": [],\n         \"test_dummy_regressor_sample_weight\": [\n            \"n_samples\"\n         ],\n         \"test_mean_strategy_multioutput_regressor\": [],\n         \"test_mean_strategy_regressor\": [],\n         \"test_median_strategy_multioutput_regressor\": [],\n         \"test_median_strategy_regressor\": [],\n         \"test_most_frequent_and_prior_strategy\": [],\n         \"test_most_frequent_and_prior_strategy_multioutput\": [],\n         \"test_most_frequent_and_prior_strategy_sparse_target\": [],\n         \"test_most_frequent_and_prior_strategy_with_2d_column_y\": [],\n         \"test_outputs_2d_deprecation\": [\n            \"Dummy\"\n         ],\n         \"test_quantile_invalid\": [],\n         \"test_quantile_strategy_empty_train\": [],\n         \"test_quantile_strategy_multioutput_regressor\": [],\n         \"test_quantile_strategy_regressor\": [],\n         \"test_regressor_exceptions\": [],\n         \"test_regressor_prediction_independent_of_X\": [\n            \"strategy\"\n         ],\n         \"test_regressor_score_with_None\": [\n            \"y\",\n            \"y_test\"\n         ],\n         \"test_strategy_stratified_deprecated_for_prior\": [],\n         \"test_stratified_strategy\": [],\n         \"test_stratified_strategy_multioutput\": [],\n         \"test_stratified_strategy_sparse_target\": [],\n         \"test_string_labels\": [],\n         \"test_uniform_strategy\": [],\n         \"test_uniform_strategy_multioutput\": [],\n         \"test_uniform_strategy_sparse_target_warning\": [],\n         \"test_unknown_strategey_regressor\": [],\n         \"test_y_mean_attribute_regressor\": []\n      },\n      \"sklearn.tests.test_import_deprecations\": {\n         \"test_import_is_deprecated\": [\n            \"deprecated_path\",\n            \"importee\"\n         ]\n      },\n      \"sklearn.tests.test_init\": {\n         \"test_import_skl\": []\n      },\n      \"sklearn.tests.test_isotonic\": {\n         \"test_assert_raises_exceptions\": [],\n         \"test_check_ci_warn\": [],\n         \"test_check_increasing_down\": [],\n         \"test_check_increasing_down_extreme\": [],\n         \"test_check_increasing_small_number_of_samples\": [],\n         \"test_check_increasing_up\": [],\n         \"test_check_increasing_up_extreme\": [],\n         \"test_fast_predict\": [],\n         \"test_isotonic_copy_before_fit\": [],\n         \"test_isotonic_dtype\": [],\n         \"test_isotonic_duplicate_min_entry\": [],\n         \"test_isotonic_min_max_boundaries\": [],\n         \"test_isotonic_mismatched_dtype\": [\n            \"y_dtype\"\n         ],\n         \"test_isotonic_regression\": [],\n         \"test_isotonic_regression_auto_decreasing\": [],\n         \"test_isotonic_regression_auto_increasing\": [],\n         \"test_isotonic_regression_oob_bad\": [],\n         \"test_isotonic_regression_oob_bad_after\": [],\n         \"test_isotonic_regression_oob_clip\": [],\n         \"test_isotonic_regression_oob_nan\": [],\n         \"test_isotonic_regression_oob_raise\": [],\n         \"test_isotonic_regression_pickle\": [],\n         \"test_isotonic_regression_reversed\": [],\n         \"test_isotonic_regression_ties_max\": [],\n         \"test_isotonic_regression_ties_min\": [],\n         \"test_isotonic_regression_ties_secondary_\": [],\n         \"test_isotonic_regression_with_ties_in_differently_sized_groups\": [],\n         \"test_isotonic_sample_weight\": [],\n         \"test_isotonic_sample_weight_parameter_default_value\": [],\n         \"test_isotonic_ymin_ymax\": [],\n         \"test_isotonic_zero_weight_loop\": [],\n         \"test_make_unique_dtype\": [],\n         \"test_permutation_invariance\": []\n      },\n      \"sklearn.tests.test_kernel_approximation\": {\n         \"test_additive_chi2_sampler\": [],\n         \"test_input_validation\": [],\n         \"test_nystroem_approximation\": [],\n         \"test_nystroem_callable\": [],\n         \"test_nystroem_default_parameters\": [],\n         \"test_nystroem_poly_kernel_params\": [],\n         \"test_nystroem_precomputed_kernel\": [],\n         \"test_nystroem_singular_kernel\": [],\n         \"test_rbf_sampler\": [],\n         \"test_skewed_chi2_sampler\": []\n      },\n      \"sklearn.tests.test_kernel_ridge\": {\n         \"test_kernel_ridge\": [],\n         \"test_kernel_ridge_csc\": [],\n         \"test_kernel_ridge_csr\": [],\n         \"test_kernel_ridge_multi_output\": [],\n         \"test_kernel_ridge_precomputed\": [],\n         \"test_kernel_ridge_precomputed_kernel_unchanged\": [],\n         \"test_kernel_ridge_sample_weights\": [],\n         \"test_kernel_ridge_singular_kernel\": []\n      },\n      \"sklearn.tests.test_metaestimators\": {\n         \"test_metaestimator_delegation\": []\n      },\n      \"sklearn.tests.test_multiclass\": {\n         \"test_check_classification_targets\": [],\n         \"test_ecoc_exceptions\": [],\n         \"test_ecoc_fit_predict\": [],\n         \"test_ecoc_float_y\": [],\n         \"test_ecoc_gridsearch\": [],\n         \"test_ovo_decision_function\": [],\n         \"test_ovo_exceptions\": [],\n         \"test_ovo_fit_on_list\": [],\n         \"test_ovo_fit_predict\": [],\n         \"test_ovo_float_y\": [],\n         \"test_ovo_gridsearch\": [],\n         \"test_ovo_one_class\": [],\n         \"test_ovo_partial_fit_predict\": [],\n         \"test_ovo_string_y\": [],\n         \"test_ovo_ties\": [],\n         \"test_ovo_ties2\": [],\n         \"test_ovr_always_present\": [],\n         \"test_ovr_binary\": [],\n         \"test_ovr_coef_\": [],\n         \"test_ovr_coef_exceptions\": [],\n         \"test_ovr_exceptions\": [],\n         \"test_ovr_fit_predict\": [],\n         \"test_ovr_fit_predict_sparse\": [],\n         \"test_ovr_fit_predict_svc\": [],\n         \"test_ovr_gridsearch\": [],\n         \"test_ovr_multiclass\": [],\n         \"test_ovr_multilabel\": [],\n         \"test_ovr_multilabel_dataset\": [],\n         \"test_ovr_multilabel_decision_function\": [],\n         \"test_ovr_multilabel_predict_proba\": [],\n         \"test_ovr_ovo_regressor\": [],\n         \"test_ovr_partial_fit\": [],\n         \"test_ovr_partial_fit_exceptions\": [],\n         \"test_ovr_pipeline\": [],\n         \"test_ovr_single_label_decision_function\": [],\n         \"test_ovr_single_label_predict_proba\": [],\n         \"test_pairwise_attribute\": [],\n         \"test_pairwise_cross_val_score\": [],\n         \"test_pairwise_indices\": []\n      },\n      \"sklearn.tests.test_multioutput\": {\n         \"generate_multilabel_dataset_with_correlations\": [],\n         \"test_base_chain_crossval_fit_and_predict\": [],\n         \"test_base_chain_fit_and_predict\": [],\n         \"test_base_chain_fit_and_predict_with_sparse_data_and_cv\": [],\n         \"test_base_chain_random_order\": [],\n         \"test_classifier_chain_fit_and_predict_with_linear_svc\": [],\n         \"test_classifier_chain_fit_and_predict_with_sparse_data\": [],\n         \"test_classifier_chain_vs_independent_models\": [],\n         \"test_deprecation\": [],\n         \"test_hasattr_multi_output_predict_proba\": [],\n         \"test_multi_output_classes_\": [\n            \"estimator\"\n         ],\n         \"test_multi_output_classification\": [],\n         \"test_multi_output_classification_partial_fit\": [],\n         \"test_multi_output_classification_partial_fit_no_first_classes_exception\": [],\n         \"test_multi_output_classification_partial_fit_parallelism\": [],\n         \"test_multi_output_classification_partial_fit_sample_weights\": [],\n         \"test_multi_output_classification_sample_weights\": [],\n         \"test_multi_output_exceptions\": [],\n         \"test_multi_output_predict_proba\": [],\n         \"test_multi_target_regression\": [],\n         \"test_multi_target_regression_one_target\": [],\n         \"test_multi_target_regression_partial_fit\": [],\n         \"test_multi_target_sample_weight_partial_fit\": [],\n         \"test_multi_target_sample_weights\": [],\n         \"test_multi_target_sample_weights_api\": [],\n         \"test_multi_target_sparse_regression\": [],\n         \"test_multiclass_multioutput_estimator\": [],\n         \"test_multiclass_multioutput_estimator_predict_proba\": []\n      },\n      \"sklearn.tests.test_naive_bayes\": {\n         \"test_alpha\": [],\n         \"test_alpha_vector\": [],\n         \"test_bnb\": [],\n         \"test_bnb_feature_log_prob\": [],\n         \"test_categoricalnb\": [],\n         \"test_check_accuracy_on_digits\": [],\n         \"test_cnb\": [],\n         \"test_deprecations\": [],\n         \"test_discretenb_coef_intercept_shape\": [\n            \"cls\"\n         ],\n         \"test_discretenb_input_check_fit\": [\n            \"cls\"\n         ],\n         \"test_discretenb_input_check_partial_fit\": [\n            \"cls\"\n         ],\n         \"test_discretenb_partial_fit\": [\n            \"cls\"\n         ],\n         \"test_discretenb_pickle\": [\n            \"cls\"\n         ],\n         \"test_discretenb_predict_proba\": [],\n         \"test_discretenb_prior\": [\n            \"cls\"\n         ],\n         \"test_discretenb_provide_prior\": [\n            \"cls\"\n         ],\n         \"test_discretenb_provide_prior_with_partial_fit\": [\n            \"cls\"\n         ],\n         \"test_discretenb_sample_weight_multiclass\": [\n            \"cls\"\n         ],\n         \"test_discretenb_uniform_prior\": [\n            \"cls\"\n         ],\n         \"test_gnb\": [],\n         \"test_gnb_check_update_with_no_data\": [],\n         \"test_gnb_naive_bayes_scale_invariance\": [],\n         \"test_gnb_neg_priors\": [],\n         \"test_gnb_partial_fit\": [],\n         \"test_gnb_pfit_wrong_nb_features\": [],\n         \"test_gnb_prior\": [],\n         \"test_gnb_prior_greater_one\": [],\n         \"test_gnb_prior_large_bias\": [],\n         \"test_gnb_priors\": [],\n         \"test_gnb_priors_sum_isclose\": [],\n         \"test_gnb_sample_weight\": [],\n         \"test_gnb_wrong_nb_priors\": [],\n         \"test_mnb_prior_unobserved_targets\": [],\n         \"test_mnb_sample_weight\": [],\n         \"test_mnnb\": [\n            \"kind\"\n         ]\n      },\n      \"sklearn.tests.test_pipeline\": {\n         \"test_classes_property\": [],\n         \"test_feature_union\": [],\n         \"test_feature_union_feature_names\": [],\n         \"test_feature_union_fit_params\": [],\n         \"test_feature_union_parallel\": [],\n         \"test_feature_union_warns_with_none\": [],\n         \"test_feature_union_weights\": [],\n         \"test_fit_predict_on_pipeline\": [],\n         \"test_fit_predict_on_pipeline_without_fit_predict\": [],\n         \"test_fit_predict_with_intermediate_fit_params\": [],\n         \"test_make_pipeline\": [],\n         \"test_make_pipeline_memory\": [],\n         \"test_make_union\": [],\n         \"test_make_union_kwargs\": [],\n         \"test_pipeline_correctly_adjusts_steps\": [\n            \"passthrough\"\n         ],\n         \"test_pipeline_ducktyping\": [],\n         \"test_pipeline_fit_params\": [],\n         \"test_pipeline_fit_transform\": [],\n         \"test_pipeline_index\": [],\n         \"test_pipeline_init\": [],\n         \"test_pipeline_init_tuple\": [],\n         \"test_pipeline_memory\": [],\n         \"test_pipeline_methods_anova\": [],\n         \"test_pipeline_methods_pca_svm\": [],\n         \"test_pipeline_methods_preprocessing_svm\": [],\n         \"test_pipeline_named_steps\": [],\n         \"test_pipeline_param_error\": [],\n         \"test_pipeline_raise_set_params_error\": [],\n         \"test_pipeline_sample_weight_supported\": [],\n         \"test_pipeline_sample_weight_unsupported\": [],\n         \"test_pipeline_score_samples_pca_lof\": [],\n         \"test_pipeline_slice\": [],\n         \"test_pipeline_transform\": [],\n         \"test_pipeline_with_cache_attribute\": [],\n         \"test_pipeline_wrong_memory\": [],\n         \"test_predict_with_predict_params\": [],\n         \"test_score_samples_on_pipeline_without_score_samples\": [],\n         \"test_set_feature_union_step_drop\": [\n            \"drop\"\n         ],\n         \"test_set_feature_union_steps\": [],\n         \"test_set_params_nested_pipeline\": [],\n         \"test_set_pipeline_step_passthrough\": [\n            \"passthrough\"\n         ],\n         \"test_set_pipeline_steps\": [],\n         \"test_step_name_validation\": [],\n         \"test_verbose\": [\n            \"est\",\n            \"method\",\n            \"pattern\",\n            \"capsys\"\n         ]\n      },\n      \"sklearn.tests.test_random_projection\": {\n         \"check_input_size_random_matrix\": [\n            \"random_matrix\"\n         ],\n         \"check_input_with_sparse_random_matrix\": [\n            \"random_matrix\"\n         ],\n         \"check_size_generated\": [\n            \"random_matrix\"\n         ],\n         \"check_zero_mean_and_unit_norm\": [\n            \"random_matrix\"\n         ],\n         \"densify\": [\n            \"matrix\"\n         ],\n         \"make_sparse_random_data\": [\n            \"n_samples\",\n            \"n_features\",\n            \"n_nonzeros\"\n         ],\n         \"test_SparseRandomProjection_output_representation\": [],\n         \"test_basic_property_of_random_matrix\": [\n            \"random_matrix\"\n         ],\n         \"test_basic_property_of_sparse_random_matrix\": [\n            \"random_matrix\"\n         ],\n         \"test_correct_RandomProjection_dimensions_embedding\": [],\n         \"test_deprecations\": [],\n         \"test_gaussian_random_matrix\": [],\n         \"test_input_size_jl_min_dim\": [],\n         \"test_invalid_jl_domain\": [],\n         \"test_random_projection_embedding_quality\": [],\n         \"test_random_projection_transformer_invalid_input\": [],\n         \"test_sparse_random_matrix\": [],\n         \"test_sparse_random_projection_transformer_invalid_density\": [],\n         \"test_too_many_samples_to_find_a_safe_embedding\": [],\n         \"test_try_to_transform_before_fit\": [],\n         \"test_warning_n_components_greater_than_n_features\": [],\n         \"test_works_with_sparse_data\": []\n      },\n      \"sklearn.tests.test_site_joblib\": {\n         \"test_old_pickle\": [\n            \"tmpdir\"\n         ]\n      },\n      \"sklearn.tree._export\": {\n         \"_color_brew\": [\n            \"n\"\n         ],\n         \"_compute_depth\": [\n            \"tree\",\n            \"node\"\n         ],\n         \"export_graphviz\": [\n            \"decision_tree\",\n            \"out_file\",\n            \"max_depth\",\n            \"feature_names\",\n            \"class_names\",\n            \"label\",\n            \"filled\",\n            \"leaves_parallel\",\n            \"impurity\",\n            \"node_ids\",\n            \"proportion\",\n            \"rotate\",\n            \"rounded\",\n            \"special_characters\",\n            \"precision\"\n         ],\n         \"export_text\": [\n            \"decision_tree\",\n            \"feature_names\",\n            \"max_depth\",\n            \"spacing\",\n            \"decimals\",\n            \"show_weights\"\n         ],\n         \"plot_tree\": [\n            \"decision_tree\",\n            \"max_depth\",\n            \"feature_names\",\n            \"class_names\",\n            \"label\",\n            \"filled\",\n            \"impurity\",\n            \"node_ids\",\n            \"proportion\",\n            \"rotate\",\n            \"rounded\",\n            \"precision\",\n            \"ax\",\n            \"fontsize\"\n         ]\n      },\n      \"sklearn.tree._reingold_tilford\": {\n         \"ancestor\": [\n            \"vil\",\n            \"v\",\n            \"default_ancestor\"\n         ],\n         \"apportion\": [\n            \"v\",\n            \"default_ancestor\",\n            \"distance\"\n         ],\n         \"buchheim\": [\n            \"tree\"\n         ],\n         \"execute_shifts\": [\n            \"v\"\n         ],\n         \"first_walk\": [\n            \"v\",\n            \"distance\"\n         ],\n         \"move_subtree\": [\n            \"wl\",\n            \"wr\",\n            \"shift\"\n         ],\n         \"second_walk\": [\n            \"v\",\n            \"m\",\n            \"depth\",\n            \"min\"\n         ],\n         \"third_walk\": [\n            \"tree\",\n            \"n\"\n         ]\n      },\n      \"sklearn.tree.export\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.tree.setup\": {\n         \"configuration\": [\n            \"parent_package\",\n            \"top_path\"\n         ]\n      },\n      \"sklearn.tree.tests.test_export\": {\n         \"test_export_text\": [],\n         \"test_export_text_errors\": [],\n         \"test_friedman_mse_in_graphviz\": [],\n         \"test_graphviz_errors\": [],\n         \"test_graphviz_toy\": [],\n         \"test_plot_tree_entropy\": [\n            \"pyplot\"\n         ],\n         \"test_plot_tree_gini\": [\n            \"pyplot\"\n         ],\n         \"test_precision\": []\n      },\n      \"sklearn.tree.tests.test_reingold_tilford\": {\n         \"test_buchheim\": [\n            \"tree\",\n            \"n_nodes\"\n         ]\n      },\n      \"sklearn.tree.tests.test_tree\": {\n         \"_check_min_weight_leaf_split_level\": [\n            \"TreeEstimator\",\n            \"X\",\n            \"y\",\n            \"sample_weight\"\n         ],\n         \"assert_is_subtree\": [\n            \"tree\",\n            \"subtree\"\n         ],\n         \"assert_pruning_creates_subtree\": [\n            \"estimator_cls\",\n            \"X\",\n            \"y\",\n            \"pruning_path\"\n         ],\n         \"assert_tree_equal\": [\n            \"d\",\n            \"s\",\n            \"message\"\n         ],\n         \"check_class_weight_errors\": [\n            \"name\"\n         ],\n         \"check_class_weights\": [\n            \"name\"\n         ],\n         \"check_decision_path\": [\n            \"name\"\n         ],\n         \"check_explicit_sparse_zeros\": [\n            \"tree\",\n            \"max_depth\",\n            \"n_features\"\n         ],\n         \"check_min_weight_fraction_leaf\": [\n            \"name\",\n            \"datasets\",\n            \"sparse\"\n         ],\n         \"check_min_weight_fraction_leaf_with_min_samples_leaf\": [\n            \"name\",\n            \"datasets\",\n            \"sparse\"\n         ],\n         \"check_min_weight_leaf_split_level\": [\n            \"name\"\n         ],\n         \"check_no_sparse_y_support\": [\n            \"name\"\n         ],\n         \"check_public_apply\": [\n            \"name\"\n         ],\n         \"check_public_apply_sparse\": [\n            \"name\"\n         ],\n         \"check_raise_error_on_1d_input\": [\n            \"name\"\n         ],\n         \"check_sparse_criterion\": [\n            \"tree\",\n            \"dataset\"\n         ],\n         \"check_sparse_input\": [\n            \"tree\",\n            \"dataset\",\n            \"max_depth\"\n         ],\n         \"check_sparse_parameters\": [\n            \"tree\",\n            \"dataset\"\n         ],\n         \"test_1d_input\": [\n            \"name\"\n         ],\n         \"test_arrayrepr\": [],\n         \"test_arrays_persist\": [],\n         \"test_behaviour_constant_feature_after_splits\": [],\n         \"test_big_input\": [],\n         \"test_boston\": [],\n         \"test_class_weight_errors\": [\n            \"name\"\n         ],\n         \"test_class_weights\": [\n            \"name\"\n         ],\n         \"test_classes_deprecated\": [],\n         \"test_classes_shape\": [],\n         \"test_classification_toy\": [],\n         \"test_criterion_copy\": [],\n         \"test_decision_path\": [\n            \"name\"\n         ],\n         \"test_decision_path_hardcoded\": [],\n         \"test_decision_tree_memmap\": [],\n         \"test_empty_leaf_infinite_threshold\": [],\n         \"test_error\": [],\n         \"test_explicit_sparse_zeros\": [\n            \"tree_type\"\n         ],\n         \"test_huge_allocations\": [],\n         \"test_importances\": [],\n         \"test_importances_gini_equal_mse\": [],\n         \"test_importances_raises\": [],\n         \"test_iris\": [],\n         \"test_mae\": [],\n         \"test_max_features\": [],\n         \"test_max_leaf_nodes\": [],\n         \"test_max_leaf_nodes_max_depth\": [],\n         \"test_memory_layout\": [],\n         \"test_min_impurity_decrease\": [],\n         \"test_min_impurity_split\": [],\n         \"test_min_samples_leaf\": [],\n         \"test_min_samples_split\": [],\n         \"test_min_weight_fraction_leaf_on_dense_input\": [\n            \"name\"\n         ],\n         \"test_min_weight_fraction_leaf_on_sparse_input\": [\n            \"name\"\n         ],\n         \"test_min_weight_fraction_leaf_with_min_samples_leaf_on_dense_input\": [\n            \"name\"\n         ],\n         \"test_min_weight_fraction_leaf_with_min_samples_leaf_on_sparse_input\": [\n            \"name\"\n         ],\n         \"test_min_weight_leaf_split_level\": [\n            \"name\"\n         ],\n         \"test_multioutput\": [],\n         \"test_no_sparse_y_support\": [\n            \"name\"\n         ],\n         \"test_numerical_stability\": [],\n         \"test_only_constant_features\": [],\n         \"test_presort_deprecated\": [\n            \"Cls\",\n            \"presort\"\n         ],\n         \"test_probability\": [],\n         \"test_prune_single_node_tree\": [],\n         \"test_prune_tree_classifier_are_subtrees\": [\n            \"criterion\",\n            \"dataset\",\n            \"tree_cls\"\n         ],\n         \"test_prune_tree_raises_negative_ccp_alpha\": [],\n         \"test_prune_tree_regression_are_subtrees\": [\n            \"criterion\",\n            \"dataset\",\n            \"tree_cls\"\n         ],\n         \"test_public_apply_all_trees\": [\n            \"name\"\n         ],\n         \"test_public_apply_sparse_trees\": [\n            \"name\"\n         ],\n         \"test_pure_set\": [],\n         \"test_realloc\": [],\n         \"test_regression_toy\": [],\n         \"test_sample_weight\": [],\n         \"test_sample_weight_invalid\": [],\n         \"test_sparse\": [\n            \"tree_type\",\n            \"dataset\",\n            \"check\"\n         ],\n         \"test_sparse_input\": [\n            \"tree_type\",\n            \"dataset\"\n         ],\n         \"test_sparse_input_reg_trees\": [\n            \"tree_type\",\n            \"dataset\"\n         ],\n         \"test_unbalanced_iris\": [],\n         \"test_weighted_classification_toy\": [],\n         \"test_with_only_one_non_constant_features\": [],\n         \"test_xor\": []\n      },\n      \"sklearn.tree.tree\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.utils.__init__\": {\n         \"_approximate_mode\": [\n            \"class_counts\",\n            \"n_draws\",\n            \"rng\"\n         ],\n         \"_array_indexing\": [\n            \"array\",\n            \"key\",\n            \"key_dtype\",\n            \"axis\"\n         ],\n         \"_chunk_generator\": [\n            \"gen\",\n            \"chunksize\"\n         ],\n         \"_determine_key_type\": [\n            \"key\",\n            \"accept_slice\"\n         ],\n         \"_get_column_indices\": [\n            \"X\",\n            \"key\"\n         ],\n         \"_list_indexing\": [\n            \"X\",\n            \"key\",\n            \"key_dtype\"\n         ],\n         \"_message_with_time\": [\n            \"source\",\n            \"message\",\n            \"time\"\n         ],\n         \"_pandas_indexing\": [\n            \"X\",\n            \"key\",\n            \"key_dtype\",\n            \"axis\"\n         ],\n         \"_print_elapsed_time\": [\n            \"source\",\n            \"message\"\n         ],\n         \"_safe_indexing\": [\n            \"X\",\n            \"indices\",\n            \"axis\"\n         ],\n         \"all_estimators\": [\n            \"include_meta_estimators\",\n            \"include_other\",\n            \"type_filter\",\n            \"include_dont_test\"\n         ],\n         \"axis0_safe_slice\": [\n            \"X\",\n            \"mask\",\n            \"len_mask\"\n         ],\n         \"check_matplotlib_support\": [\n            \"caller_name\"\n         ],\n         \"check_pandas_support\": [\n            \"caller_name\"\n         ],\n         \"gen_batches\": [\n            \"n\",\n            \"batch_size\",\n            \"min_batch_size\"\n         ],\n         \"gen_even_slices\": [\n            \"n\",\n            \"n_packs\",\n            \"n_samples\"\n         ],\n         \"get_chunk_n_rows\": [\n            \"row_bytes\",\n            \"max_n_rows\",\n            \"working_memory\"\n         ],\n         \"indices_to_mask\": [\n            \"indices\",\n            \"mask_length\"\n         ],\n         \"is_scalar_nan\": [\n            \"x\"\n         ],\n         \"resample\": [],\n         \"safe_indexing\": [\n            \"X\",\n            \"indices\",\n            \"axis\"\n         ],\n         \"safe_mask\": [\n            \"X\",\n            \"mask\"\n         ],\n         \"safe_sqr\": [\n            \"X\",\n            \"copy\"\n         ],\n         \"shuffle\": [],\n         \"tosequence\": [\n            \"x\"\n         ]\n      },\n      \"sklearn.utils._mask\": {\n         \"_get_mask\": [\n            \"X\",\n            \"value_to_mask\"\n         ]\n      },\n      \"sklearn.utils._pprint\": {\n         \"_changed_params\": [\n            \"estimator\"\n         ],\n         \"_safe_repr\": [\n            \"object\",\n            \"context\",\n            \"maxlevels\",\n            \"level\",\n            \"changed_only\"\n         ]\n      },\n      \"sklearn.utils._show_versions\": {\n         \"_get_deps_info\": [],\n         \"_get_sys_info\": [],\n         \"show_versions\": []\n      },\n      \"sklearn.utils._testing\": {\n         \"_convert_container\": [\n            \"container\",\n            \"constructor_name\",\n            \"columns_name\"\n         ],\n         \"_delete_folder\": [\n            \"folder_path\",\n            \"warn\"\n         ],\n         \"_get_args\": [\n            \"function\",\n            \"varargs\"\n         ],\n         \"_get_func_name\": [\n            \"func\"\n         ],\n         \"all_estimators\": [\n            \"include_meta_estimators\",\n            \"include_other\",\n            \"type_filter\",\n            \"include_dont_test\"\n         ],\n         \"assert_allclose_dense_sparse\": [\n            \"x\",\n            \"y\",\n            \"rtol\",\n            \"atol\",\n            \"err_msg\"\n         ],\n         \"assert_no_warnings\": [\n            \"func\"\n         ],\n         \"assert_raise_message\": [\n            \"exceptions\",\n            \"message\",\n            \"function\"\n         ],\n         \"assert_run_python_script\": [\n            \"source_code\",\n            \"timeout\"\n         ],\n         \"assert_warns\": [\n            \"warning_class\",\n            \"func\"\n         ],\n         \"assert_warns_div0\": [\n            \"func\"\n         ],\n         \"assert_warns_message\": [\n            \"warning_class\",\n            \"message\",\n            \"func\"\n         ],\n         \"check_docstring_parameters\": [\n            \"func\",\n            \"doc\",\n            \"ignore\"\n         ],\n         \"check_skip_network\": [],\n         \"clean_warning_registry\": [],\n         \"create_memmap_backed_data\": [\n            \"data\",\n            \"mmap_mode\",\n            \"return_folder\"\n         ],\n         \"ignore_warnings\": [\n            \"obj\",\n            \"category\"\n         ],\n         \"set_random_state\": [\n            \"estimator\",\n            \"random_state\"\n         ]\n      },\n      \"sklearn.utils.class_weight\": {\n         \"compute_class_weight\": [\n            \"class_weight\",\n            \"classes\",\n            \"y\"\n         ],\n         \"compute_sample_weight\": [\n            \"class_weight\",\n            \"y\",\n            \"indices\"\n         ]\n      },\n      \"sklearn.utils.deprecation\": {\n         \"_is_deprecated\": [\n            \"func\"\n         ],\n         \"_raise_dep_warning_if_not_pytest\": [\n            \"deprecated_path\",\n            \"correct_path\"\n         ]\n      },\n      \"sklearn.utils.estimator_checks\": {\n         \"_apply_on_subsets\": [\n            \"func\",\n            \"X\"\n         ],\n         \"_boston_subset\": [\n            \"n_samples\"\n         ],\n         \"_check_transformer\": [\n            \"name\",\n            \"transformer_orig\",\n            \"X\",\n            \"y\"\n         ],\n         \"_choose_check_classifiers_labels\": [\n            \"name\",\n            \"y\",\n            \"y_names\"\n         ],\n         \"_construct_instance\": [\n            \"Estimator\"\n         ],\n         \"_enforce_estimator_tags_y\": [\n            \"estimator\",\n            \"y\"\n         ],\n         \"_generate_class_checks\": [\n            \"Estimator\"\n         ],\n         \"_generate_instance_checks\": [\n            \"name\",\n            \"estimator\"\n         ],\n         \"_generate_sparse_matrix\": [\n            \"X_csr\"\n         ],\n         \"_is_pairwise\": [\n            \"estimator\"\n         ],\n         \"_is_pairwise_metric\": [\n            \"estimator\"\n         ],\n         \"_is_public_parameter\": [\n            \"attr\"\n         ],\n         \"_pairwise_estimator_convert_X\": [\n            \"X\",\n            \"estimator\",\n            \"kernel\"\n         ],\n         \"_safe_tags\": [\n            \"estimator\",\n            \"key\"\n         ],\n         \"_set_check_estimator_ids\": [\n            \"obj\"\n         ],\n         \"_set_checking_parameters\": [\n            \"estimator\"\n         ],\n         \"_yield_all_checks\": [\n            \"name\",\n            \"estimator\"\n         ],\n         \"_yield_checks\": [\n            \"name\",\n            \"estimator\"\n         ],\n         \"_yield_classifier_checks\": [\n            \"name\",\n            \"classifier\"\n         ],\n         \"_yield_clustering_checks\": [\n            \"name\",\n            \"clusterer\"\n         ],\n         \"_yield_outliers_checks\": [\n            \"name\",\n            \"estimator\"\n         ],\n         \"_yield_regressor_checks\": [\n            \"name\",\n            \"regressor\"\n         ],\n         \"_yield_transformer_checks\": [\n            \"name\",\n            \"transformer\"\n         ],\n         \"check_class_weight_balanced_classifiers\": [\n            \"name\",\n            \"classifier_orig\",\n            \"X_train\",\n            \"y_train\",\n            \"X_test\",\n            \"y_test\",\n            \"weights\"\n         ],\n         \"check_class_weight_balanced_linear_classifier\": [\n            \"name\",\n            \"Classifier\"\n         ],\n         \"check_class_weight_classifiers\": [\n            \"name\",\n            \"classifier_orig\"\n         ],\n         \"check_classifier_data_not_an_array\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_classifier_multioutput\": [\n            \"name\",\n            \"estimator\"\n         ],\n         \"check_classifiers_classes\": [\n            \"name\",\n            \"classifier_orig\"\n         ],\n         \"check_classifiers_multilabel_representation_invariance\": [\n            \"name\",\n            \"classifier_orig\"\n         ],\n         \"check_classifiers_one_label\": [\n            \"name\",\n            \"classifier_orig\"\n         ],\n         \"check_classifiers_predictions\": [\n            \"X\",\n            \"y\",\n            \"name\",\n            \"classifier_orig\"\n         ],\n         \"check_classifiers_regression_target\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_classifiers_train\": [\n            \"name\",\n            \"classifier_orig\",\n            \"readonly_memmap\"\n         ],\n         \"check_clusterer_compute_labels_predict\": [\n            \"name\",\n            \"clusterer_orig\"\n         ],\n         \"check_clustering\": [\n            \"name\",\n            \"clusterer_orig\",\n            \"readonly_memmap\"\n         ],\n         \"check_complex_data\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_decision_proba_consistency\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_dict_unchanged\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_dont_overwrite_parameters\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_dtype_object\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_estimator\": [\n            \"Estimator\",\n            \"generate_only\"\n         ],\n         \"check_estimator_sparse_data\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_estimators_data_not_an_array\": [\n            \"name\",\n            \"estimator_orig\",\n            \"X\",\n            \"y\"\n         ],\n         \"check_estimators_dtypes\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_estimators_empty_data_messages\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_estimators_fit_returns_self\": [\n            \"name\",\n            \"estimator_orig\",\n            \"readonly_memmap\"\n         ],\n         \"check_estimators_nan_inf\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_estimators_overwrite_params\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_estimators_partial_fit_n_features\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_estimators_pickle\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_estimators_unfitted\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_fit1d\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_fit2d_1feature\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_fit2d_1sample\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_fit2d_predict1d\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_fit_idempotent\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_fit_non_negative\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_fit_score_takes_y\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_get_params_invariance\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_methods_subset_invariance\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_no_attributes_set_in_init\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_non_transformer_estimators_n_iter\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_nonsquare_error\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_outlier_corruption\": [\n            \"num_outliers\",\n            \"expected_outliers\",\n            \"decision\"\n         ],\n         \"check_outliers_fit_predict\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_outliers_train\": [\n            \"name\",\n            \"estimator_orig\",\n            \"readonly_memmap\"\n         ],\n         \"check_parameters_default_constructible\": [\n            \"name\",\n            \"Estimator\"\n         ],\n         \"check_pipeline_consistency\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_regressor_data_not_an_array\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_regressor_multioutput\": [\n            \"name\",\n            \"estimator\"\n         ],\n         \"check_regressors_int\": [\n            \"name\",\n            \"regressor_orig\"\n         ],\n         \"check_regressors_no_decision_function\": [\n            \"name\",\n            \"regressor_orig\"\n         ],\n         \"check_regressors_train\": [\n            \"name\",\n            \"regressor_orig\",\n            \"readonly_memmap\"\n         ],\n         \"check_sample_weights_invariance\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_sample_weights_list\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_sample_weights_not_an_array\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_sample_weights_pandas_series\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_set_params\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_sparsify_coefficients\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_supervised_y_2d\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_supervised_y_no_nan\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_transformer_data_not_an_array\": [\n            \"name\",\n            \"transformer\"\n         ],\n         \"check_transformer_general\": [\n            \"name\",\n            \"transformer\",\n            \"readonly_memmap\"\n         ],\n         \"check_transformer_n_iter\": [\n            \"name\",\n            \"estimator_orig\"\n         ],\n         \"check_transformers_unfitted\": [\n            \"name\",\n            \"transformer\"\n         ],\n         \"choose_check_classifiers_labels\": [\n            \"name\",\n            \"y\",\n            \"y_names\"\n         ],\n         \"enforce_estimator_tags_y\": [\n            \"estimator\",\n            \"y\"\n         ],\n         \"is_public_parameter\": [\n            \"attr\"\n         ],\n         \"pairwise_estimator_convert_X\": [\n            \"X\",\n            \"estimator\",\n            \"kernel\"\n         ],\n         \"parametrize_with_checks\": [\n            \"estimators\"\n         ],\n         \"set_checking_parameters\": [\n            \"estimator\"\n         ]\n      },\n      \"sklearn.utils.extmath\": {\n         \"_deterministic_vector_sign_flip\": [\n            \"u\"\n         ],\n         \"_incremental_mean_and_var\": [\n            \"X\",\n            \"last_mean\",\n            \"last_variance\",\n            \"last_sample_count\"\n         ],\n         \"_safe_accumulator_op\": [\n            \"op\",\n            \"x\"\n         ],\n         \"cartesian\": [\n            \"arrays\",\n            \"out\"\n         ],\n         \"density\": [\n            \"w\"\n         ],\n         \"fast_logdet\": [\n            \"A\"\n         ],\n         \"log_logistic\": [\n            \"X\",\n            \"out\"\n         ],\n         \"make_nonnegative\": [\n            \"X\",\n            \"min_value\"\n         ],\n         \"randomized_range_finder\": [\n            \"A\",\n            \"size\",\n            \"n_iter\",\n            \"power_iteration_normalizer\",\n            \"random_state\"\n         ],\n         \"randomized_svd\": [\n            \"M\",\n            \"n_components\",\n            \"n_oversamples\",\n            \"n_iter\",\n            \"power_iteration_normalizer\",\n            \"transpose\",\n            \"flip_sign\",\n            \"random_state\"\n         ],\n         \"row_norms\": [\n            \"X\",\n            \"squared\"\n         ],\n         \"safe_min\": [\n            \"X\"\n         ],\n         \"safe_sparse_dot\": [\n            \"a\",\n            \"b\",\n            \"dense_output\"\n         ],\n         \"softmax\": [\n            \"X\",\n            \"copy\"\n         ],\n         \"squared_norm\": [\n            \"x\"\n         ],\n         \"stable_cumsum\": [\n            \"arr\",\n            \"axis\",\n            \"rtol\",\n            \"atol\"\n         ],\n         \"svd_flip\": [\n            \"u\",\n            \"v\",\n            \"u_based_decision\"\n         ],\n         \"weighted_mode\": [\n            \"a\",\n            \"w\",\n            \"axis\"\n         ]\n      },\n      \"sklearn.utils.fast_dict\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.utils.fixes\": {\n         \"_arg_min_or_max\": [\n            \"self\",\n            \"axis\",\n            \"out\",\n            \"op\",\n            \"compare\"\n         ],\n         \"_arg_min_or_max_axis\": [\n            \"self\",\n            \"axis\",\n            \"op\",\n            \"compare\"\n         ],\n         \"_argmax\": [\n            \"arr_or_matrix\",\n            \"axis\"\n         ],\n         \"_astype_copy_false\": [\n            \"X\"\n         ],\n         \"_find_missing_index\": [\n            \"ind\",\n            \"n\"\n         ],\n         \"_joblib_parallel_args\": [],\n         \"_object_dtype_isnan\": [\n            \"X\"\n         ],\n         \"_parse_version\": [\n            \"version_string\"\n         ],\n         \"_sparse_argmax\": [\n            \"self\",\n            \"axis\",\n            \"out\"\n         ]\n      },\n      \"sklearn.utils.graph\": {\n         \"single_source_shortest_path_length\": [\n            \"graph\",\n            \"source\",\n            \"cutoff\"\n         ]\n      },\n      \"sklearn.utils.linear_assignment_\": {\n         \"_hungarian\": [\n            \"cost_matrix\"\n         ],\n         \"_step1\": [\n            \"state\"\n         ],\n         \"_step3\": [\n            \"state\"\n         ],\n         \"_step4\": [\n            \"state\"\n         ],\n         \"_step5\": [\n            \"state\"\n         ],\n         \"_step6\": [\n            \"state\"\n         ],\n         \"linear_assignment\": [\n            \"X\"\n         ]\n      },\n      \"sklearn.utils.metaestimators\": {\n         \"_safe_split\": [\n            \"estimator\",\n            \"X\",\n            \"y\",\n            \"indices\",\n            \"train_indices\"\n         ],\n         \"if_delegate_has_method\": [\n            \"delegate\"\n         ]\n      },\n      \"sklearn.utils.mocking\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.utils.multiclass\": {\n         \"_check_partial_fit_first_call\": [\n            \"clf\",\n            \"classes\"\n         ],\n         \"_is_integral_float\": [\n            \"y\"\n         ],\n         \"_ovr_decision_function\": [\n            \"predictions\",\n            \"confidences\",\n            \"n_classes\"\n         ],\n         \"_unique_indicator\": [\n            \"y\"\n         ],\n         \"_unique_multiclass\": [\n            \"y\"\n         ],\n         \"check_classification_targets\": [\n            \"y\"\n         ],\n         \"class_distribution\": [\n            \"y\",\n            \"sample_weight\"\n         ],\n         \"is_multilabel\": [\n            \"y\"\n         ],\n         \"type_of_target\": [\n            \"y\"\n         ],\n         \"unique_labels\": []\n      },\n      \"sklearn.utils.optimize\": {\n         \"_cg\": [\n            \"fhess_p\",\n            \"fgrad\",\n            \"maxiter\",\n            \"tol\"\n         ],\n         \"_check_optimize_result\": [\n            \"solver\",\n            \"result\",\n            \"max_iter\",\n            \"extra_warning_msg\"\n         ],\n         \"_line_search_wolfe12\": [\n            \"f\",\n            \"fprime\",\n            \"xk\",\n            \"pk\",\n            \"gfk\",\n            \"old_fval\",\n            \"old_old_fval\"\n         ],\n         \"_newton_cg\": [\n            \"grad_hess\",\n            \"func\",\n            \"grad\",\n            \"x0\",\n            \"args\",\n            \"tol\",\n            \"maxiter\",\n            \"maxinner\",\n            \"line_search\",\n            \"warn\"\n         ],\n         \"newton_cg\": [\n            \"grad_hess\",\n            \"func\",\n            \"grad\",\n            \"x0\",\n            \"args\",\n            \"tol\",\n            \"maxiter\",\n            \"maxinner\",\n            \"line_search\",\n            \"warn\"\n         ]\n      },\n      \"sklearn.utils.random\": {\n         \"_random_choice_csc\": [\n            \"n_samples\",\n            \"classes\",\n            \"class_probability\",\n            \"random_state\"\n         ],\n         \"random_choice_csc\": [\n            \"n_samples\",\n            \"classes\",\n            \"class_probability\",\n            \"random_state\"\n         ]\n      },\n      \"sklearn.utils.seq_dataset\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.utils.setup\": {\n         \"configuration\": [\n            \"parent_package\",\n            \"top_path\"\n         ]\n      },\n      \"sklearn.utils.sparsefuncs\": {\n         \"_get_elem_at_rank\": [\n            \"rank\",\n            \"data\",\n            \"n_negative\",\n            \"n_zeros\"\n         ],\n         \"_get_median\": [\n            \"data\",\n            \"n_zeros\"\n         ],\n         \"_min_or_max_axis\": [\n            \"X\",\n            \"axis\",\n            \"min_or_max\"\n         ],\n         \"_minor_reduce\": [\n            \"X\",\n            \"ufunc\"\n         ],\n         \"_raise_error_wrong_axis\": [\n            \"axis\"\n         ],\n         \"_raise_typeerror\": [\n            \"X\"\n         ],\n         \"_sparse_min_max\": [\n            \"X\",\n            \"axis\"\n         ],\n         \"_sparse_min_or_max\": [\n            \"X\",\n            \"axis\",\n            \"min_or_max\"\n         ],\n         \"_sparse_nan_min_max\": [\n            \"X\",\n            \"axis\"\n         ],\n         \"count_nonzero\": [\n            \"X\",\n            \"axis\",\n            \"sample_weight\"\n         ],\n         \"csc_median_axis_0\": [\n            \"X\"\n         ],\n         \"incr_mean_variance_axis\": [\n            \"X\",\n            \"axis\",\n            \"last_mean\",\n            \"last_var\",\n            \"last_n\"\n         ],\n         \"inplace_column_scale\": [\n            \"X\",\n            \"scale\"\n         ],\n         \"inplace_csr_column_scale\": [\n            \"X\",\n            \"scale\"\n         ],\n         \"inplace_csr_row_scale\": [\n            \"X\",\n            \"scale\"\n         ],\n         \"inplace_row_scale\": [\n            \"X\",\n            \"scale\"\n         ],\n         \"inplace_swap_column\": [\n            \"X\",\n            \"m\",\n            \"n\"\n         ],\n         \"inplace_swap_row\": [\n            \"X\",\n            \"m\",\n            \"n\"\n         ],\n         \"inplace_swap_row_csc\": [\n            \"X\",\n            \"m\",\n            \"n\"\n         ],\n         \"inplace_swap_row_csr\": [\n            \"X\",\n            \"m\",\n            \"n\"\n         ],\n         \"mean_variance_axis\": [\n            \"X\",\n            \"axis\"\n         ],\n         \"min_max_axis\": [\n            \"X\",\n            \"axis\",\n            \"ignore_nan\"\n         ]\n      },\n      \"sklearn.utils.stats\": {\n         \"_weighted_percentile\": [\n            \"array\",\n            \"sample_weight\",\n            \"percentile\"\n         ]\n      },\n      \"sklearn.utils.testing\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      },\n      \"sklearn.utils.tests.test_class_weight\": {\n         \"test_compute_class_weight\": [],\n         \"test_compute_class_weight_balanced_negative\": [],\n         \"test_compute_class_weight_balanced_unordered\": [],\n         \"test_compute_class_weight_default\": [],\n         \"test_compute_class_weight_dict\": [],\n         \"test_compute_class_weight_invariance\": [],\n         \"test_compute_class_weight_not_present\": [],\n         \"test_compute_sample_weight\": [],\n         \"test_compute_sample_weight_errors\": [],\n         \"test_compute_sample_weight_more_than_32\": [],\n         \"test_compute_sample_weight_with_subsample\": []\n      },\n      \"sklearn.utils.tests.test_cython_blas\": {\n         \"_no_op\": [\n            \"x\"\n         ],\n         \"test_asum\": [\n            \"dtype\"\n         ],\n         \"test_axpy\": [\n            \"dtype\"\n         ],\n         \"test_copy\": [\n            \"dtype\"\n         ],\n         \"test_dot\": [\n            \"dtype\"\n         ],\n         \"test_gemm\": [\n            \"dtype\",\n            \"opA\",\n            \"transA\",\n            \"opB\",\n            \"transB\",\n            \"order\"\n         ],\n         \"test_gemv\": [\n            \"dtype\",\n            \"opA\",\n            \"transA\",\n            \"order\"\n         ],\n         \"test_ger\": [\n            \"dtype\",\n            \"order\"\n         ],\n         \"test_nrm2\": [\n            \"dtype\"\n         ],\n         \"test_rot\": [\n            \"dtype\"\n         ],\n         \"test_rotg\": [\n            \"dtype\"\n         ],\n         \"test_scal\": [\n            \"dtype\"\n         ]\n      },\n      \"sklearn.utils.tests.test_deprecated_utils\": {\n         \"test_choose_check_classifiers_labels_deprecated\": [],\n         \"test_dict_learning_no_shadowing\": [],\n         \"test_enforce_estimator_tags_y\": [],\n         \"test_is_public_parameter\": [],\n         \"test_newton_cg\": [],\n         \"test_notanarray\": [],\n         \"test_pairwise_estimator_convert_X\": [],\n         \"test_partial_dependence_no_shadowing\": [],\n         \"test_random_choice_csc\": [],\n         \"test_safe_indexing\": [],\n         \"test_set_checking_parameters\": []\n      },\n      \"sklearn.utils.tests.test_deprecation\": {\n         \"mock_function\": [],\n         \"test_deprecated\": [],\n         \"test_is_deprecated\": [],\n         \"test_pickle\": []\n      },\n      \"sklearn.utils.tests.test_estimator_checks\": {\n         \"run_tests_without_pytest\": [],\n         \"test_all_estimators_all_public\": [],\n         \"test_check_class_weight_balanced_linear_classifier\": [],\n         \"test_check_estimator\": [],\n         \"test_check_estimator_clones\": [],\n         \"test_check_estimator_pairwise\": [],\n         \"test_check_estimator_required_parameters_skip\": [],\n         \"test_check_estimator_transformer_no_mixin\": [],\n         \"test_check_estimators_unfitted\": [],\n         \"test_check_fit_score_takes_y_works_on_deprecated_fit\": [],\n         \"test_check_no_attributes_set_in_init\": [],\n         \"test_check_outlier_corruption\": [],\n         \"test_not_an_array_array_function\": []\n      },\n      \"sklearn.utils.tests.test_extmath\": {\n         \"check_randomized_svd_low_rank\": [\n            \"dtype\"\n         ],\n         \"test_cartesian\": [],\n         \"test_density\": [],\n         \"test_incremental_mean_and_variance_ignore_nan\": [],\n         \"test_incremental_variance_ddof\": [],\n         \"test_incremental_variance_numerical_stability\": [],\n         \"test_incremental_variance_update_formulas\": [],\n         \"test_logistic_sigmoid\": [],\n         \"test_random_weights\": [],\n         \"test_randomized_svd_infinite_rank\": [],\n         \"test_randomized_svd_low_rank_all_dtypes\": [\n            \"dtype\"\n         ],\n         \"test_randomized_svd_low_rank_with_noise\": [],\n         \"test_randomized_svd_power_iteration_normalizer\": [],\n         \"test_randomized_svd_sign_flip\": [],\n         \"test_randomized_svd_sign_flip_with_transpose\": [],\n         \"test_randomized_svd_sparse_warnings\": [],\n         \"test_randomized_svd_transpose_consistency\": [],\n         \"test_row_norms\": [\n            \"dtype\"\n         ],\n         \"test_safe_min\": [],\n         \"test_safe_sparse_dot_2d\": [\n            \"A_array_constr\",\n            \"B_array_constr\"\n         ],\n         \"test_safe_sparse_dot_2d_1d\": [\n            \"A_array_constr\"\n         ],\n         \"test_safe_sparse_dot_dense_output\": [\n            \"dense_output\"\n         ],\n         \"test_safe_sparse_dot_nd\": [],\n         \"test_softmax\": [],\n         \"test_stable_cumsum\": [],\n         \"test_svd_flip\": [],\n         \"test_uniform_weights\": [],\n         \"test_vector_sign_flip\": []\n      },\n      \"sklearn.utils.tests.test_fast_dict\": {\n         \"test_int_float_dict\": [],\n         \"test_int_float_dict_argmin\": []\n      },\n      \"sklearn.utils.tests.test_fixes\": {\n         \"test_joblib_parallel_args\": [\n            \"monkeypatch\",\n            \"joblib_version\"\n         ],\n         \"test_loguniform\": [\n            \"low\",\n            \"high\",\n            \"base\"\n         ],\n         \"test_masked_array_obj_dtype_pickleable\": [],\n         \"test_object_dtype_isnan\": [\n            \"dtype\",\n            \"val\"\n         ]\n      },\n      \"sklearn.utils.tests.test_linear_assignment\": {\n         \"test_hungarian\": []\n      },\n      \"sklearn.utils.tests.test_metaestimators\": {\n         \"test_delegated_docstring\": [],\n         \"test_if_delegate_has_method\": []\n      },\n      \"sklearn.utils.tests.test_multiclass\": {\n         \"test_check_classification_targets\": [],\n         \"test_class_distribution\": [],\n         \"test_is_multilabel\": [],\n         \"test_ovr_decision_function\": [],\n         \"test_safe_split_with_precomputed_kernel\": [],\n         \"test_type_of_target\": [],\n         \"test_type_of_target_pandas_sparse\": [],\n         \"test_unique_labels\": [],\n         \"test_unique_labels_mixed_types\": [],\n         \"test_unique_labels_non_specific\": []\n      },\n      \"sklearn.utils.tests.test_murmurhash\": {\n         \"test_mmhash3_bytes\": [],\n         \"test_mmhash3_int\": [],\n         \"test_mmhash3_int_array\": [],\n         \"test_mmhash3_unicode\": [],\n         \"test_no_collision_on_byte_range\": [],\n         \"test_uniform_distribution\": []\n      },\n      \"sklearn.utils.tests.test_optimize\": {\n         \"test_newton_cg\": []\n      },\n      \"sklearn.utils.tests.test_pprint\": {\n         \"test_basic\": [],\n         \"test_bruteforce_ellipsis\": [],\n         \"test_builtin_prettyprinter\": [],\n         \"test_changed_only\": [],\n         \"test_deeply_nested\": [],\n         \"test_gridsearch\": [],\n         \"test_gridsearch_pipeline\": [],\n         \"test_n_max_elements_to_show\": [],\n         \"test_pipeline\": []\n      },\n      \"sklearn.utils.tests.test_random\": {\n         \"check_edge_case_of_sample_int\": [\n            \"sample_without_replacement\"\n         ],\n         \"check_sample_int\": [\n            \"sample_without_replacement\"\n         ],\n         \"check_sample_int_distribution\": [\n            \"sample_without_replacement\"\n         ],\n         \"test_invalid_sample_without_replacement_algorithm\": [],\n         \"test_our_rand_r\": [],\n         \"test_random_choice_csc\": [\n            \"n_samples\",\n            \"random_state\"\n         ],\n         \"test_random_choice_csc_errors\": [],\n         \"test_sample_without_replacement_algorithms\": []\n      },\n      \"sklearn.utils.tests.test_seq_dataset\": {\n         \"assert_csr_equal_values\": [\n            \"current\",\n            \"expected\"\n         ],\n         \"make_dense_dataset_32\": [],\n         \"make_dense_dataset_64\": [],\n         \"make_sparse_dataset_32\": [],\n         \"make_sparse_dataset_64\": [],\n         \"test_buffer_dtype_mismatch_error\": [],\n         \"test_fused_types_consistency\": [\n            \"make_dataset_32\",\n            \"make_dataset_64\"\n         ],\n         \"test_seq_dataset_basic_iteration\": [\n            \"dataset_constructor\"\n         ],\n         \"test_seq_dataset_shuffle\": [\n            \"make_dense_dataset\",\n            \"make_sparse_dataset\"\n         ]\n      },\n      \"sklearn.utils.tests.test_shortest_path\": {\n         \"floyd_warshall_slow\": [\n            \"graph\",\n            \"directed\"\n         ],\n         \"generate_graph\": [\n            \"N\"\n         ],\n         \"test_dijkstra\": [],\n         \"test_dijkstra_bug_fix\": [],\n         \"test_floyd_warshall\": [],\n         \"test_shortest_path\": []\n      },\n      \"sklearn.utils.tests.test_show_versions\": {\n         \"test_get_deps_info\": [],\n         \"test_get_sys_info\": [],\n         \"test_show_versions\": [\n            \"capsys\"\n         ]\n      },\n      \"sklearn.utils.tests.test_sparsefuncs\": {\n         \"test_count_nonzero\": [],\n         \"test_csc_row_median\": [],\n         \"test_densify_rows\": [],\n         \"test_incr_mean_variance_axis\": [],\n         \"test_incr_mean_variance_axis_ignore_nan\": [\n            \"axis\",\n            \"sparse_constructor\"\n         ],\n         \"test_inplace_column_scale\": [],\n         \"test_inplace_normalize\": [],\n         \"test_inplace_row_scale\": [],\n         \"test_inplace_swap_column\": [],\n         \"test_inplace_swap_row\": [],\n         \"test_mean_variance_axis0\": [],\n         \"test_mean_variance_axis1\": [],\n         \"test_mean_variance_illegal_axis\": [],\n         \"test_min_max\": [\n            \"dtype\",\n            \"axis\",\n            \"sparse_format\",\n            \"missing_values\",\n            \"min_func\",\n            \"max_func\",\n            \"ignore_nan\",\n            \"large_indices\"\n         ],\n         \"test_min_max_axis_errors\": []\n      },\n      \"sklearn.utils.tests.test_testing\": {\n         \"check_memmap\": [\n            \"input_array\",\n            \"mmap_data\",\n            \"mmap_mode\"\n         ],\n         \"f_bad_order\": [\n            \"b\",\n            \"a\"\n         ],\n         \"f_bad_sections\": [\n            \"a\",\n            \"b\"\n         ],\n         \"f_check_param_definition\": [\n            \"a\",\n            \"b\",\n            \"c\",\n            \"d\",\n            \"e\"\n         ],\n         \"f_missing\": [\n            \"a\",\n            \"b\"\n         ],\n         \"f_ok\": [\n            \"a\",\n            \"b\"\n         ],\n         \"f_too_many_param_docstring\": [\n            \"a\",\n            \"b\"\n         ],\n         \"test_assert_allclose_dense_sparse\": [],\n         \"test_assert_greater\": [],\n         \"test_assert_greater_equal\": [],\n         \"test_assert_less\": [],\n         \"test_assert_less_equal\": [],\n         \"test_assert_raise_message\": [],\n         \"test_assert_raises_msg\": [],\n         \"test_check_docstring_parameters\": [],\n         \"test_convert_container\": [\n            \"constructor_name\",\n            \"container_type\"\n         ],\n         \"test_create_memmap_backed_data\": [\n            \"monkeypatch\"\n         ],\n         \"test_deprecated_helpers\": [\n            \"callable\",\n            \"args\"\n         ],\n         \"test_ignore_warning\": [],\n         \"test_set_random_state\": [],\n         \"test_tempmemmap\": [\n            \"monkeypatch\"\n         ]\n      },\n      \"sklearn.utils.tests.test_utils\": {\n         \"dummy_func\": [],\n         \"test_column_or_1d\": [],\n         \"test_deprecated\": [],\n         \"test_deprecation_joblib_api\": [\n            \"tmpdir\"\n         ],\n         \"test_determine_key_type\": [\n            \"key\",\n            \"dtype\"\n         ],\n         \"test_determine_key_type_error\": [],\n         \"test_determine_key_type_slice_error\": [],\n         \"test_gen_even_slices\": [],\n         \"test_get_chunk_n_rows\": [\n            \"row_bytes\",\n            \"max_n_rows\",\n            \"working_memory\",\n            \"expected\",\n            \"warning\"\n         ],\n         \"test_get_column_indices_error\": [\n            \"key\",\n            \"err_msg\"\n         ],\n         \"test_is_scalar_nan\": [\n            \"value\",\n            \"result\"\n         ],\n         \"test_make_rng\": [],\n         \"test_message_with_time\": [\n            \"source\",\n            \"message\",\n            \"is_long\",\n            \"time\",\n            \"time_str\"\n         ],\n         \"test_print_elapsed_time\": [\n            \"message\",\n            \"expected\",\n            \"capsys\",\n            \"monkeypatch\"\n         ],\n         \"test_resample\": [],\n         \"test_resample_stratified\": [],\n         \"test_resample_stratified_replace\": [],\n         \"test_resample_stratify_2dy\": [],\n         \"test_resample_stratify_sparse_error\": [],\n         \"test_safe_indexing_1d_array_error\": [\n            \"X_constructor\"\n         ],\n         \"test_safe_indexing_1d_container\": [\n            \"array_type\",\n            \"indices_type\"\n         ],\n         \"test_safe_indexing_1d_container_mask\": [\n            \"array_type\",\n            \"indices_type\"\n         ],\n         \"test_safe_indexing_1d_scalar\": [\n            \"array_type\"\n         ],\n         \"test_safe_indexing_2d_container_axis_0\": [\n            \"array_type\",\n            \"indices_type\"\n         ],\n         \"test_safe_indexing_2d_container_axis_1\": [\n            \"array_type\",\n            \"indices_type\",\n            \"indices\"\n         ],\n         \"test_safe_indexing_2d_mask\": [\n            \"array_type\",\n            \"indices_type\",\n            \"axis\",\n            \"expected_subset\"\n         ],\n         \"test_safe_indexing_2d_read_only_axis_1\": [\n            \"array_read_only\",\n            \"indices_read_only\",\n            \"array_type\",\n            \"indices_type\",\n            \"axis\",\n            \"expected_array\"\n         ],\n         \"test_safe_indexing_2d_scalar_axis_0\": [\n            \"array_type\",\n            \"expected_output_type\"\n         ],\n         \"test_safe_indexing_2d_scalar_axis_1\": [\n            \"array_type\",\n            \"expected_output_type\",\n            \"indices\"\n         ],\n         \"test_safe_indexing_None_axis_0\": [\n            \"array_type\"\n         ],\n         \"test_safe_indexing_container_axis_0_unsupported_type\": [],\n         \"test_safe_indexing_error_axis\": [\n            \"axis\"\n         ],\n         \"test_safe_indexing_pandas_no_matching_cols_error\": [],\n         \"test_safe_mask\": [],\n         \"test_shuffle_dont_convert_to_array\": [],\n         \"test_shuffle_on_ndim_equals_three\": []\n      },\n      \"sklearn.utils.tests.test_validation\": {\n         \"X_64bit\": [\n            \"request\"\n         ],\n         \"test_allclose_dense_sparse_equals\": [\n            \"toarray\"\n         ],\n         \"test_allclose_dense_sparse_not_equals\": [\n            \"toarray\"\n         ],\n         \"test_allclose_dense_sparse_raise\": [\n            \"toarray\"\n         ],\n         \"test_as_float_array\": [],\n         \"test_as_float_array_nan\": [\n            \"X\"\n         ],\n         \"test_check_X_y_informative_error\": [],\n         \"test_check_array\": [],\n         \"test_check_array_accept_large_sparse_no_exception\": [\n            \"X_64bit\"\n         ],\n         \"test_check_array_accept_large_sparse_raise_exception\": [\n            \"X_64bit\"\n         ],\n         \"test_check_array_accept_sparse_no_exception\": [],\n         \"test_check_array_accept_sparse_type_exception\": [],\n         \"test_check_array_complex_data_error\": [],\n         \"test_check_array_dtype_stability\": [],\n         \"test_check_array_dtype_warning\": [],\n         \"test_check_array_force_all_finite_object\": [],\n         \"test_check_array_force_all_finite_object_unsafe_casting\": [\n            \"X\",\n            \"err_msg\",\n            \"force_all_finite\"\n         ],\n         \"test_check_array_force_all_finite_valid\": [\n            \"value\",\n            \"force_all_finite\",\n            \"retype\"\n         ],\n         \"test_check_array_force_all_finiteinvalid\": [\n            \"value\",\n            \"force_all_finite\",\n            \"match_msg\",\n            \"retype\"\n         ],\n         \"test_check_array_memmap\": [\n            \"copy\"\n         ],\n         \"test_check_array_min_samples_and_features_messages\": [],\n         \"test_check_array_on_mock_dataframe\": [],\n         \"test_check_array_pandas_dtype_casting\": [],\n         \"test_check_array_pandas_dtype_object_conversion\": [],\n         \"test_check_array_series\": [],\n         \"test_check_array_warn_on_dtype_deprecation\": [],\n         \"test_check_consistent_length\": [],\n         \"test_check_dataframe_fit_attribute\": [],\n         \"test_check_dataframe_mixed_float_dtypes\": [],\n         \"test_check_dataframe_warns_on_dtype\": [],\n         \"test_check_fit_params\": [\n            \"indices\"\n         ],\n         \"test_check_is_fitted\": [],\n         \"test_check_is_fitted_attributes\": [],\n         \"test_check_is_fitted_with_attributes\": [\n            \"wrap\"\n         ],\n         \"test_check_memory\": [],\n         \"test_check_non_negative\": [\n            \"retype\"\n         ],\n         \"test_check_psd_eigenvalues_invalid\": [\n            \"lambdas\",\n            \"err_type\",\n            \"err_msg\"\n         ],\n         \"test_check_psd_eigenvalues_valid\": [\n            \"lambdas\",\n            \"expected_lambdas\",\n            \"w_type\",\n            \"w_msg\",\n            \"enable_warnings\"\n         ],\n         \"test_check_sample_weight\": [],\n         \"test_check_scalar_invalid\": [\n            \"x\",\n            \"target_name\",\n            \"target_type\",\n            \"min_val\",\n            \"max_val\",\n            \"err_msg\"\n         ],\n         \"test_check_scalar_valid\": [\n            \"x\",\n            \"target_type\",\n            \"min_val\",\n            \"max_val\"\n         ],\n         \"test_check_symmetric\": [],\n         \"test_deprecate_positional_args_warns_for_class\": [],\n         \"test_deprecate_positional_args_warns_for_function\": [],\n         \"test_has_fit_parameter\": [],\n         \"test_memmap\": [],\n         \"test_np_matrix\": [],\n         \"test_ordering\": [],\n         \"test_retrieve_samples_from_non_standard_shape\": [],\n         \"test_suppress_validation\": []\n      },\n      \"sklearn.utils.validation\": {\n         \"_allclose_dense_sparse\": [\n            \"x\",\n            \"y\",\n            \"rtol\",\n            \"atol\"\n         ],\n         \"_assert_all_finite\": [\n            \"X\",\n            \"allow_nan\",\n            \"msg_dtype\"\n         ],\n         \"_check_fit_params\": [\n            \"X\",\n            \"fit_params\",\n            \"indices\"\n         ],\n         \"_check_large_sparse\": [\n            \"X\",\n            \"accept_large_sparse\"\n         ],\n         \"_check_psd_eigenvalues\": [\n            \"lambdas\",\n            \"enable_warnings\"\n         ],\n         \"_check_sample_weight\": [\n            \"sample_weight\",\n            \"X\",\n            \"dtype\"\n         ],\n         \"_deprecate_positional_args\": [\n            \"f\"\n         ],\n         \"_ensure_no_complex_data\": [\n            \"array\"\n         ],\n         \"_ensure_sparse_format\": [\n            \"spmatrix\",\n            \"accept_sparse\",\n            \"dtype\",\n            \"copy\",\n            \"force_all_finite\",\n            \"accept_large_sparse\"\n         ],\n         \"_is_arraylike\": [\n            \"x\"\n         ],\n         \"_make_indexable\": [\n            \"iterable\"\n         ],\n         \"_num_samples\": [\n            \"x\"\n         ],\n         \"as_float_array\": [\n            \"X\",\n            \"copy\",\n            \"force_all_finite\"\n         ],\n         \"assert_all_finite\": [\n            \"X\",\n            \"allow_nan\"\n         ],\n         \"check_X_y\": [\n            \"X\",\n            \"y\",\n            \"accept_sparse\",\n            \"accept_large_sparse\",\n            \"dtype\",\n            \"order\",\n            \"copy\",\n            \"force_all_finite\",\n            \"ensure_2d\",\n            \"allow_nd\",\n            \"multi_output\",\n            \"ensure_min_samples\",\n            \"ensure_min_features\",\n            \"y_numeric\",\n            \"warn_on_dtype\",\n            \"estimator\"\n         ],\n         \"check_array\": [\n            \"array\",\n            \"accept_sparse\",\n            \"accept_large_sparse\",\n            \"dtype\",\n            \"order\",\n            \"copy\",\n            \"force_all_finite\",\n            \"ensure_2d\",\n            \"allow_nd\",\n            \"ensure_min_samples\",\n            \"ensure_min_features\",\n            \"warn_on_dtype\",\n            \"estimator\"\n         ],\n         \"check_consistent_length\": [],\n         \"check_is_fitted\": [\n            \"estimator\",\n            \"attributes\",\n            \"msg\",\n            \"all_or_any\"\n         ],\n         \"check_memory\": [\n            \"memory\"\n         ],\n         \"check_non_negative\": [\n            \"X\",\n            \"whom\"\n         ],\n         \"check_random_state\": [\n            \"seed\"\n         ],\n         \"check_scalar\": [\n            \"x\",\n            \"name\",\n            \"target_type\",\n            \"min_val\",\n            \"max_val\"\n         ],\n         \"check_symmetric\": [\n            \"array\",\n            \"tol\",\n            \"raise_warning\",\n            \"raise_exception\"\n         ],\n         \"column_or_1d\": [\n            \"y\",\n            \"warn\"\n         ],\n         \"has_fit_parameter\": [\n            \"estimator\",\n            \"parameter\"\n         ],\n         \"indexable\": []\n      },\n      \"sklearn.utils.weight_vector\": {\n         \"__getattr__\": [\n            \"name\"\n         ]\n      }\n   },\n   \"method\": {\n      \"sklearn.base\": {\n         \"BaseEstimator\": {\n            \"__getstate__\": [\n               \"self\"\n            ],\n            \"__repr__\": [\n               \"self\",\n               \"N_CHAR_MAX\"\n            ],\n            \"__setstate__\": [\n               \"self\",\n               \"state\"\n            ],\n            \"_get_param_names\": [\n               \"cls\"\n            ],\n            \"_get_tags\": [\n               \"self\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"get_params\": [\n               \"self\",\n               \"deep\"\n            ],\n            \"set_params\": [\n               \"self\"\n            ]\n         },\n         \"BiclusterMixin\": {\n            \"biclusters_\": [\n               \"self\"\n            ],\n            \"get_indices\": [\n               \"self\",\n               \"i\"\n            ],\n            \"get_shape\": [\n               \"self\",\n               \"i\"\n            ],\n            \"get_submatrix\": [\n               \"self\",\n               \"i\",\n               \"data\"\n            ]\n         },\n         \"ClassifierMixin\": {\n            \"score\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ]\n         },\n         \"ClusterMixin\": {\n            \"fit_predict\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"DensityMixin\": {\n            \"score\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"MetaEstimatorMixin\": {},\n         \"MultiOutputMixin\": {\n            \"_more_tags\": [\n               \"self\"\n            ]\n         },\n         \"OutlierMixin\": {\n            \"fit_predict\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"RegressorMixin\": {\n            \"score\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ]\n         },\n         \"TransformerMixin\": {\n            \"fit_transform\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"_UnstableArchMixin\": {\n            \"_more_tags\": [\n               \"self\"\n            ]\n         }\n      },\n      \"sklearn.calibration\": {\n         \"CalibratedClassifierCV\": {\n            \"__init__\": [\n               \"self\",\n               \"base_estimator\",\n               \"method\",\n               \"cv\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_proba\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"_CalibratedClassifier\": {\n            \"__init__\": [\n               \"self\",\n               \"base_estimator\",\n               \"method\",\n               \"classes\"\n            ],\n            \"_preproc\": [\n               \"self\",\n               \"X\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"predict_proba\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"_SigmoidCalibration\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"T\"\n            ]\n         }\n      },\n      \"sklearn.cluster._affinity_propagation\": {\n         \"AffinityPropagation\": {\n            \"__init__\": [\n               \"self\",\n               \"damping\",\n               \"max_iter\",\n               \"convergence_iter\",\n               \"copy\",\n               \"preference\",\n               \"affinity\",\n               \"verbose\"\n            ],\n            \"_pairwise\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"fit_predict\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.cluster._agglomerative\": {\n         \"AgglomerativeClustering\": {\n            \"__init__\": [\n               \"self\",\n               \"n_clusters\",\n               \"affinity\",\n               \"memory\",\n               \"connectivity\",\n               \"compute_full_tree\",\n               \"linkage\",\n               \"distance_threshold\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"fit_predict\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"n_components_\": [\n               \"self\"\n            ]\n         },\n         \"FeatureAgglomeration\": {\n            \"__init__\": [\n               \"self\",\n               \"n_clusters\",\n               \"affinity\",\n               \"memory\",\n               \"connectivity\",\n               \"compute_full_tree\",\n               \"linkage\",\n               \"pooling_func\",\n               \"distance_threshold\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"fit_predict\": [\n               \"self\"\n            ]\n         }\n      },\n      \"sklearn.cluster._bicluster\": {\n         \"BaseSpectral\": {\n            \"__init__\": [\n               \"self\",\n               \"n_clusters\",\n               \"svd_method\",\n               \"n_svd_vecs\",\n               \"mini_batch\",\n               \"init\",\n               \"n_init\",\n               \"n_jobs\",\n               \"random_state\"\n            ],\n            \"_check_parameters\": [\n               \"self\"\n            ],\n            \"_k_means\": [\n               \"self\",\n               \"data\",\n               \"n_clusters\"\n            ],\n            \"_svd\": [\n               \"self\",\n               \"array\",\n               \"n_components\",\n               \"n_discard\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"SpectralBiclustering\": {\n            \"__init__\": [\n               \"self\",\n               \"n_clusters\",\n               \"method\",\n               \"n_components\",\n               \"n_best\",\n               \"svd_method\",\n               \"n_svd_vecs\",\n               \"mini_batch\",\n               \"init\",\n               \"n_init\",\n               \"n_jobs\",\n               \"random_state\"\n            ],\n            \"_check_parameters\": [\n               \"self\"\n            ],\n            \"_fit\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_fit_best_piecewise\": [\n               \"self\",\n               \"vectors\",\n               \"n_best\",\n               \"n_clusters\"\n            ],\n            \"_project_and_cluster\": [\n               \"self\",\n               \"data\",\n               \"vectors\",\n               \"n_clusters\"\n            ]\n         },\n         \"SpectralCoclustering\": {\n            \"__init__\": [\n               \"self\",\n               \"n_clusters\",\n               \"svd_method\",\n               \"n_svd_vecs\",\n               \"mini_batch\",\n               \"init\",\n               \"n_init\",\n               \"n_jobs\",\n               \"random_state\"\n            ],\n            \"_fit\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.cluster._birch\": {\n         \"Birch\": {\n            \"__init__\": [\n               \"self\",\n               \"threshold\",\n               \"branching_factor\",\n               \"n_clusters\",\n               \"compute_labels\",\n               \"copy\"\n            ],\n            \"_check_fit\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_fit\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_get_leaves\": [\n               \"self\"\n            ],\n            \"_global_clustering\": [\n               \"self\",\n               \"X\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"partial_fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"_CFNode\": {\n            \"__init__\": [\n               \"self\",\n               \"threshold\",\n               \"branching_factor\",\n               \"is_leaf\",\n               \"n_features\"\n            ],\n            \"append_subcluster\": [\n               \"self\",\n               \"subcluster\"\n            ],\n            \"insert_cf_subcluster\": [\n               \"self\",\n               \"subcluster\"\n            ],\n            \"update_split_subclusters\": [\n               \"self\",\n               \"subcluster\",\n               \"new_subcluster1\",\n               \"new_subcluster2\"\n            ]\n         },\n         \"_CFSubcluster\": {\n            \"__init__\": [\n               \"self\",\n               \"linear_sum\"\n            ],\n            \"merge_subcluster\": [\n               \"self\",\n               \"nominee_cluster\",\n               \"threshold\"\n            ],\n            \"radius\": [\n               \"self\"\n            ],\n            \"update\": [\n               \"self\",\n               \"subcluster\"\n            ]\n         }\n      },\n      \"sklearn.cluster._dbscan\": {\n         \"DBSCAN\": {\n            \"__init__\": [\n               \"self\",\n               \"eps\",\n               \"min_samples\",\n               \"metric\",\n               \"metric_params\",\n               \"algorithm\",\n               \"leaf_size\",\n               \"p\",\n               \"n_jobs\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"fit_predict\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ]\n         }\n      },\n      \"sklearn.cluster._feature_agglomeration\": {\n         \"AgglomerationTransform\": {\n            \"inverse_transform\": [\n               \"self\",\n               \"Xred\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.cluster._kmeans\": {\n         \"KMeans\": {\n            \"__init__\": [\n               \"self\",\n               \"n_clusters\",\n               \"init\",\n               \"n_init\",\n               \"max_iter\",\n               \"tol\",\n               \"precompute_distances\",\n               \"verbose\",\n               \"random_state\",\n               \"copy_x\",\n               \"n_jobs\",\n               \"algorithm\"\n            ],\n            \"_check_test_data\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_transform\": [\n               \"self\",\n               \"X\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"fit_predict\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"fit_transform\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\",\n               \"sample_weight\"\n            ],\n            \"score\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"MiniBatchKMeans\": {\n            \"__init__\": [\n               \"self\",\n               \"n_clusters\",\n               \"init\",\n               \"max_iter\",\n               \"batch_size\",\n               \"verbose\",\n               \"compute_labels\",\n               \"random_state\",\n               \"tol\",\n               \"max_no_improvement\",\n               \"init_size\",\n               \"n_init\",\n               \"reassignment_ratio\"\n            ],\n            \"_labels_inertia_minibatch\": [\n               \"self\",\n               \"X\",\n               \"sample_weight\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"partial_fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\",\n               \"sample_weight\"\n            ]\n         }\n      },\n      \"sklearn.cluster._mean_shift\": {\n         \"MeanShift\": {\n            \"__init__\": [\n               \"self\",\n               \"bandwidth\",\n               \"seeds\",\n               \"bin_seeding\",\n               \"min_bin_freq\",\n               \"cluster_all\",\n               \"n_jobs\",\n               \"max_iter\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.cluster._optics\": {\n         \"OPTICS\": {\n            \"__init__\": [\n               \"self\",\n               \"min_samples\",\n               \"max_eps\",\n               \"metric\",\n               \"p\",\n               \"metric_params\",\n               \"cluster_method\",\n               \"eps\",\n               \"xi\",\n               \"predecessor_correction\",\n               \"min_cluster_size\",\n               \"algorithm\",\n               \"leaf_size\",\n               \"n_jobs\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         }\n      },\n      \"sklearn.cluster._spectral\": {\n         \"SpectralClustering\": {\n            \"__init__\": [\n               \"self\",\n               \"n_clusters\",\n               \"eigen_solver\",\n               \"n_components\",\n               \"random_state\",\n               \"n_init\",\n               \"gamma\",\n               \"affinity\",\n               \"n_neighbors\",\n               \"eigen_tol\",\n               \"assign_labels\",\n               \"degree\",\n               \"coef0\",\n               \"kernel_params\",\n               \"n_jobs\"\n            ],\n            \"_pairwise\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"fit_predict\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         }\n      },\n      \"sklearn.cluster.tests.test_bicluster\": {\n         \"MockBiclustering\": {\n            \"__init__\": [\n               \"self\"\n            ],\n            \"get_indices\": [\n               \"self\",\n               \"i\"\n            ]\n         }\n      },\n      \"sklearn.compose._column_transformer\": {\n         \"ColumnTransformer\": {\n            \"__init__\": [\n               \"self\",\n               \"transformers\",\n               \"remainder\",\n               \"sparse_threshold\",\n               \"n_jobs\",\n               \"transformer_weights\",\n               \"verbose\"\n            ],\n            \"_fit_transform\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"func\",\n               \"fitted\"\n            ],\n            \"_hstack\": [\n               \"self\",\n               \"Xs\"\n            ],\n            \"_iter\": [\n               \"self\",\n               \"fitted\",\n               \"replace_strings\"\n            ],\n            \"_log_message\": [\n               \"self\",\n               \"name\",\n               \"idx\",\n               \"total\"\n            ],\n            \"_transformers\": [\n               \"self\",\n               \"value\"\n            ],\n            \"_update_fitted_transformers\": [\n               \"self\",\n               \"transformers\"\n            ],\n            \"_validate_column_callables\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_validate_features\": [\n               \"self\",\n               \"n_features\",\n               \"feature_names\"\n            ],\n            \"_validate_output\": [\n               \"self\",\n               \"result\"\n            ],\n            \"_validate_remainder\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_validate_transformers\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"fit_transform\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"get_feature_names\": [\n               \"self\"\n            ],\n            \"get_params\": [\n               \"self\",\n               \"deep\"\n            ],\n            \"named_transformers_\": [\n               \"self\"\n            ],\n            \"set_params\": [\n               \"self\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"make_column_selector\": {\n            \"__call__\": [\n               \"self\",\n               \"df\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"pattern\",\n               \"dtype_include\",\n               \"dtype_exclude\"\n            ]\n         }\n      },\n      \"sklearn.compose._target\": {\n         \"TransformedTargetRegressor\": {\n            \"__init__\": [\n               \"self\",\n               \"regressor\",\n               \"transformer\",\n               \"func\",\n               \"inverse_func\",\n               \"check_inverse\"\n            ],\n            \"_fit_transformer\": [\n               \"self\",\n               \"y\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.compose.tests.test_column_transformer\": {\n         \"DoubleTrans\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"SparseMatrixTrans\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"Trans\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"TransNo2D\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"TransRaise\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         }\n      },\n      \"sklearn.compose.tests.test_target\": {\n         \"DummyCheckerArrayTransformer\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"inverse_transform\": [\n               \"self\",\n               \"X\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"DummyCheckerListRegressor\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"DummyRegressorWithExtraFitParams\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\",\n               \"check_input\"\n            ]\n         },\n         \"DummyTransformer\": {\n            \"__init__\": [\n               \"self\",\n               \"fit_counter\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"inverse_transform\": [\n               \"self\",\n               \"X\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.covariance._elliptic_envelope\": {\n         \"EllipticEnvelope\": {\n            \"__init__\": [\n               \"self\",\n               \"store_precision\",\n               \"assume_centered\",\n               \"support_fraction\",\n               \"contamination\",\n               \"random_state\"\n            ],\n            \"decision_function\": [\n               \"self\",\n               \"X\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"score\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"score_samples\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.covariance._empirical_covariance\": {\n         \"EmpiricalCovariance\": {\n            \"__init__\": [\n               \"self\",\n               \"store_precision\",\n               \"assume_centered\"\n            ],\n            \"_set_covariance\": [\n               \"self\",\n               \"covariance\"\n            ],\n            \"error_norm\": [\n               \"self\",\n               \"comp_cov\",\n               \"norm\",\n               \"scaling\",\n               \"squared\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"get_precision\": [\n               \"self\"\n            ],\n            \"mahalanobis\": [\n               \"self\",\n               \"X\"\n            ],\n            \"score\": [\n               \"self\",\n               \"X_test\",\n               \"y\"\n            ]\n         }\n      },\n      \"sklearn.covariance._graph_lasso\": {\n         \"GraphicalLasso\": {\n            \"__init__\": [\n               \"self\",\n               \"alpha\",\n               \"mode\",\n               \"tol\",\n               \"enet_tol\",\n               \"max_iter\",\n               \"verbose\",\n               \"assume_centered\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"GraphicalLassoCV\": {\n            \"__init__\": [\n               \"self\",\n               \"alphas\",\n               \"n_refinements\",\n               \"cv\",\n               \"tol\",\n               \"enet_tol\",\n               \"max_iter\",\n               \"mode\",\n               \"n_jobs\",\n               \"verbose\",\n               \"assume_centered\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         }\n      },\n      \"sklearn.covariance._robust_covariance\": {\n         \"MinCovDet\": {\n            \"__init__\": [\n               \"self\",\n               \"store_precision\",\n               \"assume_centered\",\n               \"support_fraction\",\n               \"random_state\"\n            ],\n            \"correct_covariance\": [\n               \"self\",\n               \"data\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"reweight_covariance\": [\n               \"self\",\n               \"data\"\n            ]\n         }\n      },\n      \"sklearn.covariance._shrunk_covariance\": {\n         \"LedoitWolf\": {\n            \"__init__\": [\n               \"self\",\n               \"store_precision\",\n               \"assume_centered\",\n               \"block_size\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"OAS\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"ShrunkCovariance\": {\n            \"__init__\": [\n               \"self\",\n               \"store_precision\",\n               \"assume_centered\",\n               \"shrinkage\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         }\n      },\n      \"sklearn.cross_decomposition._cca\": {\n         \"CCA\": {\n            \"__init__\": [\n               \"self\",\n               \"n_components\",\n               \"scale\",\n               \"max_iter\",\n               \"tol\",\n               \"copy\"\n            ]\n         }\n      },\n      \"sklearn.cross_decomposition._pls\": {\n         \"PLSCanonical\": {\n            \"__init__\": [\n               \"self\",\n               \"n_components\",\n               \"scale\",\n               \"algorithm\",\n               \"max_iter\",\n               \"tol\",\n               \"copy\"\n            ]\n         },\n         \"PLSRegression\": {\n            \"__init__\": [\n               \"self\",\n               \"n_components\",\n               \"scale\",\n               \"max_iter\",\n               \"tol\",\n               \"copy\"\n            ]\n         },\n         \"PLSSVD\": {\n            \"__init__\": [\n               \"self\",\n               \"n_components\",\n               \"scale\",\n               \"copy\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"Y\"\n            ],\n            \"fit_transform\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\",\n               \"Y\"\n            ]\n         },\n         \"_PLS\": {\n            \"__init__\": [\n               \"self\",\n               \"n_components\",\n               \"scale\",\n               \"deflation_mode\",\n               \"mode\",\n               \"algorithm\",\n               \"norm_y_weights\",\n               \"max_iter\",\n               \"tol\",\n               \"copy\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"Y\"\n            ],\n            \"fit_transform\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"inverse_transform\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\",\n               \"copy\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\",\n               \"Y\",\n               \"copy\"\n            ]\n         }\n      },\n      \"sklearn.decomposition._base\": {\n         \"_BasePCA\": {\n            \"fit\": [\n               \"X\",\n               \"y\"\n            ],\n            \"get_covariance\": [\n               \"self\"\n            ],\n            \"get_precision\": [\n               \"self\"\n            ],\n            \"inverse_transform\": [\n               \"self\",\n               \"X\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.decomposition._dict_learning\": {\n         \"DictionaryLearning\": {\n            \"__init__\": [\n               \"self\",\n               \"n_components\",\n               \"alpha\",\n               \"max_iter\",\n               \"tol\",\n               \"fit_algorithm\",\n               \"transform_algorithm\",\n               \"transform_n_nonzero_coefs\",\n               \"transform_alpha\",\n               \"n_jobs\",\n               \"code_init\",\n               \"dict_init\",\n               \"verbose\",\n               \"split_sign\",\n               \"random_state\",\n               \"positive_code\",\n               \"positive_dict\",\n               \"transform_max_iter\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"MiniBatchDictionaryLearning\": {\n            \"__init__\": [\n               \"self\",\n               \"n_components\",\n               \"alpha\",\n               \"n_iter\",\n               \"fit_algorithm\",\n               \"n_jobs\",\n               \"batch_size\",\n               \"shuffle\",\n               \"dict_init\",\n               \"transform_algorithm\",\n               \"transform_n_nonzero_coefs\",\n               \"transform_alpha\",\n               \"verbose\",\n               \"split_sign\",\n               \"random_state\",\n               \"positive_code\",\n               \"positive_dict\",\n               \"transform_max_iter\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"partial_fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"iter_offset\"\n            ]\n         },\n         \"SparseCoder\": {\n            \"__init__\": [\n               \"self\",\n               \"dictionary\",\n               \"transform_algorithm\",\n               \"transform_n_nonzero_coefs\",\n               \"transform_alpha\",\n               \"split_sign\",\n               \"n_jobs\",\n               \"positive_code\",\n               \"transform_max_iter\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"SparseCodingMixin\": {\n            \"_set_sparse_coding_params\": [\n               \"self\",\n               \"n_components\",\n               \"transform_algorithm\",\n               \"transform_n_nonzero_coefs\",\n               \"transform_alpha\",\n               \"split_sign\",\n               \"n_jobs\",\n               \"positive_code\",\n               \"transform_max_iter\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.decomposition._factor_analysis\": {\n         \"FactorAnalysis\": {\n            \"__init__\": [\n               \"self\",\n               \"n_components\",\n               \"tol\",\n               \"copy\",\n               \"max_iter\",\n               \"noise_variance_init\",\n               \"svd_method\",\n               \"iterated_power\",\n               \"random_state\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"get_covariance\": [\n               \"self\"\n            ],\n            \"get_precision\": [\n               \"self\"\n            ],\n            \"score\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"score_samples\": [\n               \"self\",\n               \"X\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.decomposition._fastica\": {\n         \"FastICA\": {\n            \"__init__\": [\n               \"self\",\n               \"n_components\",\n               \"algorithm\",\n               \"whiten\",\n               \"fun\",\n               \"fun_args\",\n               \"max_iter\",\n               \"tol\",\n               \"w_init\",\n               \"random_state\"\n            ],\n            \"_fit\": [\n               \"self\",\n               \"X\",\n               \"compute_sources\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"fit_transform\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"inverse_transform\": [\n               \"self\",\n               \"X\",\n               \"copy\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\",\n               \"copy\"\n            ]\n         }\n      },\n      \"sklearn.decomposition._incremental_pca\": {\n         \"IncrementalPCA\": {\n            \"__init__\": [\n               \"self\",\n               \"n_components\",\n               \"whiten\",\n               \"copy\",\n               \"batch_size\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"partial_fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"check_input\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.decomposition._kernel_pca\": {\n         \"KernelPCA\": {\n            \"__init__\": [\n               \"self\",\n               \"n_components\",\n               \"kernel\",\n               \"gamma\",\n               \"degree\",\n               \"coef0\",\n               \"kernel_params\",\n               \"alpha\",\n               \"fit_inverse_transform\",\n               \"eigen_solver\",\n               \"tol\",\n               \"max_iter\",\n               \"remove_zero_eig\",\n               \"random_state\",\n               \"copy_X\",\n               \"n_jobs\"\n            ],\n            \"_fit_inverse_transform\": [\n               \"self\",\n               \"X_transformed\",\n               \"X\"\n            ],\n            \"_fit_transform\": [\n               \"self\",\n               \"K\"\n            ],\n            \"_get_kernel\": [\n               \"self\",\n               \"X\",\n               \"Y\"\n            ],\n            \"_pairwise\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"fit_transform\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"inverse_transform\": [\n               \"self\",\n               \"X\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.decomposition._lda\": {\n         \"LatentDirichletAllocation\": {\n            \"__init__\": [\n               \"self\",\n               \"n_components\",\n               \"doc_topic_prior\",\n               \"topic_word_prior\",\n               \"learning_method\",\n               \"learning_decay\",\n               \"learning_offset\",\n               \"max_iter\",\n               \"batch_size\",\n               \"evaluate_every\",\n               \"total_samples\",\n               \"perp_tol\",\n               \"mean_change_tol\",\n               \"max_doc_update_iter\",\n               \"n_jobs\",\n               \"verbose\",\n               \"random_state\"\n            ],\n            \"_approx_bound\": [\n               \"self\",\n               \"X\",\n               \"doc_topic_distr\",\n               \"sub_sampling\"\n            ],\n            \"_check_non_neg_array\": [\n               \"self\",\n               \"X\",\n               \"whom\"\n            ],\n            \"_check_params\": [\n               \"self\"\n            ],\n            \"_e_step\": [\n               \"self\",\n               \"X\",\n               \"cal_sstats\",\n               \"random_init\",\n               \"parallel\"\n            ],\n            \"_em_step\": [\n               \"self\",\n               \"X\",\n               \"total_samples\",\n               \"batch_update\",\n               \"parallel\"\n            ],\n            \"_init_latent_vars\": [\n               \"self\",\n               \"n_features\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"_perplexity_precomp_distr\": [\n               \"self\",\n               \"X\",\n               \"doc_topic_distr\",\n               \"sub_sampling\"\n            ],\n            \"_unnormalized_transform\": [\n               \"self\",\n               \"X\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"partial_fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"perplexity\": [\n               \"self\",\n               \"X\",\n               \"sub_sampling\"\n            ],\n            \"score\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.decomposition._nmf\": {\n         \"NMF\": {\n            \"__init__\": [\n               \"self\",\n               \"n_components\",\n               \"init\",\n               \"solver\",\n               \"beta_loss\",\n               \"tol\",\n               \"max_iter\",\n               \"random_state\",\n               \"alpha\",\n               \"l1_ratio\",\n               \"verbose\",\n               \"shuffle\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"fit_transform\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"W\",\n               \"H\"\n            ],\n            \"inverse_transform\": [\n               \"self\",\n               \"W\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.decomposition._pca\": {\n         \"PCA\": {\n            \"__init__\": [\n               \"self\",\n               \"n_components\",\n               \"copy\",\n               \"whiten\",\n               \"svd_solver\",\n               \"tol\",\n               \"iterated_power\",\n               \"random_state\"\n            ],\n            \"_fit\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_fit_full\": [\n               \"self\",\n               \"X\",\n               \"n_components\"\n            ],\n            \"_fit_truncated\": [\n               \"self\",\n               \"X\",\n               \"n_components\",\n               \"svd_solver\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"fit_transform\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"score\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"score_samples\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.decomposition._sparse_pca\": {\n         \"MiniBatchSparsePCA\": {\n            \"__init__\": [\n               \"self\",\n               \"n_components\",\n               \"alpha\",\n               \"ridge_alpha\",\n               \"n_iter\",\n               \"callback\",\n               \"batch_size\",\n               \"verbose\",\n               \"shuffle\",\n               \"n_jobs\",\n               \"method\",\n               \"random_state\",\n               \"normalize_components\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"SparsePCA\": {\n            \"__init__\": [\n               \"self\",\n               \"n_components\",\n               \"alpha\",\n               \"ridge_alpha\",\n               \"max_iter\",\n               \"tol\",\n               \"method\",\n               \"n_jobs\",\n               \"U_init\",\n               \"V_init\",\n               \"verbose\",\n               \"random_state\",\n               \"normalize_components\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.decomposition._truncated_svd\": {\n         \"TruncatedSVD\": {\n            \"__init__\": [\n               \"self\",\n               \"n_components\",\n               \"algorithm\",\n               \"n_iter\",\n               \"random_state\",\n               \"tol\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"fit_transform\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"inverse_transform\": [\n               \"self\",\n               \"X\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.discriminant_analysis\": {\n         \"LinearDiscriminantAnalysis\": {\n            \"__init__\": [\n               \"self\",\n               \"solver\",\n               \"shrinkage\",\n               \"priors\",\n               \"n_components\",\n               \"store_covariance\",\n               \"tol\"\n            ],\n            \"_solve_eigen\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"shrinkage\"\n            ],\n            \"_solve_lsqr\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"shrinkage\"\n            ],\n            \"_solve_svd\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"predict_log_proba\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_proba\": [\n               \"self\",\n               \"X\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"QuadraticDiscriminantAnalysis\": {\n            \"__init__\": [\n               \"self\",\n               \"priors\",\n               \"reg_param\",\n               \"store_covariance\",\n               \"tol\"\n            ],\n            \"_decision_function\": [\n               \"self\",\n               \"X\"\n            ],\n            \"decision_function\": [\n               \"self\",\n               \"X\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_log_proba\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_proba\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.dummy\": {\n         \"DummyClassifier\": {\n            \"__init__\": [\n               \"self\",\n               \"strategy\",\n               \"random_state\",\n               \"constant\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"outputs_2d_\": [\n               \"self\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_log_proba\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_proba\": [\n               \"self\",\n               \"X\"\n            ],\n            \"score\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ]\n         },\n         \"DummyRegressor\": {\n            \"__init__\": [\n               \"self\",\n               \"strategy\",\n               \"constant\",\n               \"quantile\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"outputs_2d_\": [\n               \"self\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\",\n               \"return_std\"\n            ],\n            \"score\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ]\n         }\n      },\n      \"sklearn.ensemble._bagging\": {\n         \"BaggingClassifier\": {\n            \"__init__\": [\n               \"self\",\n               \"base_estimator\",\n               \"n_estimators\",\n               \"max_samples\",\n               \"max_features\",\n               \"bootstrap\",\n               \"bootstrap_features\",\n               \"oob_score\",\n               \"warm_start\",\n               \"n_jobs\",\n               \"random_state\",\n               \"verbose\"\n            ],\n            \"_set_oob_score\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"_validate_estimator\": [\n               \"self\"\n            ],\n            \"_validate_y\": [\n               \"self\",\n               \"y\"\n            ],\n            \"decision_function\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_log_proba\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_proba\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"BaggingRegressor\": {\n            \"__init__\": [\n               \"self\",\n               \"base_estimator\",\n               \"n_estimators\",\n               \"max_samples\",\n               \"max_features\",\n               \"bootstrap\",\n               \"bootstrap_features\",\n               \"oob_score\",\n               \"warm_start\",\n               \"n_jobs\",\n               \"random_state\",\n               \"verbose\"\n            ],\n            \"_set_oob_score\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"_validate_estimator\": [\n               \"self\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"BaseBagging\": {\n            \"__init__\": [\n               \"self\",\n               \"base_estimator\",\n               \"n_estimators\",\n               \"max_samples\",\n               \"max_features\",\n               \"bootstrap\",\n               \"bootstrap_features\",\n               \"oob_score\",\n               \"warm_start\",\n               \"n_jobs\",\n               \"random_state\",\n               \"verbose\"\n            ],\n            \"_fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"max_samples\",\n               \"max_depth\",\n               \"sample_weight\"\n            ],\n            \"_get_estimators_indices\": [\n               \"self\"\n            ],\n            \"_parallel_args\": [\n               \"self\"\n            ],\n            \"_set_oob_score\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"_validate_y\": [\n               \"self\",\n               \"y\"\n            ],\n            \"estimators_samples_\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ]\n         }\n      },\n      \"sklearn.ensemble._base\": {\n         \"BaseEnsemble\": {\n            \"__getitem__\": [\n               \"self\",\n               \"index\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"base_estimator\",\n               \"n_estimators\",\n               \"estimator_params\"\n            ],\n            \"__iter__\": [\n               \"self\"\n            ],\n            \"__len__\": [\n               \"self\"\n            ],\n            \"_make_estimator\": [\n               \"self\",\n               \"append\",\n               \"random_state\"\n            ],\n            \"_validate_estimator\": [\n               \"self\",\n               \"default\"\n            ]\n         },\n         \"_BaseHeterogeneousEnsemble\": {\n            \"__init__\": [\n               \"self\",\n               \"estimators\"\n            ],\n            \"_validate_estimators\": [\n               \"self\"\n            ],\n            \"get_params\": [\n               \"self\",\n               \"deep\"\n            ],\n            \"named_estimators\": [\n               \"self\"\n            ],\n            \"set_params\": [\n               \"self\"\n            ]\n         }\n      },\n      \"sklearn.ensemble._forest\": {\n         \"BaseForest\": {\n            \"__init__\": [\n               \"self\",\n               \"base_estimator\",\n               \"n_estimators\",\n               \"estimator_params\",\n               \"bootstrap\",\n               \"oob_score\",\n               \"n_jobs\",\n               \"random_state\",\n               \"verbose\",\n               \"warm_start\",\n               \"class_weight\",\n               \"max_samples\"\n            ],\n            \"_set_oob_score\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"_validate_X_predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_validate_y_class_weight\": [\n               \"self\",\n               \"y\"\n            ],\n            \"apply\": [\n               \"self\",\n               \"X\"\n            ],\n            \"decision_path\": [\n               \"self\",\n               \"X\"\n            ],\n            \"feature_importances_\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ]\n         },\n         \"ExtraTreesClassifier\": {\n            \"__init__\": [\n               \"self\",\n               \"n_estimators\",\n               \"criterion\",\n               \"max_depth\",\n               \"min_samples_split\",\n               \"min_samples_leaf\",\n               \"min_weight_fraction_leaf\",\n               \"max_features\",\n               \"max_leaf_nodes\",\n               \"min_impurity_decrease\",\n               \"min_impurity_split\",\n               \"bootstrap\",\n               \"oob_score\",\n               \"n_jobs\",\n               \"random_state\",\n               \"verbose\",\n               \"warm_start\",\n               \"class_weight\",\n               \"ccp_alpha\",\n               \"max_samples\"\n            ]\n         },\n         \"ExtraTreesRegressor\": {\n            \"__init__\": [\n               \"self\",\n               \"n_estimators\",\n               \"criterion\",\n               \"max_depth\",\n               \"min_samples_split\",\n               \"min_samples_leaf\",\n               \"min_weight_fraction_leaf\",\n               \"max_features\",\n               \"max_leaf_nodes\",\n               \"min_impurity_decrease\",\n               \"min_impurity_split\",\n               \"bootstrap\",\n               \"oob_score\",\n               \"n_jobs\",\n               \"random_state\",\n               \"verbose\",\n               \"warm_start\",\n               \"ccp_alpha\",\n               \"max_samples\"\n            ]\n         },\n         \"ForestClassifier\": {\n            \"__init__\": [\n               \"self\",\n               \"base_estimator\",\n               \"n_estimators\",\n               \"estimator_params\",\n               \"bootstrap\",\n               \"oob_score\",\n               \"n_jobs\",\n               \"random_state\",\n               \"verbose\",\n               \"warm_start\",\n               \"class_weight\",\n               \"max_samples\"\n            ],\n            \"_set_oob_score\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"_validate_y_class_weight\": [\n               \"self\",\n               \"y\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_log_proba\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_proba\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"ForestRegressor\": {\n            \"__init__\": [\n               \"self\",\n               \"base_estimator\",\n               \"n_estimators\",\n               \"estimator_params\",\n               \"bootstrap\",\n               \"oob_score\",\n               \"n_jobs\",\n               \"random_state\",\n               \"verbose\",\n               \"warm_start\",\n               \"max_samples\"\n            ],\n            \"_set_oob_score\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"RandomForestClassifier\": {\n            \"__init__\": [\n               \"self\",\n               \"n_estimators\",\n               \"criterion\",\n               \"max_depth\",\n               \"min_samples_split\",\n               \"min_samples_leaf\",\n               \"min_weight_fraction_leaf\",\n               \"max_features\",\n               \"max_leaf_nodes\",\n               \"min_impurity_decrease\",\n               \"min_impurity_split\",\n               \"bootstrap\",\n               \"oob_score\",\n               \"n_jobs\",\n               \"random_state\",\n               \"verbose\",\n               \"warm_start\",\n               \"class_weight\",\n               \"ccp_alpha\",\n               \"max_samples\"\n            ]\n         },\n         \"RandomForestRegressor\": {\n            \"__init__\": [\n               \"self\",\n               \"n_estimators\",\n               \"criterion\",\n               \"max_depth\",\n               \"min_samples_split\",\n               \"min_samples_leaf\",\n               \"min_weight_fraction_leaf\",\n               \"max_features\",\n               \"max_leaf_nodes\",\n               \"min_impurity_decrease\",\n               \"min_impurity_split\",\n               \"bootstrap\",\n               \"oob_score\",\n               \"n_jobs\",\n               \"random_state\",\n               \"verbose\",\n               \"warm_start\",\n               \"ccp_alpha\",\n               \"max_samples\"\n            ]\n         },\n         \"RandomTreesEmbedding\": {\n            \"__init__\": [\n               \"self\",\n               \"n_estimators\",\n               \"max_depth\",\n               \"min_samples_split\",\n               \"min_samples_leaf\",\n               \"min_weight_fraction_leaf\",\n               \"max_leaf_nodes\",\n               \"min_impurity_decrease\",\n               \"min_impurity_split\",\n               \"sparse_output\",\n               \"n_jobs\",\n               \"random_state\",\n               \"verbose\",\n               \"warm_start\"\n            ],\n            \"_set_oob_score\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"fit_transform\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.ensemble._gb\": {\n         \"BaseGradientBoosting\": {\n            \"__init__\": [\n               \"self\",\n               \"loss\",\n               \"learning_rate\",\n               \"n_estimators\",\n               \"criterion\",\n               \"min_samples_split\",\n               \"min_samples_leaf\",\n               \"min_weight_fraction_leaf\",\n               \"max_depth\",\n               \"min_impurity_decrease\",\n               \"min_impurity_split\",\n               \"init\",\n               \"subsample\",\n               \"max_features\",\n               \"ccp_alpha\",\n               \"random_state\",\n               \"alpha\",\n               \"verbose\",\n               \"max_leaf_nodes\",\n               \"warm_start\",\n               \"presort\",\n               \"validation_fraction\",\n               \"n_iter_no_change\",\n               \"tol\"\n            ],\n            \"_check_initialized\": [\n               \"self\"\n            ],\n            \"_check_params\": [\n               \"self\"\n            ],\n            \"_clear_state\": [\n               \"self\"\n            ],\n            \"_compute_partial_dependence_recursion\": [\n               \"self\",\n               \"grid\",\n               \"target_features\"\n            ],\n            \"_fit_stage\": [\n               \"self\",\n               \"i\",\n               \"X\",\n               \"y\",\n               \"raw_predictions\",\n               \"sample_weight\",\n               \"sample_mask\",\n               \"random_state\",\n               \"X_idx_sorted\",\n               \"X_csc\",\n               \"X_csr\"\n            ],\n            \"_fit_stages\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"raw_predictions\",\n               \"sample_weight\",\n               \"random_state\",\n               \"X_val\",\n               \"y_val\",\n               \"sample_weight_val\",\n               \"begin_at_stage\",\n               \"monitor\",\n               \"X_idx_sorted\"\n            ],\n            \"_init_state\": [\n               \"self\"\n            ],\n            \"_is_initialized\": [\n               \"self\"\n            ],\n            \"_make_estimator\": [\n               \"self\",\n               \"append\"\n            ],\n            \"_raw_predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_raw_predict_init\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_resize_state\": [\n               \"self\"\n            ],\n            \"_staged_raw_predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_validate_y\": [\n               \"self\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"apply\": [\n               \"self\",\n               \"X\"\n            ],\n            \"feature_importances_\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\",\n               \"monitor\"\n            ]\n         },\n         \"BinomialDeviance\": {\n            \"__call__\": [\n               \"self\",\n               \"y\",\n               \"pred\",\n               \"sample_weight\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"n_classes\"\n            ],\n            \"_score_to_decision\": [\n               \"self\",\n               \"score\"\n            ],\n            \"_score_to_proba\": [\n               \"self\",\n               \"score\"\n            ],\n            \"_update_terminal_region\": [\n               \"self\",\n               \"tree\",\n               \"terminal_regions\",\n               \"leaf\",\n               \"X\",\n               \"y\",\n               \"residual\",\n               \"pred\",\n               \"sample_weight\"\n            ],\n            \"init_estimator\": [\n               \"self\"\n            ],\n            \"negative_gradient\": [\n               \"self\",\n               \"y\",\n               \"pred\"\n            ]\n         },\n         \"ClassificationLossFunction\": {\n            \"_score_to_decision\": [\n               \"self\",\n               \"score\"\n            ],\n            \"_score_to_proba\": [\n               \"self\",\n               \"score\"\n            ]\n         },\n         \"ExponentialLoss\": {\n            \"__call__\": [\n               \"self\",\n               \"y\",\n               \"pred\",\n               \"sample_weight\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"n_classes\"\n            ],\n            \"_score_to_decision\": [\n               \"self\",\n               \"score\"\n            ],\n            \"_score_to_proba\": [\n               \"self\",\n               \"score\"\n            ],\n            \"_update_terminal_region\": [\n               \"self\",\n               \"tree\",\n               \"terminal_regions\",\n               \"leaf\",\n               \"X\",\n               \"y\",\n               \"residual\",\n               \"pred\",\n               \"sample_weight\"\n            ],\n            \"init_estimator\": [\n               \"self\"\n            ],\n            \"negative_gradient\": [\n               \"self\",\n               \"y\",\n               \"pred\"\n            ]\n         },\n         \"GradientBoostingClassifier\": {\n            \"__init__\": [\n               \"self\",\n               \"loss\",\n               \"learning_rate\",\n               \"n_estimators\",\n               \"subsample\",\n               \"criterion\",\n               \"min_samples_split\",\n               \"min_samples_leaf\",\n               \"min_weight_fraction_leaf\",\n               \"max_depth\",\n               \"min_impurity_decrease\",\n               \"min_impurity_split\",\n               \"init\",\n               \"random_state\",\n               \"max_features\",\n               \"verbose\",\n               \"max_leaf_nodes\",\n               \"warm_start\",\n               \"presort\",\n               \"validation_fraction\",\n               \"n_iter_no_change\",\n               \"tol\",\n               \"ccp_alpha\"\n            ],\n            \"_validate_y\": [\n               \"self\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"decision_function\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_log_proba\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_proba\": [\n               \"self\",\n               \"X\"\n            ],\n            \"staged_decision_function\": [\n               \"self\",\n               \"X\"\n            ],\n            \"staged_predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"staged_predict_proba\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"GradientBoostingRegressor\": {\n            \"__init__\": [\n               \"self\",\n               \"loss\",\n               \"learning_rate\",\n               \"n_estimators\",\n               \"subsample\",\n               \"criterion\",\n               \"min_samples_split\",\n               \"min_samples_leaf\",\n               \"min_weight_fraction_leaf\",\n               \"max_depth\",\n               \"min_impurity_decrease\",\n               \"min_impurity_split\",\n               \"init\",\n               \"random_state\",\n               \"max_features\",\n               \"alpha\",\n               \"verbose\",\n               \"max_leaf_nodes\",\n               \"warm_start\",\n               \"presort\",\n               \"validation_fraction\",\n               \"n_iter_no_change\",\n               \"tol\",\n               \"ccp_alpha\"\n            ],\n            \"apply\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"staged_predict\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"HuberLossFunction\": {\n            \"__call__\": [\n               \"self\",\n               \"y\",\n               \"pred\",\n               \"sample_weight\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"n_classes\",\n               \"alpha\"\n            ],\n            \"_update_terminal_region\": [\n               \"self\",\n               \"tree\",\n               \"terminal_regions\",\n               \"leaf\",\n               \"X\",\n               \"y\",\n               \"residual\",\n               \"pred\",\n               \"sample_weight\"\n            ],\n            \"init_estimator\": [\n               \"self\"\n            ],\n            \"negative_gradient\": [\n               \"self\",\n               \"y\",\n               \"pred\",\n               \"sample_weight\"\n            ]\n         },\n         \"LeastAbsoluteError\": {\n            \"__call__\": [\n               \"self\",\n               \"y\",\n               \"pred\",\n               \"sample_weight\"\n            ],\n            \"_update_terminal_region\": [\n               \"self\",\n               \"tree\",\n               \"terminal_regions\",\n               \"leaf\",\n               \"X\",\n               \"y\",\n               \"residual\",\n               \"pred\",\n               \"sample_weight\"\n            ],\n            \"init_estimator\": [\n               \"self\"\n            ],\n            \"negative_gradient\": [\n               \"self\",\n               \"y\",\n               \"pred\"\n            ]\n         },\n         \"LeastSquaresError\": {\n            \"__call__\": [\n               \"self\",\n               \"y\",\n               \"pred\",\n               \"sample_weight\"\n            ],\n            \"_update_terminal_region\": [\n               \"self\",\n               \"tree\",\n               \"terminal_regions\",\n               \"leaf\",\n               \"X\",\n               \"y\",\n               \"residual\",\n               \"pred\",\n               \"sample_weight\"\n            ],\n            \"init_estimator\": [\n               \"self\"\n            ],\n            \"negative_gradient\": [\n               \"self\",\n               \"y\",\n               \"pred\"\n            ],\n            \"update_terminal_regions\": [\n               \"self\",\n               \"tree\",\n               \"X\",\n               \"y\",\n               \"residual\",\n               \"y_pred\",\n               \"sample_weight\",\n               \"sample_mask\",\n               \"learning_rate\",\n               \"k\"\n            ]\n         },\n         \"LogOddsEstimator\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"LossFunction\": {\n            \"__call__\": [\n               \"self\",\n               \"y\",\n               \"pred\",\n               \"sample_weight\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"n_classes\"\n            ],\n            \"_update_terminal_region\": [\n               \"self\",\n               \"tree\",\n               \"terminal_regions\",\n               \"leaf\",\n               \"X\",\n               \"y\",\n               \"residual\",\n               \"pred\",\n               \"sample_weight\"\n            ],\n            \"init_estimator\": [\n               \"self\"\n            ],\n            \"negative_gradient\": [\n               \"self\",\n               \"y\",\n               \"y_pred\"\n            ],\n            \"update_terminal_regions\": [\n               \"self\",\n               \"tree\",\n               \"X\",\n               \"y\",\n               \"residual\",\n               \"y_pred\",\n               \"sample_weight\",\n               \"sample_mask\",\n               \"learning_rate\",\n               \"k\"\n            ]\n         },\n         \"MeanEstimator\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"MultinomialDeviance\": {\n            \"__call__\": [\n               \"self\",\n               \"y\",\n               \"pred\",\n               \"sample_weight\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"n_classes\"\n            ],\n            \"_score_to_decision\": [\n               \"self\",\n               \"score\"\n            ],\n            \"_score_to_proba\": [\n               \"self\",\n               \"score\"\n            ],\n            \"_update_terminal_region\": [\n               \"self\",\n               \"tree\",\n               \"terminal_regions\",\n               \"leaf\",\n               \"X\",\n               \"y\",\n               \"residual\",\n               \"pred\",\n               \"sample_weight\"\n            ],\n            \"init_estimator\": [\n               \"self\"\n            ],\n            \"negative_gradient\": [\n               \"self\",\n               \"y\",\n               \"pred\",\n               \"k\"\n            ]\n         },\n         \"PriorProbabilityEstimator\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"QuantileEstimator\": {\n            \"__init__\": [\n               \"self\",\n               \"alpha\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"QuantileLossFunction\": {\n            \"__call__\": [\n               \"self\",\n               \"y\",\n               \"pred\",\n               \"sample_weight\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"n_classes\",\n               \"alpha\"\n            ],\n            \"_update_terminal_region\": [\n               \"self\",\n               \"tree\",\n               \"terminal_regions\",\n               \"leaf\",\n               \"X\",\n               \"y\",\n               \"residual\",\n               \"pred\",\n               \"sample_weight\"\n            ],\n            \"init_estimator\": [\n               \"self\"\n            ],\n            \"negative_gradient\": [\n               \"self\",\n               \"y\",\n               \"pred\"\n            ]\n         },\n         \"RegressionLossFunction\": {\n            \"__init__\": [\n               \"self\",\n               \"n_classes\"\n            ]\n         },\n         \"ScaledLogOddsEstimator\": {},\n         \"VerboseReporter\": {\n            \"__init__\": [\n               \"self\",\n               \"verbose\"\n            ],\n            \"init\": [\n               \"self\",\n               \"est\",\n               \"begin_at_stage\"\n            ],\n            \"update\": [\n               \"self\",\n               \"j\",\n               \"est\"\n            ]\n         },\n         \"ZeroEstimator\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_proba\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.ensemble._gb_losses\": {\n         \"BinomialDeviance\": {\n            \"__call__\": [\n               \"self\",\n               \"y\",\n               \"raw_predictions\",\n               \"sample_weight\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"n_classes\"\n            ],\n            \"_raw_prediction_to_decision\": [\n               \"self\",\n               \"raw_predictions\"\n            ],\n            \"_raw_prediction_to_proba\": [\n               \"self\",\n               \"raw_predictions\"\n            ],\n            \"_update_terminal_region\": [\n               \"self\",\n               \"tree\",\n               \"terminal_regions\",\n               \"leaf\",\n               \"X\",\n               \"y\",\n               \"residual\",\n               \"raw_predictions\",\n               \"sample_weight\"\n            ],\n            \"get_init_raw_predictions\": [\n               \"self\",\n               \"X\",\n               \"estimator\"\n            ],\n            \"init_estimator\": [\n               \"self\"\n            ],\n            \"negative_gradient\": [\n               \"self\",\n               \"y\",\n               \"raw_predictions\"\n            ]\n         },\n         \"ClassificationLossFunction\": {\n            \"_raw_prediction_to_decision\": [\n               \"self\",\n               \"raw_predictions\"\n            ],\n            \"_raw_prediction_to_proba\": [\n               \"self\",\n               \"raw_predictions\"\n            ],\n            \"check_init_estimator\": [\n               \"self\",\n               \"estimator\"\n            ]\n         },\n         \"ExponentialLoss\": {\n            \"__call__\": [\n               \"self\",\n               \"y\",\n               \"raw_predictions\",\n               \"sample_weight\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"n_classes\"\n            ],\n            \"_raw_prediction_to_decision\": [\n               \"self\",\n               \"raw_predictions\"\n            ],\n            \"_raw_prediction_to_proba\": [\n               \"self\",\n               \"raw_predictions\"\n            ],\n            \"_update_terminal_region\": [\n               \"self\",\n               \"tree\",\n               \"terminal_regions\",\n               \"leaf\",\n               \"X\",\n               \"y\",\n               \"residual\",\n               \"raw_predictions\",\n               \"sample_weight\"\n            ],\n            \"get_init_raw_predictions\": [\n               \"self\",\n               \"X\",\n               \"estimator\"\n            ],\n            \"init_estimator\": [\n               \"self\"\n            ],\n            \"negative_gradient\": [\n               \"self\",\n               \"y\",\n               \"raw_predictions\"\n            ]\n         },\n         \"HuberLossFunction\": {\n            \"__call__\": [\n               \"self\",\n               \"y\",\n               \"raw_predictions\",\n               \"sample_weight\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"n_classes\",\n               \"alpha\"\n            ],\n            \"_update_terminal_region\": [\n               \"self\",\n               \"tree\",\n               \"terminal_regions\",\n               \"leaf\",\n               \"X\",\n               \"y\",\n               \"residual\",\n               \"raw_predictions\",\n               \"sample_weight\"\n            ],\n            \"init_estimator\": [\n               \"self\"\n            ],\n            \"negative_gradient\": [\n               \"self\",\n               \"y\",\n               \"raw_predictions\",\n               \"sample_weight\"\n            ]\n         },\n         \"LeastAbsoluteError\": {\n            \"__call__\": [\n               \"self\",\n               \"y\",\n               \"raw_predictions\",\n               \"sample_weight\"\n            ],\n            \"_update_terminal_region\": [\n               \"self\",\n               \"tree\",\n               \"terminal_regions\",\n               \"leaf\",\n               \"X\",\n               \"y\",\n               \"residual\",\n               \"raw_predictions\",\n               \"sample_weight\"\n            ],\n            \"init_estimator\": [\n               \"self\"\n            ],\n            \"negative_gradient\": [\n               \"self\",\n               \"y\",\n               \"raw_predictions\"\n            ]\n         },\n         \"LeastSquaresError\": {\n            \"__call__\": [\n               \"self\",\n               \"y\",\n               \"raw_predictions\",\n               \"sample_weight\"\n            ],\n            \"_update_terminal_region\": [\n               \"self\",\n               \"tree\",\n               \"terminal_regions\",\n               \"leaf\",\n               \"X\",\n               \"y\",\n               \"residual\",\n               \"raw_predictions\",\n               \"sample_weight\"\n            ],\n            \"init_estimator\": [\n               \"self\"\n            ],\n            \"negative_gradient\": [\n               \"self\",\n               \"y\",\n               \"raw_predictions\"\n            ],\n            \"update_terminal_regions\": [\n               \"self\",\n               \"tree\",\n               \"X\",\n               \"y\",\n               \"residual\",\n               \"raw_predictions\",\n               \"sample_weight\",\n               \"sample_mask\",\n               \"learning_rate\",\n               \"k\"\n            ]\n         },\n         \"LossFunction\": {\n            \"__call__\": [\n               \"self\",\n               \"y\",\n               \"raw_predictions\",\n               \"sample_weight\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"n_classes\"\n            ],\n            \"_update_terminal_region\": [\n               \"self\",\n               \"tree\",\n               \"terminal_regions\",\n               \"leaf\",\n               \"X\",\n               \"y\",\n               \"residual\",\n               \"raw_predictions\",\n               \"sample_weight\"\n            ],\n            \"get_init_raw_predictions\": [\n               \"self\",\n               \"X\",\n               \"estimator\"\n            ],\n            \"init_estimator\": [\n               \"self\"\n            ],\n            \"negative_gradient\": [\n               \"self\",\n               \"y\",\n               \"raw_predictions\"\n            ],\n            \"update_terminal_regions\": [\n               \"self\",\n               \"tree\",\n               \"X\",\n               \"y\",\n               \"residual\",\n               \"raw_predictions\",\n               \"sample_weight\",\n               \"sample_mask\",\n               \"learning_rate\",\n               \"k\"\n            ]\n         },\n         \"MultinomialDeviance\": {\n            \"__call__\": [\n               \"self\",\n               \"y\",\n               \"raw_predictions\",\n               \"sample_weight\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"n_classes\"\n            ],\n            \"_raw_prediction_to_decision\": [\n               \"self\",\n               \"raw_predictions\"\n            ],\n            \"_raw_prediction_to_proba\": [\n               \"self\",\n               \"raw_predictions\"\n            ],\n            \"_update_terminal_region\": [\n               \"self\",\n               \"tree\",\n               \"terminal_regions\",\n               \"leaf\",\n               \"X\",\n               \"y\",\n               \"residual\",\n               \"raw_predictions\",\n               \"sample_weight\"\n            ],\n            \"get_init_raw_predictions\": [\n               \"self\",\n               \"X\",\n               \"estimator\"\n            ],\n            \"init_estimator\": [\n               \"self\"\n            ],\n            \"negative_gradient\": [\n               \"self\",\n               \"y\",\n               \"raw_predictions\",\n               \"k\"\n            ]\n         },\n         \"QuantileLossFunction\": {\n            \"__call__\": [\n               \"self\",\n               \"y\",\n               \"raw_predictions\",\n               \"sample_weight\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"n_classes\",\n               \"alpha\"\n            ],\n            \"_update_terminal_region\": [\n               \"self\",\n               \"tree\",\n               \"terminal_regions\",\n               \"leaf\",\n               \"X\",\n               \"y\",\n               \"residual\",\n               \"raw_predictions\",\n               \"sample_weight\"\n            ],\n            \"init_estimator\": [\n               \"self\"\n            ],\n            \"negative_gradient\": [\n               \"self\",\n               \"y\",\n               \"raw_predictions\"\n            ]\n         },\n         \"RegressionLossFunction\": {\n            \"__init__\": [\n               \"self\",\n               \"n_classes\"\n            ],\n            \"check_init_estimator\": [\n               \"self\",\n               \"estimator\"\n            ],\n            \"get_init_raw_predictions\": [\n               \"self\",\n               \"X\",\n               \"estimator\"\n            ]\n         }\n      },\n      \"sklearn.ensemble._hist_gradient_boosting.binning\": {\n         \"_BinMapper\": {\n            \"__init__\": [\n               \"self\",\n               \"n_bins\",\n               \"subsample\",\n               \"random_state\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.ensemble._hist_gradient_boosting.gradient_boosting\": {\n         \"BaseHistGradientBoosting\": {\n            \"__init__\": [\n               \"self\",\n               \"loss\",\n               \"learning_rate\",\n               \"max_iter\",\n               \"max_leaf_nodes\",\n               \"max_depth\",\n               \"min_samples_leaf\",\n               \"l2_regularization\",\n               \"max_bins\",\n               \"warm_start\",\n               \"scoring\",\n               \"validation_fraction\",\n               \"n_iter_no_change\",\n               \"tol\",\n               \"verbose\",\n               \"random_state\"\n            ],\n            \"_bin_data\": [\n               \"self\",\n               \"X\",\n               \"is_training_data\"\n            ],\n            \"_check_early_stopping_loss\": [\n               \"self\",\n               \"raw_predictions\",\n               \"y_train\",\n               \"raw_predictions_val\",\n               \"y_val\"\n            ],\n            \"_check_early_stopping_scorer\": [\n               \"self\",\n               \"X_binned_small_train\",\n               \"y_small_train\",\n               \"X_binned_val\",\n               \"y_val\"\n            ],\n            \"_clear_state\": [\n               \"self\"\n            ],\n            \"_compute_partial_dependence_recursion\": [\n               \"self\",\n               \"grid\",\n               \"target_features\"\n            ],\n            \"_encode_y\": [\n               \"self\",\n               \"y\"\n            ],\n            \"_get_loss\": [\n               \"self\"\n            ],\n            \"_get_small_trainset\": [\n               \"self\",\n               \"X_binned_train\",\n               \"y_train\",\n               \"seed\"\n            ],\n            \"_is_fitted\": [\n               \"self\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"_print_iteration_stats\": [\n               \"self\",\n               \"iteration_start_time\"\n            ],\n            \"_raw_predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_should_stop\": [\n               \"self\",\n               \"scores\"\n            ],\n            \"_validate_parameters\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"n_iter_\": [\n               \"self\"\n            ]\n         },\n         \"HistGradientBoostingClassifier\": {\n            \"__init__\": [\n               \"self\",\n               \"loss\",\n               \"learning_rate\",\n               \"max_iter\",\n               \"max_leaf_nodes\",\n               \"max_depth\",\n               \"min_samples_leaf\",\n               \"l2_regularization\",\n               \"max_bins\",\n               \"warm_start\",\n               \"scoring\",\n               \"validation_fraction\",\n               \"n_iter_no_change\",\n               \"tol\",\n               \"verbose\",\n               \"random_state\"\n            ],\n            \"_encode_y\": [\n               \"self\",\n               \"y\"\n            ],\n            \"_get_loss\": [\n               \"self\"\n            ],\n            \"decision_function\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_proba\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"HistGradientBoostingRegressor\": {\n            \"__init__\": [\n               \"self\",\n               \"loss\",\n               \"learning_rate\",\n               \"max_iter\",\n               \"max_leaf_nodes\",\n               \"max_depth\",\n               \"min_samples_leaf\",\n               \"l2_regularization\",\n               \"max_bins\",\n               \"warm_start\",\n               \"scoring\",\n               \"validation_fraction\",\n               \"n_iter_no_change\",\n               \"tol\",\n               \"verbose\",\n               \"random_state\"\n            ],\n            \"_encode_y\": [\n               \"self\",\n               \"y\"\n            ],\n            \"_get_loss\": [\n               \"self\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.ensemble._hist_gradient_boosting.grower\": {\n         \"TreeGrower\": {\n            \"__init__\": [\n               \"self\",\n               \"X_binned\",\n               \"gradients\",\n               \"hessians\",\n               \"max_leaf_nodes\",\n               \"max_depth\",\n               \"min_samples_leaf\",\n               \"min_gain_to_split\",\n               \"n_bins\",\n               \"n_bins_non_missing\",\n               \"has_missing_values\",\n               \"l2_regularization\",\n               \"min_hessian_to_split\",\n               \"shrinkage\"\n            ],\n            \"_compute_best_split_and_push\": [\n               \"self\",\n               \"node\"\n            ],\n            \"_finalize_leaf\": [\n               \"self\",\n               \"node\"\n            ],\n            \"_finalize_splittable_nodes\": [\n               \"self\"\n            ],\n            \"_intilialize_root\": [\n               \"self\",\n               \"gradients\",\n               \"hessians\",\n               \"hessians_are_constant\"\n            ],\n            \"_validate_parameters\": [\n               \"self\",\n               \"X_binned\",\n               \"max_leaf_nodes\",\n               \"max_depth\",\n               \"min_samples_leaf\",\n               \"min_gain_to_split\",\n               \"l2_regularization\",\n               \"min_hessian_to_split\"\n            ],\n            \"grow\": [\n               \"self\"\n            ],\n            \"make_predictor\": [\n               \"self\",\n               \"bin_thresholds\"\n            ],\n            \"split_next\": [\n               \"self\"\n            ]\n         },\n         \"TreeNode\": {\n            \"__init__\": [\n               \"self\",\n               \"depth\",\n               \"sample_indices\",\n               \"sum_gradients\",\n               \"sum_hessians\",\n               \"parent\"\n            ],\n            \"__lt__\": [\n               \"self\",\n               \"other_node\"\n            ]\n         }\n      },\n      \"sklearn.ensemble._hist_gradient_boosting.loss\": {\n         \"BaseLoss\": {\n            \"get_baseline_prediction\": [\n               \"self\",\n               \"y_train\",\n               \"prediction_dim\"\n            ],\n            \"init_gradients_and_hessians\": [\n               \"self\",\n               \"n_samples\",\n               \"prediction_dim\"\n            ],\n            \"update_gradients_and_hessians\": [\n               \"self\",\n               \"gradients\",\n               \"hessians\",\n               \"y_true\",\n               \"raw_predictions\"\n            ]\n         },\n         \"BinaryCrossEntropy\": {\n            \"__call__\": [\n               \"self\",\n               \"y_true\",\n               \"raw_predictions\",\n               \"average\"\n            ],\n            \"get_baseline_prediction\": [\n               \"self\",\n               \"y_train\",\n               \"prediction_dim\"\n            ],\n            \"predict_proba\": [\n               \"self\",\n               \"raw_predictions\"\n            ],\n            \"update_gradients_and_hessians\": [\n               \"self\",\n               \"gradients\",\n               \"hessians\",\n               \"y_true\",\n               \"raw_predictions\"\n            ]\n         },\n         \"CategoricalCrossEntropy\": {\n            \"__call__\": [\n               \"self\",\n               \"y_true\",\n               \"raw_predictions\",\n               \"average\"\n            ],\n            \"get_baseline_prediction\": [\n               \"self\",\n               \"y_train\",\n               \"prediction_dim\"\n            ],\n            \"predict_proba\": [\n               \"self\",\n               \"raw_predictions\"\n            ],\n            \"update_gradients_and_hessians\": [\n               \"self\",\n               \"gradients\",\n               \"hessians\",\n               \"y_true\",\n               \"raw_predictions\"\n            ]\n         },\n         \"LeastAbsoluteDeviation\": {\n            \"__call__\": [\n               \"self\",\n               \"y_true\",\n               \"raw_predictions\",\n               \"average\"\n            ],\n            \"get_baseline_prediction\": [\n               \"self\",\n               \"y_train\",\n               \"prediction_dim\"\n            ],\n            \"inverse_link_function\": [\n               \"raw_predictions\"\n            ],\n            \"update_gradients_and_hessians\": [\n               \"self\",\n               \"gradients\",\n               \"hessians\",\n               \"y_true\",\n               \"raw_predictions\"\n            ],\n            \"update_leaves_values\": [\n               \"self\",\n               \"grower\",\n               \"y_true\",\n               \"raw_predictions\"\n            ]\n         },\n         \"LeastSquares\": {\n            \"__call__\": [\n               \"self\",\n               \"y_true\",\n               \"raw_predictions\",\n               \"average\"\n            ],\n            \"get_baseline_prediction\": [\n               \"self\",\n               \"y_train\",\n               \"prediction_dim\"\n            ],\n            \"inverse_link_function\": [\n               \"raw_predictions\"\n            ],\n            \"update_gradients_and_hessians\": [\n               \"self\",\n               \"gradients\",\n               \"hessians\",\n               \"y_true\",\n               \"raw_predictions\"\n            ]\n         }\n      },\n      \"sklearn.ensemble._hist_gradient_boosting.predictor\": {\n         \"TreePredictor\": {\n            \"__init__\": [\n               \"self\",\n               \"nodes\"\n            ],\n            \"compute_partial_dependence\": [\n               \"self\",\n               \"grid\",\n               \"target_features\",\n               \"out\"\n            ],\n            \"get_max_depth\": [\n               \"self\"\n            ],\n            \"get_n_leaf_nodes\": [\n               \"self\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_binned\": [\n               \"self\",\n               \"X\",\n               \"missing_values_bin_idx\"\n            ]\n         }\n      },\n      \"sklearn.ensemble._iforest\": {\n         \"IsolationForest\": {\n            \"__init__\": [\n               \"self\",\n               \"n_estimators\",\n               \"max_samples\",\n               \"contamination\",\n               \"max_features\",\n               \"bootstrap\",\n               \"n_jobs\",\n               \"behaviour\",\n               \"random_state\",\n               \"verbose\",\n               \"warm_start\"\n            ],\n            \"_compute_chunked_score_samples\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_compute_score_samples\": [\n               \"self\",\n               \"X\",\n               \"subsample_features\"\n            ],\n            \"_parallel_args\": [\n               \"self\"\n            ],\n            \"_set_oob_score\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"decision_function\": [\n               \"self\",\n               \"X\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"score_samples\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.ensemble._stacking\": {\n         \"StackingClassifier\": {\n            \"__init__\": [\n               \"self\",\n               \"estimators\",\n               \"final_estimator\",\n               \"cv\",\n               \"stack_method\",\n               \"n_jobs\",\n               \"passthrough\",\n               \"verbose\"\n            ],\n            \"_validate_final_estimator\": [\n               \"self\"\n            ],\n            \"decision_function\": [\n               \"self\",\n               \"X\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_proba\": [\n               \"self\",\n               \"X\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"StackingRegressor\": {\n            \"__init__\": [\n               \"self\",\n               \"estimators\",\n               \"final_estimator\",\n               \"cv\",\n               \"n_jobs\",\n               \"passthrough\",\n               \"verbose\"\n            ],\n            \"_validate_final_estimator\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"_BaseStacking\": {\n            \"__init__\": [\n               \"self\",\n               \"estimators\",\n               \"final_estimator\",\n               \"cv\",\n               \"stack_method\",\n               \"n_jobs\",\n               \"verbose\",\n               \"passthrough\"\n            ],\n            \"_clone_final_estimator\": [\n               \"self\",\n               \"default\"\n            ],\n            \"_concatenate_predictions\": [\n               \"self\",\n               \"X\",\n               \"predictions\"\n            ],\n            \"_method_name\": [\n               \"name\",\n               \"estimator\",\n               \"method\"\n            ],\n            \"_transform\": [\n               \"self\",\n               \"X\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.ensemble._voting\": {\n         \"VotingClassifier\": {\n            \"__init__\": [\n               \"self\",\n               \"estimators\",\n               \"voting\",\n               \"weights\",\n               \"n_jobs\",\n               \"flatten_transform\"\n            ],\n            \"_collect_probas\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_predict_proba\": [\n               \"self\",\n               \"X\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_proba\": [\n               \"self\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"VotingRegressor\": {\n            \"__init__\": [\n               \"self\",\n               \"estimators\",\n               \"weights\",\n               \"n_jobs\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"_BaseVoting\": {\n            \"_predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_weights_not_none\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ]\n         }\n      },\n      \"sklearn.ensemble._weight_boosting\": {\n         \"AdaBoostClassifier\": {\n            \"__init__\": [\n               \"self\",\n               \"base_estimator\",\n               \"n_estimators\",\n               \"learning_rate\",\n               \"algorithm\",\n               \"random_state\"\n            ],\n            \"_boost\": [\n               \"self\",\n               \"iboost\",\n               \"X\",\n               \"y\",\n               \"sample_weight\",\n               \"random_state\"\n            ],\n            \"_boost_discrete\": [\n               \"self\",\n               \"iboost\",\n               \"X\",\n               \"y\",\n               \"sample_weight\",\n               \"random_state\"\n            ],\n            \"_boost_real\": [\n               \"self\",\n               \"iboost\",\n               \"X\",\n               \"y\",\n               \"sample_weight\",\n               \"random_state\"\n            ],\n            \"_compute_proba_from_decision\": [\n               \"decision\",\n               \"n_classes\"\n            ],\n            \"_validate_estimator\": [\n               \"self\"\n            ],\n            \"decision_function\": [\n               \"self\",\n               \"X\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_log_proba\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_proba\": [\n               \"self\",\n               \"X\"\n            ],\n            \"staged_decision_function\": [\n               \"self\",\n               \"X\"\n            ],\n            \"staged_predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"staged_predict_proba\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"AdaBoostRegressor\": {\n            \"__init__\": [\n               \"self\",\n               \"base_estimator\",\n               \"n_estimators\",\n               \"learning_rate\",\n               \"loss\",\n               \"random_state\"\n            ],\n            \"_boost\": [\n               \"self\",\n               \"iboost\",\n               \"X\",\n               \"y\",\n               \"sample_weight\",\n               \"random_state\"\n            ],\n            \"_get_median_predict\": [\n               \"self\",\n               \"X\",\n               \"limit\"\n            ],\n            \"_validate_estimator\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"staged_predict\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"BaseWeightBoosting\": {\n            \"__init__\": [\n               \"self\",\n               \"base_estimator\",\n               \"n_estimators\",\n               \"estimator_params\",\n               \"learning_rate\",\n               \"random_state\"\n            ],\n            \"_boost\": [\n               \"self\",\n               \"iboost\",\n               \"X\",\n               \"y\",\n               \"sample_weight\",\n               \"random_state\"\n            ],\n            \"_validate_data\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"feature_importances_\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"staged_score\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ]\n         }\n      },\n      \"sklearn.ensemble.tests.test_bagging\": {\n         \"DummySizeEstimator\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"DummyZeroEstimator\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.ensemble.tests.test_forest\": {\n         \"MyBackend\": {\n            \"__init__\": [\n               \"self\"\n            ],\n            \"start_call\": [\n               \"self\"\n            ]\n         }\n      },\n      \"sklearn.ensemble.tests.test_stacking\": {\n         \"NoWeightClassifier\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"NoWeightRegressor\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.exceptions\": {\n         \"ChangedBehaviorWarning\": {},\n         \"ConvergenceWarning\": {},\n         \"DataConversionWarning\": {},\n         \"DataDimensionalityWarning\": {},\n         \"EfficiencyWarning\": {},\n         \"FitFailedWarning\": {},\n         \"NonBLASDotWarning\": {},\n         \"NotFittedError\": {},\n         \"PositiveSpectrumWarning\": {},\n         \"SkipTestWarning\": {},\n         \"UndefinedMetricWarning\": {}\n      },\n      \"sklearn.externals._arff\": {\n         \"ArffDecoder\": {\n            \"__init__\": [\n               \"self\"\n            ],\n            \"_decode\": [\n               \"self\",\n               \"s\",\n               \"encode_nominal\",\n               \"matrix_type\"\n            ],\n            \"_decode_attribute\": [\n               \"self\",\n               \"s\"\n            ],\n            \"_decode_comment\": [\n               \"self\",\n               \"s\"\n            ],\n            \"_decode_relation\": [\n               \"self\",\n               \"s\"\n            ],\n            \"decode\": [\n               \"self\",\n               \"s\",\n               \"encode_nominal\",\n               \"return_type\"\n            ]\n         },\n         \"ArffEncoder\": {\n            \"_encode_attribute\": [\n               \"self\",\n               \"name\",\n               \"type_\"\n            ],\n            \"_encode_comment\": [\n               \"self\",\n               \"s\"\n            ],\n            \"_encode_relation\": [\n               \"self\",\n               \"name\"\n            ],\n            \"encode\": [\n               \"self\",\n               \"obj\"\n            ],\n            \"iter_encode\": [\n               \"self\",\n               \"obj\"\n            ]\n         },\n         \"ArffException\": {\n            \"__init__\": [\n               \"self\"\n            ],\n            \"__str__\": [\n               \"self\"\n            ]\n         },\n         \"BadAttributeFormat\": {},\n         \"BadAttributeName\": {\n            \"__init__\": [\n               \"self\",\n               \"value\",\n               \"value2\"\n            ]\n         },\n         \"BadAttributeType\": {},\n         \"BadDataFormat\": {\n            \"__init__\": [\n               \"self\",\n               \"value\"\n            ]\n         },\n         \"BadLayout\": {\n            \"__init__\": [\n               \"self\",\n               \"msg\"\n            ]\n         },\n         \"BadNominalFormatting\": {\n            \"__init__\": [\n               \"self\",\n               \"value\"\n            ]\n         },\n         \"BadNominalValue\": {\n            \"__init__\": [\n               \"self\",\n               \"value\"\n            ]\n         },\n         \"BadNumericalValue\": {},\n         \"BadObject\": {\n            \"__init__\": [\n               \"self\",\n               \"msg\"\n            ],\n            \"__str__\": [\n               \"self\"\n            ]\n         },\n         \"BadRelationFormat\": {},\n         \"BadStringValue\": {},\n         \"COOData\": {\n            \"decode_rows\": [\n               \"self\",\n               \"stream\",\n               \"conversors\"\n            ],\n            \"encode_data\": [\n               \"self\",\n               \"data\",\n               \"attributes\"\n            ]\n         },\n         \"Data\": {},\n         \"DenseGeneratorData\": {\n            \"_decode_values\": [\n               \"values\",\n               \"conversors\"\n            ],\n            \"decode_rows\": [\n               \"self\",\n               \"stream\",\n               \"conversors\"\n            ],\n            \"encode_data\": [\n               \"self\",\n               \"data\",\n               \"attributes\"\n            ]\n         },\n         \"EncodedNominalConversor\": {\n            \"__call__\": [\n               \"self\",\n               \"value\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"values\"\n            ]\n         },\n         \"LODData\": {},\n         \"LODGeneratorData\": {\n            \"decode_rows\": [\n               \"self\",\n               \"stream\",\n               \"conversors\"\n            ],\n            \"encode_data\": [\n               \"self\",\n               \"data\",\n               \"attributes\"\n            ]\n         },\n         \"NominalConversor\": {\n            \"__call__\": [\n               \"self\",\n               \"value\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"values\"\n            ]\n         },\n         \"_DataListMixin\": {\n            \"decode_rows\": [\n               \"self\",\n               \"stream\",\n               \"conversors\"\n            ]\n         }\n      },\n      \"sklearn.externals._pep562\": {\n         \"Pep562\": {\n            \"__dir__\": [\n               \"self\"\n            ],\n            \"__getattr__\": [\n               \"self\",\n               \"name\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"name\"\n            ]\n         }\n      },\n      \"sklearn.externals.six\": {\n         \"Iterator\": {\n            \"next\": [\n               \"self\"\n            ]\n         },\n         \"Module_six_moves_urllib\": {},\n         \"Module_six_moves_urllib_error\": {},\n         \"Module_six_moves_urllib_parse\": {},\n         \"Module_six_moves_urllib_request\": {},\n         \"Module_six_moves_urllib_response\": {},\n         \"Module_six_moves_urllib_robotparser\": {},\n         \"MovedAttribute\": {\n            \"__init__\": [\n               \"self\",\n               \"name\",\n               \"old_mod\",\n               \"new_mod\",\n               \"old_attr\",\n               \"new_attr\"\n            ],\n            \"_resolve\": [\n               \"self\"\n            ]\n         },\n         \"MovedModule\": {\n            \"__init__\": [\n               \"self\",\n               \"name\",\n               \"old\",\n               \"new\"\n            ],\n            \"_resolve\": [\n               \"self\"\n            ]\n         },\n         \"X\": {\n            \"__len__\": [\n               \"self\"\n            ]\n         },\n         \"_LazyDescr\": {\n            \"__get__\": [\n               \"self\",\n               \"obj\",\n               \"tp\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"name\"\n            ]\n         },\n         \"_MovedItems\": {}\n      },\n      \"sklearn.feature_extraction._dict_vectorizer\": {\n         \"DictVectorizer\": {\n            \"__init__\": [\n               \"self\",\n               \"dtype\",\n               \"separator\",\n               \"sparse\",\n               \"sort\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"_transform\": [\n               \"self\",\n               \"X\",\n               \"fitting\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"fit_transform\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"get_feature_names\": [\n               \"self\"\n            ],\n            \"inverse_transform\": [\n               \"self\",\n               \"X\",\n               \"dict_type\"\n            ],\n            \"restrict\": [\n               \"self\",\n               \"support\",\n               \"indices\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.feature_extraction._hash\": {\n         \"FeatureHasher\": {\n            \"__init__\": [\n               \"self\",\n               \"n_features\",\n               \"input_type\",\n               \"dtype\",\n               \"alternate_sign\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"_validate_params\": [\n               \"n_features\",\n               \"input_type\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"raw_X\"\n            ]\n         }\n      },\n      \"sklearn.feature_extraction.image\": {\n         \"PatchExtractor\": {\n            \"__init__\": [\n               \"self\",\n               \"patch_size\",\n               \"max_patches\",\n               \"random_state\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.feature_extraction.text\": {\n         \"CountVectorizer\": {\n            \"__init__\": [\n               \"self\",\n               \"input\",\n               \"encoding\",\n               \"decode_error\",\n               \"strip_accents\",\n               \"lowercase\",\n               \"preprocessor\",\n               \"tokenizer\",\n               \"stop_words\",\n               \"token_pattern\",\n               \"ngram_range\",\n               \"analyzer\",\n               \"max_df\",\n               \"min_df\",\n               \"max_features\",\n               \"vocabulary\",\n               \"binary\",\n               \"dtype\"\n            ],\n            \"_count_vocab\": [\n               \"self\",\n               \"raw_documents\",\n               \"fixed_vocab\"\n            ],\n            \"_limit_features\": [\n               \"self\",\n               \"X\",\n               \"vocabulary\",\n               \"high\",\n               \"low\",\n               \"limit\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"_sort_features\": [\n               \"self\",\n               \"X\",\n               \"vocabulary\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"raw_documents\",\n               \"y\"\n            ],\n            \"fit_transform\": [\n               \"self\",\n               \"raw_documents\",\n               \"y\"\n            ],\n            \"get_feature_names\": [\n               \"self\"\n            ],\n            \"inverse_transform\": [\n               \"self\",\n               \"X\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"raw_documents\"\n            ]\n         },\n         \"HashingVectorizer\": {\n            \"__init__\": [\n               \"self\",\n               \"input\",\n               \"encoding\",\n               \"decode_error\",\n               \"strip_accents\",\n               \"lowercase\",\n               \"preprocessor\",\n               \"tokenizer\",\n               \"stop_words\",\n               \"token_pattern\",\n               \"ngram_range\",\n               \"analyzer\",\n               \"n_features\",\n               \"binary\",\n               \"norm\",\n               \"alternate_sign\",\n               \"dtype\"\n            ],\n            \"_get_hasher\": [\n               \"self\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"fit_transform\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"partial_fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"TfidfTransformer\": {\n            \"__init__\": [\n               \"self\",\n               \"norm\",\n               \"use_idf\",\n               \"smooth_idf\",\n               \"sublinear_tf\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"idf_\": [\n               \"self\",\n               \"value\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\",\n               \"copy\"\n            ]\n         },\n         \"TfidfVectorizer\": {\n            \"__init__\": [\n               \"self\",\n               \"input\",\n               \"encoding\",\n               \"decode_error\",\n               \"strip_accents\",\n               \"lowercase\",\n               \"preprocessor\",\n               \"tokenizer\",\n               \"analyzer\",\n               \"stop_words\",\n               \"token_pattern\",\n               \"ngram_range\",\n               \"max_df\",\n               \"min_df\",\n               \"max_features\",\n               \"vocabulary\",\n               \"binary\",\n               \"dtype\",\n               \"norm\",\n               \"use_idf\",\n               \"smooth_idf\",\n               \"sublinear_tf\"\n            ],\n            \"_check_params\": [\n               \"self\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"raw_documents\",\n               \"y\"\n            ],\n            \"fit_transform\": [\n               \"self\",\n               \"raw_documents\",\n               \"y\"\n            ],\n            \"idf_\": [\n               \"self\",\n               \"value\"\n            ],\n            \"norm\": [\n               \"self\",\n               \"value\"\n            ],\n            \"smooth_idf\": [\n               \"self\",\n               \"value\"\n            ],\n            \"sublinear_tf\": [\n               \"self\",\n               \"value\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"raw_documents\",\n               \"copy\"\n            ],\n            \"use_idf\": [\n               \"self\",\n               \"value\"\n            ]\n         },\n         \"VectorizerMixin\": {},\n         \"_VectorizerMixin\": {\n            \"_char_ngrams\": [\n               \"self\",\n               \"text_document\"\n            ],\n            \"_char_wb_ngrams\": [\n               \"self\",\n               \"text_document\"\n            ],\n            \"_check_stop_words_consistency\": [\n               \"self\",\n               \"stop_words\",\n               \"preprocess\",\n               \"tokenize\"\n            ],\n            \"_check_vocabulary\": [\n               \"self\"\n            ],\n            \"_validate_custom_analyzer\": [\n               \"self\"\n            ],\n            \"_validate_params\": [\n               \"self\"\n            ],\n            \"_validate_vocabulary\": [\n               \"self\"\n            ],\n            \"_warn_for_unused_params\": [\n               \"self\"\n            ],\n            \"_word_ngrams\": [\n               \"self\",\n               \"tokens\",\n               \"stop_words\"\n            ],\n            \"build_analyzer\": [\n               \"self\"\n            ],\n            \"build_preprocessor\": [\n               \"self\"\n            ],\n            \"build_tokenizer\": [\n               \"self\"\n            ],\n            \"decode\": [\n               \"self\",\n               \"doc\"\n            ],\n            \"get_stop_words\": [\n               \"self\"\n            ]\n         }\n      },\n      \"sklearn.feature_selection._base\": {\n         \"SelectorMixin\": {\n            \"_get_support_mask\": [\n               \"self\"\n            ],\n            \"get_support\": [\n               \"self\",\n               \"indices\"\n            ],\n            \"inverse_transform\": [\n               \"self\",\n               \"X\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.feature_selection._from_model\": {\n         \"SelectFromModel\": {\n            \"__init__\": [\n               \"self\",\n               \"estimator\",\n               \"threshold\",\n               \"prefit\",\n               \"norm_order\",\n               \"max_features\"\n            ],\n            \"_get_support_mask\": [\n               \"self\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"partial_fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"threshold_\": [\n               \"self\"\n            ]\n         }\n      },\n      \"sklearn.feature_selection._rfe\": {\n         \"RFE\": {\n            \"__init__\": [\n               \"self\",\n               \"estimator\",\n               \"n_features_to_select\",\n               \"step\",\n               \"verbose\"\n            ],\n            \"_estimator_type\": [\n               \"self\"\n            ],\n            \"_fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"step_score\"\n            ],\n            \"_get_support_mask\": [\n               \"self\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"classes_\": [\n               \"self\"\n            ],\n            \"decision_function\": [\n               \"self\",\n               \"X\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_log_proba\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_proba\": [\n               \"self\",\n               \"X\"\n            ],\n            \"score\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"RFECV\": {\n            \"__init__\": [\n               \"self\",\n               \"estimator\",\n               \"step\",\n               \"min_features_to_select\",\n               \"cv\",\n               \"scoring\",\n               \"verbose\",\n               \"n_jobs\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ]\n         }\n      },\n      \"sklearn.feature_selection._univariate_selection\": {\n         \"GenericUnivariateSelect\": {\n            \"__init__\": [\n               \"self\",\n               \"score_func\",\n               \"mode\",\n               \"param\"\n            ],\n            \"_check_params\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"_get_support_mask\": [\n               \"self\"\n            ],\n            \"_make_selector\": [\n               \"self\"\n            ]\n         },\n         \"SelectFdr\": {\n            \"__init__\": [\n               \"self\",\n               \"score_func\",\n               \"alpha\"\n            ],\n            \"_get_support_mask\": [\n               \"self\"\n            ]\n         },\n         \"SelectFpr\": {\n            \"__init__\": [\n               \"self\",\n               \"score_func\",\n               \"alpha\"\n            ],\n            \"_get_support_mask\": [\n               \"self\"\n            ]\n         },\n         \"SelectFwe\": {\n            \"__init__\": [\n               \"self\",\n               \"score_func\",\n               \"alpha\"\n            ],\n            \"_get_support_mask\": [\n               \"self\"\n            ]\n         },\n         \"SelectKBest\": {\n            \"__init__\": [\n               \"self\",\n               \"score_func\",\n               \"k\"\n            ],\n            \"_check_params\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"_get_support_mask\": [\n               \"self\"\n            ]\n         },\n         \"SelectPercentile\": {\n            \"__init__\": [\n               \"self\",\n               \"score_func\",\n               \"percentile\"\n            ],\n            \"_check_params\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"_get_support_mask\": [\n               \"self\"\n            ]\n         },\n         \"_BaseFilter\": {\n            \"__init__\": [\n               \"self\",\n               \"score_func\"\n            ],\n            \"_check_params\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         }\n      },\n      \"sklearn.feature_selection._variance_threshold\": {\n         \"VarianceThreshold\": {\n            \"__init__\": [\n               \"self\",\n               \"threshold\"\n            ],\n            \"_get_support_mask\": [\n               \"self\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         }\n      },\n      \"sklearn.feature_selection.tests.test_base\": {\n         \"StepSelector\": {\n            \"__init__\": [\n               \"self\",\n               \"step\"\n            ],\n            \"_get_support_mask\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         }\n      },\n      \"sklearn.feature_selection.tests.test_from_model\": {\n         \"FixedImportanceEstimator\": {\n            \"__init__\": [\n               \"self\",\n               \"importances\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"NaNTag\": {\n            \"_more_tags\": [\n               \"self\"\n            ]\n         },\n         \"NaNTagRandomForest\": {\n            \"_more_tags\": [\n               \"self\"\n            ]\n         },\n         \"NoNaNTag\": {\n            \"_more_tags\": [\n               \"self\"\n            ]\n         }\n      },\n      \"sklearn.feature_selection.tests.test_rfe\": {\n         \"MockClassifier\": {\n            \"__init__\": [\n               \"self\",\n               \"foo_param\"\n            ],\n            \"_get_tags\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"Y\"\n            ],\n            \"get_params\": [\n               \"self\",\n               \"deep\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"T\"\n            ],\n            \"score\": [\n               \"self\",\n               \"X\",\n               \"Y\"\n            ],\n            \"set_params\": [\n               \"self\"\n            ]\n         }\n      },\n      \"sklearn.gaussian_process._gpc\": {\n         \"GaussianProcessClassifier\": {\n            \"__init__\": [\n               \"self\",\n               \"kernel\",\n               \"optimizer\",\n               \"n_restarts_optimizer\",\n               \"max_iter_predict\",\n               \"warm_start\",\n               \"copy_X_train\",\n               \"random_state\",\n               \"multi_class\",\n               \"n_jobs\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"kernel_\": [\n               \"self\"\n            ],\n            \"log_marginal_likelihood\": [\n               \"self\",\n               \"theta\",\n               \"eval_gradient\",\n               \"clone_kernel\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_proba\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"_BinaryGaussianProcessClassifierLaplace\": {\n            \"__init__\": [\n               \"self\",\n               \"kernel\",\n               \"optimizer\",\n               \"n_restarts_optimizer\",\n               \"max_iter_predict\",\n               \"warm_start\",\n               \"copy_X_train\",\n               \"random_state\"\n            ],\n            \"_constrained_optimization\": [\n               \"self\",\n               \"obj_func\",\n               \"initial_theta\",\n               \"bounds\"\n            ],\n            \"_posterior_mode\": [\n               \"self\",\n               \"K\",\n               \"return_temporaries\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"log_marginal_likelihood\": [\n               \"self\",\n               \"theta\",\n               \"eval_gradient\",\n               \"clone_kernel\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_proba\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.gaussian_process._gpr\": {\n         \"GaussianProcessRegressor\": {\n            \"__init__\": [\n               \"self\",\n               \"kernel\",\n               \"alpha\",\n               \"optimizer\",\n               \"n_restarts_optimizer\",\n               \"normalize_y\",\n               \"copy_X_train\",\n               \"random_state\"\n            ],\n            \"_constrained_optimization\": [\n               \"self\",\n               \"obj_func\",\n               \"initial_theta\",\n               \"bounds\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"log_marginal_likelihood\": [\n               \"self\",\n               \"theta\",\n               \"eval_gradient\",\n               \"clone_kernel\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\",\n               \"return_std\",\n               \"return_cov\"\n            ],\n            \"sample_y\": [\n               \"self\",\n               \"X\",\n               \"n_samples\",\n               \"random_state\"\n            ]\n         }\n      },\n      \"sklearn.gaussian_process.kernels\": {\n         \"CompoundKernel\": {\n            \"__call__\": [\n               \"self\",\n               \"X\",\n               \"Y\",\n               \"eval_gradient\"\n            ],\n            \"__eq__\": [\n               \"self\",\n               \"b\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"kernels\"\n            ],\n            \"bounds\": [\n               \"self\"\n            ],\n            \"diag\": [\n               \"self\",\n               \"X\"\n            ],\n            \"get_params\": [\n               \"self\",\n               \"deep\"\n            ],\n            \"is_stationary\": [\n               \"self\"\n            ],\n            \"requires_vector_input\": [\n               \"self\"\n            ],\n            \"theta\": [\n               \"self\",\n               \"theta\"\n            ]\n         },\n         \"ConstantKernel\": {\n            \"__call__\": [\n               \"self\",\n               \"X\",\n               \"Y\",\n               \"eval_gradient\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"constant_value\",\n               \"constant_value_bounds\"\n            ],\n            \"__repr__\": [\n               \"self\"\n            ],\n            \"diag\": [\n               \"self\",\n               \"X\"\n            ],\n            \"hyperparameter_constant_value\": [\n               \"self\"\n            ]\n         },\n         \"DotProduct\": {\n            \"__call__\": [\n               \"self\",\n               \"X\",\n               \"Y\",\n               \"eval_gradient\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"sigma_0\",\n               \"sigma_0_bounds\"\n            ],\n            \"__repr__\": [\n               \"self\"\n            ],\n            \"diag\": [\n               \"self\",\n               \"X\"\n            ],\n            \"hyperparameter_sigma_0\": [\n               \"self\"\n            ],\n            \"is_stationary\": [\n               \"self\"\n            ]\n         },\n         \"ExpSineSquared\": {\n            \"__call__\": [\n               \"self\",\n               \"X\",\n               \"Y\",\n               \"eval_gradient\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"length_scale\",\n               \"periodicity\",\n               \"length_scale_bounds\",\n               \"periodicity_bounds\"\n            ],\n            \"__repr__\": [\n               \"self\"\n            ],\n            \"hyperparameter_length_scale\": [\n               \"self\"\n            ],\n            \"hyperparameter_periodicity\": [\n               \"self\"\n            ]\n         },\n         \"Exponentiation\": {\n            \"__call__\": [\n               \"self\",\n               \"X\",\n               \"Y\",\n               \"eval_gradient\"\n            ],\n            \"__eq__\": [\n               \"self\",\n               \"b\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"kernel\",\n               \"exponent\"\n            ],\n            \"__repr__\": [\n               \"self\"\n            ],\n            \"bounds\": [\n               \"self\"\n            ],\n            \"diag\": [\n               \"self\",\n               \"X\"\n            ],\n            \"get_params\": [\n               \"self\",\n               \"deep\"\n            ],\n            \"hyperparameters\": [\n               \"self\"\n            ],\n            \"is_stationary\": [\n               \"self\"\n            ],\n            \"requires_vector_input\": [\n               \"self\"\n            ],\n            \"theta\": [\n               \"self\",\n               \"theta\"\n            ]\n         },\n         \"GenericKernelMixin\": {\n            \"requires_vector_input\": [\n               \"self\"\n            ]\n         },\n         \"Hyperparameter\": {\n            \"__eq__\": [\n               \"self\",\n               \"other\"\n            ],\n            \"__new__\": [\n               \"cls\",\n               \"name\",\n               \"value_type\",\n               \"bounds\",\n               \"n_elements\",\n               \"fixed\"\n            ]\n         },\n         \"Kernel\": {\n            \"__add__\": [\n               \"self\",\n               \"b\"\n            ],\n            \"__call__\": [\n               \"self\",\n               \"X\",\n               \"Y\",\n               \"eval_gradient\"\n            ],\n            \"__eq__\": [\n               \"self\",\n               \"b\"\n            ],\n            \"__mul__\": [\n               \"self\",\n               \"b\"\n            ],\n            \"__pow__\": [\n               \"self\",\n               \"b\"\n            ],\n            \"__radd__\": [\n               \"self\",\n               \"b\"\n            ],\n            \"__repr__\": [\n               \"self\"\n            ],\n            \"__rmul__\": [\n               \"self\",\n               \"b\"\n            ],\n            \"bounds\": [\n               \"self\"\n            ],\n            \"clone_with_theta\": [\n               \"self\",\n               \"theta\"\n            ],\n            \"diag\": [\n               \"self\",\n               \"X\"\n            ],\n            \"get_params\": [\n               \"self\",\n               \"deep\"\n            ],\n            \"hyperparameters\": [\n               \"self\"\n            ],\n            \"is_stationary\": [\n               \"self\"\n            ],\n            \"n_dims\": [\n               \"self\"\n            ],\n            \"requires_vector_input\": [\n               \"self\"\n            ],\n            \"set_params\": [\n               \"self\"\n            ],\n            \"theta\": [\n               \"self\",\n               \"theta\"\n            ]\n         },\n         \"KernelOperator\": {\n            \"__eq__\": [\n               \"self\",\n               \"b\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"k1\",\n               \"k2\"\n            ],\n            \"bounds\": [\n               \"self\"\n            ],\n            \"get_params\": [\n               \"self\",\n               \"deep\"\n            ],\n            \"hyperparameters\": [\n               \"self\"\n            ],\n            \"is_stationary\": [\n               \"self\"\n            ],\n            \"requires_vector_input\": [\n               \"self\"\n            ],\n            \"theta\": [\n               \"self\",\n               \"theta\"\n            ]\n         },\n         \"Matern\": {\n            \"__call__\": [\n               \"self\",\n               \"X\",\n               \"Y\",\n               \"eval_gradient\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"length_scale\",\n               \"length_scale_bounds\",\n               \"nu\"\n            ],\n            \"__repr__\": [\n               \"self\"\n            ]\n         },\n         \"NormalizedKernelMixin\": {\n            \"diag\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"PairwiseKernel\": {\n            \"__call__\": [\n               \"self\",\n               \"X\",\n               \"Y\",\n               \"eval_gradient\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"gamma\",\n               \"gamma_bounds\",\n               \"metric\",\n               \"pairwise_kernels_kwargs\"\n            ],\n            \"__repr__\": [\n               \"self\"\n            ],\n            \"diag\": [\n               \"self\",\n               \"X\"\n            ],\n            \"hyperparameter_gamma\": [\n               \"self\"\n            ],\n            \"is_stationary\": [\n               \"self\"\n            ]\n         },\n         \"Product\": {\n            \"__call__\": [\n               \"self\",\n               \"X\",\n               \"Y\",\n               \"eval_gradient\"\n            ],\n            \"__repr__\": [\n               \"self\"\n            ],\n            \"diag\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"RBF\": {\n            \"__call__\": [\n               \"self\",\n               \"X\",\n               \"Y\",\n               \"eval_gradient\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"length_scale\",\n               \"length_scale_bounds\"\n            ],\n            \"__repr__\": [\n               \"self\"\n            ],\n            \"anisotropic\": [\n               \"self\"\n            ],\n            \"hyperparameter_length_scale\": [\n               \"self\"\n            ]\n         },\n         \"RationalQuadratic\": {\n            \"__call__\": [\n               \"self\",\n               \"X\",\n               \"Y\",\n               \"eval_gradient\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"length_scale\",\n               \"alpha\",\n               \"length_scale_bounds\",\n               \"alpha_bounds\"\n            ],\n            \"__repr__\": [\n               \"self\"\n            ],\n            \"hyperparameter_alpha\": [\n               \"self\"\n            ],\n            \"hyperparameter_length_scale\": [\n               \"self\"\n            ]\n         },\n         \"StationaryKernelMixin\": {\n            \"is_stationary\": [\n               \"self\"\n            ]\n         },\n         \"Sum\": {\n            \"__call__\": [\n               \"self\",\n               \"X\",\n               \"Y\",\n               \"eval_gradient\"\n            ],\n            \"__repr__\": [\n               \"self\"\n            ],\n            \"diag\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"WhiteKernel\": {\n            \"__call__\": [\n               \"self\",\n               \"X\",\n               \"Y\",\n               \"eval_gradient\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"noise_level\",\n               \"noise_level_bounds\"\n            ],\n            \"__repr__\": [\n               \"self\"\n            ],\n            \"diag\": [\n               \"self\",\n               \"X\"\n            ],\n            \"hyperparameter_noise_level\": [\n               \"self\"\n            ]\n         }\n      },\n      \"sklearn.gaussian_process.tests._mini_sequence_kernel\": {\n         \"MiniSeqKernel\": {\n            \"__call__\": [\n               \"self\",\n               \"X\",\n               \"Y\",\n               \"eval_gradient\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"baseline_similarity\",\n               \"baseline_similarity_bounds\"\n            ],\n            \"_f\": [\n               \"self\",\n               \"s1\",\n               \"s2\"\n            ],\n            \"_g\": [\n               \"self\",\n               \"s1\",\n               \"s2\"\n            ],\n            \"clone_with_theta\": [\n               \"self\",\n               \"theta\"\n            ],\n            \"diag\": [\n               \"self\",\n               \"X\"\n            ],\n            \"hyperparameter_baseline_similarity\": [\n               \"self\"\n            ]\n         }\n      },\n      \"sklearn.impute._base\": {\n         \"MissingIndicator\": {\n            \"__init__\": [\n               \"self\",\n               \"missing_values\",\n               \"features\",\n               \"sparse\",\n               \"error_on_new\"\n            ],\n            \"_fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"_get_missing_features_info\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"_validate_input\": [\n               \"self\",\n               \"X\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"fit_transform\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"SimpleImputer\": {\n            \"__init__\": [\n               \"self\",\n               \"missing_values\",\n               \"strategy\",\n               \"fill_value\",\n               \"verbose\",\n               \"copy\",\n               \"add_indicator\"\n            ],\n            \"_dense_fit\": [\n               \"self\",\n               \"X\",\n               \"strategy\",\n               \"missing_values\",\n               \"fill_value\"\n            ],\n            \"_sparse_fit\": [\n               \"self\",\n               \"X\",\n               \"strategy\",\n               \"missing_values\",\n               \"fill_value\"\n            ],\n            \"_validate_input\": [\n               \"self\",\n               \"X\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"_BaseImputer\": {\n            \"__init__\": [\n               \"self\",\n               \"missing_values\",\n               \"add_indicator\"\n            ],\n            \"_concatenate_indicator\": [\n               \"self\",\n               \"X_imputed\",\n               \"X_indicator\"\n            ],\n            \"_fit_indicator\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"_transform_indicator\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.impute._iterative\": {\n         \"IterativeImputer\": {\n            \"__init__\": [\n               \"self\",\n               \"estimator\",\n               \"missing_values\",\n               \"sample_posterior\",\n               \"max_iter\",\n               \"tol\",\n               \"n_nearest_features\",\n               \"initial_strategy\",\n               \"imputation_order\",\n               \"skip_complete\",\n               \"min_value\",\n               \"max_value\",\n               \"verbose\",\n               \"random_state\",\n               \"add_indicator\"\n            ],\n            \"_get_abs_corr_mat\": [\n               \"self\",\n               \"X_filled\",\n               \"tolerance\"\n            ],\n            \"_get_neighbor_feat_idx\": [\n               \"self\",\n               \"n_features\",\n               \"feat_idx\",\n               \"abs_corr_mat\"\n            ],\n            \"_get_ordered_idx\": [\n               \"self\",\n               \"mask_missing_values\"\n            ],\n            \"_impute_one_feature\": [\n               \"self\",\n               \"X_filled\",\n               \"mask_missing_values\",\n               \"feat_idx\",\n               \"neighbor_feat_idx\",\n               \"estimator\",\n               \"fit_mode\"\n            ],\n            \"_initial_imputation\": [\n               \"self\",\n               \"X\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"fit_transform\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.impute._knn\": {\n         \"KNNImputer\": {\n            \"__init__\": [\n               \"self\",\n               \"missing_values\",\n               \"n_neighbors\",\n               \"weights\",\n               \"metric\",\n               \"copy\",\n               \"add_indicator\"\n            ],\n            \"_calc_impute\": [\n               \"self\",\n               \"dist_pot_donors\",\n               \"n_neighbors\",\n               \"fit_X_col\",\n               \"mask_fit_X_col\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.impute.tests.test_base\": {\n         \"NoFitIndicatorImputer\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"NoTransformIndicatorImputer\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         }\n      },\n      \"sklearn.inspection._partial_dependence\": {\n         \"PartialDependenceDisplay\": {\n            \"__init__\": [\n               \"self\",\n               \"pd_results\",\n               \"features\",\n               \"feature_names\",\n               \"target_idx\",\n               \"pdp_lim\",\n               \"deciles\"\n            ],\n            \"plot\": [\n               \"self\",\n               \"ax\",\n               \"n_cols\",\n               \"line_kw\",\n               \"contour_kw\"\n            ]\n         }\n      },\n      \"sklearn.inspection.tests.test_partial_dependence\": {\n         \"NoPredictProbaNoDecisionFunction\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         }\n      },\n      \"sklearn.isotonic\": {\n         \"IsotonicRegression\": {\n            \"__getstate__\": [\n               \"self\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"y_min\",\n               \"y_max\",\n               \"increasing\",\n               \"out_of_bounds\"\n            ],\n            \"__setstate__\": [\n               \"self\",\n               \"state\"\n            ],\n            \"_build_f\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"_build_y\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\",\n               \"trim_duplicates\"\n            ],\n            \"_check_fit_data\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"T\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"T\"\n            ]\n         }\n      },\n      \"sklearn.kernel_approximation\": {\n         \"AdditiveChi2Sampler\": {\n            \"__init__\": [\n               \"self\",\n               \"sample_steps\",\n               \"sample_interval\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"_transform_dense\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_transform_sparse\": [\n               \"self\",\n               \"X\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"Nystroem\": {\n            \"__init__\": [\n               \"self\",\n               \"kernel\",\n               \"gamma\",\n               \"coef0\",\n               \"degree\",\n               \"kernel_params\",\n               \"n_components\",\n               \"random_state\"\n            ],\n            \"_get_kernel_params\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"RBFSampler\": {\n            \"__init__\": [\n               \"self\",\n               \"gamma\",\n               \"n_components\",\n               \"random_state\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"SkewedChi2Sampler\": {\n            \"__init__\": [\n               \"self\",\n               \"skewedness\",\n               \"n_components\",\n               \"random_state\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.kernel_ridge\": {\n         \"KernelRidge\": {\n            \"__init__\": [\n               \"self\",\n               \"alpha\",\n               \"kernel\",\n               \"gamma\",\n               \"degree\",\n               \"coef0\",\n               \"kernel_params\"\n            ],\n            \"_get_kernel\": [\n               \"self\",\n               \"X\",\n               \"Y\"\n            ],\n            \"_pairwise\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.linear_model._base\": {\n         \"LinearClassifierMixin\": {\n            \"_predict_proba_lr\": [\n               \"self\",\n               \"X\"\n            ],\n            \"decision_function\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"LinearModel\": {\n            \"_decision_function\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_set_intercept\": [\n               \"self\",\n               \"X_offset\",\n               \"y_offset\",\n               \"X_scale\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"LinearRegression\": {\n            \"__init__\": [\n               \"self\",\n               \"fit_intercept\",\n               \"normalize\",\n               \"copy_X\",\n               \"n_jobs\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ]\n         },\n         \"SparseCoefMixin\": {\n            \"densify\": [\n               \"self\"\n            ],\n            \"sparsify\": [\n               \"self\"\n            ]\n         }\n      },\n      \"sklearn.linear_model._bayes\": {\n         \"ARDRegression\": {\n            \"__init__\": [\n               \"self\",\n               \"n_iter\",\n               \"tol\",\n               \"alpha_1\",\n               \"alpha_2\",\n               \"lambda_1\",\n               \"lambda_2\",\n               \"compute_score\",\n               \"threshold_lambda\",\n               \"fit_intercept\",\n               \"normalize\",\n               \"copy_X\",\n               \"verbose\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\",\n               \"return_std\"\n            ]\n         },\n         \"BayesianRidge\": {\n            \"__init__\": [\n               \"self\",\n               \"n_iter\",\n               \"tol\",\n               \"alpha_1\",\n               \"alpha_2\",\n               \"lambda_1\",\n               \"lambda_2\",\n               \"alpha_init\",\n               \"lambda_init\",\n               \"compute_score\",\n               \"fit_intercept\",\n               \"normalize\",\n               \"copy_X\",\n               \"verbose\"\n            ],\n            \"_log_marginal_likelihood\": [\n               \"self\",\n               \"n_samples\",\n               \"n_features\",\n               \"eigen_vals\",\n               \"alpha_\",\n               \"lambda_\",\n               \"coef\",\n               \"rmse\"\n            ],\n            \"_update_coef_\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"n_samples\",\n               \"n_features\",\n               \"XT_y\",\n               \"U\",\n               \"Vh\",\n               \"eigen_vals_\",\n               \"alpha_\",\n               \"lambda_\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\",\n               \"return_std\"\n            ]\n         }\n      },\n      \"sklearn.linear_model._coordinate_descent\": {\n         \"ElasticNet\": {\n            \"__init__\": [\n               \"self\",\n               \"alpha\",\n               \"l1_ratio\",\n               \"fit_intercept\",\n               \"normalize\",\n               \"precompute\",\n               \"max_iter\",\n               \"copy_X\",\n               \"tol\",\n               \"warm_start\",\n               \"positive\",\n               \"random_state\",\n               \"selection\"\n            ],\n            \"_decision_function\": [\n               \"self\",\n               \"X\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"check_input\"\n            ],\n            \"sparse_coef_\": [\n               \"self\"\n            ]\n         },\n         \"ElasticNetCV\": {\n            \"__init__\": [\n               \"self\",\n               \"l1_ratio\",\n               \"eps\",\n               \"n_alphas\",\n               \"alphas\",\n               \"fit_intercept\",\n               \"normalize\",\n               \"precompute\",\n               \"max_iter\",\n               \"tol\",\n               \"cv\",\n               \"copy_X\",\n               \"verbose\",\n               \"n_jobs\",\n               \"positive\",\n               \"random_state\",\n               \"selection\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ]\n         },\n         \"Lasso\": {\n            \"__init__\": [\n               \"self\",\n               \"alpha\",\n               \"fit_intercept\",\n               \"normalize\",\n               \"precompute\",\n               \"copy_X\",\n               \"max_iter\",\n               \"tol\",\n               \"warm_start\",\n               \"positive\",\n               \"random_state\",\n               \"selection\"\n            ]\n         },\n         \"LassoCV\": {\n            \"__init__\": [\n               \"self\",\n               \"eps\",\n               \"n_alphas\",\n               \"alphas\",\n               \"fit_intercept\",\n               \"normalize\",\n               \"precompute\",\n               \"max_iter\",\n               \"tol\",\n               \"copy_X\",\n               \"cv\",\n               \"verbose\",\n               \"n_jobs\",\n               \"positive\",\n               \"random_state\",\n               \"selection\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ]\n         },\n         \"LinearModelCV\": {\n            \"__init__\": [\n               \"self\",\n               \"eps\",\n               \"n_alphas\",\n               \"alphas\",\n               \"fit_intercept\",\n               \"normalize\",\n               \"precompute\",\n               \"max_iter\",\n               \"tol\",\n               \"copy_X\",\n               \"cv\",\n               \"verbose\",\n               \"n_jobs\",\n               \"positive\",\n               \"random_state\",\n               \"selection\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"MultiTaskElasticNet\": {\n            \"__init__\": [\n               \"self\",\n               \"alpha\",\n               \"l1_ratio\",\n               \"fit_intercept\",\n               \"normalize\",\n               \"copy_X\",\n               \"max_iter\",\n               \"tol\",\n               \"warm_start\",\n               \"random_state\",\n               \"selection\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"MultiTaskElasticNetCV\": {\n            \"__init__\": [\n               \"self\",\n               \"l1_ratio\",\n               \"eps\",\n               \"n_alphas\",\n               \"alphas\",\n               \"fit_intercept\",\n               \"normalize\",\n               \"max_iter\",\n               \"tol\",\n               \"cv\",\n               \"copy_X\",\n               \"verbose\",\n               \"n_jobs\",\n               \"random_state\",\n               \"selection\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ]\n         },\n         \"MultiTaskLasso\": {\n            \"__init__\": [\n               \"self\",\n               \"alpha\",\n               \"fit_intercept\",\n               \"normalize\",\n               \"copy_X\",\n               \"max_iter\",\n               \"tol\",\n               \"warm_start\",\n               \"random_state\",\n               \"selection\"\n            ]\n         },\n         \"MultiTaskLassoCV\": {\n            \"__init__\": [\n               \"self\",\n               \"eps\",\n               \"n_alphas\",\n               \"alphas\",\n               \"fit_intercept\",\n               \"normalize\",\n               \"max_iter\",\n               \"tol\",\n               \"copy_X\",\n               \"cv\",\n               \"verbose\",\n               \"n_jobs\",\n               \"random_state\",\n               \"selection\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ]\n         }\n      },\n      \"sklearn.linear_model._huber\": {\n         \"HuberRegressor\": {\n            \"__init__\": [\n               \"self\",\n               \"epsilon\",\n               \"max_iter\",\n               \"alpha\",\n               \"warm_start\",\n               \"fit_intercept\",\n               \"tol\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ]\n         }\n      },\n      \"sklearn.linear_model._least_angle\": {\n         \"Lars\": {\n            \"__init__\": [\n               \"self\",\n               \"fit_intercept\",\n               \"verbose\",\n               \"normalize\",\n               \"precompute\",\n               \"n_nonzero_coefs\",\n               \"eps\",\n               \"copy_X\",\n               \"fit_path\"\n            ],\n            \"_fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"max_iter\",\n               \"alpha\",\n               \"fit_path\",\n               \"Xy\"\n            ],\n            \"_get_gram\": [\n               \"precompute\",\n               \"X\",\n               \"y\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"Xy\"\n            ]\n         },\n         \"LarsCV\": {\n            \"__init__\": [\n               \"self\",\n               \"fit_intercept\",\n               \"verbose\",\n               \"max_iter\",\n               \"normalize\",\n               \"precompute\",\n               \"cv\",\n               \"max_n_alphas\",\n               \"n_jobs\",\n               \"eps\",\n               \"copy_X\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"LassoLars\": {\n            \"__init__\": [\n               \"self\",\n               \"alpha\",\n               \"fit_intercept\",\n               \"verbose\",\n               \"normalize\",\n               \"precompute\",\n               \"max_iter\",\n               \"eps\",\n               \"copy_X\",\n               \"fit_path\",\n               \"positive\"\n            ]\n         },\n         \"LassoLarsCV\": {\n            \"__init__\": [\n               \"self\",\n               \"fit_intercept\",\n               \"verbose\",\n               \"max_iter\",\n               \"normalize\",\n               \"precompute\",\n               \"cv\",\n               \"max_n_alphas\",\n               \"n_jobs\",\n               \"eps\",\n               \"copy_X\",\n               \"positive\"\n            ]\n         },\n         \"LassoLarsIC\": {\n            \"__init__\": [\n               \"self\",\n               \"criterion\",\n               \"fit_intercept\",\n               \"verbose\",\n               \"normalize\",\n               \"precompute\",\n               \"max_iter\",\n               \"eps\",\n               \"copy_X\",\n               \"positive\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"copy_X\"\n            ]\n         }\n      },\n      \"sklearn.linear_model._logistic\": {\n         \"LogisticRegression\": {\n            \"__init__\": [\n               \"self\",\n               \"penalty\",\n               \"dual\",\n               \"tol\",\n               \"C\",\n               \"fit_intercept\",\n               \"intercept_scaling\",\n               \"class_weight\",\n               \"random_state\",\n               \"solver\",\n               \"max_iter\",\n               \"multi_class\",\n               \"verbose\",\n               \"warm_start\",\n               \"n_jobs\",\n               \"l1_ratio\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"predict_log_proba\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_proba\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"LogisticRegressionCV\": {\n            \"__init__\": [\n               \"self\",\n               \"Cs\",\n               \"fit_intercept\",\n               \"cv\",\n               \"dual\",\n               \"penalty\",\n               \"scoring\",\n               \"solver\",\n               \"tol\",\n               \"max_iter\",\n               \"class_weight\",\n               \"n_jobs\",\n               \"verbose\",\n               \"refit\",\n               \"intercept_scaling\",\n               \"multi_class\",\n               \"random_state\",\n               \"l1_ratios\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"score\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ]\n         }\n      },\n      \"sklearn.linear_model._omp\": {\n         \"OrthogonalMatchingPursuit\": {\n            \"__init__\": [\n               \"self\",\n               \"n_nonzero_coefs\",\n               \"tol\",\n               \"fit_intercept\",\n               \"normalize\",\n               \"precompute\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"OrthogonalMatchingPursuitCV\": {\n            \"__init__\": [\n               \"self\",\n               \"copy\",\n               \"fit_intercept\",\n               \"normalize\",\n               \"max_iter\",\n               \"cv\",\n               \"n_jobs\",\n               \"verbose\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         }\n      },\n      \"sklearn.linear_model._passive_aggressive\": {\n         \"PassiveAggressiveClassifier\": {\n            \"__init__\": [\n               \"self\",\n               \"C\",\n               \"fit_intercept\",\n               \"max_iter\",\n               \"tol\",\n               \"early_stopping\",\n               \"validation_fraction\",\n               \"n_iter_no_change\",\n               \"shuffle\",\n               \"verbose\",\n               \"loss\",\n               \"n_jobs\",\n               \"random_state\",\n               \"warm_start\",\n               \"class_weight\",\n               \"average\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"coef_init\",\n               \"intercept_init\"\n            ],\n            \"partial_fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"classes\"\n            ]\n         },\n         \"PassiveAggressiveRegressor\": {\n            \"__init__\": [\n               \"self\",\n               \"C\",\n               \"fit_intercept\",\n               \"max_iter\",\n               \"tol\",\n               \"early_stopping\",\n               \"validation_fraction\",\n               \"n_iter_no_change\",\n               \"shuffle\",\n               \"verbose\",\n               \"loss\",\n               \"epsilon\",\n               \"random_state\",\n               \"warm_start\",\n               \"average\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"coef_init\",\n               \"intercept_init\"\n            ],\n            \"partial_fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         }\n      },\n      \"sklearn.linear_model._perceptron\": {\n         \"Perceptron\": {\n            \"__init__\": [\n               \"self\",\n               \"penalty\",\n               \"alpha\",\n               \"fit_intercept\",\n               \"max_iter\",\n               \"tol\",\n               \"shuffle\",\n               \"verbose\",\n               \"eta0\",\n               \"n_jobs\",\n               \"random_state\",\n               \"early_stopping\",\n               \"validation_fraction\",\n               \"n_iter_no_change\",\n               \"class_weight\",\n               \"warm_start\"\n            ]\n         }\n      },\n      \"sklearn.linear_model._ransac\": {\n         \"RANSACRegressor\": {\n            \"__init__\": [\n               \"self\",\n               \"base_estimator\",\n               \"min_samples\",\n               \"residual_threshold\",\n               \"is_data_valid\",\n               \"is_model_valid\",\n               \"max_trials\",\n               \"max_skips\",\n               \"stop_n_inliers\",\n               \"stop_score\",\n               \"stop_probability\",\n               \"loss\",\n               \"random_state\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"score\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         }\n      },\n      \"sklearn.linear_model._ridge\": {\n         \"Ridge\": {\n            \"__init__\": [\n               \"self\",\n               \"alpha\",\n               \"fit_intercept\",\n               \"normalize\",\n               \"copy_X\",\n               \"max_iter\",\n               \"tol\",\n               \"solver\",\n               \"random_state\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ]\n         },\n         \"RidgeCV\": {},\n         \"RidgeClassifier\": {\n            \"__init__\": [\n               \"self\",\n               \"alpha\",\n               \"fit_intercept\",\n               \"normalize\",\n               \"copy_X\",\n               \"max_iter\",\n               \"tol\",\n               \"class_weight\",\n               \"solver\",\n               \"random_state\"\n            ],\n            \"classes_\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ]\n         },\n         \"RidgeClassifierCV\": {\n            \"__init__\": [\n               \"self\",\n               \"alphas\",\n               \"fit_intercept\",\n               \"normalize\",\n               \"scoring\",\n               \"cv\",\n               \"class_weight\",\n               \"store_cv_values\"\n            ],\n            \"classes_\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ]\n         },\n         \"_BaseRidge\": {\n            \"__init__\": [\n               \"self\",\n               \"alpha\",\n               \"fit_intercept\",\n               \"normalize\",\n               \"copy_X\",\n               \"max_iter\",\n               \"tol\",\n               \"solver\",\n               \"random_state\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ]\n         },\n         \"_BaseRidgeCV\": {\n            \"__init__\": [\n               \"self\",\n               \"alphas\",\n               \"fit_intercept\",\n               \"normalize\",\n               \"scoring\",\n               \"cv\",\n               \"gcv_mode\",\n               \"store_cv_values\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ]\n         },\n         \"_RidgeGCV\": {\n            \"__init__\": [\n               \"self\",\n               \"alphas\",\n               \"fit_intercept\",\n               \"normalize\",\n               \"scoring\",\n               \"copy_X\",\n               \"gcv_mode\",\n               \"store_cv_values\"\n            ],\n            \"_compute_covariance\": [\n               \"self\",\n               \"X\",\n               \"sqrt_sw\"\n            ],\n            \"_compute_gram\": [\n               \"self\",\n               \"X\",\n               \"sqrt_sw\"\n            ],\n            \"_decomp_diag\": [\n               \"self\",\n               \"v_prime\",\n               \"Q\"\n            ],\n            \"_diag_dot\": [\n               \"self\",\n               \"D\",\n               \"B\"\n            ],\n            \"_eigen_decompose_covariance\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sqrt_sw\"\n            ],\n            \"_eigen_decompose_gram\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sqrt_sw\"\n            ],\n            \"_solve_eigen_covariance\": [\n               \"self\",\n               \"alpha\",\n               \"y\",\n               \"sqrt_sw\",\n               \"X_mean\",\n               \"eigvals\",\n               \"V\",\n               \"X\"\n            ],\n            \"_solve_eigen_covariance_intercept\": [\n               \"self\",\n               \"alpha\",\n               \"y\",\n               \"sqrt_sw\",\n               \"X_mean\",\n               \"eigvals\",\n               \"V\",\n               \"X\"\n            ],\n            \"_solve_eigen_covariance_no_intercept\": [\n               \"self\",\n               \"alpha\",\n               \"y\",\n               \"sqrt_sw\",\n               \"X_mean\",\n               \"eigvals\",\n               \"V\",\n               \"X\"\n            ],\n            \"_solve_eigen_gram\": [\n               \"self\",\n               \"alpha\",\n               \"y\",\n               \"sqrt_sw\",\n               \"X_mean\",\n               \"eigvals\",\n               \"Q\",\n               \"QT_y\"\n            ],\n            \"_solve_svd_design_matrix\": [\n               \"self\",\n               \"alpha\",\n               \"y\",\n               \"sqrt_sw\",\n               \"X_mean\",\n               \"singvals_sq\",\n               \"U\",\n               \"UT_y\"\n            ],\n            \"_sparse_multidot_diag\": [\n               \"self\",\n               \"X\",\n               \"A\",\n               \"X_mean\",\n               \"sqrt_sw\"\n            ],\n            \"_svd_decompose_design_matrix\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sqrt_sw\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ]\n         },\n         \"_XT_CenterStackOp\": {\n            \"__init__\": [\n               \"self\",\n               \"X\",\n               \"X_mean\",\n               \"sqrt_sw\"\n            ],\n            \"_matmat\": [\n               \"self\",\n               \"v\"\n            ],\n            \"_matvec\": [\n               \"self\",\n               \"v\"\n            ]\n         },\n         \"_X_CenterStackOp\": {\n            \"__init__\": [\n               \"self\",\n               \"X\",\n               \"X_mean\",\n               \"sqrt_sw\"\n            ],\n            \"_matmat\": [\n               \"self\",\n               \"v\"\n            ],\n            \"_matvec\": [\n               \"self\",\n               \"v\"\n            ],\n            \"_transpose\": [\n               \"self\"\n            ]\n         }\n      },\n      \"sklearn.linear_model._stochastic_gradient\": {\n         \"BaseSGD\": {\n            \"__init__\": [\n               \"self\",\n               \"loss\",\n               \"penalty\",\n               \"alpha\",\n               \"C\",\n               \"l1_ratio\",\n               \"fit_intercept\",\n               \"max_iter\",\n               \"tol\",\n               \"shuffle\",\n               \"verbose\",\n               \"epsilon\",\n               \"random_state\",\n               \"learning_rate\",\n               \"eta0\",\n               \"power_t\",\n               \"early_stopping\",\n               \"validation_fraction\",\n               \"n_iter_no_change\",\n               \"warm_start\",\n               \"average\"\n            ],\n            \"_allocate_parameter_mem\": [\n               \"self\",\n               \"n_classes\",\n               \"n_features\",\n               \"coef_init\",\n               \"intercept_init\"\n            ],\n            \"_get_learning_rate_type\": [\n               \"self\",\n               \"learning_rate\"\n            ],\n            \"_get_loss_function\": [\n               \"self\",\n               \"loss\"\n            ],\n            \"_get_penalty_type\": [\n               \"self\",\n               \"penalty\"\n            ],\n            \"_make_validation_score_cb\": [\n               \"self\",\n               \"validation_mask\",\n               \"X\",\n               \"y\",\n               \"sample_weight\",\n               \"classes\"\n            ],\n            \"_make_validation_split\": [\n               \"self\",\n               \"y\"\n            ],\n            \"_validate_params\": [\n               \"self\",\n               \"for_partial_fit\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"set_params\": [\n               \"self\"\n            ]\n         },\n         \"BaseSGDClassifier\": {\n            \"__init__\": [\n               \"self\",\n               \"loss\",\n               \"penalty\",\n               \"alpha\",\n               \"l1_ratio\",\n               \"fit_intercept\",\n               \"max_iter\",\n               \"tol\",\n               \"shuffle\",\n               \"verbose\",\n               \"epsilon\",\n               \"n_jobs\",\n               \"random_state\",\n               \"learning_rate\",\n               \"eta0\",\n               \"power_t\",\n               \"early_stopping\",\n               \"validation_fraction\",\n               \"n_iter_no_change\",\n               \"class_weight\",\n               \"warm_start\",\n               \"average\"\n            ],\n            \"_fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"alpha\",\n               \"C\",\n               \"loss\",\n               \"learning_rate\",\n               \"coef_init\",\n               \"intercept_init\",\n               \"sample_weight\"\n            ],\n            \"_fit_binary\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"alpha\",\n               \"C\",\n               \"sample_weight\",\n               \"learning_rate\",\n               \"max_iter\"\n            ],\n            \"_fit_multiclass\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"alpha\",\n               \"C\",\n               \"learning_rate\",\n               \"sample_weight\",\n               \"max_iter\"\n            ],\n            \"_partial_fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"alpha\",\n               \"C\",\n               \"loss\",\n               \"learning_rate\",\n               \"max_iter\",\n               \"classes\",\n               \"sample_weight\",\n               \"coef_init\",\n               \"intercept_init\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"coef_init\",\n               \"intercept_init\",\n               \"sample_weight\"\n            ],\n            \"partial_fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"classes\",\n               \"sample_weight\"\n            ]\n         },\n         \"BaseSGDRegressor\": {\n            \"__init__\": [\n               \"self\",\n               \"loss\",\n               \"penalty\",\n               \"alpha\",\n               \"l1_ratio\",\n               \"fit_intercept\",\n               \"max_iter\",\n               \"tol\",\n               \"shuffle\",\n               \"verbose\",\n               \"epsilon\",\n               \"random_state\",\n               \"learning_rate\",\n               \"eta0\",\n               \"power_t\",\n               \"early_stopping\",\n               \"validation_fraction\",\n               \"n_iter_no_change\",\n               \"warm_start\",\n               \"average\"\n            ],\n            \"_decision_function\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"alpha\",\n               \"C\",\n               \"loss\",\n               \"learning_rate\",\n               \"coef_init\",\n               \"intercept_init\",\n               \"sample_weight\"\n            ],\n            \"_fit_regressor\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"alpha\",\n               \"C\",\n               \"loss\",\n               \"learning_rate\",\n               \"sample_weight\",\n               \"max_iter\"\n            ],\n            \"_partial_fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"alpha\",\n               \"C\",\n               \"loss\",\n               \"learning_rate\",\n               \"max_iter\",\n               \"sample_weight\",\n               \"coef_init\",\n               \"intercept_init\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"coef_init\",\n               \"intercept_init\",\n               \"sample_weight\"\n            ],\n            \"partial_fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"SGDClassifier\": {\n            \"__init__\": [\n               \"self\",\n               \"loss\",\n               \"penalty\",\n               \"alpha\",\n               \"l1_ratio\",\n               \"fit_intercept\",\n               \"max_iter\",\n               \"tol\",\n               \"shuffle\",\n               \"verbose\",\n               \"epsilon\",\n               \"n_jobs\",\n               \"random_state\",\n               \"learning_rate\",\n               \"eta0\",\n               \"power_t\",\n               \"early_stopping\",\n               \"validation_fraction\",\n               \"n_iter_no_change\",\n               \"class_weight\",\n               \"warm_start\",\n               \"average\"\n            ],\n            \"_check_proba\": [\n               \"self\"\n            ],\n            \"_predict_log_proba\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_predict_proba\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_log_proba\": [\n               \"self\"\n            ],\n            \"predict_proba\": [\n               \"self\"\n            ]\n         },\n         \"SGDRegressor\": {\n            \"__init__\": [\n               \"self\",\n               \"loss\",\n               \"penalty\",\n               \"alpha\",\n               \"l1_ratio\",\n               \"fit_intercept\",\n               \"max_iter\",\n               \"tol\",\n               \"shuffle\",\n               \"verbose\",\n               \"epsilon\",\n               \"random_state\",\n               \"learning_rate\",\n               \"eta0\",\n               \"power_t\",\n               \"early_stopping\",\n               \"validation_fraction\",\n               \"n_iter_no_change\",\n               \"warm_start\",\n               \"average\"\n            ]\n         },\n         \"_ValidationScoreCallback\": {\n            \"__call__\": [\n               \"self\",\n               \"coef\",\n               \"intercept\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"estimator\",\n               \"X_val\",\n               \"y_val\",\n               \"sample_weight_val\",\n               \"classes\"\n            ]\n         }\n      },\n      \"sklearn.linear_model._theil_sen\": {\n         \"TheilSenRegressor\": {\n            \"__init__\": [\n               \"self\",\n               \"fit_intercept\",\n               \"copy_X\",\n               \"max_subpopulation\",\n               \"n_subsamples\",\n               \"max_iter\",\n               \"tol\",\n               \"random_state\",\n               \"n_jobs\",\n               \"verbose\"\n            ],\n            \"_check_subparams\": [\n               \"self\",\n               \"n_samples\",\n               \"n_features\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         }\n      },\n      \"sklearn.linear_model.tests.test_passive_aggressive\": {\n         \"MyPassiveAggressive\": {\n            \"__init__\": [\n               \"self\",\n               \"C\",\n               \"epsilon\",\n               \"loss\",\n               \"fit_intercept\",\n               \"n_iter\",\n               \"random_state\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"project\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.linear_model.tests.test_perceptron\": {\n         \"MyPerceptron\": {\n            \"__init__\": [\n               \"self\",\n               \"n_iter\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"project\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.linear_model.tests.test_sgd\": {\n         \"_SparseSGDClassifier\": {\n            \"decision_function\": [\n               \"self\",\n               \"X\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"partial_fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"predict_proba\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"_SparseSGDRegressor\": {\n            \"decision_function\": [\n               \"self\",\n               \"X\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"partial_fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         }\n      },\n      \"sklearn.manifold._isomap\": {\n         \"Isomap\": {\n            \"__init__\": [\n               \"self\",\n               \"n_neighbors\",\n               \"n_components\",\n               \"eigen_solver\",\n               \"tol\",\n               \"max_iter\",\n               \"path_method\",\n               \"neighbors_algorithm\",\n               \"n_jobs\",\n               \"metric\",\n               \"p\",\n               \"metric_params\"\n            ],\n            \"_fit_transform\": [\n               \"self\",\n               \"X\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"fit_transform\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"reconstruction_error\": [\n               \"self\"\n            ],\n            \"training_data_\": [\n               \"self\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.manifold._locally_linear\": {\n         \"LocallyLinearEmbedding\": {\n            \"__init__\": [\n               \"self\",\n               \"n_neighbors\",\n               \"n_components\",\n               \"reg\",\n               \"eigen_solver\",\n               \"tol\",\n               \"max_iter\",\n               \"method\",\n               \"hessian_tol\",\n               \"modified_tol\",\n               \"neighbors_algorithm\",\n               \"random_state\",\n               \"n_jobs\"\n            ],\n            \"_fit_transform\": [\n               \"self\",\n               \"X\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"fit_transform\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.manifold._mds\": {\n         \"MDS\": {\n            \"__init__\": [\n               \"self\",\n               \"n_components\",\n               \"metric\",\n               \"n_init\",\n               \"max_iter\",\n               \"verbose\",\n               \"eps\",\n               \"n_jobs\",\n               \"random_state\",\n               \"dissimilarity\"\n            ],\n            \"_pairwise\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"init\"\n            ],\n            \"fit_transform\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"init\"\n            ]\n         }\n      },\n      \"sklearn.manifold._spectral_embedding\": {\n         \"SpectralEmbedding\": {\n            \"__init__\": [\n               \"self\",\n               \"n_components\",\n               \"affinity\",\n               \"gamma\",\n               \"random_state\",\n               \"eigen_solver\",\n               \"n_neighbors\",\n               \"n_jobs\"\n            ],\n            \"_get_affinity_matrix\": [\n               \"self\",\n               \"X\",\n               \"Y\"\n            ],\n            \"_pairwise\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"fit_transform\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         }\n      },\n      \"sklearn.manifold._t_sne\": {\n         \"TSNE\": {\n            \"__init__\": [\n               \"self\",\n               \"n_components\",\n               \"perplexity\",\n               \"early_exaggeration\",\n               \"learning_rate\",\n               \"n_iter\",\n               \"n_iter_without_progress\",\n               \"min_grad_norm\",\n               \"metric\",\n               \"init\",\n               \"verbose\",\n               \"random_state\",\n               \"method\",\n               \"angle\",\n               \"n_jobs\"\n            ],\n            \"_fit\": [\n               \"self\",\n               \"X\",\n               \"skip_num_points\"\n            ],\n            \"_tsne\": [\n               \"self\",\n               \"P\",\n               \"degrees_of_freedom\",\n               \"n_samples\",\n               \"X_embedded\",\n               \"neighbors\",\n               \"skip_num_points\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"fit_transform\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         }\n      },\n      \"sklearn.metrics._plot.confusion_matrix\": {\n         \"ConfusionMatrixDisplay\": {\n            \"__init__\": [\n               \"self\",\n               \"confusion_matrix\",\n               \"display_labels\"\n            ],\n            \"plot\": [\n               \"self\",\n               \"include_values\",\n               \"cmap\",\n               \"xticks_rotation\",\n               \"values_format\",\n               \"ax\"\n            ]\n         }\n      },\n      \"sklearn.metrics._plot.precision_recall_curve\": {\n         \"PrecisionRecallDisplay\": {\n            \"__init__\": [\n               \"self\",\n               \"precision\",\n               \"recall\",\n               \"average_precision\",\n               \"estimator_name\"\n            ],\n            \"plot\": [\n               \"self\",\n               \"ax\",\n               \"name\"\n            ]\n         }\n      },\n      \"sklearn.metrics._plot.roc_curve\": {\n         \"RocCurveDisplay\": {\n            \"__init__\": [\n               \"self\",\n               \"fpr\",\n               \"tpr\",\n               \"roc_auc\",\n               \"estimator_name\"\n            ],\n            \"plot\": [\n               \"self\",\n               \"ax\",\n               \"name\"\n            ]\n         }\n      },\n      \"sklearn.metrics._scorer\": {\n         \"_BaseScorer\": {\n            \"__call__\": [\n               \"self\",\n               \"estimator\",\n               \"X\",\n               \"y_true\",\n               \"sample_weight\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"score_func\",\n               \"sign\",\n               \"kwargs\"\n            ],\n            \"__repr__\": [\n               \"self\"\n            ],\n            \"_factory_args\": [\n               \"self\"\n            ]\n         },\n         \"_MultimetricScorer\": {\n            \"__call__\": [\n               \"self\",\n               \"estimator\"\n            ],\n            \"__init__\": [\n               \"self\"\n            ],\n            \"_use_cache\": [\n               \"self\",\n               \"estimator\"\n            ]\n         },\n         \"_PredictScorer\": {\n            \"_score\": [\n               \"self\",\n               \"method_caller\",\n               \"estimator\",\n               \"X\",\n               \"y_true\",\n               \"sample_weight\"\n            ]\n         },\n         \"_ProbaScorer\": {\n            \"_factory_args\": [\n               \"self\"\n            ],\n            \"_score\": [\n               \"self\",\n               \"method_caller\",\n               \"clf\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ]\n         },\n         \"_ThresholdScorer\": {\n            \"_factory_args\": [\n               \"self\"\n            ],\n            \"_score\": [\n               \"self\",\n               \"method_caller\",\n               \"clf\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ]\n         }\n      },\n      \"sklearn.metrics.tests.test_score_objects\": {\n         \"DummyScorer\": {\n            \"__call__\": [\n               \"self\",\n               \"est\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"EstimatorWithFit\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"EstimatorWithFitAndPredict\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"EstimatorWithFitAndScore\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"score\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"EstimatorWithoutFit\": {}\n      },\n      \"sklearn.mixture._base\": {\n         \"BaseMixture\": {\n            \"__init__\": [\n               \"self\",\n               \"n_components\",\n               \"tol\",\n               \"reg_covar\",\n               \"max_iter\",\n               \"n_init\",\n               \"init_params\",\n               \"random_state\",\n               \"warm_start\",\n               \"verbose\",\n               \"verbose_interval\"\n            ],\n            \"_check_initial_parameters\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_check_parameters\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_e_step\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_estimate_log_prob\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_estimate_log_prob_resp\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_estimate_log_weights\": [\n               \"self\"\n            ],\n            \"_estimate_weighted_log_prob\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_get_parameters\": [\n               \"self\"\n            ],\n            \"_initialize\": [\n               \"self\",\n               \"X\",\n               \"resp\"\n            ],\n            \"_initialize_parameters\": [\n               \"self\",\n               \"X\",\n               \"random_state\"\n            ],\n            \"_m_step\": [\n               \"self\",\n               \"X\",\n               \"log_resp\"\n            ],\n            \"_print_verbose_msg_init_beg\": [\n               \"self\",\n               \"n_init\"\n            ],\n            \"_print_verbose_msg_init_end\": [\n               \"self\",\n               \"ll\"\n            ],\n            \"_print_verbose_msg_iter_end\": [\n               \"self\",\n               \"n_iter\",\n               \"diff_ll\"\n            ],\n            \"_set_parameters\": [\n               \"self\",\n               \"params\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"fit_predict\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_proba\": [\n               \"self\",\n               \"X\"\n            ],\n            \"sample\": [\n               \"self\",\n               \"n_samples\"\n            ],\n            \"score\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"score_samples\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.mixture._bayesian_mixture\": {\n         \"BayesianGaussianMixture\": {\n            \"__init__\": [\n               \"self\",\n               \"n_components\",\n               \"covariance_type\",\n               \"tol\",\n               \"reg_covar\",\n               \"max_iter\",\n               \"n_init\",\n               \"init_params\",\n               \"weight_concentration_prior_type\",\n               \"weight_concentration_prior\",\n               \"mean_precision_prior\",\n               \"mean_prior\",\n               \"degrees_of_freedom_prior\",\n               \"covariance_prior\",\n               \"random_state\",\n               \"warm_start\",\n               \"verbose\",\n               \"verbose_interval\"\n            ],\n            \"_check_means_parameters\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_check_parameters\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_check_precision_parameters\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_check_weights_parameters\": [\n               \"self\"\n            ],\n            \"_checkcovariance_prior_parameter\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_compute_lower_bound\": [\n               \"self\",\n               \"log_resp\",\n               \"log_prob_norm\"\n            ],\n            \"_estimate_log_prob\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_estimate_log_weights\": [\n               \"self\"\n            ],\n            \"_estimate_means\": [\n               \"self\",\n               \"nk\",\n               \"xk\"\n            ],\n            \"_estimate_precisions\": [\n               \"self\",\n               \"nk\",\n               \"xk\",\n               \"sk\"\n            ],\n            \"_estimate_weights\": [\n               \"self\",\n               \"nk\"\n            ],\n            \"_estimate_wishart_diag\": [\n               \"self\",\n               \"nk\",\n               \"xk\",\n               \"sk\"\n            ],\n            \"_estimate_wishart_full\": [\n               \"self\",\n               \"nk\",\n               \"xk\",\n               \"sk\"\n            ],\n            \"_estimate_wishart_spherical\": [\n               \"self\",\n               \"nk\",\n               \"xk\",\n               \"sk\"\n            ],\n            \"_estimate_wishart_tied\": [\n               \"self\",\n               \"nk\",\n               \"xk\",\n               \"sk\"\n            ],\n            \"_get_parameters\": [\n               \"self\"\n            ],\n            \"_initialize\": [\n               \"self\",\n               \"X\",\n               \"resp\"\n            ],\n            \"_m_step\": [\n               \"self\",\n               \"X\",\n               \"log_resp\"\n            ],\n            \"_set_parameters\": [\n               \"self\",\n               \"params\"\n            ]\n         }\n      },\n      \"sklearn.mixture._gaussian_mixture\": {\n         \"GaussianMixture\": {\n            \"__init__\": [\n               \"self\",\n               \"n_components\",\n               \"covariance_type\",\n               \"tol\",\n               \"reg_covar\",\n               \"max_iter\",\n               \"n_init\",\n               \"init_params\",\n               \"weights_init\",\n               \"means_init\",\n               \"precisions_init\",\n               \"random_state\",\n               \"warm_start\",\n               \"verbose\",\n               \"verbose_interval\"\n            ],\n            \"_check_parameters\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_compute_lower_bound\": [\n               \"self\",\n               \"_\",\n               \"log_prob_norm\"\n            ],\n            \"_estimate_log_prob\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_estimate_log_weights\": [\n               \"self\"\n            ],\n            \"_get_parameters\": [\n               \"self\"\n            ],\n            \"_initialize\": [\n               \"self\",\n               \"X\",\n               \"resp\"\n            ],\n            \"_m_step\": [\n               \"self\",\n               \"X\",\n               \"log_resp\"\n            ],\n            \"_n_parameters\": [\n               \"self\"\n            ],\n            \"_set_parameters\": [\n               \"self\",\n               \"params\"\n            ],\n            \"aic\": [\n               \"self\",\n               \"X\"\n            ],\n            \"bic\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.mixture.tests.test_gaussian_mixture\": {\n         \"RandomData\": {\n            \"__init__\": [\n               \"self\",\n               \"rng\",\n               \"n_samples\",\n               \"n_components\",\n               \"n_features\",\n               \"scale\"\n            ]\n         }\n      },\n      \"sklearn.model_selection._search\": {\n         \"BaseSearchCV\": {\n            \"__init__\": [\n               \"self\",\n               \"estimator\",\n               \"scoring\",\n               \"n_jobs\",\n               \"iid\",\n               \"refit\",\n               \"cv\",\n               \"verbose\",\n               \"pre_dispatch\",\n               \"error_score\",\n               \"return_train_score\"\n            ],\n            \"_check_is_fitted\": [\n               \"self\",\n               \"method_name\"\n            ],\n            \"_estimator_type\": [\n               \"self\"\n            ],\n            \"_format_results\": [\n               \"self\",\n               \"candidate_params\",\n               \"scorers\",\n               \"n_splits\",\n               \"out\"\n            ],\n            \"_pairwise\": [\n               \"self\"\n            ],\n            \"_run_search\": [\n               \"self\",\n               \"evaluate_candidates\"\n            ],\n            \"classes_\": [\n               \"self\"\n            ],\n            \"decision_function\": [\n               \"self\",\n               \"X\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ],\n            \"inverse_transform\": [\n               \"self\",\n               \"Xt\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_log_proba\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_proba\": [\n               \"self\",\n               \"X\"\n            ],\n            \"score\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"GridSearchCV\": {\n            \"__init__\": [\n               \"self\",\n               \"estimator\",\n               \"param_grid\",\n               \"scoring\",\n               \"n_jobs\",\n               \"iid\",\n               \"refit\",\n               \"cv\",\n               \"verbose\",\n               \"pre_dispatch\",\n               \"error_score\",\n               \"return_train_score\"\n            ],\n            \"_run_search\": [\n               \"self\",\n               \"evaluate_candidates\"\n            ]\n         },\n         \"ParameterGrid\": {\n            \"__getitem__\": [\n               \"self\",\n               \"ind\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"param_grid\"\n            ],\n            \"__iter__\": [\n               \"self\"\n            ],\n            \"__len__\": [\n               \"self\"\n            ]\n         },\n         \"ParameterSampler\": {\n            \"__init__\": [\n               \"self\",\n               \"param_distributions\",\n               \"n_iter\",\n               \"random_state\"\n            ],\n            \"__iter__\": [\n               \"self\"\n            ],\n            \"__len__\": [\n               \"self\"\n            ]\n         },\n         \"RandomizedSearchCV\": {\n            \"__init__\": [\n               \"self\",\n               \"estimator\",\n               \"param_distributions\",\n               \"n_iter\",\n               \"scoring\",\n               \"n_jobs\",\n               \"iid\",\n               \"refit\",\n               \"cv\",\n               \"verbose\",\n               \"pre_dispatch\",\n               \"random_state\",\n               \"error_score\",\n               \"return_train_score\"\n            ],\n            \"_run_search\": [\n               \"self\",\n               \"evaluate_candidates\"\n            ]\n         }\n      },\n      \"sklearn.model_selection._split\": {\n         \"BaseCrossValidator\": {\n            \"__repr__\": [\n               \"self\"\n            ],\n            \"_iter_test_indices\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ],\n            \"_iter_test_masks\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ],\n            \"get_n_splits\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ],\n            \"split\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ]\n         },\n         \"BaseShuffleSplit\": {\n            \"__init__\": [\n               \"self\",\n               \"n_splits\",\n               \"test_size\",\n               \"train_size\",\n               \"random_state\"\n            ],\n            \"__repr__\": [\n               \"self\"\n            ],\n            \"_iter_indices\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ],\n            \"get_n_splits\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ],\n            \"split\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ]\n         },\n         \"GroupKFold\": {\n            \"__init__\": [\n               \"self\",\n               \"n_splits\"\n            ],\n            \"_iter_test_indices\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ],\n            \"split\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ]\n         },\n         \"GroupShuffleSplit\": {\n            \"__init__\": [\n               \"self\",\n               \"n_splits\",\n               \"test_size\",\n               \"train_size\",\n               \"random_state\"\n            ],\n            \"_iter_indices\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ],\n            \"split\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ]\n         },\n         \"KFold\": {\n            \"__init__\": [\n               \"self\",\n               \"n_splits\",\n               \"shuffle\",\n               \"random_state\"\n            ],\n            \"_iter_test_indices\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ]\n         },\n         \"LeaveOneGroupOut\": {\n            \"_iter_test_masks\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ],\n            \"get_n_splits\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ],\n            \"split\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ]\n         },\n         \"LeaveOneOut\": {\n            \"_iter_test_indices\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ],\n            \"get_n_splits\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ]\n         },\n         \"LeavePGroupsOut\": {\n            \"__init__\": [\n               \"self\",\n               \"n_groups\"\n            ],\n            \"_iter_test_masks\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ],\n            \"get_n_splits\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ],\n            \"split\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ]\n         },\n         \"LeavePOut\": {\n            \"__init__\": [\n               \"self\",\n               \"p\"\n            ],\n            \"_iter_test_indices\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ],\n            \"get_n_splits\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ]\n         },\n         \"PredefinedSplit\": {\n            \"__init__\": [\n               \"self\",\n               \"test_fold\"\n            ],\n            \"_iter_test_masks\": [\n               \"self\"\n            ],\n            \"get_n_splits\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ],\n            \"split\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ]\n         },\n         \"RepeatedKFold\": {\n            \"__init__\": [\n               \"self\",\n               \"n_splits\",\n               \"n_repeats\",\n               \"random_state\"\n            ]\n         },\n         \"RepeatedStratifiedKFold\": {\n            \"__init__\": [\n               \"self\",\n               \"n_splits\",\n               \"n_repeats\",\n               \"random_state\"\n            ]\n         },\n         \"ShuffleSplit\": {\n            \"__init__\": [\n               \"self\",\n               \"n_splits\",\n               \"test_size\",\n               \"train_size\",\n               \"random_state\"\n            ],\n            \"_iter_indices\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ]\n         },\n         \"StratifiedKFold\": {\n            \"__init__\": [\n               \"self\",\n               \"n_splits\",\n               \"shuffle\",\n               \"random_state\"\n            ],\n            \"_iter_test_masks\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ],\n            \"_make_test_folds\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"split\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ]\n         },\n         \"StratifiedShuffleSplit\": {\n            \"__init__\": [\n               \"self\",\n               \"n_splits\",\n               \"test_size\",\n               \"train_size\",\n               \"random_state\"\n            ],\n            \"_iter_indices\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ],\n            \"split\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ]\n         },\n         \"TimeSeriesSplit\": {\n            \"__init__\": [\n               \"self\",\n               \"n_splits\",\n               \"max_train_size\"\n            ],\n            \"split\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ]\n         },\n         \"_BaseKFold\": {\n            \"__init__\": [\n               \"self\",\n               \"n_splits\",\n               \"shuffle\",\n               \"random_state\"\n            ],\n            \"get_n_splits\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ],\n            \"split\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ]\n         },\n         \"_CVIterableWrapper\": {\n            \"__init__\": [\n               \"self\",\n               \"cv\"\n            ],\n            \"get_n_splits\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ],\n            \"split\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ]\n         },\n         \"_RepeatedSplits\": {\n            \"__init__\": [\n               \"self\",\n               \"cv\",\n               \"n_repeats\",\n               \"random_state\"\n            ],\n            \"__repr__\": [\n               \"self\"\n            ],\n            \"get_n_splits\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ],\n            \"split\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ]\n         }\n      },\n      \"sklearn.model_selection.tests.common\": {\n         \"OneTimeSplitter\": {\n            \"__init__\": [\n               \"self\",\n               \"n_splits\",\n               \"n_samples\"\n            ],\n            \"get_n_splits\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ],\n            \"split\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"groups\"\n            ]\n         }\n      },\n      \"sklearn.model_selection.tests.test_search\": {\n         \"BrokenClassifier\": {\n            \"__init__\": [\n               \"self\",\n               \"parameter\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"FailingClassifier\": {\n            \"__init__\": [\n               \"self\",\n               \"parameter\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"score\": [\n               \"self\",\n               \"X\",\n               \"Y\"\n            ]\n         },\n         \"LinearSVCNoScore\": {\n            \"score\": [\n               \"self\"\n            ]\n         },\n         \"MockClassifier\": {\n            \"__init__\": [\n               \"self\",\n               \"foo_param\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"Y\"\n            ],\n            \"get_params\": [\n               \"self\",\n               \"deep\"\n            ],\n            \"inverse_transform\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"T\"\n            ],\n            \"score\": [\n               \"self\",\n               \"X\",\n               \"Y\"\n            ],\n            \"set_params\": [\n               \"self\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.model_selection.tests.test_split\": {\n         \"MockClassifier\": {\n            \"__init__\": [\n               \"self\",\n               \"a\",\n               \"allow_nd\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"Y\",\n               \"sample_weight\",\n               \"class_prior\",\n               \"sparse_sample_weight\",\n               \"sparse_param\",\n               \"dummy_int\",\n               \"dummy_str\",\n               \"dummy_obj\",\n               \"callback\"\n            ],\n            \"get_params\": [\n               \"self\",\n               \"deep\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"T\"\n            ],\n            \"score\": [\n               \"self\",\n               \"X\",\n               \"Y\"\n            ]\n         }\n      },\n      \"sklearn.model_selection.tests.test_validation\": {\n         \"MockClassifier\": {\n            \"__init__\": [\n               \"self\",\n               \"a\",\n               \"allow_nd\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"Y\",\n               \"sample_weight\",\n               \"class_prior\",\n               \"sparse_sample_weight\",\n               \"sparse_param\",\n               \"dummy_int\",\n               \"dummy_str\",\n               \"dummy_obj\",\n               \"callback\"\n            ],\n            \"get_params\": [\n               \"self\",\n               \"deep\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"T\"\n            ],\n            \"score\": [\n               \"self\",\n               \"X\",\n               \"Y\"\n            ]\n         },\n         \"MockEstimatorWithParameter\": {\n            \"__init__\": [\n               \"self\",\n               \"param\"\n            ],\n            \"_is_training_data\": [\n               \"self\",\n               \"X\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X_subset\",\n               \"y_subset\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"score\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"MockEstimatorWithSingleFitCallAllowed\": {\n            \"fit\": [\n               \"self\",\n               \"X_subset\",\n               \"y_subset\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"MockImprovingEstimator\": {\n            \"__init__\": [\n               \"self\",\n               \"n_max_train_sizes\"\n            ],\n            \"_is_training_data\": [\n               \"self\",\n               \"X\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X_subset\",\n               \"y_subset\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"score\": [\n               \"self\",\n               \"X\",\n               \"Y\"\n            ]\n         },\n         \"MockIncrementalImprovingEstimator\": {\n            \"__init__\": [\n               \"self\",\n               \"n_max_train_sizes\"\n            ],\n            \"_is_training_data\": [\n               \"self\",\n               \"X\"\n            ],\n            \"partial_fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"RFWithDecisionFunction\": {\n            \"decision_function\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.multiclass\": {\n         \"OneVsOneClassifier\": {\n            \"__init__\": [\n               \"self\",\n               \"estimator\",\n               \"n_jobs\"\n            ],\n            \"_pairwise\": [\n               \"self\"\n            ],\n            \"decision_function\": [\n               \"self\",\n               \"X\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"n_classes_\": [\n               \"self\"\n            ],\n            \"partial_fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"classes\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"OneVsRestClassifier\": {\n            \"__init__\": [\n               \"self\",\n               \"estimator\",\n               \"n_jobs\"\n            ],\n            \"_first_estimator\": [\n               \"self\"\n            ],\n            \"_pairwise\": [\n               \"self\"\n            ],\n            \"coef_\": [\n               \"self\"\n            ],\n            \"decision_function\": [\n               \"self\",\n               \"X\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"intercept_\": [\n               \"self\"\n            ],\n            \"multilabel_\": [\n               \"self\"\n            ],\n            \"n_classes_\": [\n               \"self\"\n            ],\n            \"partial_fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"classes\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_proba\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"OutputCodeClassifier\": {\n            \"__init__\": [\n               \"self\",\n               \"estimator\",\n               \"code_size\",\n               \"random_state\",\n               \"n_jobs\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"_ConstantPredictor\": {\n            \"decision_function\": [\n               \"self\",\n               \"X\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_proba\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.multioutput\": {\n         \"ClassifierChain\": {\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"decision_function\": [\n               \"self\",\n               \"X\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"Y\"\n            ],\n            \"predict_proba\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"MultiOutputClassifier\": {\n            \"__init__\": [\n               \"self\",\n               \"estimator\",\n               \"n_jobs\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"_predict_proba\": [\n               \"self\",\n               \"X\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"Y\",\n               \"sample_weight\"\n            ],\n            \"predict_proba\": [\n               \"self\"\n            ],\n            \"score\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"MultiOutputEstimator\": {},\n         \"MultiOutputRegressor\": {\n            \"__init__\": [\n               \"self\",\n               \"estimator\",\n               \"n_jobs\"\n            ],\n            \"partial_fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"score\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ]\n         },\n         \"RegressorChain\": {\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"Y\"\n            ]\n         },\n         \"_BaseChain\": {\n            \"__init__\": [\n               \"self\",\n               \"base_estimator\",\n               \"order\",\n               \"cv\",\n               \"random_state\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"Y\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"_MultiOutputEstimator\": {\n            \"__init__\": [\n               \"self\",\n               \"estimator\",\n               \"n_jobs\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"partial_fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"classes\",\n               \"sample_weight\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.naive_bayes\": {\n         \"BaseDiscreteNB\": {},\n         \"BaseNB\": {},\n         \"BernoulliNB\": {\n            \"__init__\": [\n               \"self\",\n               \"alpha\",\n               \"binarize\",\n               \"fit_prior\",\n               \"class_prior\"\n            ],\n            \"_check_X\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_check_X_y\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"_count\": [\n               \"self\",\n               \"X\",\n               \"Y\"\n            ],\n            \"_joint_log_likelihood\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_update_feature_log_prob\": [\n               \"self\",\n               \"alpha\"\n            ]\n         },\n         \"CategoricalNB\": {\n            \"__init__\": [\n               \"self\",\n               \"alpha\",\n               \"fit_prior\",\n               \"class_prior\"\n            ],\n            \"_check_X\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_check_X_y\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"_count\": [\n               \"self\",\n               \"X\",\n               \"Y\"\n            ],\n            \"_init_counters\": [\n               \"self\",\n               \"n_effective_classes\",\n               \"n_features\"\n            ],\n            \"_joint_log_likelihood\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_update_feature_log_prob\": [\n               \"self\",\n               \"alpha\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"partial_fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"classes\",\n               \"sample_weight\"\n            ]\n         },\n         \"ComplementNB\": {\n            \"__init__\": [\n               \"self\",\n               \"alpha\",\n               \"fit_prior\",\n               \"class_prior\",\n               \"norm\"\n            ],\n            \"_count\": [\n               \"self\",\n               \"X\",\n               \"Y\"\n            ],\n            \"_joint_log_likelihood\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"_update_feature_log_prob\": [\n               \"self\",\n               \"alpha\"\n            ]\n         },\n         \"GaussianNB\": {\n            \"__init__\": [\n               \"self\",\n               \"priors\",\n               \"var_smoothing\"\n            ],\n            \"_check_X\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_joint_log_likelihood\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_partial_fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"classes\",\n               \"_refit\",\n               \"sample_weight\"\n            ],\n            \"_update_mean_variance\": [\n               \"n_past\",\n               \"mu\",\n               \"var\",\n               \"X\",\n               \"sample_weight\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"partial_fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"classes\",\n               \"sample_weight\"\n            ]\n         },\n         \"MultinomialNB\": {\n            \"__init__\": [\n               \"self\",\n               \"alpha\",\n               \"fit_prior\",\n               \"class_prior\"\n            ],\n            \"_count\": [\n               \"self\",\n               \"X\",\n               \"Y\"\n            ],\n            \"_joint_log_likelihood\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"_update_feature_log_prob\": [\n               \"self\",\n               \"alpha\"\n            ]\n         },\n         \"_BaseDiscreteNB\": {\n            \"_check_X\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_check_X_y\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"_check_alpha\": [\n               \"self\"\n            ],\n            \"_get_coef\": [\n               \"self\"\n            ],\n            \"_get_intercept\": [\n               \"self\"\n            ],\n            \"_init_counters\": [\n               \"self\",\n               \"n_effective_classes\",\n               \"n_features\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"_update_class_log_prior\": [\n               \"self\",\n               \"class_prior\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"partial_fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"classes\",\n               \"sample_weight\"\n            ]\n         },\n         \"_BaseNB\": {\n            \"_check_X\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_joint_log_likelihood\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_log_proba\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_proba\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.neighbors._base\": {\n         \"KNeighborsMixin\": {\n            \"_kneighbors_reduce_func\": [\n               \"self\",\n               \"dist\",\n               \"start\",\n               \"n_neighbors\",\n               \"return_distance\"\n            ],\n            \"kneighbors\": [\n               \"self\",\n               \"X\",\n               \"n_neighbors\",\n               \"return_distance\"\n            ],\n            \"kneighbors_graph\": [\n               \"self\",\n               \"X\",\n               \"n_neighbors\",\n               \"mode\"\n            ]\n         },\n         \"NeighborsBase\": {\n            \"__init__\": [\n               \"self\",\n               \"n_neighbors\",\n               \"radius\",\n               \"algorithm\",\n               \"leaf_size\",\n               \"metric\",\n               \"p\",\n               \"metric_params\",\n               \"n_jobs\"\n            ],\n            \"_check_algorithm_metric\": [\n               \"self\"\n            ],\n            \"_fit\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_pairwise\": [\n               \"self\"\n            ]\n         },\n         \"RadiusNeighborsMixin\": {\n            \"_radius_neighbors_reduce_func\": [\n               \"self\",\n               \"dist\",\n               \"start\",\n               \"radius\",\n               \"return_distance\"\n            ],\n            \"radius_neighbors\": [\n               \"self\",\n               \"X\",\n               \"radius\",\n               \"return_distance\",\n               \"sort_results\"\n            ],\n            \"radius_neighbors_graph\": [\n               \"self\",\n               \"X\",\n               \"radius\",\n               \"mode\",\n               \"sort_results\"\n            ]\n         },\n         \"SupervisedFloatMixin\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"SupervisedIntegerMixin\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"UnsupervisedMixin\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         }\n      },\n      \"sklearn.neighbors._classification\": {\n         \"KNeighborsClassifier\": {\n            \"__init__\": [\n               \"self\",\n               \"n_neighbors\",\n               \"weights\",\n               \"algorithm\",\n               \"leaf_size\",\n               \"p\",\n               \"metric\",\n               \"metric_params\",\n               \"n_jobs\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_proba\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"RadiusNeighborsClassifier\": {\n            \"__init__\": [\n               \"self\",\n               \"radius\",\n               \"weights\",\n               \"algorithm\",\n               \"leaf_size\",\n               \"p\",\n               \"metric\",\n               \"outlier_label\",\n               \"metric_params\",\n               \"n_jobs\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_proba\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.neighbors._graph\": {\n         \"KNeighborsTransformer\": {\n            \"__init__\": [\n               \"self\",\n               \"mode\",\n               \"n_neighbors\",\n               \"algorithm\",\n               \"leaf_size\",\n               \"metric\",\n               \"p\",\n               \"metric_params\",\n               \"n_jobs\"\n            ],\n            \"fit_transform\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"RadiusNeighborsTransformer\": {\n            \"__init__\": [\n               \"self\",\n               \"mode\",\n               \"radius\",\n               \"algorithm\",\n               \"leaf_size\",\n               \"metric\",\n               \"p\",\n               \"metric_params\",\n               \"n_jobs\"\n            ],\n            \"fit_transform\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.neighbors._kde\": {\n         \"KernelDensity\": {\n            \"__init__\": [\n               \"self\",\n               \"bandwidth\",\n               \"algorithm\",\n               \"kernel\",\n               \"metric\",\n               \"atol\",\n               \"rtol\",\n               \"breadth_first\",\n               \"leaf_size\",\n               \"metric_params\"\n            ],\n            \"_choose_algorithm\": [\n               \"self\",\n               \"algorithm\",\n               \"metric\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"sample\": [\n               \"self\",\n               \"n_samples\",\n               \"random_state\"\n            ],\n            \"score\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"score_samples\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.neighbors._lof\": {\n         \"LocalOutlierFactor\": {\n            \"__init__\": [\n               \"self\",\n               \"n_neighbors\",\n               \"algorithm\",\n               \"leaf_size\",\n               \"metric\",\n               \"p\",\n               \"metric_params\",\n               \"contamination\",\n               \"novelty\",\n               \"n_jobs\"\n            ],\n            \"_decision_function\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_fit_predict\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"_local_reachability_density\": [\n               \"self\",\n               \"distances_X\",\n               \"neighbors_indices\"\n            ],\n            \"_predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_score_samples\": [\n               \"self\",\n               \"X\"\n            ],\n            \"decision_function\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"fit_predict\": [\n               \"self\"\n            ],\n            \"predict\": [\n               \"self\"\n            ],\n            \"score_samples\": [\n               \"self\"\n            ]\n         }\n      },\n      \"sklearn.neighbors._nca\": {\n         \"NeighborhoodComponentsAnalysis\": {\n            \"__init__\": [\n               \"self\",\n               \"n_components\",\n               \"init\",\n               \"warm_start\",\n               \"max_iter\",\n               \"tol\",\n               \"callback\",\n               \"verbose\",\n               \"random_state\"\n            ],\n            \"_callback\": [\n               \"self\",\n               \"transformation\"\n            ],\n            \"_initialize\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"init\"\n            ],\n            \"_loss_grad_lbfgs\": [\n               \"self\",\n               \"transformation\",\n               \"X\",\n               \"same_class_mask\",\n               \"sign\"\n            ],\n            \"_validate_params\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.neighbors._nearest_centroid\": {\n         \"NearestCentroid\": {\n            \"__init__\": [\n               \"self\",\n               \"metric\",\n               \"shrink_threshold\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.neighbors._regression\": {\n         \"KNeighborsRegressor\": {\n            \"__init__\": [\n               \"self\",\n               \"n_neighbors\",\n               \"weights\",\n               \"algorithm\",\n               \"leaf_size\",\n               \"p\",\n               \"metric\",\n               \"metric_params\",\n               \"n_jobs\"\n            ],\n            \"_pairwise\": [\n               \"self\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"RadiusNeighborsRegressor\": {\n            \"__init__\": [\n               \"self\",\n               \"radius\",\n               \"weights\",\n               \"algorithm\",\n               \"leaf_size\",\n               \"p\",\n               \"metric\",\n               \"metric_params\",\n               \"n_jobs\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.neighbors._unsupervised\": {\n         \"NearestNeighbors\": {\n            \"__init__\": [\n               \"self\",\n               \"n_neighbors\",\n               \"radius\",\n               \"algorithm\",\n               \"leaf_size\",\n               \"metric\",\n               \"p\",\n               \"metric_params\",\n               \"n_jobs\"\n            ]\n         }\n      },\n      \"sklearn.neural_network._multilayer_perceptron\": {\n         \"BaseMultilayerPerceptron\": {\n            \"__init__\": [\n               \"self\",\n               \"hidden_layer_sizes\",\n               \"activation\",\n               \"solver\",\n               \"alpha\",\n               \"batch_size\",\n               \"learning_rate\",\n               \"learning_rate_init\",\n               \"power_t\",\n               \"max_iter\",\n               \"loss\",\n               \"shuffle\",\n               \"random_state\",\n               \"tol\",\n               \"verbose\",\n               \"warm_start\",\n               \"momentum\",\n               \"nesterovs_momentum\",\n               \"early_stopping\",\n               \"validation_fraction\",\n               \"beta_1\",\n               \"beta_2\",\n               \"epsilon\",\n               \"n_iter_no_change\",\n               \"max_fun\"\n            ],\n            \"_backprop\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"activations\",\n               \"deltas\",\n               \"coef_grads\",\n               \"intercept_grads\"\n            ],\n            \"_compute_loss_grad\": [\n               \"self\",\n               \"layer\",\n               \"n_samples\",\n               \"activations\",\n               \"deltas\",\n               \"coef_grads\",\n               \"intercept_grads\"\n            ],\n            \"_fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"incremental\"\n            ],\n            \"_fit_lbfgs\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"activations\",\n               \"deltas\",\n               \"coef_grads\",\n               \"intercept_grads\",\n               \"layer_units\"\n            ],\n            \"_fit_stochastic\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"activations\",\n               \"deltas\",\n               \"coef_grads\",\n               \"intercept_grads\",\n               \"layer_units\",\n               \"incremental\"\n            ],\n            \"_forward_pass\": [\n               \"self\",\n               \"activations\"\n            ],\n            \"_init_coef\": [\n               \"self\",\n               \"fan_in\",\n               \"fan_out\"\n            ],\n            \"_initialize\": [\n               \"self\",\n               \"y\",\n               \"layer_units\"\n            ],\n            \"_loss_grad_lbfgs\": [\n               \"self\",\n               \"packed_coef_inter\",\n               \"X\",\n               \"y\",\n               \"activations\",\n               \"deltas\",\n               \"coef_grads\",\n               \"intercept_grads\"\n            ],\n            \"_partial_fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"_predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_unpack\": [\n               \"self\",\n               \"packed_parameters\"\n            ],\n            \"_update_no_improvement_count\": [\n               \"self\",\n               \"early_stopping\",\n               \"X_val\",\n               \"y_val\"\n            ],\n            \"_validate_hyperparameters\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"partial_fit\": [\n               \"self\"\n            ]\n         },\n         \"MLPClassifier\": {\n            \"__init__\": [\n               \"self\",\n               \"hidden_layer_sizes\",\n               \"activation\",\n               \"solver\",\n               \"alpha\",\n               \"batch_size\",\n               \"learning_rate\",\n               \"learning_rate_init\",\n               \"power_t\",\n               \"max_iter\",\n               \"shuffle\",\n               \"random_state\",\n               \"tol\",\n               \"verbose\",\n               \"warm_start\",\n               \"momentum\",\n               \"nesterovs_momentum\",\n               \"early_stopping\",\n               \"validation_fraction\",\n               \"beta_1\",\n               \"beta_2\",\n               \"epsilon\",\n               \"n_iter_no_change\",\n               \"max_fun\"\n            ],\n            \"_partial_fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"classes\"\n            ],\n            \"_validate_input\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"incremental\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"partial_fit\": [\n               \"self\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_log_proba\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_proba\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"MLPRegressor\": {\n            \"__init__\": [\n               \"self\",\n               \"hidden_layer_sizes\",\n               \"activation\",\n               \"solver\",\n               \"alpha\",\n               \"batch_size\",\n               \"learning_rate\",\n               \"learning_rate_init\",\n               \"power_t\",\n               \"max_iter\",\n               \"shuffle\",\n               \"random_state\",\n               \"tol\",\n               \"verbose\",\n               \"warm_start\",\n               \"momentum\",\n               \"nesterovs_momentum\",\n               \"early_stopping\",\n               \"validation_fraction\",\n               \"beta_1\",\n               \"beta_2\",\n               \"epsilon\",\n               \"n_iter_no_change\",\n               \"max_fun\"\n            ],\n            \"_validate_input\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"incremental\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.neural_network._rbm\": {\n         \"BernoulliRBM\": {\n            \"__init__\": [\n               \"self\",\n               \"n_components\",\n               \"learning_rate\",\n               \"batch_size\",\n               \"n_iter\",\n               \"verbose\",\n               \"random_state\"\n            ],\n            \"_fit\": [\n               \"self\",\n               \"v_pos\",\n               \"rng\"\n            ],\n            \"_free_energy\": [\n               \"self\",\n               \"v\"\n            ],\n            \"_mean_hiddens\": [\n               \"self\",\n               \"v\"\n            ],\n            \"_sample_hiddens\": [\n               \"self\",\n               \"v\",\n               \"rng\"\n            ],\n            \"_sample_visibles\": [\n               \"self\",\n               \"h\",\n               \"rng\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"gibbs\": [\n               \"self\",\n               \"v\"\n            ],\n            \"partial_fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"score_samples\": [\n               \"self\",\n               \"X\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.neural_network._stochastic_optimizers\": {\n         \"AdamOptimizer\": {\n            \"__init__\": [\n               \"self\",\n               \"params\",\n               \"learning_rate_init\",\n               \"beta_1\",\n               \"beta_2\",\n               \"epsilon\"\n            ],\n            \"_get_updates\": [\n               \"self\",\n               \"grads\"\n            ]\n         },\n         \"BaseOptimizer\": {\n            \"__init__\": [\n               \"self\",\n               \"params\",\n               \"learning_rate_init\"\n            ],\n            \"iteration_ends\": [\n               \"self\",\n               \"time_step\"\n            ],\n            \"trigger_stopping\": [\n               \"self\",\n               \"msg\",\n               \"verbose\"\n            ],\n            \"update_params\": [\n               \"self\",\n               \"grads\"\n            ]\n         },\n         \"SGDOptimizer\": {\n            \"__init__\": [\n               \"self\",\n               \"params\",\n               \"learning_rate_init\",\n               \"lr_schedule\",\n               \"momentum\",\n               \"nesterov\",\n               \"power_t\"\n            ],\n            \"_get_updates\": [\n               \"self\",\n               \"grads\"\n            ],\n            \"iteration_ends\": [\n               \"self\",\n               \"time_step\"\n            ],\n            \"trigger_stopping\": [\n               \"self\",\n               \"msg\",\n               \"verbose\"\n            ]\n         }\n      },\n      \"sklearn.pipeline\": {\n         \"FeatureUnion\": {\n            \"__init__\": [\n               \"self\",\n               \"transformer_list\",\n               \"n_jobs\",\n               \"transformer_weights\",\n               \"verbose\"\n            ],\n            \"_iter\": [\n               \"self\"\n            ],\n            \"_log_message\": [\n               \"self\",\n               \"name\",\n               \"idx\",\n               \"total\"\n            ],\n            \"_parallel_func\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"fit_params\",\n               \"func\"\n            ],\n            \"_update_transformer_list\": [\n               \"self\",\n               \"transformers\"\n            ],\n            \"_validate_transformers\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"fit_transform\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"get_feature_names\": [\n               \"self\"\n            ],\n            \"get_params\": [\n               \"self\",\n               \"deep\"\n            ],\n            \"set_params\": [\n               \"self\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"Pipeline\": {\n            \"__getitem__\": [\n               \"self\",\n               \"ind\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"steps\",\n               \"memory\",\n               \"verbose\"\n            ],\n            \"__len__\": [\n               \"self\"\n            ],\n            \"_estimator_type\": [\n               \"self\"\n            ],\n            \"_final_estimator\": [\n               \"self\"\n            ],\n            \"_fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"_inverse_transform\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_iter\": [\n               \"self\",\n               \"with_final\",\n               \"filter_passthrough\"\n            ],\n            \"_log_message\": [\n               \"self\",\n               \"step_idx\"\n            ],\n            \"_pairwise\": [\n               \"self\"\n            ],\n            \"_transform\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_validate_steps\": [\n               \"self\"\n            ],\n            \"classes_\": [\n               \"self\"\n            ],\n            \"decision_function\": [\n               \"self\",\n               \"X\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"fit_predict\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"fit_transform\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"get_params\": [\n               \"self\",\n               \"deep\"\n            ],\n            \"inverse_transform\": [\n               \"self\"\n            ],\n            \"named_steps\": [\n               \"self\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_log_proba\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_proba\": [\n               \"self\",\n               \"X\"\n            ],\n            \"score\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"score_samples\": [\n               \"self\",\n               \"X\"\n            ],\n            \"set_params\": [\n               \"self\"\n            ],\n            \"transform\": [\n               \"self\"\n            ]\n         }\n      },\n      \"sklearn.preprocessing._data\": {\n         \"Binarizer\": {\n            \"__init__\": [\n               \"self\",\n               \"threshold\",\n               \"copy\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\",\n               \"copy\"\n            ]\n         },\n         \"KernelCenterer\": {\n            \"__init__\": [\n               \"self\"\n            ],\n            \"_pairwise\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"K\",\n               \"y\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"K\",\n               \"copy\"\n            ]\n         },\n         \"MaxAbsScaler\": {\n            \"__init__\": [\n               \"self\",\n               \"copy\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"_reset\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"inverse_transform\": [\n               \"self\",\n               \"X\"\n            ],\n            \"partial_fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"MinMaxScaler\": {\n            \"__init__\": [\n               \"self\",\n               \"feature_range\",\n               \"copy\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"_reset\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"inverse_transform\": [\n               \"self\",\n               \"X\"\n            ],\n            \"partial_fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"Normalizer\": {\n            \"__init__\": [\n               \"self\",\n               \"norm\",\n               \"copy\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\",\n               \"copy\"\n            ]\n         },\n         \"PolynomialFeatures\": {\n            \"__init__\": [\n               \"self\",\n               \"degree\",\n               \"interaction_only\",\n               \"include_bias\",\n               \"order\"\n            ],\n            \"_combinations\": [\n               \"n_features\",\n               \"degree\",\n               \"interaction_only\",\n               \"include_bias\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"get_feature_names\": [\n               \"self\",\n               \"input_features\"\n            ],\n            \"powers_\": [\n               \"self\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"PowerTransformer\": {\n            \"__init__\": [\n               \"self\",\n               \"method\",\n               \"standardize\",\n               \"copy\"\n            ],\n            \"_box_cox_inverse_tranform\": [\n               \"self\",\n               \"x\",\n               \"lmbda\"\n            ],\n            \"_box_cox_optimize\": [\n               \"self\",\n               \"x\"\n            ],\n            \"_check_input\": [\n               \"self\",\n               \"X\",\n               \"check_positive\",\n               \"check_shape\",\n               \"check_method\"\n            ],\n            \"_fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"force_transform\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"_yeo_johnson_inverse_transform\": [\n               \"self\",\n               \"x\",\n               \"lmbda\"\n            ],\n            \"_yeo_johnson_optimize\": [\n               \"self\",\n               \"x\"\n            ],\n            \"_yeo_johnson_transform\": [\n               \"self\",\n               \"x\",\n               \"lmbda\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"fit_transform\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"inverse_transform\": [\n               \"self\",\n               \"X\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"QuantileTransformer\": {\n            \"__init__\": [\n               \"self\",\n               \"n_quantiles\",\n               \"output_distribution\",\n               \"ignore_implicit_zeros\",\n               \"subsample\",\n               \"random_state\",\n               \"copy\"\n            ],\n            \"_check_inputs\": [\n               \"self\",\n               \"X\",\n               \"accept_sparse_negative\",\n               \"copy\"\n            ],\n            \"_check_is_fitted\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_dense_fit\": [\n               \"self\",\n               \"X\",\n               \"random_state\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"_sparse_fit\": [\n               \"self\",\n               \"X\",\n               \"random_state\"\n            ],\n            \"_transform\": [\n               \"self\",\n               \"X\",\n               \"inverse\"\n            ],\n            \"_transform_col\": [\n               \"self\",\n               \"X_col\",\n               \"quantiles\",\n               \"inverse\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"inverse_transform\": [\n               \"self\",\n               \"X\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"RobustScaler\": {\n            \"__init__\": [\n               \"self\",\n               \"with_centering\",\n               \"with_scaling\",\n               \"quantile_range\",\n               \"copy\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"inverse_transform\": [\n               \"self\",\n               \"X\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"StandardScaler\": {\n            \"__init__\": [\n               \"self\",\n               \"copy\",\n               \"with_mean\",\n               \"with_std\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"_reset\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"inverse_transform\": [\n               \"self\",\n               \"X\",\n               \"copy\"\n            ],\n            \"partial_fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\",\n               \"copy\"\n            ]\n         }\n      },\n      \"sklearn.preprocessing._discretization\": {\n         \"KBinsDiscretizer\": {\n            \"__init__\": [\n               \"self\",\n               \"n_bins\",\n               \"encode\",\n               \"strategy\"\n            ],\n            \"_validate_n_bins\": [\n               \"self\",\n               \"n_features\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"inverse_transform\": [\n               \"self\",\n               \"Xt\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.preprocessing._encoders\": {\n         \"OneHotEncoder\": {\n            \"__init__\": [\n               \"self\",\n               \"categories\",\n               \"drop\",\n               \"sparse\",\n               \"dtype\",\n               \"handle_unknown\"\n            ],\n            \"_compute_drop_idx\": [\n               \"self\"\n            ],\n            \"_validate_keywords\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"fit_transform\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"get_feature_names\": [\n               \"self\",\n               \"input_features\"\n            ],\n            \"inverse_transform\": [\n               \"self\",\n               \"X\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"OrdinalEncoder\": {\n            \"__init__\": [\n               \"self\",\n               \"categories\",\n               \"dtype\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"inverse_transform\": [\n               \"self\",\n               \"X\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"_BaseEncoder\": {\n            \"_check_X\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_fit\": [\n               \"self\",\n               \"X\",\n               \"handle_unknown\"\n            ],\n            \"_get_feature\": [\n               \"self\",\n               \"X\",\n               \"feature_idx\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"_transform\": [\n               \"self\",\n               \"X\",\n               \"handle_unknown\"\n            ]\n         }\n      },\n      \"sklearn.preprocessing._function_transformer\": {\n         \"FunctionTransformer\": {\n            \"__init__\": [\n               \"self\",\n               \"func\",\n               \"inverse_func\",\n               \"validate\",\n               \"accept_sparse\",\n               \"check_inverse\",\n               \"kw_args\",\n               \"inv_kw_args\"\n            ],\n            \"_check_input\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_check_inverse_transform\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"_transform\": [\n               \"self\",\n               \"X\",\n               \"func\",\n               \"kw_args\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"inverse_transform\": [\n               \"self\",\n               \"X\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.preprocessing._label\": {\n         \"LabelBinarizer\": {\n            \"__init__\": [\n               \"self\",\n               \"neg_label\",\n               \"pos_label\",\n               \"sparse_output\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"y\"\n            ],\n            \"fit_transform\": [\n               \"self\",\n               \"y\"\n            ],\n            \"inverse_transform\": [\n               \"self\",\n               \"Y\",\n               \"threshold\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"y\"\n            ]\n         },\n         \"LabelEncoder\": {\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"y\"\n            ],\n            \"fit_transform\": [\n               \"self\",\n               \"y\"\n            ],\n            \"inverse_transform\": [\n               \"self\",\n               \"y\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"y\"\n            ]\n         },\n         \"MultiLabelBinarizer\": {\n            \"__init__\": [\n               \"self\",\n               \"classes\",\n               \"sparse_output\"\n            ],\n            \"_build_cache\": [\n               \"self\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"_transform\": [\n               \"self\",\n               \"y\",\n               \"class_mapping\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"y\"\n            ],\n            \"fit_transform\": [\n               \"self\",\n               \"y\"\n            ],\n            \"inverse_transform\": [\n               \"self\",\n               \"yt\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"y\"\n            ]\n         }\n      },\n      \"sklearn.random_projection\": {\n         \"BaseRandomProjection\": {\n            \"__init__\": [\n               \"self\",\n               \"n_components\",\n               \"eps\",\n               \"dense_output\",\n               \"random_state\"\n            ],\n            \"_make_random_matrix\": [\n               \"self\",\n               \"n_components\",\n               \"n_features\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"GaussianRandomProjection\": {\n            \"__init__\": [\n               \"self\",\n               \"n_components\",\n               \"eps\",\n               \"random_state\"\n            ],\n            \"_make_random_matrix\": [\n               \"self\",\n               \"n_components\",\n               \"n_features\"\n            ]\n         },\n         \"SparseRandomProjection\": {\n            \"__init__\": [\n               \"self\",\n               \"n_components\",\n               \"density\",\n               \"eps\",\n               \"dense_output\",\n               \"random_state\"\n            ],\n            \"_make_random_matrix\": [\n               \"self\",\n               \"n_components\",\n               \"n_features\"\n            ]\n         }\n      },\n      \"sklearn.semi_supervised._label_propagation\": {\n         \"BaseLabelPropagation\": {\n            \"__init__\": [\n               \"self\",\n               \"kernel\",\n               \"gamma\",\n               \"n_neighbors\",\n               \"alpha\",\n               \"max_iter\",\n               \"tol\",\n               \"n_jobs\"\n            ],\n            \"_build_graph\": [\n               \"self\"\n            ],\n            \"_get_kernel\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_proba\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"LabelPropagation\": {\n            \"__init__\": [\n               \"self\",\n               \"kernel\",\n               \"gamma\",\n               \"n_neighbors\",\n               \"max_iter\",\n               \"tol\",\n               \"n_jobs\"\n            ],\n            \"_build_graph\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"LabelSpreading\": {\n            \"__init__\": [\n               \"self\",\n               \"kernel\",\n               \"gamma\",\n               \"n_neighbors\",\n               \"alpha\",\n               \"max_iter\",\n               \"tol\",\n               \"n_jobs\"\n            ],\n            \"_build_graph\": [\n               \"self\"\n            ]\n         }\n      },\n      \"sklearn.svm._base\": {\n         \"BaseLibSVM\": {\n            \"__init__\": [\n               \"self\",\n               \"kernel\",\n               \"degree\",\n               \"gamma\",\n               \"coef0\",\n               \"tol\",\n               \"C\",\n               \"nu\",\n               \"epsilon\",\n               \"shrinking\",\n               \"probability\",\n               \"cache_size\",\n               \"class_weight\",\n               \"verbose\",\n               \"max_iter\",\n               \"random_state\"\n            ],\n            \"_compute_kernel\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_decision_function\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_dense_decision_function\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_dense_fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\",\n               \"solver_type\",\n               \"kernel\",\n               \"random_seed\"\n            ],\n            \"_dense_predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_get_coef\": [\n               \"self\"\n            ],\n            \"_pairwise\": [\n               \"self\"\n            ],\n            \"_sparse_decision_function\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_sparse_fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\",\n               \"solver_type\",\n               \"kernel\",\n               \"random_seed\"\n            ],\n            \"_sparse_predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_validate_for_predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_validate_targets\": [\n               \"self\",\n               \"y\"\n            ],\n            \"_warn_from_fit_status\": [\n               \"self\"\n            ],\n            \"coef_\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"n_support_\": [\n               \"self\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"BaseSVC\": {\n            \"__init__\": [\n               \"self\",\n               \"kernel\",\n               \"degree\",\n               \"gamma\",\n               \"coef0\",\n               \"tol\",\n               \"C\",\n               \"nu\",\n               \"shrinking\",\n               \"probability\",\n               \"cache_size\",\n               \"class_weight\",\n               \"verbose\",\n               \"max_iter\",\n               \"decision_function_shape\",\n               \"random_state\",\n               \"break_ties\"\n            ],\n            \"_check_proba\": [\n               \"self\"\n            ],\n            \"_dense_predict_proba\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_get_coef\": [\n               \"self\"\n            ],\n            \"_predict_log_proba\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_predict_proba\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_sparse_predict_proba\": [\n               \"self\",\n               \"X\"\n            ],\n            \"_validate_targets\": [\n               \"self\",\n               \"y\"\n            ],\n            \"decision_function\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_log_proba\": [\n               \"self\"\n            ],\n            \"predict_proba\": [\n               \"self\"\n            ]\n         }\n      },\n      \"sklearn.svm._classes\": {\n         \"LinearSVC\": {\n            \"__init__\": [\n               \"self\",\n               \"penalty\",\n               \"loss\",\n               \"dual\",\n               \"tol\",\n               \"C\",\n               \"multi_class\",\n               \"fit_intercept\",\n               \"intercept_scaling\",\n               \"class_weight\",\n               \"verbose\",\n               \"random_state\",\n               \"max_iter\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ]\n         },\n         \"LinearSVR\": {\n            \"__init__\": [\n               \"self\",\n               \"epsilon\",\n               \"tol\",\n               \"C\",\n               \"loss\",\n               \"fit_intercept\",\n               \"intercept_scaling\",\n               \"dual\",\n               \"verbose\",\n               \"random_state\",\n               \"max_iter\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ]\n         },\n         \"NuSVC\": {\n            \"__init__\": [\n               \"self\",\n               \"nu\",\n               \"kernel\",\n               \"degree\",\n               \"gamma\",\n               \"coef0\",\n               \"shrinking\",\n               \"probability\",\n               \"tol\",\n               \"cache_size\",\n               \"class_weight\",\n               \"verbose\",\n               \"max_iter\",\n               \"decision_function_shape\",\n               \"break_ties\",\n               \"random_state\"\n            ]\n         },\n         \"NuSVR\": {\n            \"__init__\": [\n               \"self\",\n               \"nu\",\n               \"C\",\n               \"kernel\",\n               \"degree\",\n               \"gamma\",\n               \"coef0\",\n               \"shrinking\",\n               \"tol\",\n               \"cache_size\",\n               \"verbose\",\n               \"max_iter\"\n            ]\n         },\n         \"OneClassSVM\": {\n            \"__init__\": [\n               \"self\",\n               \"kernel\",\n               \"degree\",\n               \"gamma\",\n               \"coef0\",\n               \"tol\",\n               \"nu\",\n               \"shrinking\",\n               \"cache_size\",\n               \"verbose\",\n               \"max_iter\"\n            ],\n            \"decision_function\": [\n               \"self\",\n               \"X\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"score_samples\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"SVC\": {\n            \"__init__\": [\n               \"self\",\n               \"C\",\n               \"kernel\",\n               \"degree\",\n               \"gamma\",\n               \"coef0\",\n               \"shrinking\",\n               \"probability\",\n               \"tol\",\n               \"cache_size\",\n               \"class_weight\",\n               \"verbose\",\n               \"max_iter\",\n               \"decision_function_shape\",\n               \"break_ties\",\n               \"random_state\"\n            ]\n         },\n         \"SVR\": {\n            \"__init__\": [\n               \"self\",\n               \"kernel\",\n               \"degree\",\n               \"gamma\",\n               \"coef0\",\n               \"tol\",\n               \"C\",\n               \"epsilon\",\n               \"shrinking\",\n               \"cache_size\",\n               \"verbose\",\n               \"max_iter\"\n            ]\n         }\n      },\n      \"sklearn.tests.test_base\": {\n         \"Buggy\": {\n            \"__init__\": [\n               \"self\",\n               \"a\"\n            ]\n         },\n         \"DiamondOverwriteTag\": {\n            \"_more_tags\": [\n               \"self\"\n            ]\n         },\n         \"DontPickleAttributeMixin\": {\n            \"__getstate__\": [\n               \"self\"\n            ],\n            \"__setstate__\": [\n               \"self\",\n               \"state\"\n            ]\n         },\n         \"InheritDiamondOverwriteTag\": {},\n         \"K\": {\n            \"__init__\": [\n               \"self\",\n               \"c\",\n               \"d\"\n            ]\n         },\n         \"ModifyInitParams\": {\n            \"__init__\": [\n               \"self\",\n               \"a\"\n            ]\n         },\n         \"MultiInheritanceEstimator\": {\n            \"__init__\": [\n               \"self\",\n               \"attribute_pickled\"\n            ]\n         },\n         \"MyEstimator\": {\n            \"__init__\": [\n               \"self\",\n               \"l1\",\n               \"empty\"\n            ]\n         },\n         \"NaNTag\": {\n            \"_more_tags\": [\n               \"self\"\n            ]\n         },\n         \"NoEstimator\": {\n            \"__init__\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"NoNaNTag\": {\n            \"_more_tags\": [\n               \"self\"\n            ]\n         },\n         \"OverrideTag\": {\n            \"_more_tags\": [\n               \"self\"\n            ]\n         },\n         \"SingleInheritanceEstimator\": {\n            \"__getstate__\": [\n               \"self\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"attribute_pickled\"\n            ]\n         },\n         \"T\": {\n            \"__init__\": [\n               \"self\",\n               \"a\",\n               \"b\"\n            ]\n         },\n         \"TreeBadVersion\": {\n            \"__getstate__\": [\n               \"self\"\n            ]\n         },\n         \"TreeNoVersion\": {\n            \"__getstate__\": [\n               \"self\"\n            ]\n         },\n         \"VargEstimator\": {\n            \"__init__\": [\n               \"self\"\n            ]\n         }\n      },\n      \"sklearn.tests.test_metaestimators\": {\n         \"DelegatorData\": {\n            \"__init__\": [\n               \"self\",\n               \"name\",\n               \"construct\",\n               \"skip_methods\",\n               \"fit_args\"\n            ]\n         }\n      },\n      \"sklearn.tests.test_pipeline\": {\n         \"DummyEstimatorParams\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\",\n               \"got_attribute\"\n            ]\n         },\n         \"DummyMemory\": {\n            \"cache\": [\n               \"self\",\n               \"func\"\n            ]\n         },\n         \"DummyTransf\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"FitParamT\": {\n            \"__init__\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"should_succeed\"\n            ],\n            \"fit_predict\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"should_succeed\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"score\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ]\n         },\n         \"Mult\": {\n            \"__init__\": [\n               \"self\",\n               \"mult\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"inverse_transform\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"score\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"NoFit\": {\n            \"__init__\": [\n               \"self\",\n               \"a\",\n               \"b\"\n            ]\n         },\n         \"NoInvTransf\": {\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"NoTrans\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"get_params\": [\n               \"self\",\n               \"deep\"\n            ],\n            \"set_params\": [\n               \"self\"\n            ]\n         },\n         \"Transf\": {\n            \"inverse_transform\": [\n               \"self\",\n               \"X\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"TransfFitParams\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"WrongDummyMemory\": {}\n      },\n      \"sklearn.tree._classes\": {\n         \"BaseDecisionTree\": {\n            \"__init__\": [\n               \"self\",\n               \"criterion\",\n               \"splitter\",\n               \"max_depth\",\n               \"min_samples_split\",\n               \"min_samples_leaf\",\n               \"min_weight_fraction_leaf\",\n               \"max_features\",\n               \"max_leaf_nodes\",\n               \"random_state\",\n               \"min_impurity_decrease\",\n               \"min_impurity_split\",\n               \"class_weight\",\n               \"presort\",\n               \"ccp_alpha\"\n            ],\n            \"_prune_tree\": [\n               \"self\"\n            ],\n            \"_validate_X_predict\": [\n               \"self\",\n               \"X\",\n               \"check_input\"\n            ],\n            \"apply\": [\n               \"self\",\n               \"X\",\n               \"check_input\"\n            ],\n            \"cost_complexity_pruning_path\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"decision_path\": [\n               \"self\",\n               \"X\",\n               \"check_input\"\n            ],\n            \"feature_importances_\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\",\n               \"check_input\",\n               \"X_idx_sorted\"\n            ],\n            \"get_depth\": [\n               \"self\"\n            ],\n            \"get_n_leaves\": [\n               \"self\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\",\n               \"check_input\"\n            ]\n         },\n         \"DecisionTreeClassifier\": {\n            \"__init__\": [\n               \"self\",\n               \"criterion\",\n               \"splitter\",\n               \"max_depth\",\n               \"min_samples_split\",\n               \"min_samples_leaf\",\n               \"min_weight_fraction_leaf\",\n               \"max_features\",\n               \"random_state\",\n               \"max_leaf_nodes\",\n               \"min_impurity_decrease\",\n               \"min_impurity_split\",\n               \"class_weight\",\n               \"presort\",\n               \"ccp_alpha\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\",\n               \"check_input\",\n               \"X_idx_sorted\"\n            ],\n            \"predict_log_proba\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_proba\": [\n               \"self\",\n               \"X\",\n               \"check_input\"\n            ]\n         },\n         \"DecisionTreeRegressor\": {\n            \"__init__\": [\n               \"self\",\n               \"criterion\",\n               \"splitter\",\n               \"max_depth\",\n               \"min_samples_split\",\n               \"min_samples_leaf\",\n               \"min_weight_fraction_leaf\",\n               \"max_features\",\n               \"random_state\",\n               \"max_leaf_nodes\",\n               \"min_impurity_decrease\",\n               \"min_impurity_split\",\n               \"presort\",\n               \"ccp_alpha\"\n            ],\n            \"classes_\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\",\n               \"check_input\",\n               \"X_idx_sorted\"\n            ],\n            \"n_classes_\": [\n               \"self\"\n            ]\n         },\n         \"ExtraTreeClassifier\": {\n            \"__init__\": [\n               \"self\",\n               \"criterion\",\n               \"splitter\",\n               \"max_depth\",\n               \"min_samples_split\",\n               \"min_samples_leaf\",\n               \"min_weight_fraction_leaf\",\n               \"max_features\",\n               \"random_state\",\n               \"max_leaf_nodes\",\n               \"min_impurity_decrease\",\n               \"min_impurity_split\",\n               \"class_weight\",\n               \"ccp_alpha\"\n            ]\n         },\n         \"ExtraTreeRegressor\": {\n            \"__init__\": [\n               \"self\",\n               \"criterion\",\n               \"splitter\",\n               \"max_depth\",\n               \"min_samples_split\",\n               \"min_samples_leaf\",\n               \"min_weight_fraction_leaf\",\n               \"max_features\",\n               \"random_state\",\n               \"min_impurity_decrease\",\n               \"min_impurity_split\",\n               \"max_leaf_nodes\",\n               \"ccp_alpha\"\n            ]\n         }\n      },\n      \"sklearn.tree._export\": {\n         \"Sentinel\": {\n            \"__repr__\": [\n               \"self\"\n            ]\n         },\n         \"_BaseTreeExporter\": {\n            \"__init__\": [\n               \"self\",\n               \"max_depth\",\n               \"feature_names\",\n               \"class_names\",\n               \"label\",\n               \"filled\",\n               \"impurity\",\n               \"node_ids\",\n               \"proportion\",\n               \"rotate\",\n               \"rounded\",\n               \"precision\",\n               \"fontsize\"\n            ],\n            \"get_color\": [\n               \"self\",\n               \"value\"\n            ],\n            \"get_fill_color\": [\n               \"self\",\n               \"tree\",\n               \"node_id\"\n            ],\n            \"node_to_str\": [\n               \"self\",\n               \"tree\",\n               \"node_id\",\n               \"criterion\"\n            ]\n         },\n         \"_DOTTreeExporter\": {\n            \"__init__\": [\n               \"self\",\n               \"out_file\",\n               \"max_depth\",\n               \"feature_names\",\n               \"class_names\",\n               \"label\",\n               \"filled\",\n               \"leaves_parallel\",\n               \"impurity\",\n               \"node_ids\",\n               \"proportion\",\n               \"rotate\",\n               \"rounded\",\n               \"special_characters\",\n               \"precision\"\n            ],\n            \"export\": [\n               \"self\",\n               \"decision_tree\"\n            ],\n            \"head\": [\n               \"self\"\n            ],\n            \"recurse\": [\n               \"self\",\n               \"tree\",\n               \"node_id\",\n               \"criterion\",\n               \"parent\",\n               \"depth\"\n            ],\n            \"tail\": [\n               \"self\"\n            ]\n         },\n         \"_MPLTreeExporter\": {\n            \"__init__\": [\n               \"self\",\n               \"max_depth\",\n               \"feature_names\",\n               \"class_names\",\n               \"label\",\n               \"filled\",\n               \"impurity\",\n               \"node_ids\",\n               \"proportion\",\n               \"rotate\",\n               \"rounded\",\n               \"precision\",\n               \"fontsize\"\n            ],\n            \"_make_tree\": [\n               \"self\",\n               \"node_id\",\n               \"et\",\n               \"criterion\",\n               \"depth\"\n            ],\n            \"export\": [\n               \"self\",\n               \"decision_tree\",\n               \"ax\"\n            ],\n            \"recurse\": [\n               \"self\",\n               \"node\",\n               \"tree\",\n               \"ax\",\n               \"scale_x\",\n               \"scale_y\",\n               \"height\",\n               \"depth\"\n            ]\n         }\n      },\n      \"sklearn.tree._reingold_tilford\": {\n         \"DrawTree\": {\n            \"__init__\": [\n               \"self\",\n               \"tree\",\n               \"parent\",\n               \"depth\",\n               \"number\"\n            ],\n            \"__repr__\": [\n               \"self\"\n            ],\n            \"__str__\": [\n               \"self\"\n            ],\n            \"get_lmost_sibling\": [\n               \"self\"\n            ],\n            \"lbrother\": [\n               \"self\"\n            ],\n            \"left\": [\n               \"self\"\n            ],\n            \"max_extents\": [\n               \"self\"\n            ],\n            \"right\": [\n               \"self\"\n            ]\n         },\n         \"Tree\": {\n            \"__init__\": [\n               \"self\",\n               \"label\",\n               \"node_id\"\n            ]\n         }\n      },\n      \"sklearn.utils.__init__\": {\n         \"Bunch\": {\n            \"__dir__\": [\n               \"self\"\n            ],\n            \"__getattr__\": [\n               \"self\",\n               \"key\"\n            ],\n            \"__init__\": [\n               \"self\"\n            ],\n            \"__setattr__\": [\n               \"self\",\n               \"key\",\n               \"value\"\n            ],\n            \"__setstate__\": [\n               \"self\",\n               \"state\"\n            ]\n         },\n         \"Memory\": {},\n         \"Parallel\": {}\n      },\n      \"sklearn.utils._mocking\": {\n         \"ArraySlicingWrapper\": {\n            \"__getitem__\": [\n               \"self\",\n               \"aslice\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"array\"\n            ]\n         },\n         \"CheckingClassifier\": {\n            \"__init__\": [\n               \"self\",\n               \"check_y\",\n               \"check_X\",\n               \"foo_param\",\n               \"expected_fit_params\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"T\"\n            ],\n            \"score\": [\n               \"self\",\n               \"X\",\n               \"Y\"\n            ]\n         },\n         \"MockDataFrame\": {\n            \"__array__\": [\n               \"self\",\n               \"dtype\"\n            ],\n            \"__eq__\": [\n               \"self\",\n               \"other\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"array\"\n            ],\n            \"__len__\": [\n               \"self\"\n            ],\n            \"__ne__\": [\n               \"self\",\n               \"other\"\n            ]\n         },\n         \"NoSampleWeightWrapper\": {\n            \"__init__\": [\n               \"self\",\n               \"est\"\n            ],\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_proba\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"sklearn.utils._pprint\": {\n         \"KeyValTuple\": {\n            \"__repr__\": [\n               \"self\"\n            ]\n         },\n         \"KeyValTupleParam\": {},\n         \"_EstimatorPrettyPrinter\": {\n            \"__init__\": [\n               \"self\",\n               \"indent\",\n               \"width\",\n               \"depth\",\n               \"stream\"\n            ],\n            \"_format_dict_items\": [\n               \"self\",\n               \"items\",\n               \"stream\",\n               \"indent\",\n               \"allowance\",\n               \"context\",\n               \"level\"\n            ],\n            \"_format_items\": [\n               \"self\",\n               \"items\",\n               \"stream\",\n               \"indent\",\n               \"allowance\",\n               \"context\",\n               \"level\"\n            ],\n            \"_format_params\": [\n               \"self\",\n               \"items\",\n               \"stream\",\n               \"indent\",\n               \"allowance\",\n               \"context\",\n               \"level\"\n            ],\n            \"_format_params_or_dict_items\": [\n               \"self\",\n               \"object\",\n               \"stream\",\n               \"indent\",\n               \"allowance\",\n               \"context\",\n               \"level\",\n               \"is_dict\"\n            ],\n            \"_pprint_estimator\": [\n               \"self\",\n               \"object\",\n               \"stream\",\n               \"indent\",\n               \"allowance\",\n               \"context\",\n               \"level\"\n            ],\n            \"_pprint_key_val_tuple\": [\n               \"self\",\n               \"object\",\n               \"stream\",\n               \"indent\",\n               \"allowance\",\n               \"context\",\n               \"level\"\n            ],\n            \"format\": [\n               \"self\",\n               \"object\",\n               \"context\",\n               \"maxlevels\",\n               \"level\"\n            ]\n         }\n      },\n      \"sklearn.utils._testing\": {\n         \"TempMemmap\": {\n            \"__enter__\": [\n               \"self\"\n            ],\n            \"__exit__\": [\n               \"self\",\n               \"exc_type\",\n               \"exc_val\",\n               \"exc_tb\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"data\",\n               \"mmap_mode\"\n            ]\n         },\n         \"_IgnoreWarnings\": {\n            \"__call__\": [\n               \"self\",\n               \"fn\"\n            ],\n            \"__enter__\": [\n               \"self\"\n            ],\n            \"__exit__\": [\n               \"self\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"category\"\n            ],\n            \"__repr__\": [\n               \"self\"\n            ]\n         }\n      },\n      \"sklearn.utils.deprecation\": {\n         \"deprecated\": {\n            \"__call__\": [\n               \"self\",\n               \"obj\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"extra\"\n            ],\n            \"_decorate_class\": [\n               \"self\",\n               \"cls\"\n            ],\n            \"_decorate_fun\": [\n               \"self\",\n               \"fun\"\n            ],\n            \"_decorate_property\": [\n               \"self\",\n               \"prop\"\n            ],\n            \"_update_doc\": [\n               \"self\",\n               \"olddoc\"\n            ]\n         }\n      },\n      \"sklearn.utils.estimator_checks\": {\n         \"NotAnArray\": {},\n         \"_NotAnArray\": {\n            \"__array__\": [\n               \"self\",\n               \"dtype\"\n            ],\n            \"__array_function__\": [\n               \"self\",\n               \"func\",\n               \"types\",\n               \"args\",\n               \"kwargs\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"data\"\n            ]\n         }\n      },\n      \"sklearn.utils.fixes\": {\n         \"MaskedArray\": {\n            \"__getstate__\": [\n               \"self\"\n            ]\n         },\n         \"loguniform\": {}\n      },\n      \"sklearn.utils.linear_assignment_\": {\n         \"_HungarianState\": {\n            \"__init__\": [\n               \"self\",\n               \"cost_matrix\"\n            ],\n            \"_clear_covers\": [\n               \"self\"\n            ]\n         }\n      },\n      \"sklearn.utils.metaestimators\": {\n         \"_BaseComposition\": {\n            \"__init__\": [\n               \"self\"\n            ],\n            \"_get_params\": [\n               \"self\",\n               \"attr\",\n               \"deep\"\n            ],\n            \"_replace_estimator\": [\n               \"self\",\n               \"attr\",\n               \"name\",\n               \"new_val\"\n            ],\n            \"_set_params\": [\n               \"self\",\n               \"attr\"\n            ],\n            \"_validate_names\": [\n               \"self\",\n               \"names\"\n            ]\n         },\n         \"_IffHasAttrDescriptor\": {\n            \"__get__\": [\n               \"self\",\n               \"obj\",\n               \"type\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"fn\",\n               \"delegate_names\",\n               \"attribute_name\"\n            ]\n         }\n      },\n      \"sklearn.utils.optimize\": {\n         \"_LineSearchError\": {}\n      },\n      \"sklearn.utils.tests.test_deprecation\": {\n         \"MockClass1\": {},\n         \"MockClass2\": {\n            \"method\": [\n               \"self\"\n            ]\n         },\n         \"MockClass3\": {\n            \"__init__\": [\n               \"self\"\n            ]\n         },\n         \"MockClass4\": {}\n      },\n      \"sklearn.utils.tests.test_estimator_checks\": {\n         \"BadBalancedWeightsClassifier\": {\n            \"__init__\": [\n               \"self\",\n               \"class_weight\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"BadTransformerWithoutMixin\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"BaseBadClassifier\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"ChangesDict\": {\n            \"__init__\": [\n               \"self\",\n               \"key\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"ChangesUnderscoreAttribute\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"ChangesWrongAttribute\": {\n            \"__init__\": [\n               \"self\",\n               \"wrong_attribute\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"CorrectNotFittedError\": {},\n         \"CorrectNotFittedErrorClassifier\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"LargeSparseNotSupportedClassifier\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"ModifiesAnotherValue\": {\n            \"__init__\": [\n               \"self\",\n               \"a\",\n               \"b\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"set_params\": [\n               \"self\"\n            ]\n         },\n         \"ModifiesValueInsteadOfRaisingError\": {\n            \"__init__\": [\n               \"self\",\n               \"p\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"set_params\": [\n               \"self\"\n            ]\n         },\n         \"NoCheckinPredict\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"NoSampleWeightPandasSeriesType\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"NoSparseClassifier\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"NotInvariantPredict\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"RaisesErrorInSetParams\": {\n            \"__init__\": [\n               \"self\",\n               \"p\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"set_params\": [\n               \"self\"\n            ]\n         },\n         \"RequiresPositiveYRegressor\": {\n            \"_more_tags\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"SetsWrongAttribute\": {\n            \"__init__\": [\n               \"self\",\n               \"acceptable_key\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"SparseTransformer\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"fit_transform\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"TaggedBinaryClassifier\": {\n            \"_more_tags\": [\n               \"self\"\n            ]\n         },\n         \"UntaggedBinaryClassifier\": {\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\",\n               \"sample_weight\"\n            ]\n         }\n      },\n      \"sklearn.utils.tests.test_metaestimators\": {\n         \"HasNoPredict\": {},\n         \"HasPredict\": {\n            \"predict\": [\n               \"self\"\n            ]\n         },\n         \"MetaEst\": {\n            \"__init__\": [\n               \"self\",\n               \"sub_est\",\n               \"better_sub_est\"\n            ],\n            \"predict\": [\n               \"self\"\n            ]\n         },\n         \"MetaEstTestList\": {\n            \"predict\": [\n               \"self\"\n            ]\n         },\n         \"MetaEstTestTuple\": {\n            \"predict\": [\n               \"self\"\n            ]\n         },\n         \"MockMetaEstimator\": {\n            \"func\": [\n               \"self\"\n            ]\n         },\n         \"Prefix\": {\n            \"func\": [\n               \"self\"\n            ]\n         }\n      },\n      \"sklearn.utils.tests.test_pprint\": {\n         \"CountVectorizer\": {\n            \"__init__\": [\n               \"self\",\n               \"input\",\n               \"encoding\",\n               \"decode_error\",\n               \"strip_accents\",\n               \"lowercase\",\n               \"preprocessor\",\n               \"tokenizer\",\n               \"stop_words\",\n               \"token_pattern\",\n               \"ngram_range\",\n               \"analyzer\",\n               \"max_df\",\n               \"min_df\",\n               \"max_features\",\n               \"vocabulary\",\n               \"binary\",\n               \"dtype\"\n            ]\n         },\n         \"GridSearchCV\": {\n            \"__init__\": [\n               \"self\",\n               \"estimator\",\n               \"param_grid\",\n               \"scoring\",\n               \"n_jobs\",\n               \"iid\",\n               \"refit\",\n               \"cv\",\n               \"verbose\",\n               \"pre_dispatch\",\n               \"error_score\",\n               \"return_train_score\"\n            ]\n         },\n         \"LogisticRegression\": {\n            \"__init__\": [\n               \"self\",\n               \"penalty\",\n               \"dual\",\n               \"tol\",\n               \"C\",\n               \"fit_intercept\",\n               \"intercept_scaling\",\n               \"class_weight\",\n               \"random_state\",\n               \"solver\",\n               \"max_iter\",\n               \"multi_class\",\n               \"verbose\",\n               \"warm_start\",\n               \"n_jobs\",\n               \"l1_ratio\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"NMF\": {\n            \"__init__\": [\n               \"self\",\n               \"n_components\",\n               \"init\",\n               \"solver\",\n               \"beta_loss\",\n               \"tol\",\n               \"max_iter\",\n               \"random_state\",\n               \"alpha\",\n               \"l1_ratio\",\n               \"verbose\",\n               \"shuffle\"\n            ]\n         },\n         \"PCA\": {\n            \"__init__\": [\n               \"self\",\n               \"n_components\",\n               \"copy\",\n               \"whiten\",\n               \"svd_solver\",\n               \"tol\",\n               \"iterated_power\",\n               \"random_state\"\n            ]\n         },\n         \"Pipeline\": {\n            \"__init__\": [\n               \"self\",\n               \"steps\",\n               \"memory\"\n            ]\n         },\n         \"RFE\": {\n            \"__init__\": [\n               \"self\",\n               \"estimator\",\n               \"n_features_to_select\",\n               \"step\",\n               \"verbose\"\n            ]\n         },\n         \"SVC\": {\n            \"__init__\": [\n               \"self\",\n               \"C\",\n               \"kernel\",\n               \"degree\",\n               \"gamma\",\n               \"coef0\",\n               \"shrinking\",\n               \"probability\",\n               \"tol\",\n               \"cache_size\",\n               \"class_weight\",\n               \"verbose\",\n               \"max_iter\",\n               \"decision_function_shape\",\n               \"random_state\"\n            ]\n         },\n         \"SimpleImputer\": {\n            \"__init__\": [\n               \"self\",\n               \"missing_values\",\n               \"strategy\",\n               \"fill_value\",\n               \"verbose\",\n               \"copy\"\n            ]\n         },\n         \"StandardScaler\": {\n            \"__init__\": [\n               \"self\",\n               \"copy\",\n               \"with_mean\",\n               \"with_std\"\n            ],\n            \"transform\": [\n               \"self\",\n               \"X\",\n               \"copy\"\n            ]\n         }\n      },\n      \"sklearn.utils.tests.test_testing\": {\n         \"Klass\": {\n            \"f_bad_sections\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"f_missing\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ]\n         },\n         \"MockEst\": {\n            \"__init__\": [\n               \"self\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_proba\": [\n               \"self\",\n               \"X\"\n            ],\n            \"score\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"MockMetaEstimator\": {\n            \"__init__\": [\n               \"self\",\n               \"delegate\"\n            ],\n            \"fit\": [\n               \"self\",\n               \"X\",\n               \"y\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"X\"\n            ],\n            \"predict_proba\": [\n               \"self\",\n               \"X\"\n            ],\n            \"score\": [\n               \"self\",\n               \"X\"\n            ]\n         },\n         \"RegistrationCounter\": {\n            \"__call__\": [\n               \"self\",\n               \"to_register_func\"\n            ],\n            \"__init__\": [\n               \"self\"\n            ]\n         },\n         \"TestWarns\": {\n            \"test_warn\": [\n               \"self\"\n            ],\n            \"test_warn_wrong_warning\": [\n               \"self\"\n            ]\n         }\n      },\n      \"sklearn.utils.tests.test_validation\": {\n         \"DummyMemory\": {\n            \"cache\": [\n               \"self\",\n               \"func\"\n            ]\n         },\n         \"WrongDummyMemory\": {}\n      }\n   },\n   \"package__all__list\": {\n      \"sklearn\": [\n         \"calibration\",\n         \"cluster\",\n         \"covariance\",\n         \"cross_decomposition\",\n         \"datasets\",\n         \"decomposition\",\n         \"dummy\",\n         \"ensemble\",\n         \"exceptions\",\n         \"experimental\",\n         \"externals\",\n         \"feature_extraction\",\n         \"feature_selection\",\n         \"gaussian_process\",\n         \"inspection\",\n         \"isotonic\",\n         \"kernel_approximation\",\n         \"kernel_ridge\",\n         \"linear_model\",\n         \"manifold\",\n         \"metrics\",\n         \"mixture\",\n         \"model_selection\",\n         \"multiclass\",\n         \"multioutput\",\n         \"naive_bayes\",\n         \"neighbors\",\n         \"neural_network\",\n         \"pipeline\",\n         \"preprocessing\",\n         \"random_projection\",\n         \"semi_supervised\",\n         \"svm\",\n         \"tree\",\n         \"discriminant_analysis\",\n         \"impute\",\n         \"compose\",\n         \"base.clone\",\n         \"_config.get_config\",\n         \"_config.set_config\",\n         \"_config.config_context\",\n         \"utils._show_versions.show_versions\"\n      ],\n      \"sklearn.cluster\": [\n         \"_affinity_propagation.AffinityPropagation\",\n         \"_agglomerative.AgglomerativeClustering\",\n         \"_birch.Birch\",\n         \"_dbscan.DBSCAN\",\n         \"_optics.OPTICS\",\n         \"_optics.cluster_optics_dbscan\",\n         \"_optics.cluster_optics_xi\",\n         \"_optics.compute_optics_graph\",\n         \"_kmeans.KMeans\",\n         \"_agglomerative.FeatureAgglomeration\",\n         \"_mean_shift.MeanShift\",\n         \"_kmeans.MiniBatchKMeans\",\n         \"_spectral.SpectralClustering\",\n         \"_affinity_propagation.affinity_propagation\",\n         \"_dbscan.dbscan\",\n         \"_mean_shift.estimate_bandwidth\",\n         \"_mean_shift.get_bin_seeds\",\n         \"_kmeans.k_means\",\n         \"_agglomerative.linkage_tree\",\n         \"_mean_shift.mean_shift\",\n         \"_spectral.spectral_clustering\",\n         \"_agglomerative.ward_tree\",\n         \"_bicluster.SpectralBiclustering\",\n         \"_bicluster.SpectralCoclustering\"\n      ],\n      \"sklearn.compose\": [\n         \"_column_transformer.ColumnTransformer\",\n         \"_column_transformer.make_column_transformer\",\n         \"_target.TransformedTargetRegressor\",\n         \"_column_transformer.make_column_selector\"\n      ],\n      \"sklearn.covariance\": [\n         \"_elliptic_envelope.EllipticEnvelope\",\n         \"_empirical_covariance.EmpiricalCovariance\",\n         \"_graph_lasso.GraphicalLasso\",\n         \"_graph_lasso.GraphicalLassoCV\",\n         \"_shrunk_covariance.LedoitWolf\",\n         \"_robust_covariance.MinCovDet\",\n         \"_shrunk_covariance.OAS\",\n         \"_shrunk_covariance.ShrunkCovariance\",\n         \"_empirical_covariance.empirical_covariance\",\n         \"_robust_covariance.fast_mcd\",\n         \"_graph_lasso.graphical_lasso\",\n         \"_shrunk_covariance.ledoit_wolf\",\n         \"_shrunk_covariance.ledoit_wolf_shrinkage\",\n         \"_empirical_covariance.log_likelihood\",\n         \"_shrunk_covariance.oas\",\n         \"_shrunk_covariance.shrunk_covariance\"\n      ],\n      \"sklearn.cross_decomposition\": [\n         \"_pls.PLSCanonical\",\n         \"_pls.PLSRegression\",\n         \"_pls.PLSSVD\",\n         \"_cca.CCA\"\n      ],\n      \"sklearn.datasets\": [\n         \"_base.clear_data_home\",\n         \"_svmlight_format_io.dump_svmlight_file\",\n         \"_twenty_newsgroups.fetch_20newsgroups\",\n         \"_twenty_newsgroups.fetch_20newsgroups_vectorized\",\n         \"_lfw.fetch_lfw_pairs\",\n         \"_lfw.fetch_lfw_people\",\n         \"_olivetti_faces.fetch_olivetti_faces\",\n         \"_species_distributions.fetch_species_distributions\",\n         \"_california_housing.fetch_california_housing\",\n         \"_covtype.fetch_covtype\",\n         \"_rcv1.fetch_rcv1\",\n         \"_kddcup99.fetch_kddcup99\",\n         \"_openml.fetch_openml\",\n         \"_base.get_data_home\",\n         \"_base.load_boston\",\n         \"_base.load_diabetes\",\n         \"_base.load_digits\",\n         \"_base.load_files\",\n         \"_base.load_iris\",\n         \"_base.load_breast_cancer\",\n         \"_base.load_linnerud\",\n         \"_base.load_sample_image\",\n         \"_base.load_sample_images\",\n         \"_svmlight_format_io.load_svmlight_file\",\n         \"_svmlight_format_io.load_svmlight_files\",\n         \"_base.load_wine\",\n         \"_samples_generator.make_biclusters\",\n         \"_samples_generator.make_blobs\",\n         \"_samples_generator.make_circles\",\n         \"_samples_generator.make_classification\",\n         \"_samples_generator.make_checkerboard\",\n         \"_samples_generator.make_friedman1\",\n         \"_samples_generator.make_friedman2\",\n         \"_samples_generator.make_friedman3\",\n         \"_samples_generator.make_gaussian_quantiles\",\n         \"_samples_generator.make_hastie_10_2\",\n         \"_samples_generator.make_low_rank_matrix\",\n         \"_samples_generator.make_moons\",\n         \"_samples_generator.make_multilabel_classification\",\n         \"_samples_generator.make_regression\",\n         \"_samples_generator.make_s_curve\",\n         \"_samples_generator.make_sparse_coded_signal\",\n         \"_samples_generator.make_sparse_spd_matrix\",\n         \"_samples_generator.make_sparse_uncorrelated\",\n         \"_samples_generator.make_spd_matrix\",\n         \"_samples_generator.make_swiss_roll\"\n      ],\n      \"sklearn.decomposition\": [\n         \"_dict_learning.DictionaryLearning\",\n         \"_fastica.FastICA\",\n         \"_incremental_pca.IncrementalPCA\",\n         \"_kernel_pca.KernelPCA\",\n         \"_dict_learning.MiniBatchDictionaryLearning\",\n         \"_sparse_pca.MiniBatchSparsePCA\",\n         \"_nmf.NMF\",\n         \"_pca.PCA\",\n         \"_dict_learning.SparseCoder\",\n         \"_sparse_pca.SparsePCA\",\n         \"dict_learning.dict_learning\",\n         \"_dict_learning.dict_learning_online\",\n         \"_fastica.fastica\",\n         \"_nmf.non_negative_factorization\",\n         \"utils.extmath.randomized_svd\",\n         \"_dict_learning.sparse_encode\",\n         \"_factor_analysis.FactorAnalysis\",\n         \"_truncated_svd.TruncatedSVD\",\n         \"_lda.LatentDirichletAllocation\"\n      ],\n      \"sklearn.ensemble\": [\n         \"_base.BaseEnsemble\",\n         \"_forest.RandomForestClassifier\",\n         \"_forest.RandomForestRegressor\",\n         \"_forest.RandomTreesEmbedding\",\n         \"_forest.ExtraTreesClassifier\",\n         \"_forest.ExtraTreesRegressor\",\n         \"_bagging.BaggingClassifier\",\n         \"_bagging.BaggingRegressor\",\n         \"_iforest.IsolationForest\",\n         \"_gb.GradientBoostingClassifier\",\n         \"_gb.GradientBoostingRegressor\",\n         \"_weight_boosting.AdaBoostClassifier\",\n         \"_weight_boosting.AdaBoostRegressor\",\n         \"_voting.VotingClassifier\",\n         \"_voting.VotingRegressor\",\n         \"_stacking.StackingClassifier\",\n         \"_stacking.StackingRegressor\",\n         \"partial_dependence\"\n      ],\n      \"sklearn.feature_extraction\": [\n         \"_dict_vectorizer.DictVectorizer\",\n         \"image\",\n         \"image.img_to_graph\",\n         \"image.grid_to_graph\",\n         \"text\",\n         \"_hash.FeatureHasher\"\n      ],\n      \"sklearn.feature_selection\": [\n         \"_univariate_selection.GenericUnivariateSelect\",\n         \"_rfe.RFE\",\n         \"_rfe.RFECV\",\n         \"_univariate_selection.SelectFdr\",\n         \"_univariate_selection.SelectFpr\",\n         \"_univariate_selection.SelectFwe\",\n         \"_univariate_selection.SelectKBest\",\n         \"_from_model.SelectFromModel\",\n         \"_univariate_selection.SelectPercentile\",\n         \"_variance_threshold.VarianceThreshold\",\n         \"_univariate_selection.chi2\",\n         \"_univariate_selection.f_classif\",\n         \"_univariate_selection.f_oneway\",\n         \"_univariate_selection.f_regression\",\n         \"_mutual_info.mutual_info_classif\",\n         \"_mutual_info.mutual_info_regression\"\n      ],\n      \"sklearn.gaussian_process\": [\n         \"_gpr.GaussianProcessRegressor\",\n         \"_gpc.GaussianProcessClassifier\",\n         \"kernels\"\n      ],\n      \"sklearn.impute\": [\n         \"_base.MissingIndicator\",\n         \"_base.SimpleImputer\",\n         \"_knn.KNNImputer\"\n      ],\n      \"sklearn.inspection\": [\n         \"partial_dependence.partial_dependence\",\n         \"_partial_dependence.plot_partial_dependence\",\n         \"_permutation_importance.permutation_importance\",\n         \"_partial_dependence.PartialDependenceDisplay\"\n      ],\n      \"sklearn.linear_model\": [\n         \"_bayes.ARDRegression\",\n         \"_bayes.BayesianRidge\",\n         \"_coordinate_descent.ElasticNet\",\n         \"_coordinate_descent.ElasticNetCV\",\n         \"_sgd_fast.Hinge\",\n         \"_sgd_fast.Huber\",\n         \"_huber.HuberRegressor\",\n         \"_least_angle.Lars\",\n         \"_least_angle.LarsCV\",\n         \"_coordinate_descent.Lasso\",\n         \"_coordinate_descent.LassoCV\",\n         \"_least_angle.LassoLars\",\n         \"_least_angle.LassoLarsCV\",\n         \"_least_angle.LassoLarsIC\",\n         \"_base.LinearRegression\",\n         \"_sgd_fast.Log\",\n         \"_logistic.LogisticRegression\",\n         \"_logistic.LogisticRegressionCV\",\n         \"_sgd_fast.ModifiedHuber\",\n         \"_coordinate_descent.MultiTaskElasticNet\",\n         \"_coordinate_descent.MultiTaskElasticNetCV\",\n         \"_coordinate_descent.MultiTaskLasso\",\n         \"_coordinate_descent.MultiTaskLassoCV\",\n         \"_omp.OrthogonalMatchingPursuit\",\n         \"_omp.OrthogonalMatchingPursuitCV\",\n         \"_passive_aggressive.PassiveAggressiveClassifier\",\n         \"_passive_aggressive.PassiveAggressiveRegressor\",\n         \"_perceptron.Perceptron\",\n         \"_ridge.Ridge\",\n         \"_ridge.RidgeCV\",\n         \"_ridge.RidgeClassifier\",\n         \"_ridge.RidgeClassifierCV\",\n         \"_stochastic_gradient.SGDClassifier\",\n         \"_stochastic_gradient.SGDRegressor\",\n         \"_sgd_fast.SquaredLoss\",\n         \"_theil_sen.TheilSenRegressor\",\n         \"_coordinate_descent.enet_path\",\n         \"_least_angle.lars_path\",\n         \"_least_angle.lars_path_gram\",\n         \"_coordinate_descent.lasso_path\",\n         \"_logistic.logistic_regression_path\",\n         \"_omp.orthogonal_mp\",\n         \"_omp.orthogonal_mp_gram\",\n         \"_ridge.ridge_regression\",\n         \"_ransac.RANSACRegressor\"\n      ],\n      \"sklearn.manifold\": [\n         \"_locally_linear.locally_linear_embedding\",\n         \"_locally_linear.LocallyLinearEmbedding\",\n         \"_isomap.Isomap\",\n         \"_mds.MDS\",\n         \"_mds.smacof\",\n         \"_spectral_embedding.SpectralEmbedding\",\n         \"_spectral_embedding.spectral_embedding\",\n         \"_t_sne.TSNE\",\n         \"_t_sne.trustworthiness\"\n      ],\n      \"sklearn.metrics\": [\n         \"_classification.accuracy_score\",\n         \"cluster.adjusted_mutual_info_score\",\n         \"cluster.adjusted_rand_score\",\n         \"_ranking.auc\",\n         \"_ranking.average_precision_score\",\n         \"_classification.balanced_accuracy_score\",\n         \"cluster.calinski_harabaz_score\",\n         \"cluster.calinski_harabasz_score\",\n         \"_scorer.check_scoring\",\n         \"_classification.classification_report\",\n         \"cluster\",\n         \"_classification.cohen_kappa_score\",\n         \"cluster.completeness_score\",\n         \"_plot.confusion_matrix.ConfusionMatrixDisplay\",\n         \"_classification.confusion_matrix\",\n         \"cluster.consensus_score\",\n         \"_ranking.coverage_error\",\n         \"_ranking.dcg_score\",\n         \"cluster.davies_bouldin_score\",\n         \"pairwise.euclidean_distances\",\n         \"_regression.explained_variance_score\",\n         \"_classification.f1_score\",\n         \"_classification.fbeta_score\",\n         \"cluster.fowlkes_mallows_score\",\n         \"_scorer.get_scorer\",\n         \"_classification.hamming_loss\",\n         \"_classification.hinge_loss\",\n         \"cluster.homogeneity_completeness_v_measure\",\n         \"cluster.homogeneity_score\",\n         \"_classification.jaccard_score\",\n         \"_classification.jaccard_similarity_score\",\n         \"_ranking.label_ranking_average_precision_score\",\n         \"_ranking.label_ranking_loss\",\n         \"_classification.log_loss\",\n         \"_scorer.make_scorer\",\n         \"pairwise.nan_euclidean_distances\",\n         \"_classification.matthews_corrcoef\",\n         \"_regression.max_error\",\n         \"_regression.mean_absolute_error\",\n         \"_regression.mean_squared_error\",\n         \"_regression.mean_squared_log_error\",\n         \"_regression.mean_poisson_deviance\",\n         \"_regression.mean_gamma_deviance\",\n         \"_regression.mean_tweedie_deviance\",\n         \"_regression.median_absolute_error\",\n         \"_classification.multilabel_confusion_matrix\",\n         \"cluster.mutual_info_score\",\n         \"_ranking.ndcg_score\",\n         \"cluster.normalized_mutual_info_score\",\n         \"pairwise.pairwise_distances\",\n         \"pairwise.pairwise_distances_argmin\",\n         \"pairwise.pairwise_distances_argmin_min\",\n         \"pairwise.pairwise_distances_chunked\",\n         \"pairwise.pairwise_kernels\",\n         \"_plot.confusion_matrix.plot_confusion_matrix\",\n         \"_plot.precision_recall_curve.plot_precision_recall_curve\",\n         \"_plot.roc_curve.plot_roc_curve\",\n         \"_plot.precision_recall_curve.PrecisionRecallDisplay\",\n         \"_ranking.precision_recall_curve\",\n         \"_classification.precision_recall_fscore_support\",\n         \"_classification.precision_score\",\n         \"_regression.r2_score\",\n         \"_classification.recall_score\",\n         \"_plot.roc_curve.RocCurveDisplay\",\n         \"_ranking.roc_auc_score\",\n         \"_ranking.roc_curve\",\n         \"_scorer.SCORERS\",\n         \"cluster.silhouette_samples\",\n         \"cluster.silhouette_score\",\n         \"cluster.v_measure_score\",\n         \"_classification.zero_one_loss\",\n         \"_classification.brier_score_loss\"\n      ],\n      \"sklearn.metrics.cluster\": [\n         \"_supervised.adjusted_mutual_info_score\",\n         \"_supervised.normalized_mutual_info_score\",\n         \"_supervised.adjusted_rand_score\",\n         \"_supervised.completeness_score\",\n         \"_supervised.contingency_matrix\",\n         \"_supervised.expected_mutual_information\",\n         \"_supervised.homogeneity_completeness_v_measure\",\n         \"_supervised.homogeneity_score\",\n         \"_supervised.mutual_info_score\",\n         \"_supervised.v_measure_score\",\n         \"_supervised.fowlkes_mallows_score\",\n         \"_supervised.entropy\",\n         \"_unsupervised.silhouette_samples\",\n         \"_unsupervised.silhouette_score\",\n         \"_unsupervised.calinski_harabaz_score\",\n         \"_unsupervised.calinski_harabasz_score\",\n         \"_unsupervised.davies_bouldin_score\",\n         \"_bicluster.consensus_score\"\n      ],\n      \"sklearn.mixture\": [\n         \"_gaussian_mixture.GaussianMixture\",\n         \"_bayesian_mixture.BayesianGaussianMixture\"\n      ],\n      \"sklearn.neighbors\": [\n         \"_ball_tree.BallTree\",\n         \"_dist_metrics.DistanceMetric\",\n         \"_kd_tree.KDTree\",\n         \"_classification.KNeighborsClassifier\",\n         \"_regression.KNeighborsRegressor\",\n         \"_graph.KNeighborsTransformer\",\n         \"_nearest_centroid.NearestCentroid\",\n         \"_unsupervised.NearestNeighbors\",\n         \"_classification.RadiusNeighborsClassifier\",\n         \"_regression.RadiusNeighborsRegressor\",\n         \"_graph.RadiusNeighborsTransformer\",\n         \"_graph.kneighbors_graph\",\n         \"_graph.radius_neighbors_graph\",\n         \"_kde.KernelDensity\",\n         \"_lof.LocalOutlierFactor\",\n         \"_nca.NeighborhoodComponentsAnalysis\",\n         \"_base.VALID_METRICS\",\n         \"_base.VALID_METRICS_SPARSE\"\n      ],\n      \"sklearn.neural_network\": [\n         \"_rbm.BernoulliRBM\",\n         \"_multilayer_perceptron.MLPClassifier\",\n         \"_multilayer_perceptron.MLPRegressor\"\n      ],\n      \"sklearn.preprocessing\": [\n         \"_data.Binarizer\",\n         \"_function_transformer.FunctionTransformer\",\n         \"_discretization.KBinsDiscretizer\",\n         \"_data.KernelCenterer\",\n         \"_label.LabelBinarizer\",\n         \"_label.LabelEncoder\",\n         \"_label.MultiLabelBinarizer\",\n         \"_data.MinMaxScaler\",\n         \"_data.MaxAbsScaler\",\n         \"_data.QuantileTransformer\",\n         \"_data.Normalizer\",\n         \"_encoders.OneHotEncoder\",\n         \"_encoders.OrdinalEncoder\",\n         \"_data.PowerTransformer\",\n         \"_data.RobustScaler\",\n         \"_data.StandardScaler\",\n         \"_data.add_dummy_feature\",\n         \"_data.PolynomialFeatures\",\n         \"_data.binarize\",\n         \"_data.normalize\",\n         \"_data.scale\",\n         \"_data.robust_scale\",\n         \"_data.maxabs_scale\",\n         \"_data.minmax_scale\",\n         \"_label.label_binarize\",\n         \"_data.quantile_transform\",\n         \"_data.power_transform\"\n      ],\n      \"sklearn.semi_supervised\": [\n         \"_label_propagation.LabelPropagation\",\n         \"_label_propagation.LabelSpreading\"\n      ],\n      \"sklearn.svm\": [\n         \"_classes.LinearSVC\",\n         \"_classes.LinearSVR\",\n         \"_classes.NuSVC\",\n         \"_classes.NuSVR\",\n         \"_classes.OneClassSVM\",\n         \"_classes.SVC\",\n         \"_classes.SVR\",\n         \"_bounds.l1_min_c\"\n      ],\n      \"sklearn.tree\": [\n         \"_classes.BaseDecisionTree\",\n         \"_classes.DecisionTreeClassifier\",\n         \"_classes.DecisionTreeRegressor\",\n         \"_classes.ExtraTreeClassifier\",\n         \"_classes.ExtraTreeRegressor\",\n         \"_export.export_graphviz\",\n         \"_export.plot_tree\",\n         \"_export.export_text\"\n      ],\n      \"sklearn.utils\": [\n         \"murmurhash.murmurhash3_32\",\n         \"validation.as_float_array\",\n         \"validation.assert_all_finite\",\n         \"validation.check_array\",\n         \"validation.check_random_state\",\n         \"class_weight.compute_class_weight\",\n         \"class_weight.compute_sample_weight\",\n         \"validation.column_or_1d\",\n         \"safe_indexing\",\n         \"validation.check_consistent_length\",\n         \"validation.check_X_y\",\n         \"validation.check_scalar\",\n         \"validation.indexable\",\n         \"validation.check_symmetric\",\n         \"indices_to_mask\",\n         \"deprecation.deprecated\",\n         \"cpu_count\",\n         \"Parallel\",\n         \"Memory\",\n         \"delayed\",\n         \"parallel_backend\",\n         \"register_parallel_backend\",\n         \"hash\",\n         \"effective_n_jobs\",\n         \"resample\",\n         \"shuffle\",\n         \"check_matplotlib_support\",\n         \"all_estimators\"\n      ]\n   }\n}"