"{\n   \"function\": {\n      \"torch.__config__\": {\n         \"parallel_info\": [],\n         \"show\": []\n      },\n      \"torch.__future__\": {\n         \"get_overwrite_module_params_on_conversion\": [],\n         \"set_overwrite_module_params_on_conversion\": [\n            [\n               \"value\"\n            ]\n         ]\n      },\n      \"torch.__init__\": {\n         \"_load_global_deps\": [],\n         \"compiled_with_cxx11_abi\": [],\n         \"is_storage\": [\n            [\n               \"obj\"\n            ]\n         ],\n         \"is_tensor\": [\n            [\n               \"obj\"\n            ]\n         ],\n         \"manager_path\": [],\n         \"set_default_dtype\": [\n            [\n               \"d\"\n            ]\n         ],\n         \"set_default_tensor_type\": [\n            [\n               \"t\"\n            ]\n         ],\n         \"typename\": [\n            [\n               \"o\"\n            ]\n         ]\n      },\n      \"torch._jit_internal\": {\n         \"_clear_fn_overloads\": [\n            [\n               \"qual_name\"\n            ]\n         ],\n         \"_copy_to_script_wrapper\": [\n            [\n               \"fn\"\n            ]\n         ],\n         \"_get_fn_overloads\": [\n            [\n               \"qual_name\"\n            ]\n         ],\n         \"_get_overloaded_methods\": [\n            [\n               \"method\"\n            ],\n            [\n               \"mod_class\"\n            ]\n         ],\n         \"_overload\": [\n            [\n               \"func\"\n            ]\n         ],\n         \"_overload_method\": [\n            [\n               \"func\"\n            ]\n         ],\n         \"_qualified_name\": [\n            [\n               \"obj\"\n            ]\n         ],\n         \"boolean_dispatch\": [\n            [\n               \"arg_name\"\n            ],\n            [\n               \"arg_index\"\n            ],\n            [\n               \"default\"\n            ],\n            [\n               \"if_true\"\n            ],\n            [\n               \"if_false\"\n            ],\n            [\n               \"module_name\"\n            ],\n            [\n               \"func_name\"\n            ]\n         ],\n         \"can_compile_class\": [\n            [\n               \"cls\"\n            ]\n         ],\n         \"copy_torchscript_modifier\": [\n            [\n               \"orig\"\n            ],\n            [\n               \"new\"\n            ]\n         ],\n         \"createResolutionCallbackForClassMethods\": [\n            [\n               \"cls\"\n            ]\n         ],\n         \"createResolutionCallbackFromClosure\": [\n            [\n               \"fn\"\n            ]\n         ],\n         \"createResolutionCallbackFromEnv\": [\n            [\n               \"lookup_base\"\n            ]\n         ],\n         \"createResolutionCallbackFromFrame\": [\n            [\n               \"frames_up\",\n               0\n            ]\n         ],\n         \"export\": [\n            [\n               \"fn\"\n            ]\n         ],\n         \"fake_range\": [],\n         \"get_class_name_lineno\": [\n            [\n               \"method\"\n            ]\n         ],\n         \"get_closure\": [\n            [\n               \"fn\"\n            ]\n         ],\n         \"get_torchscript_modifier\": [\n            [\n               \"fn\"\n            ]\n         ],\n         \"ignore\": [\n            [\n               \"drop\",\n               false\n            ]\n         ],\n         \"is_dict\": [\n            [\n               \"ann\"\n            ]\n         ],\n         \"is_final\": [\n            [\n               \"ann\"\n            ]\n         ],\n         \"is_ignored_fn\": [\n            [\n               \"fn\"\n            ]\n         ],\n         \"is_list\": [\n            [\n               \"ann\"\n            ]\n         ],\n         \"is_optional\": [\n            [\n               \"ann\"\n            ]\n         ],\n         \"is_rref\": [\n            [\n               \"ann\"\n            ]\n         ],\n         \"is_tuple\": [\n            [\n               \"ann\"\n            ]\n         ],\n         \"module_has_exports\": [\n            [\n               \"mod\"\n            ]\n         ],\n         \"should_drop\": [\n            [\n               \"fn\"\n            ]\n         ],\n         \"unused\": [\n            [\n               \"fn\"\n            ]\n         ]\n      },\n      \"torch._linalg_utils\": {\n         \"basis\": [\n            [\n               \"A\"\n            ]\n         ],\n         \"bform\": [\n            [\n               \"X\"\n            ],\n            [\n               \"A\"\n            ],\n            [\n               \"Y\"\n            ]\n         ],\n         \"conjugate\": [\n            [\n               \"A\"\n            ]\n         ],\n         \"get_floating_dtype\": [\n            [\n               \"A\"\n            ]\n         ],\n         \"is_sparse\": [\n            [\n               \"A\"\n            ]\n         ],\n         \"matmul\": [\n            [\n               \"A\"\n            ],\n            [\n               \"B\"\n            ]\n         ],\n         \"qform\": [\n            [\n               \"A\"\n            ],\n            [\n               \"S\"\n            ]\n         ],\n         \"symeig\": [\n            [\n               \"A\"\n            ],\n            [\n               \"largest\",\n               false\n            ],\n            [\n               \"eigenvectors\",\n               true\n            ]\n         ],\n         \"transjugate\": [\n            [\n               \"A\"\n            ]\n         ],\n         \"transpose\": [\n            [\n               \"A\"\n            ]\n         ]\n      },\n      \"torch._lobpcg\": {\n         \"LOBPCG_call_tracker\": [\n            [\n               \"self\"\n            ]\n         ],\n         \"lobpcg\": [\n            [\n               \"A\"\n            ],\n            [\n               \"k\",\n               null\n            ],\n            [\n               \"B\",\n               null\n            ],\n            [\n               \"X\",\n               null\n            ],\n            [\n               \"n\",\n               null\n            ],\n            [\n               \"iK\",\n               null\n            ],\n            [\n               \"niter\",\n               null\n            ],\n            [\n               \"tol\",\n               null\n            ],\n            [\n               \"largest\",\n               null\n            ],\n            [\n               \"method\",\n               null\n            ],\n            [\n               \"tracker\",\n               null\n            ],\n            [\n               \"ortho_iparams\",\n               null\n            ],\n            [\n               \"ortho_fparams\",\n               null\n            ],\n            [\n               \"ortho_bparams\",\n               null\n            ]\n         ]\n      },\n      \"torch._lowrank\": {\n         \"_svd_lowrank\": [\n            [\n               \"A\"\n            ],\n            [\n               \"q\",\n               6\n            ],\n            [\n               \"niter\",\n               2\n            ],\n            [\n               \"M\",\n               null\n            ]\n         ],\n         \"get_approximate_basis\": [\n            [\n               \"A\"\n            ],\n            [\n               \"q\"\n            ],\n            [\n               \"niter\",\n               2\n            ],\n            [\n               \"M\",\n               null\n            ]\n         ],\n         \"pca_lowrank\": [\n            [\n               \"A\"\n            ],\n            [\n               \"q\",\n               null\n            ],\n            [\n               \"center\",\n               true\n            ],\n            [\n               \"niter\",\n               2\n            ]\n         ],\n         \"svd_lowrank\": [\n            [\n               \"A\"\n            ],\n            [\n               \"q\",\n               6\n            ],\n            [\n               \"niter\",\n               2\n            ],\n            [\n               \"M\",\n               null\n            ]\n         ]\n      },\n      \"torch._namedtensor_internals\": {\n         \"build_dim_map\": [\n            [\n               \"tensor\"\n            ]\n         ],\n         \"check_serializing_named_tensor\": [\n            [\n               \"tensor\"\n            ]\n         ],\n         \"expand_single_ellipsis\": [\n            [\n               \"numel_pre_glob\"\n            ],\n            [\n               \"numel_post_glob\"\n            ],\n            [\n               \"names\"\n            ]\n         ],\n         \"is_ellipsis\": [\n            [\n               \"item\"\n            ]\n         ],\n         \"namer_api_name\": [\n            [\n               \"inplace\"\n            ]\n         ],\n         \"replace_ellipsis_by_position\": [\n            [\n               \"ellipsis_idx\"\n            ],\n            [\n               \"names\"\n            ],\n            [\n               \"tensor_names\"\n            ]\n         ],\n         \"resolve_ellipsis\": [\n            [\n               \"names\"\n            ],\n            [\n               \"tensor_names\"\n            ],\n            [\n               \"fn_name\"\n            ]\n         ],\n         \"single_ellipsis_index\": [\n            [\n               \"names\"\n            ],\n            [\n               \"fn_name\"\n            ]\n         ],\n         \"unzip_namedshape\": [\n            [\n               \"namedshape\"\n            ]\n         ],\n         \"update_names\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"names\"\n            ],\n            [\n               \"rename_map\"\n            ],\n            [\n               \"inplace\"\n            ]\n         ],\n         \"update_names_with_list\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"names\"\n            ],\n            [\n               \"inplace\"\n            ]\n         ],\n         \"update_names_with_mapping\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"rename_map\"\n            ],\n            [\n               \"inplace\"\n            ]\n         ]\n      },\n      \"torch._ops\": {\n         \"dl_open_guard\": []\n      },\n      \"torch._overrides\": {\n         \"_get_overloaded_args\": [\n            [\n               \"relevant_args\"\n            ]\n         ],\n         \"get_ignored_functions\": [],\n         \"get_overridable_functions\": [],\n         \"get_testing_overrides\": [],\n         \"handle_torch_function\": [\n            [\n               \"public_api\"\n            ],\n            [\n               \"relevant_args\"\n            ]\n         ],\n         \"has_torch_function\": [\n            [\n               \"relevant_args\"\n            ]\n         ]\n      },\n      \"torch._six\": {\n         \"bind_method\": [\n            [\n               \"fn\"\n            ],\n            [\n               \"obj\"\n            ],\n            [\n               \"obj_type\"\n            ]\n         ],\n         \"exec_\": [\n            [\n               \"_code_\"\n            ],\n            [\n               \"_globs_\",\n               null\n            ],\n            [\n               \"_locs_\",\n               null\n            ]\n         ],\n         \"get_function_from_type\": [\n            [\n               \"cls\"\n            ],\n            [\n               \"name\"\n            ]\n         ],\n         \"istuple\": [\n            [\n               \"obj\"\n            ]\n         ],\n         \"raise_from\": [\n            [\n               \"value\"\n            ],\n            [\n               \"from_value\"\n            ]\n         ],\n         \"with_metaclass\": [\n            [\n               \"meta\"\n            ]\n         ]\n      },\n      \"torch._storage_docs\": {\n         \"add_docstr_all\": [\n            [\n               \"method\"\n            ],\n            [\n               \"docstr\"\n            ]\n         ]\n      },\n      \"torch._tensor_docs\": {\n         \"add_docstr_all\": [\n            [\n               \"method\"\n            ],\n            [\n               \"docstr\"\n            ]\n         ]\n      },\n      \"torch._tensor_str\": {\n         \"_add_suffixes\": [\n            [\n               \"tensor_str\"\n            ],\n            [\n               \"suffixes\"\n            ],\n            [\n               \"indent\"\n            ],\n            [\n               \"force_newline\"\n            ]\n         ],\n         \"_scalar_str\": [\n            [\n               \"self\"\n            ],\n            [\n               \"formatter\"\n            ]\n         ],\n         \"_str\": [\n            [\n               \"self\"\n            ]\n         ],\n         \"_tensor_str\": [\n            [\n               \"self\"\n            ],\n            [\n               \"indent\"\n            ]\n         ],\n         \"_tensor_str_with_formatter\": [\n            [\n               \"self\"\n            ],\n            [\n               \"indent\"\n            ],\n            [\n               \"formatter\"\n            ],\n            [\n               \"summarize\"\n            ]\n         ],\n         \"_vector_str\": [\n            [\n               \"self\"\n            ],\n            [\n               \"indent\"\n            ],\n            [\n               \"formatter\"\n            ],\n            [\n               \"summarize\"\n            ]\n         ],\n         \"get_summarized_data\": [\n            [\n               \"self\"\n            ]\n         ],\n         \"set_printoptions\": [\n            [\n               \"precision\",\n               null\n            ],\n            [\n               \"threshold\",\n               null\n            ],\n            [\n               \"edgeitems\",\n               null\n            ],\n            [\n               \"linewidth\",\n               null\n            ],\n            [\n               \"profile\",\n               null\n            ],\n            [\n               \"sci_mode\",\n               null\n            ]\n         ]\n      },\n      \"torch._torch_docs\": {\n         \"merge_dicts\": [],\n         \"parse_kwargs\": [\n            [\n               \"desc\"\n            ]\n         ]\n      },\n      \"torch._utils\": {\n         \"_accumulate\": [\n            [\n               \"iterable\"\n            ],\n            [\n               \"fn\",\n               {\n                  \"args\": [\n                     {\n                        \"annotation\": null,\n                        \"arg\": \"x\",\n                        \"col_offset\": 36,\n                        \"lineno\": 198\n                     },\n                     {\n                        \"annotation\": null,\n                        \"arg\": \"y\",\n                        \"col_offset\": 39,\n                        \"lineno\": 198\n                     }\n                  ],\n                  \"defaults\": [],\n                  \"kw_defaults\": [],\n                  \"kwarg\": null,\n                  \"kwonlyargs\": [],\n                  \"vararg\": null\n               }\n            ]\n         ],\n         \"_cuda\": [\n            [\n               \"self\"\n            ],\n            [\n               \"device\",\n               null\n            ],\n            [\n               \"non_blocking\",\n               false\n            ]\n         ],\n         \"_flatten_dense_tensors\": [\n            [\n               \"tensors\"\n            ]\n         ],\n         \"_flatten_sparse_tensors\": [\n            [\n               \"tensors\"\n            ]\n         ],\n         \"_get_async_or_non_blocking\": [\n            [\n               \"function_name\"\n            ],\n            [\n               \"non_blocking\"\n            ],\n            [\n               \"kwargs\"\n            ]\n         ],\n         \"_import_dotted_name\": [\n            [\n               \"name\"\n            ]\n         ],\n         \"_rebuild_parameter\": [\n            [\n               \"data\"\n            ],\n            [\n               \"requires_grad\"\n            ],\n            [\n               \"backward_hooks\"\n            ]\n         ],\n         \"_rebuild_qtensor\": [\n            [\n               \"storage\"\n            ],\n            [\n               \"storage_offset\"\n            ],\n            [\n               \"size\"\n            ],\n            [\n               \"stride\"\n            ],\n            [\n               \"quantizer_params\"\n            ],\n            [\n               \"requires_grad\"\n            ],\n            [\n               \"backward_hooks\"\n            ]\n         ],\n         \"_rebuild_sparse_tensor\": [\n            [\n               \"layout\"\n            ],\n            [\n               \"data\"\n            ]\n         ],\n         \"_rebuild_tensor\": [\n            [\n               \"storage\"\n            ],\n            [\n               \"storage_offset\"\n            ],\n            [\n               \"size\"\n            ],\n            [\n               \"stride\"\n            ]\n         ],\n         \"_rebuild_tensor_v2\": [\n            [\n               \"storage\"\n            ],\n            [\n               \"storage_offset\"\n            ],\n            [\n               \"size\"\n            ],\n            [\n               \"stride\"\n            ],\n            [\n               \"requires_grad\"\n            ],\n            [\n               \"backward_hooks\"\n            ]\n         ],\n         \"_rebuild_xla_tensor\": [\n            [\n               \"data\"\n            ],\n            [\n               \"dtype\"\n            ],\n            [\n               \"device\"\n            ],\n            [\n               \"requires_grad\"\n            ]\n         ],\n         \"_reorder_tensors_as\": [\n            [\n               \"tensors\"\n            ],\n            [\n               \"ordered_tensors\"\n            ]\n         ],\n         \"_take_tensors\": [\n            [\n               \"tensors\"\n            ],\n            [\n               \"size_limit\"\n            ]\n         ],\n         \"_type\": [\n            [\n               \"self\"\n            ],\n            [\n               \"dtype\",\n               null\n            ],\n            [\n               \"non_blocking\",\n               false\n            ]\n         ],\n         \"_unflatten_dense_tensors\": [\n            [\n               \"flat\"\n            ],\n            [\n               \"tensors\"\n            ]\n         ],\n         \"_unflatten_sparse_tensors\": [\n            [\n               \"flat\"\n            ],\n            [\n               \"tensors\"\n            ]\n         ],\n         \"annotate\": [\n            [\n               \"ret\"\n            ]\n         ]\n      },\n      \"torch._utils_internal\": {\n         \"get_file_path\": [],\n         \"get_file_path_2\": [],\n         \"get_source_lines_and_file\": [\n            [\n               \"obj\"\n            ],\n            [\n               \"error_msg\",\n               null\n            ]\n         ],\n         \"get_writable_path\": [\n            [\n               \"path\"\n            ]\n         ],\n         \"prepare_multiprocessing_environment\": [\n            [\n               \"path\"\n            ]\n         ],\n         \"resolve_library_path\": [\n            [\n               \"path\"\n            ]\n         ]\n      },\n      \"torch.autograd.__init__\": {\n         \"_is_checkpoint_valid\": [],\n         \"_make_grads\": [\n            [\n               \"outputs\"\n            ],\n            [\n               \"grads\"\n            ]\n         ],\n         \"backward\": [\n            [\n               \"tensors\"\n            ],\n            [\n               \"grad_tensors\",\n               null\n            ],\n            [\n               \"retain_graph\",\n               null\n            ],\n            [\n               \"create_graph\",\n               false\n            ],\n            [\n               \"grad_variables\",\n               null\n            ]\n         ],\n         \"grad\": [\n            [\n               \"outputs\"\n            ],\n            [\n               \"inputs\"\n            ],\n            [\n               \"grad_outputs\",\n               null\n            ],\n            [\n               \"retain_graph\",\n               null\n            ],\n            [\n               \"create_graph\",\n               false\n            ],\n            [\n               \"only_inputs\",\n               true\n            ],\n            [\n               \"allow_unused\",\n               false\n            ]\n         ],\n         \"variable\": []\n      },\n      \"torch.autograd._functions.utils\": {\n         \"check_onnx_broadcast\": [\n            [\n               \"dims1\"\n            ],\n            [\n               \"dims2\"\n            ]\n         ],\n         \"maybe_unexpand\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"old_size\"\n            ],\n            [\n               \"check_same_size\",\n               true\n            ]\n         ],\n         \"maybe_view\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"size\"\n            ],\n            [\n               \"check_same_size\",\n               true\n            ]\n         ]\n      },\n      \"torch.autograd.function\": {\n         \"_iter_filter\": [\n            [\n               \"condition\"\n            ],\n            [\n               \"allow_unknown\",\n               false\n            ],\n            [\n               \"condition_msg\",\n               null\n            ],\n            [\n               \"conversion\",\n               null\n            ]\n         ],\n         \"_jit_unwrap_structured\": [\n            [\n               \"obj\"\n            ]\n         ],\n         \"_nested_map\": [\n            [\n               \"condition\"\n            ],\n            [\n               \"fn\"\n            ],\n            [\n               \"condition_msg\",\n               null\n            ]\n         ],\n         \"_unflatten\": [\n            [\n               \"input\"\n            ],\n            [\n               \"proto\"\n            ]\n         ],\n         \"once_differentiable\": [\n            [\n               \"fn\"\n            ]\n         ],\n         \"traceable\": [\n            [\n               \"fn_cls\"\n            ]\n         ]\n      },\n      \"torch.autograd.functional\": {\n         \"_as_tuple\": [\n            [\n               \"inp\"\n            ],\n            [\n               \"arg_name\"\n            ],\n            [\n               \"fn_name\"\n            ]\n         ],\n         \"_autograd_grad\": [\n            [\n               \"outputs\"\n            ],\n            [\n               \"inputs\"\n            ],\n            [\n               \"grad_outputs\",\n               null\n            ],\n            [\n               \"create_graph\",\n               false\n            ],\n            [\n               \"retain_graph\",\n               null\n            ]\n         ],\n         \"_check_requires_grad\": [\n            [\n               \"inputs\"\n            ],\n            [\n               \"input_type\"\n            ],\n            [\n               \"strict\"\n            ]\n         ],\n         \"_fill_in_zeros\": [\n            [\n               \"grads\"\n            ],\n            [\n               \"refs\"\n            ],\n            [\n               \"strict\"\n            ],\n            [\n               \"create_graph\"\n            ],\n            [\n               \"stage\"\n            ]\n         ],\n         \"_grad_postprocess\": [\n            [\n               \"inputs\"\n            ],\n            [\n               \"create_graph\"\n            ]\n         ],\n         \"_grad_preprocess\": [\n            [\n               \"inputs\"\n            ],\n            [\n               \"create_graph\"\n            ],\n            [\n               \"need_graph\"\n            ]\n         ],\n         \"_tuple_postprocess\": [\n            [\n               \"res\"\n            ],\n            [\n               \"to_unpack\"\n            ]\n         ],\n         \"_validate_v\": [\n            [\n               \"v\"\n            ],\n            [\n               \"other\"\n            ],\n            [\n               \"is_other_tuple\"\n            ]\n         ],\n         \"hessian\": [\n            [\n               \"func\"\n            ],\n            [\n               \"inputs\"\n            ],\n            [\n               \"create_graph\",\n               false\n            ],\n            [\n               \"strict\",\n               false\n            ]\n         ],\n         \"hvp\": [\n            [\n               \"func\"\n            ],\n            [\n               \"inputs\"\n            ],\n            [\n               \"v\",\n               null\n            ],\n            [\n               \"create_graph\",\n               false\n            ],\n            [\n               \"strict\",\n               false\n            ]\n         ],\n         \"jacobian\": [\n            [\n               \"func\"\n            ],\n            [\n               \"inputs\"\n            ],\n            [\n               \"create_graph\",\n               false\n            ],\n            [\n               \"strict\",\n               false\n            ]\n         ],\n         \"jvp\": [\n            [\n               \"func\"\n            ],\n            [\n               \"inputs\"\n            ],\n            [\n               \"v\",\n               null\n            ],\n            [\n               \"create_graph\",\n               false\n            ],\n            [\n               \"strict\",\n               false\n            ]\n         ],\n         \"vhp\": [\n            [\n               \"func\"\n            ],\n            [\n               \"inputs\"\n            ],\n            [\n               \"v\",\n               null\n            ],\n            [\n               \"create_graph\",\n               false\n            ],\n            [\n               \"strict\",\n               false\n            ]\n         ],\n         \"vjp\": [\n            [\n               \"func\"\n            ],\n            [\n               \"inputs\"\n            ],\n            [\n               \"v\",\n               null\n            ],\n            [\n               \"create_graph\",\n               false\n            ],\n            [\n               \"strict\",\n               false\n            ]\n         ]\n      },\n      \"torch.autograd.gradcheck\": {\n         \"_as_tuple\": [\n            [\n               \"x\"\n            ]\n         ],\n         \"_differentiable_outputs\": [\n            [\n               \"x\"\n            ]\n         ],\n         \"get_analytical_jacobian\": [\n            [\n               \"input\"\n            ],\n            [\n               \"output\"\n            ],\n            [\n               \"nondet_tol\",\n               0.0\n            ]\n         ],\n         \"get_numerical_jacobian\": [\n            [\n               \"fn\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"target\",\n               null\n            ],\n            [\n               \"eps\",\n               0.001\n            ]\n         ],\n         \"gradcheck\": [\n            [\n               \"func\"\n            ],\n            [\n               \"inputs\"\n            ],\n            [\n               \"eps\",\n               1e-06\n            ],\n            [\n               \"atol\",\n               1e-05\n            ],\n            [\n               \"rtol\",\n               0.001\n            ],\n            [\n               \"raise_exception\",\n               true\n            ],\n            [\n               \"check_sparse_nnz\",\n               false\n            ],\n            [\n               \"nondet_tol\",\n               0.0\n            ]\n         ],\n         \"gradgradcheck\": [\n            [\n               \"func\"\n            ],\n            [\n               \"inputs\"\n            ],\n            [\n               \"grad_outputs\",\n               null\n            ],\n            [\n               \"eps\",\n               1e-06\n            ],\n            [\n               \"atol\",\n               1e-05\n            ],\n            [\n               \"rtol\",\n               0.001\n            ],\n            [\n               \"gen_non_contig_grad_outputs\",\n               false\n            ],\n            [\n               \"raise_exception\",\n               true\n            ],\n            [\n               \"nondet_tol\",\n               0.0\n            ]\n         ],\n         \"iter_tensors\": [\n            [\n               \"x\"\n            ],\n            [\n               \"only_requiring_grad\",\n               false\n            ]\n         ],\n         \"make_jacobian\": [\n            [\n               \"input\"\n            ],\n            [\n               \"num_out\"\n            ]\n         ],\n         \"zero_gradients\": [\n            [\n               \"x\"\n            ]\n         ]\n      },\n      \"torch.autograd.profiler\": {\n         \"attr_formatter\": [\n            [\n               \"name\"\n            ]\n         ],\n         \"build_table\": [\n            [\n               \"events\"\n            ],\n            [\n               \"sort_by\",\n               null\n            ],\n            [\n               \"header\",\n               null\n            ],\n            [\n               \"row_limit\",\n               100\n            ],\n            [\n               \"use_cuda\",\n               true\n            ]\n         ],\n         \"format_time\": [\n            [\n               \"time_us\"\n            ]\n         ],\n         \"format_time_share\": [\n            [\n               \"time_us\"\n            ],\n            [\n               \"total_time_us\"\n            ]\n         ],\n         \"load_nvprof\": [\n            [\n               \"path\"\n            ]\n         ],\n         \"parse_cpu_trace\": [\n            [\n               \"thread_records\"\n            ]\n         ],\n         \"parse_nvprof_trace\": [\n            [\n               \"path\"\n            ]\n         ]\n      },\n      \"torch.backends.__init__\": {\n         \"__allow_nonbracketed_mutation\": [],\n         \"disable_global_flags\": [],\n         \"flags_frozen\": []\n      },\n      \"torch.backends.cuda.__init__\": {\n         \"is_built\": []\n      },\n      \"torch.backends.cudnn.__init__\": {\n         \"_init\": [],\n         \"flags\": [\n            [\n               \"enabled\",\n               false\n            ],\n            [\n               \"benchmark\",\n               false\n            ],\n            [\n               \"deterministic\",\n               false\n            ],\n            [\n               \"verbose\",\n               false\n            ]\n         ],\n         \"is_acceptable\": [\n            [\n               \"tensor\"\n            ]\n         ],\n         \"is_available\": [],\n         \"set_flags\": [\n            [\n               \"_enabled\"\n            ],\n            [\n               \"_benchmark\"\n            ],\n            [\n               \"_deterministic\"\n            ],\n            [\n               \"_verbose\"\n            ]\n         ],\n         \"version\": []\n      },\n      \"torch.backends.cudnn.rnn\": {\n         \"get_cudnn_mode\": [\n            [\n               \"mode\"\n            ]\n         ],\n         \"init_dropout_state\": [\n            [\n               \"dropout\"\n            ],\n            [\n               \"train\"\n            ],\n            [\n               \"dropout_seed\"\n            ],\n            [\n               \"dropout_state\"\n            ]\n         ]\n      },\n      \"torch.backends.mkl.__init__\": {\n         \"is_available\": []\n      },\n      \"torch.backends.mkldnn.__init__\": {\n         \"flags\": [\n            [\n               \"enabled\",\n               false\n            ]\n         ],\n         \"is_available\": [],\n         \"set_flags\": [\n            [\n               \"_enabled\"\n            ]\n         ]\n      },\n      \"torch.backends.openmp.__init__\": {\n         \"is_available\": []\n      },\n      \"torch.backends.quantized.__init__\": {\n         \"_get_qengine_id\": [\n            [\n               \"qengine\"\n            ]\n         ],\n         \"_get_qengine_str\": [\n            [\n               \"qengine\"\n            ]\n         ]\n      },\n      \"torch.contrib._tensorboard_vis\": {\n         \"dump_tensorboard_summary\": [\n            [\n               \"graph_executor\"\n            ],\n            [\n               \"logdir\"\n            ]\n         ],\n         \"visualize\": [\n            [\n               \"graph\"\n            ],\n            [\n               \"name_prefix\",\n               \"\"\n            ],\n            [\n               \"pb_graph\",\n               null\n            ],\n            [\n               \"executors_it\",\n               null\n            ]\n         ],\n         \"visualize_graph_executor\": [\n            [\n               \"state\"\n            ],\n            [\n               \"name_prefix\"\n            ],\n            [\n               \"pb_graph\"\n            ],\n            [\n               \"inline_graph\"\n            ]\n         ],\n         \"visualize_rec\": [\n            [\n               \"graph\"\n            ],\n            [\n               \"value_map\"\n            ],\n            [\n               \"name_prefix\"\n            ],\n            [\n               \"pb_graph\"\n            ],\n            [\n               \"executors_it\",\n               null\n            ]\n         ]\n      },\n      \"torch.cuda.__init__\": {\n         \"_check_capability\": [],\n         \"_check_driver\": [],\n         \"_dummy_type\": [\n            [\n               \"name\"\n            ]\n         ],\n         \"_lazy_call\": [\n            [\n               \"callable\"\n            ]\n         ],\n         \"_lazy_init\": [],\n         \"_lazy_new\": [\n            [\n               \"cls\"\n            ]\n         ],\n         \"_sleep\": [\n            [\n               \"cycles\"\n            ]\n         ],\n         \"check_error\": [\n            [\n               \"res\"\n            ]\n         ],\n         \"cudart\": [],\n         \"current_blas_handle\": [],\n         \"current_device\": [],\n         \"current_stream\": [\n            [\n               \"device\",\n               null\n            ]\n         ],\n         \"default_stream\": [\n            [\n               \"device\",\n               null\n            ]\n         ],\n         \"device_count\": [],\n         \"get_device_capability\": [\n            [\n               \"device\",\n               null\n            ]\n         ],\n         \"get_device_name\": [\n            [\n               \"device\",\n               null\n            ]\n         ],\n         \"get_device_properties\": [\n            [\n               \"device\"\n            ]\n         ],\n         \"init\": [],\n         \"ipc_collect\": [],\n         \"is_available\": [],\n         \"is_initialized\": [],\n         \"set_device\": [\n            [\n               \"device\"\n            ]\n         ],\n         \"stream\": [\n            [\n               \"stream\"\n            ]\n         ],\n         \"synchronize\": [\n            [\n               \"device\",\n               null\n            ]\n         ]\n      },\n      \"torch.cuda._utils\": {\n         \"_get_device_index\": [\n            [\n               \"device\"\n            ],\n            [\n               \"optional\",\n               false\n            ]\n         ]\n      },\n      \"torch.cuda.comm\": {\n         \"broadcast\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"devices\"\n            ]\n         ],\n         \"broadcast_coalesced\": [\n            [\n               \"tensors\"\n            ],\n            [\n               \"devices\"\n            ],\n            [\n               \"buffer_size\",\n               10485760\n            ]\n         ],\n         \"gather\": [\n            [\n               \"tensors\"\n            ],\n            [\n               \"dim\",\n               0\n            ],\n            [\n               \"destination\",\n               null\n            ]\n         ],\n         \"reduce_add\": [\n            [\n               \"inputs\"\n            ],\n            [\n               \"destination\",\n               null\n            ]\n         ],\n         \"reduce_add_coalesced\": [\n            [\n               \"inputs\"\n            ],\n            [\n               \"destination\",\n               null\n            ],\n            [\n               \"buffer_size\",\n               10485760\n            ]\n         ],\n         \"scatter\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"devices\"\n            ],\n            [\n               \"chunk_sizes\",\n               null\n            ],\n            [\n               \"dim\",\n               0\n            ],\n            [\n               \"streams\",\n               null\n            ]\n         ]\n      },\n      \"torch.cuda.memory\": {\n         \"_free_mutex\": [],\n         \"_host_allocator\": [],\n         \"caching_allocator_alloc\": [\n            [\n               \"size\"\n            ],\n            [\n               \"device\",\n               null\n            ],\n            [\n               \"stream\",\n               null\n            ]\n         ],\n         \"caching_allocator_delete\": [\n            [\n               \"mem_ptr\"\n            ]\n         ],\n         \"empty_cache\": [],\n         \"max_memory_allocated\": [\n            [\n               \"device\",\n               null\n            ]\n         ],\n         \"max_memory_cached\": [\n            [\n               \"device\",\n               null\n            ]\n         ],\n         \"max_memory_reserved\": [\n            [\n               \"device\",\n               null\n            ]\n         ],\n         \"memory_allocated\": [\n            [\n               \"device\",\n               null\n            ]\n         ],\n         \"memory_cached\": [\n            [\n               \"device\",\n               null\n            ]\n         ],\n         \"memory_reserved\": [\n            [\n               \"device\",\n               null\n            ]\n         ],\n         \"memory_snapshot\": [],\n         \"memory_stats\": [\n            [\n               \"device\",\n               null\n            ]\n         ],\n         \"memory_stats_as_nested_dict\": [\n            [\n               \"device\",\n               null\n            ]\n         ],\n         \"memory_summary\": [\n            [\n               \"device\",\n               null\n            ],\n            [\n               \"abbreviated\",\n               false\n            ]\n         ],\n         \"reset_accumulated_memory_stats\": [\n            [\n               \"device\",\n               null\n            ]\n         ],\n         \"reset_max_memory_allocated\": [\n            [\n               \"device\",\n               null\n            ]\n         ],\n         \"reset_max_memory_cached\": [\n            [\n               \"device\",\n               null\n            ]\n         ],\n         \"reset_peak_memory_stats\": [\n            [\n               \"device\",\n               null\n            ]\n         ]\n      },\n      \"torch.cuda.nccl\": {\n         \"all_gather\": [\n            [\n               \"inputs\"\n            ],\n            [\n               \"outputs\"\n            ],\n            [\n               \"streams\",\n               null\n            ],\n            [\n               \"comms\",\n               null\n            ]\n         ],\n         \"all_reduce\": [\n            [\n               \"inputs\"\n            ],\n            [\n               \"outputs\",\n               null\n            ],\n            [\n               \"op\",\n               \"SUM\"\n            ],\n            [\n               \"streams\",\n               null\n            ],\n            [\n               \"comms\",\n               null\n            ]\n         ],\n         \"broadcast\": [\n            [\n               \"inputs\"\n            ],\n            [\n               \"root\",\n               0\n            ],\n            [\n               \"streams\",\n               null\n            ],\n            [\n               \"comms\",\n               null\n            ]\n         ],\n         \"init_rank\": [\n            [\n               \"num_ranks\"\n            ],\n            [\n               \"uid\"\n            ],\n            [\n               \"rank\"\n            ]\n         ],\n         \"is_available\": [\n            [\n               \"tensors\"\n            ]\n         ],\n         \"reduce\": [\n            [\n               \"inputs\"\n            ],\n            [\n               \"outputs\",\n               null\n            ],\n            [\n               \"root\",\n               0\n            ],\n            [\n               \"op\",\n               \"SUM\"\n            ],\n            [\n               \"streams\",\n               null\n            ],\n            [\n               \"comms\",\n               null\n            ]\n         ],\n         \"reduce_scatter\": [\n            [\n               \"inputs\"\n            ],\n            [\n               \"outputs\"\n            ],\n            [\n               \"op\",\n               \"SUM\"\n            ],\n            [\n               \"streams\",\n               null\n            ],\n            [\n               \"comms\",\n               null\n            ]\n         ],\n         \"unique_id\": [],\n         \"version\": []\n      },\n      \"torch.cuda.nvtx\": {\n         \"mark\": [\n            [\n               \"msg\"\n            ]\n         ],\n         \"range_pop\": [],\n         \"range_push\": [\n            [\n               \"msg\"\n            ]\n         ]\n      },\n      \"torch.cuda.profiler\": {\n         \"init\": [\n            [\n               \"output_file\"\n            ],\n            [\n               \"flags\",\n               null\n            ],\n            [\n               \"output_mode\",\n               \"key_value\"\n            ]\n         ],\n         \"profile\": [],\n         \"start\": [],\n         \"stop\": []\n      },\n      \"torch.cuda.random\": {\n         \"get_rng_state\": [\n            [\n               \"device\",\n               \"cuda\"\n            ]\n         ],\n         \"get_rng_state_all\": [],\n         \"initial_seed\": [],\n         \"manual_seed\": [\n            [\n               \"seed\"\n            ]\n         ],\n         \"manual_seed_all\": [\n            [\n               \"seed\"\n            ]\n         ],\n         \"seed\": [],\n         \"seed_all\": [],\n         \"set_rng_state\": [\n            [\n               \"new_state\"\n            ],\n            [\n               \"device\",\n               \"cuda\"\n            ]\n         ],\n         \"set_rng_state_all\": [\n            [\n               \"new_states\"\n            ]\n         ]\n      },\n      \"torch.distributed.__init__\": {\n         \"is_available\": []\n      },\n      \"torch.distributed.autograd.__init__\": {\n         \"is_available\": []\n      },\n      \"torch.distributed.distributed_c10d\": {\n         \"_check_default_pg\": [],\n         \"_check_single_tensor\": [\n            [\n               \"param\"\n            ],\n            [\n               \"param_name\"\n            ]\n         ],\n         \"_check_tensor_list\": [\n            [\n               \"param\"\n            ],\n            [\n               \"param_name\"\n            ]\n         ],\n         \"_get_default_group\": [],\n         \"_get_default_store\": [],\n         \"_get_global_rank\": [\n            [\n               \"group\"\n            ],\n            [\n               \"group_rank\"\n            ]\n         ],\n         \"_get_group_rank\": [\n            [\n               \"group\"\n            ],\n            [\n               \"rank\"\n            ]\n         ],\n         \"_get_group_size\": [\n            [\n               \"group\"\n            ]\n         ],\n         \"_new_process_group_helper\": [\n            [\n               \"world_size\"\n            ],\n            [\n               \"rank\"\n            ],\n            [\n               \"group_ranks\"\n            ],\n            [\n               \"backend\"\n            ],\n            [\n               \"store\"\n            ],\n            [\n               \"group_name\",\n               null\n            ],\n            [\n               \"timeout\",\n               \"default_pg_timeout\"\n            ]\n         ],\n         \"_rank_not_in_group\": [\n            [\n               \"group\"\n            ]\n         ],\n         \"all_gather\": [\n            [\n               \"tensor_list\"\n            ],\n            [\n               \"tensor\"\n            ],\n            [\n               \"group\",\n               {\n                  \"col_offset\": 21,\n                  \"ctx\": {},\n                  \"id\": \"group\",\n                  \"lineno\": 1123\n               }\n            ],\n            [\n               \"async_op\",\n               false\n            ]\n         ],\n         \"all_gather_coalesced\": [\n            [\n               \"output_tensor_lists\"\n            ],\n            [\n               \"input_tensor_list\"\n            ],\n            [\n               \"group\",\n               {\n                  \"col_offset\": 31,\n                  \"ctx\": {},\n                  \"id\": \"group\",\n                  \"lineno\": 1158\n               }\n            ],\n            [\n               \"async_op\",\n               false\n            ]\n         ],\n         \"all_gather_multigpu\": [\n            [\n               \"output_tensor_lists\"\n            ],\n            [\n               \"input_tensor_list\"\n            ],\n            [\n               \"group\",\n               {\n                  \"col_offset\": 30,\n                  \"ctx\": {},\n                  \"id\": \"group\",\n                  \"lineno\": 1065\n               }\n            ],\n            [\n               \"async_op\",\n               false\n            ]\n         ],\n         \"all_reduce\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"op\",\n               {\n                  \"col_offset\": 18,\n                  \"ctx\": {},\n                  \"id\": \"ReduceOp\",\n                  \"lineno\": 867\n               }\n            ],\n            [\n               \"group\",\n               {\n                  \"col_offset\": 21,\n                  \"ctx\": {},\n                  \"id\": \"group\",\n                  \"lineno\": 868\n               }\n            ],\n            [\n               \"async_op\",\n               false\n            ]\n         ],\n         \"all_reduce_coalesced\": [\n            [\n               \"tensors\"\n            ],\n            [\n               \"op\",\n               {\n                  \"col_offset\": 28,\n                  \"ctx\": {},\n                  \"id\": \"ReduceOp\",\n                  \"lineno\": 909\n               }\n            ],\n            [\n               \"group\",\n               {\n                  \"col_offset\": 31,\n                  \"ctx\": {},\n                  \"id\": \"group\",\n                  \"lineno\": 910\n               }\n            ],\n            [\n               \"async_op\",\n               false\n            ]\n         ],\n         \"all_reduce_multigpu\": [\n            [\n               \"tensor_list\"\n            ],\n            [\n               \"op\",\n               {\n                  \"col_offset\": 27,\n                  \"ctx\": {},\n                  \"id\": \"ReduceOp\",\n                  \"lineno\": 816\n               }\n            ],\n            [\n               \"group\",\n               {\n                  \"col_offset\": 30,\n                  \"ctx\": {},\n                  \"id\": \"group\",\n                  \"lineno\": 817\n               }\n            ],\n            [\n               \"async_op\",\n               false\n            ]\n         ],\n         \"barrier\": [\n            [\n               \"group\",\n               {\n                  \"col_offset\": 18,\n                  \"ctx\": {},\n                  \"id\": \"group\",\n                  \"lineno\": 1464\n               }\n            ],\n            [\n               \"async_op\",\n               false\n            ]\n         ],\n         \"broadcast\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"src\"\n            ],\n            [\n               \"group\",\n               {\n                  \"col_offset\": 20,\n                  \"ctx\": {},\n                  \"id\": \"group\",\n                  \"lineno\": 774\n               }\n            ],\n            [\n               \"async_op\",\n               false\n            ]\n         ],\n         \"broadcast_multigpu\": [\n            [\n               \"tensor_list\"\n            ],\n            [\n               \"src\"\n            ],\n            [\n               \"group\",\n               {\n                  \"col_offset\": 29,\n                  \"ctx\": {},\n                  \"id\": \"group\",\n                  \"lineno\": 719\n               }\n            ],\n            [\n               \"async_op\",\n               false\n            ],\n            [\n               \"src_tensor\",\n               0\n            ]\n         ],\n         \"destroy_process_group\": [\n            [\n               \"group\",\n               {\n                  \"col_offset\": 32,\n                  \"ctx\": {},\n                  \"id\": \"group\",\n                  \"lineno\": 491\n               }\n            ]\n         ],\n         \"gather\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"gather_list\",\n               null\n            ],\n            [\n               \"dst\",\n               0\n            ],\n            [\n               \"group\",\n               {\n                  \"col_offset\": 17,\n                  \"ctx\": {},\n                  \"id\": \"group\",\n                  \"lineno\": 1227\n               }\n            ],\n            [\n               \"async_op\",\n               false\n            ]\n         ],\n         \"get_backend\": [\n            [\n               \"group\",\n               {\n                  \"col_offset\": 22,\n                  \"ctx\": {},\n                  \"id\": \"group\",\n                  \"lineno\": 279\n               }\n            ]\n         ],\n         \"get_rank\": [\n            [\n               \"group\",\n               {\n                  \"col_offset\": 19,\n                  \"ctx\": {},\n                  \"id\": \"group\",\n                  \"lineno\": 541\n               }\n            ]\n         ],\n         \"get_world_size\": [\n            [\n               \"group\",\n               {\n                  \"col_offset\": 25,\n                  \"ctx\": {},\n                  \"id\": \"group\",\n                  \"lineno\": 567\n               }\n            ]\n         ],\n         \"init_process_group\": [\n            [\n               \"backend\"\n            ],\n            [\n               \"init_method\",\n               null\n            ],\n            [\n               \"timeout\",\n               \"default_pg_timeout\"\n            ],\n            [\n               \"world_size\",\n               {}\n            ],\n            [\n               \"rank\",\n               {}\n            ],\n            [\n               \"store\",\n               null\n            ],\n            [\n               \"group_name\",\n               \"\"\n            ]\n         ],\n         \"irecv\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"src\"\n            ],\n            [\n               \"group\",\n               {\n                  \"col_offset\": 16,\n                  \"ctx\": {},\n                  \"id\": \"group\",\n                  \"lineno\": 617\n               }\n            ],\n            [\n               \"tag\",\n               0\n            ]\n         ],\n         \"is_gloo_available\": [],\n         \"is_initialized\": [],\n         \"is_mpi_available\": [],\n         \"is_nccl_available\": [],\n         \"isend\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"dst\"\n            ],\n            [\n               \"group\",\n               {\n                  \"col_offset\": 16,\n                  \"ctx\": {},\n                  \"id\": \"group\",\n                  \"lineno\": 587\n               }\n            ],\n            [\n               \"tag\",\n               0\n            ]\n         ],\n         \"new_group\": [\n            [\n               \"ranks\",\n               null\n            ],\n            [\n               \"timeout\",\n               \"default_pg_timeout\"\n            ],\n            [\n               \"backend\",\n               null\n            ]\n         ],\n         \"recv\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"src\",\n               null\n            ],\n            [\n               \"group\",\n               {\n                  \"col_offset\": 15,\n                  \"ctx\": {},\n                  \"id\": \"group\",\n                  \"lineno\": 673\n               }\n            ],\n            [\n               \"tag\",\n               0\n            ]\n         ],\n         \"reduce\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"dst\"\n            ],\n            [\n               \"op\",\n               {\n                  \"col_offset\": 14,\n                  \"ctx\": {},\n                  \"id\": \"ReduceOp\",\n                  \"lineno\": 1018\n               }\n            ],\n            [\n               \"group\",\n               {\n                  \"col_offset\": 17,\n                  \"ctx\": {},\n                  \"id\": \"group\",\n                  \"lineno\": 1019\n               }\n            ],\n            [\n               \"async_op\",\n               false\n            ]\n         ],\n         \"reduce_multigpu\": [\n            [\n               \"tensor_list\"\n            ],\n            [\n               \"dst\"\n            ],\n            [\n               \"op\",\n               {\n                  \"col_offset\": 23,\n                  \"ctx\": {},\n                  \"id\": \"ReduceOp\",\n                  \"lineno\": 961\n               }\n            ],\n            [\n               \"group\",\n               {\n                  \"col_offset\": 26,\n                  \"ctx\": {},\n                  \"id\": \"group\",\n                  \"lineno\": 962\n               }\n            ],\n            [\n               \"async_op\",\n               false\n            ],\n            [\n               \"dst_tensor\",\n               0\n            ]\n         ],\n         \"reduce_scatter\": [\n            [\n               \"output\"\n            ],\n            [\n               \"input_list\"\n            ],\n            [\n               \"op\",\n               {\n                  \"col_offset\": 22,\n                  \"ctx\": {},\n                  \"id\": \"ReduceOp\",\n                  \"lineno\": 1427\n               }\n            ],\n            [\n               \"group\",\n               {\n                  \"col_offset\": 25,\n                  \"ctx\": {},\n                  \"id\": \"group\",\n                  \"lineno\": 1428\n               }\n            ],\n            [\n               \"async_op\",\n               false\n            ]\n         ],\n         \"reduce_scatter_multigpu\": [\n            [\n               \"output_tensor_list\"\n            ],\n            [\n               \"input_tensor_lists\"\n            ],\n            [\n               \"op\",\n               {\n                  \"col_offset\": 31,\n                  \"ctx\": {},\n                  \"id\": \"ReduceOp\",\n                  \"lineno\": 1356\n               }\n            ],\n            [\n               \"group\",\n               {\n                  \"col_offset\": 34,\n                  \"ctx\": {},\n                  \"id\": \"group\",\n                  \"lineno\": 1357\n               }\n            ],\n            [\n               \"async_op\",\n               false\n            ]\n         ],\n         \"scatter\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"scatter_list\",\n               null\n            ],\n            [\n               \"src\",\n               0\n            ],\n            [\n               \"group\",\n               {\n                  \"col_offset\": 18,\n                  \"ctx\": {},\n                  \"id\": \"group\",\n                  \"lineno\": 1291\n               }\n            ],\n            [\n               \"async_op\",\n               false\n            ]\n         ],\n         \"send\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"dst\"\n            ],\n            [\n               \"group\",\n               {\n                  \"col_offset\": 15,\n                  \"ctx\": {},\n                  \"id\": \"group\",\n                  \"lineno\": 647\n               }\n            ],\n            [\n               \"tag\",\n               0\n            ]\n         ]\n      },\n      \"torch.distributed.launch\": {\n         \"main\": [],\n         \"parse_args\": []\n      },\n      \"torch.distributed.optim.optimizer\": {\n         \"_local_optimizer_step\": [\n            [\n               \"local_optim_rref\"\n            ],\n            [\n               \"autograd_ctx_id\"\n            ]\n         ],\n         \"_new_local_optimizer\": [\n            [\n               \"optim_cls\"\n            ],\n            [\n               \"local_params_rref\"\n            ]\n         ],\n         \"_wait_for_all\": [\n            [\n               \"rpc_futs\"\n            ]\n         ]\n      },\n      \"torch.distributed.rendezvous\": {\n         \"_env_rendezvous_handler\": [\n            [\n               \"url\"\n            ],\n            [\n               \"timeout\",\n               \"default_pg_timeout\"\n            ]\n         ],\n         \"_file_rendezvous_handler\": [\n            [\n               \"url\"\n            ]\n         ],\n         \"_rendezvous_error\": [\n            [\n               \"msg\"\n            ]\n         ],\n         \"_tcp_rendezvous_handler\": [\n            [\n               \"url\"\n            ],\n            [\n               \"timeout\",\n               \"default_pg_timeout\"\n            ]\n         ],\n         \"register_rendezvous_handler\": [\n            [\n               \"scheme\"\n            ],\n            [\n               \"handler\"\n            ]\n         ],\n         \"rendezvous\": [\n            [\n               \"url\"\n            ],\n            [\n               \"rank\",\n               {}\n            ],\n            [\n               \"world_size\",\n               {}\n            ]\n         ]\n      },\n      \"torch.distributed.rpc.__init__\": {\n         \"_get_debug_info\": [],\n         \"init_rpc\": [\n            [\n               \"name\"\n            ],\n            [\n               \"backend\",\n               {\n                  \"attr\": \"BackendType\",\n                  \"col_offset\": 16,\n                  \"ctx\": {},\n                  \"lineno\": 25,\n                  \"value\": {\n                     \"col_offset\": 16,\n                     \"ctx\": {},\n                     \"id\": \"backend_registry\",\n                     \"lineno\": 25\n                  }\n               }\n            ],\n            [\n               \"rank\",\n               {}\n            ],\n            [\n               \"world_size\",\n               null\n            ],\n            [\n               \"rpc_backend_options\",\n               null\n            ]\n         ],\n         \"is_available\": []\n      },\n      \"torch.distributed.rpc.api\": {\n         \"_init_rpc_backend\": [\n            [\n               \"backend\",\n               {\n                  \"attr\": \"BackendType\",\n                  \"col_offset\": 12,\n                  \"ctx\": {},\n                  \"lineno\": 260,\n                  \"value\": {\n                     \"col_offset\": 12,\n                     \"ctx\": {},\n                     \"id\": \"backend_registry\",\n                     \"lineno\": 260\n                  }\n               }\n            ],\n            [\n               \"store\",\n               null\n            ],\n            [\n               \"name\",\n               null\n            ],\n            [\n               \"rank\",\n               {}\n            ],\n            [\n               \"world_size\",\n               {}\n            ],\n            [\n               \"rpc_backend_options\",\n               null\n            ]\n         ],\n         \"_invoke_rpc\": [\n            [\n               \"to\"\n            ],\n            [\n               \"func\"\n            ],\n            [\n               \"rpc_type\"\n            ],\n            [\n               \"args\",\n               null\n            ],\n            [\n               \"kwargs\",\n               null\n            ]\n         ],\n         \"_on_leader_follower_report_shutdown_intent\": [\n            [\n               \"sequence_id\"\n            ],\n            [\n               \"worker_name\"\n            ]\n         ],\n         \"_require_initialized\": [\n            [\n               \"func\"\n            ]\n         ],\n         \"_set_proceed_shutdown_signal\": [\n            [\n               \"sequence_id\"\n            ]\n         ],\n         \"_to_worker_info\": [\n            [\n               \"name_or_info\"\n            ]\n         ],\n         \"_use_rpc_pickler\": [\n            [\n               \"rpc_pickler\"\n            ]\n         ],\n         \"_validate_rpc_args\": [\n            [\n               \"backend\"\n            ],\n            [\n               \"store\"\n            ],\n            [\n               \"name\"\n            ],\n            [\n               \"rank\"\n            ],\n            [\n               \"world_size\"\n            ],\n            [\n               \"rpc_backend_options\"\n            ]\n         ],\n         \"_wait_all_workers\": [],\n         \"get_worker_info\": [\n            [\n               \"worker_name\",\n               null\n            ]\n         ],\n         \"remote\": [\n            [\n               \"to\"\n            ],\n            [\n               \"func\"\n            ],\n            [\n               \"args\",\n               null\n            ],\n            [\n               \"kwargs\",\n               null\n            ]\n         ],\n         \"rpc_async\": [\n            [\n               \"to\"\n            ],\n            [\n               \"func\"\n            ],\n            [\n               \"args\",\n               null\n            ],\n            [\n               \"kwargs\",\n               null\n            ]\n         ],\n         \"rpc_sync\": [\n            [\n               \"to\"\n            ],\n            [\n               \"func\"\n            ],\n            [\n               \"args\",\n               null\n            ],\n            [\n               \"kwargs\",\n               null\n            ]\n         ],\n         \"shutdown\": [\n            [\n               \"graceful\",\n               true\n            ]\n         ]\n      },\n      \"torch.distributed.rpc.backend_registry\": {\n         \"_backend_type_repr\": [\n            [\n               \"self\"\n            ]\n         ],\n         \"_process_group_construct_rpc_backend_options_handler\": [\n            [\n               \"rpc_timeout\"\n            ],\n            [\n               \"init_method\"\n            ],\n            [\n               \"num_send_recv_threads\",\n               {\n                  \"col_offset\": 26,\n                  \"ctx\": {},\n                  \"id\": \"rpc_constants\",\n                  \"lineno\": 81\n               }\n            ]\n         ],\n         \"_process_group_init_backend_handler\": [\n            [\n               \"store\"\n            ],\n            [\n               \"name\"\n            ],\n            [\n               \"rank\"\n            ],\n            [\n               \"world_size\"\n            ],\n            [\n               \"rpc_backend_options\"\n            ]\n         ],\n         \"construct_rpc_backend_options\": [\n            [\n               \"backend\"\n            ],\n            [\n               \"rpc_timeout\",\n               {\n                  \"col_offset\": 16,\n                  \"ctx\": {},\n                  \"id\": \"rpc_constants\",\n                  \"lineno\": 62\n               }\n            ],\n            [\n               \"init_method\",\n               {\n                  \"col_offset\": 16,\n                  \"ctx\": {},\n                  \"id\": \"rpc_constants\",\n                  \"lineno\": 63\n               }\n            ]\n         ],\n         \"init_backend\": [\n            [\n               \"backend\"\n            ]\n         ],\n         \"register_backend\": [\n            [\n               \"backend_name\"\n            ],\n            [\n               \"construct_rpc_backend_options_handler\"\n            ],\n            [\n               \"init_backend_handler\"\n            ]\n         ]\n      },\n      \"torch.distributed.rpc.internal\": {\n         \"_handle_exception\": [\n            [\n               \"result\"\n            ]\n         ],\n         \"_run_function\": [\n            [\n               \"python_udf\"\n            ]\n         ],\n         \"_start_record_function\": [\n            [\n               \"exec_type\"\n            ],\n            [\n               \"func_name\"\n            ],\n            [\n               \"current_worker_name\"\n            ],\n            [\n               \"dest_worker_name\"\n            ]\n         ],\n         \"deserialize\": [\n            [\n               \"binary_data\"\n            ],\n            [\n               \"tensor_table\"\n            ]\n         ],\n         \"serialize\": [\n            [\n               \"obj\"\n            ]\n         ]\n      },\n      \"torch.distributions.binomial\": {\n         \"_clamp_by_zero\": [\n            [\n               \"x\"\n            ]\n         ]\n      },\n      \"torch.distributions.constraint_registry\": {\n         \"_biject_to_cat\": [\n            [\n               \"constraint\"\n            ]\n         ],\n         \"_biject_to_simplex\": [\n            [\n               \"constraint\"\n            ]\n         ],\n         \"_biject_to_stack\": [\n            [\n               \"constraint\"\n            ]\n         ],\n         \"_transform_to_cat\": [\n            [\n               \"constraint\"\n            ]\n         ],\n         \"_transform_to_greater_than\": [\n            [\n               \"constraint\"\n            ]\n         ],\n         \"_transform_to_interval\": [\n            [\n               \"constraint\"\n            ]\n         ],\n         \"_transform_to_less_than\": [\n            [\n               \"constraint\"\n            ]\n         ],\n         \"_transform_to_lower_cholesky\": [\n            [\n               \"constraint\"\n            ]\n         ],\n         \"_transform_to_positive\": [\n            [\n               \"constraint\"\n            ]\n         ],\n         \"_transform_to_real\": [\n            [\n               \"constraint\"\n            ]\n         ],\n         \"_transform_to_simplex\": [\n            [\n               \"constraint\"\n            ]\n         ],\n         \"_transform_to_stack\": [\n            [\n               \"constraint\"\n            ]\n         ]\n      },\n      \"torch.distributions.constraints\": {\n         \"is_dependent\": [\n            [\n               \"constraint\"\n            ]\n         ]\n      },\n      \"torch.distributions.dirichlet\": {\n         \"_Dirichlet_backward\": [\n            [\n               \"x\"\n            ],\n            [\n               \"concentration\"\n            ],\n            [\n               \"grad_output\"\n            ]\n         ]\n      },\n      \"torch.distributions.gamma\": {\n         \"_standard_gamma\": [\n            [\n               \"concentration\"\n            ]\n         ]\n      },\n      \"torch.distributions.kl\": {\n         \"_batch_trace_XXT\": [\n            [\n               \"bmat\"\n            ]\n         ],\n         \"_dispatch_kl\": [\n            [\n               \"type_p\"\n            ],\n            [\n               \"type_q\"\n            ]\n         ],\n         \"_infinite_like\": [\n            [\n               \"tensor\"\n            ]\n         ],\n         \"_kl_bernoulli_bernoulli\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_bernoulli_poisson\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_beta_beta\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_beta_continuous_bernoulli\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_beta_exponential\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_beta_gamma\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_beta_infinity\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_beta_normal\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_beta_uniform\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_binomial_binomial\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_categorical_categorical\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_continuous_bernoulli_continuous_bernoulli\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_continuous_bernoulli_exponential\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_continuous_bernoulli_infinity\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_continuous_bernoulli_normal\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_continuous_bernoulli_uniform\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_dirichlet_dirichlet\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_expfamily_expfamily\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_exponential_exponential\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_exponential_gamma\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_exponential_gumbel\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_exponential_infinity\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_exponential_normal\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_gamma_exponential\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_gamma_gamma\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_gamma_gumbel\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_gamma_infinity\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_gamma_normal\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_geometric_geometric\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_gumbel_gumbel\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_gumbel_infinity\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_gumbel_normal\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_halfnormal_halfnormal\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_independent_independent\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_laplace_infinity\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_laplace_laplace\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_laplace_normal\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_lowrankmultivariatenormal_lowrankmultivariatenormal\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_lowrankmultivariatenormal_multivariatenormal\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_multivariatenormal_lowrankmultivariatenormal\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_multivariatenormal_multivariatenormal\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_normal_gumbel\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_normal_infinity\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_normal_normal\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_onehotcategorical_onehotcategorical\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_pareto_exponential\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_pareto_gamma\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_pareto_infinity\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_pareto_normal\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_pareto_pareto\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_poisson_infinity\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_poisson_poisson\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_transformed_transformed\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_uniform_beta\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_uniform_continuous_bernoulli\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_uniform_exponetial\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_uniform_gamma\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_uniform_gumbel\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_uniform_normal\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_uniform_pareto\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_kl_uniform_uniform\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"_x_log_x\": [\n            [\n               \"tensor\"\n            ]\n         ],\n         \"kl_divergence\": [\n            [\n               \"p\"\n            ],\n            [\n               \"q\"\n            ]\n         ],\n         \"register_kl\": [\n            [\n               \"type_p\"\n            ],\n            [\n               \"type_q\"\n            ]\n         ]\n      },\n      \"torch.distributions.lowrank_multivariate_normal\": {\n         \"_batch_capacitance_tril\": [\n            [\n               \"W\"\n            ],\n            [\n               \"D\"\n            ]\n         ],\n         \"_batch_lowrank_logdet\": [\n            [\n               \"W\"\n            ],\n            [\n               \"D\"\n            ],\n            [\n               \"capacitance_tril\"\n            ]\n         ],\n         \"_batch_lowrank_mahalanobis\": [\n            [\n               \"W\"\n            ],\n            [\n               \"D\"\n            ],\n            [\n               \"x\"\n            ],\n            [\n               \"capacitance_tril\"\n            ]\n         ]\n      },\n      \"torch.distributions.multivariate_normal\": {\n         \"_batch_mahalanobis\": [\n            [\n               \"bL\"\n            ],\n            [\n               \"bx\"\n            ]\n         ],\n         \"_batch_mv\": [\n            [\n               \"bmat\"\n            ],\n            [\n               \"bvec\"\n            ]\n         ],\n         \"_precision_to_scale_tril\": [\n            [\n               \"P\"\n            ]\n         ]\n      },\n      \"torch.distributions.transforms\": {\n         \"_clipped_sigmoid\": [\n            [\n               \"x\"\n            ]\n         ]\n      },\n      \"torch.distributions.utils\": {\n         \"_standard_normal\": [\n            [\n               \"shape\"\n            ],\n            [\n               \"dtype\"\n            ],\n            [\n               \"device\"\n            ]\n         ],\n         \"_sum_rightmost\": [\n            [\n               \"value\"\n            ],\n            [\n               \"dim\"\n            ]\n         ],\n         \"broadcast_all\": [],\n         \"clamp_probs\": [\n            [\n               \"probs\"\n            ]\n         ],\n         \"logits_to_probs\": [\n            [\n               \"logits\"\n            ],\n            [\n               \"is_binary\",\n               false\n            ]\n         ],\n         \"probs_to_logits\": [\n            [\n               \"probs\"\n            ],\n            [\n               \"is_binary\",\n               false\n            ]\n         ]\n      },\n      \"torch.distributions.von_mises\": {\n         \"_eval_poly\": [\n            [\n               \"y\"\n            ],\n            [\n               \"coef\"\n            ]\n         ],\n         \"_log_modified_bessel_fn\": [\n            [\n               \"x\"\n            ],\n            [\n               \"order\",\n               0\n            ]\n         ],\n         \"_rejection_sample\": [\n            [\n               \"loc\"\n            ],\n            [\n               \"concentration\"\n            ],\n            [\n               \"proposal_r\"\n            ],\n            [\n               \"x\"\n            ]\n         ]\n      },\n      \"torch.functional\": {\n         \"_check_list_size\": [\n            [\n               \"out_len\"\n            ],\n            [\n               \"get_infos\"\n            ],\n            [\n               \"out\"\n            ]\n         ],\n         \"_index_tensor_with_indices_list\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"indices\"\n            ]\n         ],\n         \"_indices_product\": [\n            [\n               \"indices\"\n            ]\n         ],\n         \"_lu_impl\": [\n            [\n               \"A\"\n            ],\n            [\n               \"pivot\",\n               true\n            ],\n            [\n               \"get_infos\",\n               false\n            ],\n            [\n               \"out\",\n               null\n            ]\n         ],\n         \"_lu_no_infos\": [\n            [\n               \"A\"\n            ],\n            [\n               \"pivot\",\n               true\n            ],\n            [\n               \"get_infos\",\n               false\n            ],\n            [\n               \"out\",\n               null\n            ]\n         ],\n         \"_lu_with_infos\": [\n            [\n               \"A\"\n            ],\n            [\n               \"pivot\",\n               true\n            ],\n            [\n               \"get_infos\",\n               false\n            ],\n            [\n               \"out\",\n               null\n            ]\n         ],\n         \"align_tensors\": [],\n         \"broadcast_tensors\": [],\n         \"cartesian_prod\": [],\n         \"cdist\": [\n            [\n               \"x1\"\n            ],\n            [\n               \"x2\"\n            ],\n            [\n               \"p\",\n               2.0\n            ],\n            [\n               \"compute_mode\",\n               \"use_mm_for_euclid_dist_if_necessary\"\n            ]\n         ],\n         \"chain_matmul\": [],\n         \"einsum\": [\n            [\n               \"equation\"\n            ]\n         ],\n         \"lu_unpack\": [\n            [\n               \"LU_data\"\n            ],\n            [\n               \"LU_pivots\"\n            ],\n            [\n               \"unpack_data\",\n               true\n            ],\n            [\n               \"unpack_pivots\",\n               true\n            ]\n         ],\n         \"meshgrid\": [],\n         \"norm\": [\n            [\n               \"input\"\n            ],\n            [\n               \"p\",\n               \"fro\"\n            ],\n            [\n               \"dim\",\n               null\n            ],\n            [\n               \"keepdim\",\n               false\n            ],\n            [\n               \"out\",\n               null\n            ],\n            [\n               \"dtype\",\n               null\n            ]\n         ],\n         \"split\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"split_size_or_sections\"\n            ],\n            [\n               \"dim\",\n               0\n            ]\n         ],\n         \"stft\": [\n            [\n               \"input\"\n            ],\n            [\n               \"n_fft\"\n            ],\n            [\n               \"hop_length\",\n               null\n            ],\n            [\n               \"win_length\",\n               null\n            ],\n            [\n               \"window\",\n               null\n            ],\n            [\n               \"center\",\n               true\n            ],\n            [\n               \"pad_mode\",\n               \"reflect\"\n            ],\n            [\n               \"normalized\",\n               false\n            ],\n            [\n               \"onesided\",\n               true\n            ]\n         ],\n         \"tensordot\": [\n            [\n               \"a\"\n            ],\n            [\n               \"b\"\n            ],\n            [\n               \"dims\",\n               2\n            ]\n         ],\n         \"unique\": [\n            [\n               \"input\"\n            ],\n            [\n               \"sorted\",\n               true\n            ],\n            [\n               \"return_inverse\",\n               false\n            ],\n            [\n               \"return_counts\",\n               false\n            ],\n            [\n               \"dim\",\n               null\n            ]\n         ],\n         \"unique_consecutive\": [\n            [\n               \"input\"\n            ],\n            [\n               \"return_inverse\",\n               false\n            ],\n            [\n               \"return_counts\",\n               false\n            ],\n            [\n               \"dim\",\n               null\n            ]\n         ]\n      },\n      \"torch.hub\": {\n         \"_check_dependencies\": [\n            [\n               \"m\"\n            ]\n         ],\n         \"_check_module_exists\": [\n            [\n               \"name\"\n            ]\n         ],\n         \"_download_url_to_file\": [\n            [\n               \"url\"\n            ],\n            [\n               \"dst\"\n            ],\n            [\n               \"hash_prefix\",\n               null\n            ],\n            [\n               \"progress\",\n               true\n            ]\n         ],\n         \"_get_cache_or_reload\": [\n            [\n               \"github\"\n            ],\n            [\n               \"force_reload\"\n            ],\n            [\n               \"verbose\",\n               true\n            ]\n         ],\n         \"_get_torch_home\": [],\n         \"_git_archive_link\": [\n            [\n               \"repo_owner\"\n            ],\n            [\n               \"repo_name\"\n            ],\n            [\n               \"branch\"\n            ]\n         ],\n         \"_load_attr_from_module\": [\n            [\n               \"module\"\n            ],\n            [\n               \"func_name\"\n            ]\n         ],\n         \"_load_entry_from_hubconf\": [\n            [\n               \"m\"\n            ],\n            [\n               \"model\"\n            ]\n         ],\n         \"_parse_repo_info\": [\n            [\n               \"github\"\n            ]\n         ],\n         \"_remove_if_exists\": [\n            [\n               \"path\"\n            ]\n         ],\n         \"_setup_hubdir\": [],\n         \"download_url_to_file\": [\n            [\n               \"url\"\n            ],\n            [\n               \"dst\"\n            ],\n            [\n               \"hash_prefix\",\n               null\n            ],\n            [\n               \"progress\",\n               true\n            ]\n         ],\n         \"help\": [\n            [\n               \"github\"\n            ],\n            [\n               \"model\"\n            ],\n            [\n               \"force_reload\",\n               false\n            ]\n         ],\n         \"import_module\": [\n            [\n               \"name\"\n            ],\n            [\n               \"path\"\n            ]\n         ],\n         \"list\": [\n            [\n               \"github\"\n            ],\n            [\n               \"force_reload\",\n               false\n            ]\n         ],\n         \"load\": [\n            [\n               \"github\"\n            ],\n            [\n               \"model\"\n            ]\n         ],\n         \"load_state_dict_from_url\": [\n            [\n               \"url\"\n            ],\n            [\n               \"model_dir\",\n               null\n            ],\n            [\n               \"map_location\",\n               null\n            ],\n            [\n               \"progress\",\n               true\n            ],\n            [\n               \"check_hash\",\n               false\n            ]\n         ],\n         \"set_dir\": [\n            [\n               \"d\"\n            ]\n         ]\n      },\n      \"torch.jit.__init__\": {\n         \"Attribute\": [\n            [\n               \"value\"\n            ],\n            [\n               \"type\"\n            ]\n         ],\n         \"_add_script_class\": [\n            [\n               \"cls\"\n            ],\n            [\n               \"name\"\n            ]\n         ],\n         \"_check_directly_compile_overloaded\": [\n            [\n               \"obj\"\n            ]\n         ],\n         \"_check_overload_defaults\": [\n            [\n               \"impl_defaults\"\n            ],\n            [\n               \"overload_defaults\"\n            ],\n            [\n               \"loc\"\n            ]\n         ],\n         \"_check_trace\": [\n            [\n               \"check_inputs\"\n            ],\n            [\n               \"func\"\n            ],\n            [\n               \"traced_func\"\n            ],\n            [\n               \"check_tolerance\"\n            ],\n            [\n               \"force_outplace\"\n            ],\n            [\n               \"is_trace_module\"\n            ],\n            [\n               \"_module_class\"\n            ]\n         ],\n         \"_clone_inputs\": [\n            [\n               \"args\"\n            ]\n         ],\n         \"_compile_and_register_class\": [\n            [\n               \"obj\"\n            ],\n            [\n               \"rcb\"\n            ],\n            [\n               \"qualified_name\"\n            ]\n         ],\n         \"_compile_function_with_overload\": [\n            [\n               \"overload_fn\"\n            ],\n            [\n               \"qual_name\"\n            ],\n            [\n               \"impl_fn\"\n            ]\n         ],\n         \"_create_interpreter_name_lookup_fn\": [\n            [\n               \"frames_up\",\n               1\n            ]\n         ],\n         \"_create_named_tuple\": [\n            [\n               \"t\"\n            ],\n            [\n               \"unqual_name\"\n            ],\n            [\n               \"field_names\"\n            ]\n         ],\n         \"_disable_emit_hooks\": [],\n         \"_get_methods\": [\n            [\n               \"cls\"\n            ]\n         ],\n         \"_get_named_tuple_properties\": [\n            [\n               \"obj\"\n            ]\n         ],\n         \"_get_overloads\": [\n            [\n               \"obj\"\n            ]\n         ],\n         \"_get_script_class\": [\n            [\n               \"name\"\n            ]\n         ],\n         \"_get_trace_graph\": [\n            [\n               \"f\"\n            ],\n            [\n               \"args\",\n               []\n            ],\n            [\n               \"kwargs\",\n               null\n            ],\n            [\n               \"_force_outplace\",\n               false\n            ],\n            [\n               \"return_inputs\",\n               false\n            ],\n            [\n               \"_return_inputs_states\",\n               false\n            ]\n         ],\n         \"_graph_for\": [\n            [\n               \"self\"\n            ]\n         ],\n         \"_is_new_style_class\": [\n            [\n               \"cls\"\n            ]\n         ],\n         \"_make_fail\": [\n            [\n               \"name\"\n            ]\n         ],\n         \"_parse_env\": [\n            [\n               \"name\"\n            ],\n            [\n               \"default\"\n            ],\n            [\n               \"true_message\"\n            ],\n            [\n               \"false_message\"\n            ]\n         ],\n         \"_set_jit_function_cache\": [\n            [\n               \"key\"\n            ],\n            [\n               \"value\"\n            ]\n         ],\n         \"_set_jit_overload_cache\": [\n            [\n               \"key\"\n            ],\n            [\n               \"compiled_fns\"\n            ]\n         ],\n         \"_time\": [\n            [\n               \"trace_name\"\n            ],\n            [\n               \"name\"\n            ],\n            [\n               \"time\",\n               true\n            ]\n         ],\n         \"_try_get_dispatched_fn\": [\n            [\n               \"fn\"\n            ]\n         ],\n         \"_try_get_jit_cached_function\": [\n            [\n               \"key\"\n            ]\n         ],\n         \"_try_get_jit_cached_overloads\": [\n            [\n               \"key\"\n            ]\n         ],\n         \"_try_get_overloaded_fn\": [\n            [\n               \"mod\"\n            ],\n            [\n               \"field\"\n            ]\n         ],\n         \"_unique_state_dict\": [\n            [\n               \"module\"\n            ],\n            [\n               \"keep_vars\",\n               false\n            ]\n         ],\n         \"_unwrap_optional\": [\n            [\n               \"x\"\n            ]\n         ],\n         \"_verify_equal\": [\n            [\n               \"xs\"\n            ],\n            [\n               \"ys\"\n            ]\n         ],\n         \"annotate\": [\n            [\n               \"the_type\"\n            ],\n            [\n               \"the_value\"\n            ]\n         ],\n         \"export_opnames\": [\n            [\n               \"m\"\n            ]\n         ],\n         \"indent\": [\n            [\n               \"s\"\n            ]\n         ],\n         \"interface\": [\n            [\n               \"obj\"\n            ]\n         ],\n         \"is_scripting\": [],\n         \"load\": [\n            [\n               \"f\"\n            ],\n            [\n               \"map_location\",\n               null\n            ],\n            [\n               \"_extra_files\",\n               \"DEFAULT_EXTRA_FILES_MAP\"\n            ]\n         ],\n         \"make_module\": [\n            [\n               \"mod\"\n            ],\n            [\n               \"_module_class\"\n            ],\n            [\n               \"_compilation_unit\"\n            ]\n         ],\n         \"make_tuple\": [\n            [\n               \"example_inputs\"\n            ]\n         ],\n         \"optimized_execution\": [\n            [\n               \"should_optimize\"\n            ]\n         ],\n         \"save\": [\n            [\n               \"m\"\n            ],\n            [\n               \"f\"\n            ],\n            [\n               \"_extra_files\",\n               \"DEFAULT_EXTRA_FILES_MAP\"\n            ]\n         ],\n         \"script\": [\n            [\n               \"obj\"\n            ],\n            [\n               \"optimize\",\n               null\n            ],\n            [\n               \"_frames_up\",\n               0\n            ],\n            [\n               \"_rcb\",\n               null\n            ]\n         ],\n         \"script_method\": [\n            [\n               \"fn\"\n            ]\n         ],\n         \"trace\": [\n            [\n               \"func\"\n            ],\n            [\n               \"example_inputs\"\n            ],\n            [\n               \"optimize\",\n               null\n            ],\n            [\n               \"check_trace\",\n               true\n            ],\n            [\n               \"check_inputs\",\n               null\n            ],\n            [\n               \"check_tolerance\",\n               1e-05\n            ],\n            [\n               \"_force_outplace\",\n               false\n            ],\n            [\n               \"_module_class\",\n               null\n            ],\n            [\n               \"_compilation_unit\",\n               \"_python_cu\"\n            ]\n         ],\n         \"trace_module\": [\n            [\n               \"mod\"\n            ],\n            [\n               \"inputs\"\n            ],\n            [\n               \"optimize\",\n               null\n            ],\n            [\n               \"check_trace\",\n               true\n            ],\n            [\n               \"check_inputs\",\n               null\n            ],\n            [\n               \"check_tolerance\",\n               1e-05\n            ],\n            [\n               \"_force_outplace\",\n               false\n            ],\n            [\n               \"_module_class\",\n               null\n            ],\n            [\n               \"_compilation_unit\",\n               \"_python_cu\"\n            ]\n         ],\n         \"verify\": [\n            [\n               \"model\"\n            ],\n            [\n               \"args\"\n            ],\n            [\n               \"loss_fn\",\n               {\n                  \"col_offset\": 32,\n                  \"ctx\": {},\n                  \"id\": \"torch\",\n                  \"lineno\": 411\n               }\n            ],\n            [\n               \"devices\",\n               null\n            ]\n         ],\n         \"whichmodule\": [\n            [\n               \"obj\"\n            ]\n         ],\n         \"wrap_check_inputs\": [\n            [\n               \"check_inputs\"\n            ]\n         ]\n      },\n      \"torch.jit._builtins\": {\n         \"_find_builtin\": [\n            [\n               \"fn\"\n            ]\n         ],\n         \"_gen_torch_functional_registered_ops\": [],\n         \"_get_builtin_table\": [],\n         \"_is_special_functional_bound_op\": [\n            [\n               \"fn\"\n            ]\n         ],\n         \"_register_builtin\": [\n            [\n               \"fn\"\n            ],\n            [\n               \"op\"\n            ]\n         ]\n      },\n      \"torch.jit._pickle\": {\n         \"build_boollist\": [\n            [\n               \"data\"\n            ]\n         ],\n         \"build_doublelist\": [\n            [\n               \"data\"\n            ]\n         ],\n         \"build_intlist\": [\n            [\n               \"data\"\n            ]\n         ],\n         \"build_tensor_from_id\": [\n            [\n               \"data\"\n            ]\n         ],\n         \"build_tensorlist\": [\n            [\n               \"data\"\n            ]\n         ],\n         \"restore_type_tag\": [\n            [\n               \"value\"\n            ],\n            [\n               \"type_str\"\n            ]\n         ]\n      },\n      \"torch.jit._recursive\": {\n         \"_check_no_signature\": [\n            [\n               \"func\"\n            ]\n         ],\n         \"_get_valid_constant\": [\n            [\n               \"attr\"\n            ],\n            [\n               \"v\"\n            ]\n         ],\n         \"add_python_attr_to_scripted_model\": [\n            [\n               \"script_model\"\n            ],\n            [\n               \"orig\"\n            ],\n            [\n               \"attr\"\n            ]\n         ],\n         \"check_module_initialized\": [\n            [\n               \"mod\"\n            ]\n         ],\n         \"compile_unbound_method\": [\n            [\n               \"concrete_type\"\n            ],\n            [\n               \"fn\"\n            ]\n         ],\n         \"create_methods_from_stubs\": [\n            [\n               \"concrete_type\"\n            ],\n            [\n               \"stubs\"\n            ]\n         ],\n         \"create_script_module\": [\n            [\n               \"nn_module\"\n            ],\n            [\n               \"stubs_fn\"\n            ],\n            [\n               \"share_types\",\n               true\n            ]\n         ],\n         \"create_script_module_impl\": [\n            [\n               \"nn_module\"\n            ],\n            [\n               \"concrete_type\"\n            ],\n            [\n               \"stubs_fn\"\n            ]\n         ],\n         \"get_overload_annotations\": [\n            [\n               \"mod\"\n            ]\n         ],\n         \"get_overload_name_mapping\": [\n            [\n               \"overload_info\"\n            ]\n         ],\n         \"infer_concrete_type_builder\": [\n            [\n               \"nn_module\"\n            ]\n         ],\n         \"infer_methods_to_compile\": [\n            [\n               \"nn_module\"\n            ]\n         ],\n         \"interface_script\": [\n            [\n               \"mod_interface\"\n            ],\n            [\n               \"nn_module\"\n            ]\n         ],\n         \"lazy_bind\": [\n            [\n               \"concrete_type\"\n            ],\n            [\n               \"unbound_method\"\n            ]\n         ],\n         \"make_stub\": [\n            [\n               \"func\"\n            ]\n         ],\n         \"make_stub_from_method\": [\n            [\n               \"nn_module\"\n            ],\n            [\n               \"method\"\n            ]\n         ],\n         \"make_stubs_for_overloads\": [\n            [\n               \"overload_info\"\n            ]\n         ],\n         \"script_model_defines_attr\": [\n            [\n               \"script_model\"\n            ],\n            [\n               \"attr\"\n            ]\n         ],\n         \"try_compile_fn\": [\n            [\n               \"fn\"\n            ],\n            [\n               \"loc\"\n            ]\n         ],\n         \"wrap_cpp_module\": [\n            [\n               \"cpp_module\"\n            ]\n         ]\n      },\n      \"torch.jit.annotations\": {\n         \"ann_to_type\": [\n            [\n               \"ann\"\n            ],\n            [\n               \"loc\"\n            ]\n         ],\n         \"check_fn\": [\n            [\n               \"fn\"\n            ],\n            [\n               \"loc\"\n            ]\n         ],\n         \"get_param_names\": [\n            [\n               \"fn\"\n            ],\n            [\n               \"n_args\"\n            ]\n         ],\n         \"get_signature\": [\n            [\n               \"fn\"\n            ],\n            [\n               \"rcb\"\n            ],\n            [\n               \"loc\"\n            ],\n            [\n               \"is_method\"\n            ]\n         ],\n         \"get_type_line\": [\n            [\n               \"source\"\n            ]\n         ],\n         \"is_function_or_method\": [\n            [\n               \"the_callable\"\n            ]\n         ],\n         \"is_vararg\": [\n            [\n               \"the_callable\"\n            ]\n         ],\n         \"parse_type_line\": [\n            [\n               \"type_line\"\n            ],\n            [\n               \"rcb\"\n            ],\n            [\n               \"loc\"\n            ]\n         ],\n         \"split_type_line\": [\n            [\n               \"type_line\"\n            ]\n         ],\n         \"try_ann_to_type\": [\n            [\n               \"ann\"\n            ],\n            [\n               \"loc\"\n            ]\n         ],\n         \"try_real_annotations\": [\n            [\n               \"fn\"\n            ],\n            [\n               \"loc\"\n            ]\n         ]\n      },\n      \"torch.jit.frontend\": {\n         \"_uses_true_division\": [\n            [\n               \"fn\"\n            ]\n         ],\n         \"build_class_def\": [\n            [\n               \"ctx\"\n            ],\n            [\n               \"py_def\"\n            ],\n            [\n               \"methods\"\n            ],\n            [\n               \"self_name\"\n            ]\n         ],\n         \"build_def\": [\n            [\n               \"ctx\"\n            ],\n            [\n               \"py_def\"\n            ],\n            [\n               \"type_line\"\n            ],\n            [\n               \"self_name\",\n               null\n            ]\n         ],\n         \"build_param\": [\n            [\n               \"ctx\"\n            ],\n            [\n               \"py_arg\"\n            ],\n            [\n               \"self_name\"\n            ],\n            [\n               \"kwarg_only\"\n            ]\n         ],\n         \"build_param_list\": [\n            [\n               \"ctx\"\n            ],\n            [\n               \"py_args\"\n            ],\n            [\n               \"self_name\"\n            ]\n         ],\n         \"build_stmts\": [\n            [\n               \"ctx\"\n            ],\n            [\n               \"stmts\"\n            ]\n         ],\n         \"find_before\": [\n            [\n               \"ctx\"\n            ],\n            [\n               \"pos\"\n            ],\n            [\n               \"substr\"\n            ],\n            [\n               \"offsets\",\n               [\n                  {\n                     \"col_offset\": 43,\n                     \"lineno\": 711,\n                     \"n\": 0\n                  },\n                  {\n                     \"col_offset\": 46,\n                     \"lineno\": 711,\n                     \"n\": 0\n                  }\n               ]\n            ]\n         ],\n         \"get_default_args\": [\n            [\n               \"fn\"\n            ]\n         ],\n         \"get_jit_class_def\": [\n            [\n               \"cls\"\n            ],\n            [\n               \"self_name\"\n            ]\n         ],\n         \"get_jit_def\": [\n            [\n               \"fn\"\n            ],\n            [\n               \"self_name\",\n               null\n            ]\n         ],\n         \"is_reserved_name\": [\n            [\n               \"name\"\n            ]\n         ]\n      },\n      \"torch.jit.quantized\": {\n         \"apply_permutation\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"permutation\"\n            ],\n            [\n               \"dim\",\n               1\n            ]\n         ],\n         \"quantize_linear_modules\": [\n            [\n               \"module\"\n            ],\n            [\n               \"dtype\",\n               {\n                  \"col_offset\": 42,\n                  \"ctx\": {},\n                  \"id\": \"torch\",\n                  \"lineno\": 605\n               }\n            ]\n         ],\n         \"quantize_rnn_cell_modules\": [\n            [\n               \"module\"\n            ]\n         ],\n         \"quantize_rnn_modules\": [\n            [\n               \"module\"\n            ],\n            [\n               \"dtype\",\n               {\n                  \"col_offset\": 39,\n                  \"ctx\": {},\n                  \"id\": \"torch\",\n                  \"lineno\": 630\n               }\n            ]\n         ]\n      },\n      \"torch.jit.supported_ops\": {\n         \"_emit_arg\": [\n            [\n               \"indent\"\n            ],\n            [\n               \"i\"\n            ],\n            [\n               \"arg\"\n            ]\n         ],\n         \"_emit_args\": [\n            [\n               \"indent\"\n            ],\n            [\n               \"arguments\"\n            ]\n         ],\n         \"_emit_ret\": [\n            [\n               \"ret\"\n            ]\n         ],\n         \"_emit_rets\": [\n            [\n               \"returns\"\n            ]\n         ],\n         \"_emit_schema\": [\n            [\n               \"mod\"\n            ],\n            [\n               \"name\"\n            ],\n            [\n               \"schema\"\n            ],\n            [\n               \"arg_start\",\n               0\n            ],\n            [\n               \"padding\",\n               4\n            ]\n         ],\n         \"_emit_type\": [\n            [\n               \"type\"\n            ]\n         ],\n         \"_get_builtins_helper\": [],\n         \"_get_global_builtins\": [],\n         \"_get_math_builtins\": [],\n         \"_get_nn_functional_ops\": [],\n         \"_get_tensor_ops\": [],\n         \"_get_torchscript_builtins\": [],\n         \"_hidden\": [\n            [\n               \"name\"\n            ]\n         ],\n         \"_is_math_fn\": [\n            [\n               \"fn\"\n            ]\n         ],\n         \"_list_supported_ops\": []\n      },\n      \"torch.jit.unsupported_tensor_ops\": {\n         \"_gen_unsupported_methods_properties\": [],\n         \"_list_unsupported_tensor_ops\": [],\n         \"execWrapper\": [\n            [\n               \"code\"\n            ],\n            [\n               \"glob\"\n            ],\n            [\n               \"loc\"\n            ]\n         ]\n      },\n      \"torch.multiprocessing.__init__\": {\n         \"get_all_sharing_strategies\": [],\n         \"get_sharing_strategy\": [],\n         \"set_sharing_strategy\": [\n            [\n               \"new_strategy\"\n            ]\n         ]\n      },\n      \"torch.multiprocessing._atfork\": {\n         \"_register\": [\n            [\n               \"func\"\n            ]\n         ],\n         \"register_after_fork\": [\n            [\n               \"func\"\n            ]\n         ]\n      },\n      \"torch.multiprocessing.pool\": {\n         \"clean_worker\": []\n      },\n      \"torch.multiprocessing.reductions\": {\n         \"fd_id\": [\n            [\n               \"fd\"\n            ]\n         ],\n         \"init_reductions\": [],\n         \"rebuild_cuda_tensor\": [\n            [\n               \"tensor_cls\"\n            ],\n            [\n               \"tensor_size\"\n            ],\n            [\n               \"tensor_stride\"\n            ],\n            [\n               \"tensor_offset\"\n            ],\n            [\n               \"storage_cls\"\n            ],\n            [\n               \"storage_device\"\n            ],\n            [\n               \"storage_handle\"\n            ],\n            [\n               \"storage_size_bytes\"\n            ],\n            [\n               \"storage_offset_bytes\"\n            ],\n            [\n               \"requires_grad\"\n            ],\n            [\n               \"ref_counter_handle\"\n            ],\n            [\n               \"ref_counter_offset\"\n            ],\n            [\n               \"event_handle\"\n            ],\n            [\n               \"event_sync_required\"\n            ]\n         ],\n         \"rebuild_event\": [\n            [\n               \"device\"\n            ],\n            [\n               \"handle\"\n            ]\n         ],\n         \"rebuild_storage_empty\": [\n            [\n               \"cls\"\n            ]\n         ],\n         \"rebuild_storage_fd\": [\n            [\n               \"cls\"\n            ],\n            [\n               \"df\"\n            ],\n            [\n               \"size\"\n            ]\n         ],\n         \"rebuild_storage_filename\": [\n            [\n               \"cls\"\n            ],\n            [\n               \"manager\"\n            ],\n            [\n               \"handle\"\n            ],\n            [\n               \"size\"\n            ]\n         ],\n         \"rebuild_tensor\": [\n            [\n               \"cls\"\n            ],\n            [\n               \"storage\"\n            ],\n            [\n               \"metadata\"\n            ]\n         ],\n         \"reduce_event\": [\n            [\n               \"event\"\n            ]\n         ],\n         \"reduce_storage\": [\n            [\n               \"storage\"\n            ]\n         ],\n         \"reduce_tensor\": [\n            [\n               \"tensor\"\n            ]\n         ],\n         \"storage_from_cache\": [\n            [\n               \"cls\"\n            ],\n            [\n               \"key\"\n            ]\n         ]\n      },\n      \"torch.multiprocessing.spawn\": {\n         \"_python_version_check\": [],\n         \"_wrap\": [\n            [\n               \"fn\"\n            ],\n            [\n               \"i\"\n            ],\n            [\n               \"args\"\n            ],\n            [\n               \"error_queue\"\n            ]\n         ],\n         \"spawn\": [\n            [\n               \"fn\"\n            ],\n            [\n               \"args\",\n               []\n            ],\n            [\n               \"nprocs\",\n               1\n            ],\n            [\n               \"join\",\n               true\n            ],\n            [\n               \"daemon\",\n               false\n            ],\n            [\n               \"start_method\",\n               \"spawn\"\n            ]\n         ],\n         \"start_processes\": [\n            [\n               \"fn\"\n            ],\n            [\n               \"args\",\n               []\n            ],\n            [\n               \"nprocs\",\n               1\n            ],\n            [\n               \"join\",\n               true\n            ],\n            [\n               \"daemon\",\n               false\n            ],\n            [\n               \"start_method\",\n               \"spawn\"\n            ]\n         ]\n      },\n      \"torch.nn._reduction\": {\n         \"get_enum\": [\n            [\n               \"reduction\"\n            ]\n         ],\n         \"legacy_get_enum\": [\n            [\n               \"size_average\"\n            ],\n            [\n               \"reduce\"\n            ],\n            [\n               \"emit_warning\",\n               true\n            ]\n         ],\n         \"legacy_get_string\": [\n            [\n               \"size_average\"\n            ],\n            [\n               \"reduce\"\n            ],\n            [\n               \"emit_warning\",\n               true\n            ]\n         ]\n      },\n      \"torch.nn.backends.thnn\": {\n         \"_get_thnn_function_backend\": []\n      },\n      \"torch.nn.functional\": {\n         \"_adaptive_max_pool1d\": [\n            [\n               \"input\"\n            ],\n            [\n               \"output_size\"\n            ],\n            [\n               \"return_indices\",\n               false\n            ]\n         ],\n         \"_adaptive_max_pool2d\": [\n            [\n               \"input\"\n            ],\n            [\n               \"output_size\"\n            ],\n            [\n               \"return_indices\",\n               false\n            ]\n         ],\n         \"_adaptive_max_pool3d\": [\n            [\n               \"input\"\n            ],\n            [\n               \"output_size\"\n            ],\n            [\n               \"return_indices\",\n               false\n            ]\n         ],\n         \"_fractional_max_pool2d\": [\n            [\n               \"input\"\n            ],\n            [\n               \"kernel_size\"\n            ],\n            [\n               \"output_size\",\n               null\n            ],\n            [\n               \"output_ratio\",\n               null\n            ],\n            [\n               \"return_indices\",\n               false\n            ],\n            [\n               \"_random_samples\",\n               null\n            ]\n         ],\n         \"_fractional_max_pool3d\": [\n            [\n               \"input\"\n            ],\n            [\n               \"kernel_size\"\n            ],\n            [\n               \"output_size\",\n               null\n            ],\n            [\n               \"output_ratio\",\n               null\n            ],\n            [\n               \"return_indices\",\n               false\n            ],\n            [\n               \"_random_samples\",\n               null\n            ]\n         ],\n         \"_get_softmax_dim\": [\n            [\n               \"name\"\n            ],\n            [\n               \"ndim\"\n            ],\n            [\n               \"stacklevel\"\n            ]\n         ],\n         \"_interp_output_size\": [\n            [\n               \"dim\"\n            ],\n            [\n               \"closed_over_args\"\n            ]\n         ],\n         \"_max_pool1d\": [\n            [\n               \"input\"\n            ],\n            [\n               \"kernel_size\"\n            ],\n            [\n               \"stride\",\n               null\n            ],\n            [\n               \"padding\",\n               0\n            ],\n            [\n               \"dilation\",\n               1\n            ],\n            [\n               \"ceil_mode\",\n               false\n            ],\n            [\n               \"return_indices\",\n               false\n            ]\n         ],\n         \"_max_pool2d\": [\n            [\n               \"input\"\n            ],\n            [\n               \"kernel_size\"\n            ],\n            [\n               \"stride\",\n               null\n            ],\n            [\n               \"padding\",\n               0\n            ],\n            [\n               \"dilation\",\n               1\n            ],\n            [\n               \"ceil_mode\",\n               false\n            ],\n            [\n               \"return_indices\",\n               false\n            ]\n         ],\n         \"_max_pool3d\": [\n            [\n               \"input\"\n            ],\n            [\n               \"kernel_size\"\n            ],\n            [\n               \"stride\",\n               null\n            ],\n            [\n               \"padding\",\n               0\n            ],\n            [\n               \"dilation\",\n               1\n            ],\n            [\n               \"ceil_mode\",\n               false\n            ],\n            [\n               \"return_indices\",\n               false\n            ]\n         ],\n         \"_no_grad_embedding_renorm_\": [\n            [\n               \"weight\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"max_norm\"\n            ],\n            [\n               \"norm_type\"\n            ]\n         ],\n         \"_pad\": [\n            [\n               \"input\"\n            ],\n            [\n               \"pad\"\n            ],\n            [\n               \"mode\",\n               \"constant\"\n            ],\n            [\n               \"value\",\n               0\n            ]\n         ],\n         \"_pad_circular\": [\n            [\n               \"input\"\n            ],\n            [\n               \"padding\"\n            ]\n         ],\n         \"_pointwise_loss\": [\n            [\n               \"lambd\"\n            ],\n            [\n               \"lambd_optimized\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"target\"\n            ],\n            [\n               \"reduction\",\n               \"mean\"\n            ]\n         ],\n         \"_smooth_l1_loss\": [\n            [\n               \"input\"\n            ],\n            [\n               \"target\"\n            ]\n         ],\n         \"_unpool_output_size\": [\n            [\n               \"input\"\n            ],\n            [\n               \"kernel_size\"\n            ],\n            [\n               \"stride\"\n            ],\n            [\n               \"padding\"\n            ],\n            [\n               \"output_size\"\n            ]\n         ],\n         \"_verify_batch_size\": [\n            [\n               \"size\"\n            ]\n         ],\n         \"adaptive_avg_pool2d\": [\n            [\n               \"input\"\n            ],\n            [\n               \"output_size\"\n            ]\n         ],\n         \"adaptive_avg_pool3d\": [\n            [\n               \"input\"\n            ],\n            [\n               \"output_size\"\n            ]\n         ],\n         \"adaptive_max_pool1d_with_indices\": [\n            [\n               \"input\"\n            ],\n            [\n               \"output_size\"\n            ],\n            [\n               \"return_indices\",\n               false\n            ]\n         ],\n         \"adaptive_max_pool2d_with_indices\": [\n            [\n               \"input\"\n            ],\n            [\n               \"output_size\"\n            ],\n            [\n               \"return_indices\",\n               false\n            ]\n         ],\n         \"adaptive_max_pool3d_with_indices\": [\n            [\n               \"input\"\n            ],\n            [\n               \"output_size\"\n            ],\n            [\n               \"return_indices\",\n               false\n            ]\n         ],\n         \"affine_grid\": [\n            [\n               \"theta\"\n            ],\n            [\n               \"size\"\n            ],\n            [\n               \"align_corners\",\n               null\n            ]\n         ],\n         \"alpha_dropout\": [\n            [\n               \"input\"\n            ],\n            [\n               \"p\",\n               0.5\n            ],\n            [\n               \"training\",\n               false\n            ],\n            [\n               \"inplace\",\n               false\n            ]\n         ],\n         \"assert_int_or_pair\": [\n            [\n               \"arg\"\n            ],\n            [\n               \"arg_name\"\n            ],\n            [\n               \"message\"\n            ]\n         ],\n         \"batch_norm\": [\n            [\n               \"input\"\n            ],\n            [\n               \"running_mean\"\n            ],\n            [\n               \"running_var\"\n            ],\n            [\n               \"weight\",\n               null\n            ],\n            [\n               \"bias\",\n               null\n            ],\n            [\n               \"training\",\n               false\n            ],\n            [\n               \"momentum\",\n               0.1\n            ],\n            [\n               \"eps\",\n               1e-05\n            ]\n         ],\n         \"bilinear\": [\n            [\n               \"input1\"\n            ],\n            [\n               \"input2\"\n            ],\n            [\n               \"weight\"\n            ],\n            [\n               \"bias\",\n               null\n            ]\n         ],\n         \"binary_cross_entropy\": [\n            [\n               \"input\"\n            ],\n            [\n               \"target\"\n            ],\n            [\n               \"weight\",\n               null\n            ],\n            [\n               \"size_average\",\n               null\n            ],\n            [\n               \"reduce\",\n               null\n            ],\n            [\n               \"reduction\",\n               \"mean\"\n            ]\n         ],\n         \"binary_cross_entropy_with_logits\": [\n            [\n               \"input\"\n            ],\n            [\n               \"target\"\n            ],\n            [\n               \"weight\",\n               null\n            ],\n            [\n               \"size_average\",\n               null\n            ],\n            [\n               \"reduce\",\n               null\n            ],\n            [\n               \"reduction\",\n               \"mean\"\n            ],\n            [\n               \"pos_weight\",\n               null\n            ]\n         ],\n         \"celu\": [\n            [\n               \"input\"\n            ],\n            [\n               \"alpha\",\n               1.0\n            ],\n            [\n               \"inplace\",\n               false\n            ]\n         ],\n         \"cosine_embedding_loss\": [\n            [\n               \"input1\"\n            ],\n            [\n               \"input2\"\n            ],\n            [\n               \"target\"\n            ],\n            [\n               \"margin\",\n               0\n            ],\n            [\n               \"size_average\",\n               null\n            ],\n            [\n               \"reduce\",\n               null\n            ],\n            [\n               \"reduction\",\n               \"mean\"\n            ]\n         ],\n         \"cross_entropy\": [\n            [\n               \"input\"\n            ],\n            [\n               \"target\"\n            ],\n            [\n               \"weight\",\n               null\n            ],\n            [\n               \"size_average\",\n               null\n            ],\n            [\n               \"ignore_index\",\n               {}\n            ],\n            [\n               \"reduce\",\n               null\n            ],\n            [\n               \"reduction\",\n               \"mean\"\n            ]\n         ],\n         \"ctc_loss\": [\n            [\n               \"log_probs\"\n            ],\n            [\n               \"targets\"\n            ],\n            [\n               \"input_lengths\"\n            ],\n            [\n               \"target_lengths\"\n            ],\n            [\n               \"blank\",\n               0\n            ],\n            [\n               \"reduction\",\n               \"mean\"\n            ],\n            [\n               \"zero_infinity\",\n               false\n            ]\n         ],\n         \"dropout\": [\n            [\n               \"input\"\n            ],\n            [\n               \"p\",\n               0.5\n            ],\n            [\n               \"training\",\n               true\n            ],\n            [\n               \"inplace\",\n               false\n            ]\n         ],\n         \"dropout2d\": [\n            [\n               \"input\"\n            ],\n            [\n               \"p\",\n               0.5\n            ],\n            [\n               \"training\",\n               true\n            ],\n            [\n               \"inplace\",\n               false\n            ]\n         ],\n         \"dropout3d\": [\n            [\n               \"input\"\n            ],\n            [\n               \"p\",\n               0.5\n            ],\n            [\n               \"training\",\n               true\n            ],\n            [\n               \"inplace\",\n               false\n            ]\n         ],\n         \"elu\": [\n            [\n               \"input\"\n            ],\n            [\n               \"alpha\",\n               1.0\n            ],\n            [\n               \"inplace\",\n               false\n            ]\n         ],\n         \"embedding\": [\n            [\n               \"input\"\n            ],\n            [\n               \"weight\"\n            ],\n            [\n               \"padding_idx\",\n               null\n            ],\n            [\n               \"max_norm\",\n               null\n            ],\n            [\n               \"norm_type\",\n               2.0\n            ],\n            [\n               \"scale_grad_by_freq\",\n               false\n            ],\n            [\n               \"sparse\",\n               false\n            ]\n         ],\n         \"embedding_bag\": [\n            [\n               \"input\"\n            ],\n            [\n               \"weight\"\n            ],\n            [\n               \"offsets\",\n               null\n            ],\n            [\n               \"max_norm\",\n               null\n            ],\n            [\n               \"norm_type\",\n               2\n            ],\n            [\n               \"scale_grad_by_freq\",\n               false\n            ],\n            [\n               \"mode\",\n               \"mean\"\n            ],\n            [\n               \"sparse\",\n               false\n            ],\n            [\n               \"per_sample_weights\",\n               null\n            ],\n            [\n               \"include_last_offset\",\n               false\n            ]\n         ],\n         \"feature_alpha_dropout\": [\n            [\n               \"input\"\n            ],\n            [\n               \"p\",\n               0.5\n            ],\n            [\n               \"training\",\n               false\n            ],\n            [\n               \"inplace\",\n               false\n            ]\n         ],\n         \"fold\": [\n            [\n               \"input\"\n            ],\n            [\n               \"output_size\"\n            ],\n            [\n               \"kernel_size\"\n            ],\n            [\n               \"dilation\",\n               1\n            ],\n            [\n               \"padding\",\n               0\n            ],\n            [\n               \"stride\",\n               1\n            ]\n         ],\n         \"fractional_max_pool2d_with_indices\": [\n            [\n               \"input\"\n            ],\n            [\n               \"kernel_size\"\n            ],\n            [\n               \"output_size\",\n               null\n            ],\n            [\n               \"output_ratio\",\n               null\n            ],\n            [\n               \"return_indices\",\n               false\n            ],\n            [\n               \"_random_samples\",\n               null\n            ]\n         ],\n         \"fractional_max_pool3d_with_indices\": [\n            [\n               \"input\"\n            ],\n            [\n               \"kernel_size\"\n            ],\n            [\n               \"output_size\",\n               null\n            ],\n            [\n               \"output_ratio\",\n               null\n            ],\n            [\n               \"return_indices\",\n               false\n            ],\n            [\n               \"_random_samples\",\n               null\n            ]\n         ],\n         \"gelu\": [\n            [\n               \"input\"\n            ]\n         ],\n         \"glu\": [\n            [\n               \"input\"\n            ],\n            [\n               \"dim\",\n               {}\n            ]\n         ],\n         \"grid_sample\": [\n            [\n               \"input\"\n            ],\n            [\n               \"grid\"\n            ],\n            [\n               \"mode\",\n               \"bilinear\"\n            ],\n            [\n               \"padding_mode\",\n               \"zeros\"\n            ],\n            [\n               \"align_corners\",\n               null\n            ]\n         ],\n         \"group_norm\": [\n            [\n               \"input\"\n            ],\n            [\n               \"num_groups\"\n            ],\n            [\n               \"weight\",\n               null\n            ],\n            [\n               \"bias\",\n               null\n            ],\n            [\n               \"eps\",\n               1e-05\n            ]\n         ],\n         \"gumbel_softmax\": [\n            [\n               \"logits\"\n            ],\n            [\n               \"tau\",\n               1\n            ],\n            [\n               \"hard\",\n               false\n            ],\n            [\n               \"eps\",\n               1e-10\n            ],\n            [\n               \"dim\",\n               {}\n            ]\n         ],\n         \"hardshrink\": [\n            [\n               \"input\"\n            ],\n            [\n               \"lambd\",\n               0.5\n            ]\n         ],\n         \"hardsigmoid\": [\n            [\n               \"input\"\n            ],\n            [\n               \"inplace\",\n               false\n            ]\n         ],\n         \"hardtanh\": [\n            [\n               \"input\"\n            ],\n            [\n               \"min_val\",\n               {}\n            ],\n            [\n               \"max_val\",\n               1.0\n            ],\n            [\n               \"inplace\",\n               false\n            ]\n         ],\n         \"hinge_embedding_loss\": [\n            [\n               \"input\"\n            ],\n            [\n               \"target\"\n            ],\n            [\n               \"margin\",\n               1.0\n            ],\n            [\n               \"size_average\",\n               null\n            ],\n            [\n               \"reduce\",\n               null\n            ],\n            [\n               \"reduction\",\n               \"mean\"\n            ]\n         ],\n         \"instance_norm\": [\n            [\n               \"input\"\n            ],\n            [\n               \"running_mean\",\n               null\n            ],\n            [\n               \"running_var\",\n               null\n            ],\n            [\n               \"weight\",\n               null\n            ],\n            [\n               \"bias\",\n               null\n            ],\n            [\n               \"use_input_stats\",\n               true\n            ],\n            [\n               \"momentum\",\n               0.1\n            ],\n            [\n               \"eps\",\n               1e-05\n            ]\n         ],\n         \"interpolate\": [\n            [\n               \"input\"\n            ],\n            [\n               \"size\",\n               null\n            ],\n            [\n               \"scale_factor\",\n               null\n            ],\n            [\n               \"mode\",\n               \"nearest\"\n            ],\n            [\n               \"align_corners\",\n               null\n            ],\n            [\n               \"recompute_scale_factor\",\n               null\n            ]\n         ],\n         \"kl_div\": [\n            [\n               \"input\"\n            ],\n            [\n               \"target\"\n            ],\n            [\n               \"size_average\",\n               null\n            ],\n            [\n               \"reduce\",\n               null\n            ],\n            [\n               \"reduction\",\n               \"mean\"\n            ]\n         ],\n         \"l1_loss\": [\n            [\n               \"input\"\n            ],\n            [\n               \"target\"\n            ],\n            [\n               \"size_average\",\n               null\n            ],\n            [\n               \"reduce\",\n               null\n            ],\n            [\n               \"reduction\",\n               \"mean\"\n            ]\n         ],\n         \"layer_norm\": [\n            [\n               \"input\"\n            ],\n            [\n               \"normalized_shape\"\n            ],\n            [\n               \"weight\",\n               null\n            ],\n            [\n               \"bias\",\n               null\n            ],\n            [\n               \"eps\",\n               1e-05\n            ]\n         ],\n         \"leaky_relu\": [\n            [\n               \"input\"\n            ],\n            [\n               \"negative_slope\",\n               0.01\n            ],\n            [\n               \"inplace\",\n               false\n            ]\n         ],\n         \"linear\": [\n            [\n               \"input\"\n            ],\n            [\n               \"weight\"\n            ],\n            [\n               \"bias\",\n               null\n            ]\n         ],\n         \"local_response_norm\": [\n            [\n               \"input\"\n            ],\n            [\n               \"size\"\n            ],\n            [\n               \"alpha\",\n               0.0001\n            ],\n            [\n               \"beta\",\n               0.75\n            ],\n            [\n               \"k\",\n               1.0\n            ]\n         ],\n         \"log_softmax\": [\n            [\n               \"input\"\n            ],\n            [\n               \"dim\",\n               null\n            ],\n            [\n               \"_stacklevel\",\n               3\n            ],\n            [\n               \"dtype\",\n               null\n            ]\n         ],\n         \"lp_pool1d\": [\n            [\n               \"input\"\n            ],\n            [\n               \"norm_type\"\n            ],\n            [\n               \"kernel_size\"\n            ],\n            [\n               \"stride\",\n               null\n            ],\n            [\n               \"ceil_mode\",\n               false\n            ]\n         ],\n         \"lp_pool2d\": [\n            [\n               \"input\"\n            ],\n            [\n               \"norm_type\"\n            ],\n            [\n               \"kernel_size\"\n            ],\n            [\n               \"stride\",\n               null\n            ],\n            [\n               \"ceil_mode\",\n               false\n            ]\n         ],\n         \"margin_ranking_loss\": [\n            [\n               \"input1\"\n            ],\n            [\n               \"input2\"\n            ],\n            [\n               \"target\"\n            ],\n            [\n               \"margin\",\n               0\n            ],\n            [\n               \"size_average\",\n               null\n            ],\n            [\n               \"reduce\",\n               null\n            ],\n            [\n               \"reduction\",\n               \"mean\"\n            ]\n         ],\n         \"max_pool1d_with_indices\": [\n            [\n               \"input\"\n            ],\n            [\n               \"kernel_size\"\n            ],\n            [\n               \"stride\",\n               null\n            ],\n            [\n               \"padding\",\n               0\n            ],\n            [\n               \"dilation\",\n               1\n            ],\n            [\n               \"ceil_mode\",\n               false\n            ],\n            [\n               \"return_indices\",\n               false\n            ]\n         ],\n         \"max_pool2d_with_indices\": [\n            [\n               \"input\"\n            ],\n            [\n               \"kernel_size\"\n            ],\n            [\n               \"stride\",\n               null\n            ],\n            [\n               \"padding\",\n               0\n            ],\n            [\n               \"dilation\",\n               1\n            ],\n            [\n               \"ceil_mode\",\n               false\n            ],\n            [\n               \"return_indices\",\n               false\n            ]\n         ],\n         \"max_pool3d_with_indices\": [\n            [\n               \"input\"\n            ],\n            [\n               \"kernel_size\"\n            ],\n            [\n               \"stride\",\n               null\n            ],\n            [\n               \"padding\",\n               0\n            ],\n            [\n               \"dilation\",\n               1\n            ],\n            [\n               \"ceil_mode\",\n               false\n            ],\n            [\n               \"return_indices\",\n               false\n            ]\n         ],\n         \"max_unpool1d\": [\n            [\n               \"input\"\n            ],\n            [\n               \"indices\"\n            ],\n            [\n               \"kernel_size\"\n            ],\n            [\n               \"stride\",\n               null\n            ],\n            [\n               \"padding\",\n               0\n            ],\n            [\n               \"output_size\",\n               null\n            ]\n         ],\n         \"max_unpool2d\": [\n            [\n               \"input\"\n            ],\n            [\n               \"indices\"\n            ],\n            [\n               \"kernel_size\"\n            ],\n            [\n               \"stride\",\n               null\n            ],\n            [\n               \"padding\",\n               0\n            ],\n            [\n               \"output_size\",\n               null\n            ]\n         ],\n         \"max_unpool3d\": [\n            [\n               \"input\"\n            ],\n            [\n               \"indices\"\n            ],\n            [\n               \"kernel_size\"\n            ],\n            [\n               \"stride\",\n               null\n            ],\n            [\n               \"padding\",\n               0\n            ],\n            [\n               \"output_size\",\n               null\n            ]\n         ],\n         \"mse_loss\": [\n            [\n               \"input\"\n            ],\n            [\n               \"target\"\n            ],\n            [\n               \"size_average\",\n               null\n            ],\n            [\n               \"reduce\",\n               null\n            ],\n            [\n               \"reduction\",\n               \"mean\"\n            ]\n         ],\n         \"multi_head_attention_forward\": [\n            [\n               \"query\"\n            ],\n            [\n               \"key\"\n            ],\n            [\n               \"value\"\n            ],\n            [\n               \"embed_dim_to_check\"\n            ],\n            [\n               \"num_heads\"\n            ],\n            [\n               \"in_proj_weight\"\n            ],\n            [\n               \"in_proj_bias\"\n            ],\n            [\n               \"bias_k\"\n            ],\n            [\n               \"bias_v\"\n            ],\n            [\n               \"add_zero_attn\"\n            ],\n            [\n               \"dropout_p\"\n            ],\n            [\n               \"out_proj_weight\"\n            ],\n            [\n               \"out_proj_bias\"\n            ],\n            [\n               \"training\",\n               true\n            ],\n            [\n               \"key_padding_mask\",\n               null\n            ],\n            [\n               \"need_weights\",\n               true\n            ],\n            [\n               \"attn_mask\",\n               null\n            ],\n            [\n               \"use_separate_proj_weight\",\n               false\n            ],\n            [\n               \"q_proj_weight\",\n               null\n            ],\n            [\n               \"k_proj_weight\",\n               null\n            ],\n            [\n               \"v_proj_weight\",\n               null\n            ],\n            [\n               \"static_k\",\n               null\n            ],\n            [\n               \"static_v\",\n               null\n            ]\n         ],\n         \"multi_margin_loss\": [\n            [\n               \"input\"\n            ],\n            [\n               \"target\"\n            ],\n            [\n               \"p\",\n               1\n            ],\n            [\n               \"margin\",\n               1.0\n            ],\n            [\n               \"weight\",\n               null\n            ],\n            [\n               \"size_average\",\n               null\n            ],\n            [\n               \"reduce\",\n               null\n            ],\n            [\n               \"reduction\",\n               \"mean\"\n            ]\n         ],\n         \"multilabel_margin_loss\": [\n            [\n               \"input\"\n            ],\n            [\n               \"target\"\n            ],\n            [\n               \"size_average\",\n               null\n            ],\n            [\n               \"reduce\",\n               null\n            ],\n            [\n               \"reduction\",\n               \"mean\"\n            ]\n         ],\n         \"multilabel_soft_margin_loss\": [\n            [\n               \"input\"\n            ],\n            [\n               \"target\"\n            ],\n            [\n               \"weight\",\n               null\n            ],\n            [\n               \"size_average\",\n               null\n            ],\n            [\n               \"reduce\",\n               null\n            ],\n            [\n               \"reduction\",\n               \"mean\"\n            ]\n         ],\n         \"nll_loss\": [\n            [\n               \"input\"\n            ],\n            [\n               \"target\"\n            ],\n            [\n               \"weight\",\n               null\n            ],\n            [\n               \"size_average\",\n               null\n            ],\n            [\n               \"ignore_index\",\n               {}\n            ],\n            [\n               \"reduce\",\n               null\n            ],\n            [\n               \"reduction\",\n               \"mean\"\n            ]\n         ],\n         \"normalize\": [\n            [\n               \"input\"\n            ],\n            [\n               \"p\",\n               2\n            ],\n            [\n               \"dim\",\n               1\n            ],\n            [\n               \"eps\",\n               1e-12\n            ],\n            [\n               \"out\",\n               null\n            ]\n         ],\n         \"pairwise_distance\": [\n            [\n               \"x1\"\n            ],\n            [\n               \"x2\"\n            ],\n            [\n               \"p\",\n               2.0\n            ],\n            [\n               \"eps\",\n               1e-06\n            ],\n            [\n               \"keepdim\",\n               false\n            ]\n         ],\n         \"poisson_nll_loss\": [\n            [\n               \"input\"\n            ],\n            [\n               \"target\"\n            ],\n            [\n               \"log_input\",\n               true\n            ],\n            [\n               \"full\",\n               false\n            ],\n            [\n               \"size_average\",\n               null\n            ],\n            [\n               \"eps\",\n               1e-08\n            ],\n            [\n               \"reduce\",\n               null\n            ],\n            [\n               \"reduction\",\n               \"mean\"\n            ]\n         ],\n         \"prelu\": [\n            [\n               \"input\"\n            ],\n            [\n               \"weight\"\n            ]\n         ],\n         \"relu\": [\n            [\n               \"input\"\n            ],\n            [\n               \"inplace\",\n               false\n            ]\n         ],\n         \"relu6\": [\n            [\n               \"input\"\n            ],\n            [\n               \"inplace\",\n               false\n            ]\n         ],\n         \"rrelu\": [\n            [\n               \"input\"\n            ],\n            [\n               \"lower\",\n               {\n                  \"col_offset\": 23,\n                  \"lineno\": 1266,\n                  \"n\": 1.0\n               }\n            ],\n            [\n               \"upper\",\n               {\n                  \"col_offset\": 37,\n                  \"lineno\": 1266,\n                  \"n\": 1.0\n               }\n            ],\n            [\n               \"training\",\n               false\n            ],\n            [\n               \"inplace\",\n               false\n            ]\n         ],\n         \"selu\": [\n            [\n               \"input\"\n            ],\n            [\n               \"inplace\",\n               false\n            ]\n         ],\n         \"sigmoid\": [\n            [\n               \"input\"\n            ]\n         ],\n         \"smooth_l1_loss\": [\n            [\n               \"input\"\n            ],\n            [\n               \"target\"\n            ],\n            [\n               \"size_average\",\n               null\n            ],\n            [\n               \"reduce\",\n               null\n            ],\n            [\n               \"reduction\",\n               \"mean\"\n            ]\n         ],\n         \"soft_margin_loss\": [\n            [\n               \"input\"\n            ],\n            [\n               \"target\"\n            ],\n            [\n               \"size_average\",\n               null\n            ],\n            [\n               \"reduce\",\n               null\n            ],\n            [\n               \"reduction\",\n               \"mean\"\n            ]\n         ],\n         \"softmax\": [\n            [\n               \"input\"\n            ],\n            [\n               \"dim\",\n               null\n            ],\n            [\n               \"_stacklevel\",\n               3\n            ],\n            [\n               \"dtype\",\n               null\n            ]\n         ],\n         \"softmin\": [\n            [\n               \"input\"\n            ],\n            [\n               \"dim\",\n               null\n            ],\n            [\n               \"_stacklevel\",\n               3\n            ],\n            [\n               \"dtype\",\n               null\n            ]\n         ],\n         \"softsign\": [\n            [\n               \"input\"\n            ]\n         ],\n         \"tanh\": [\n            [\n               \"input\"\n            ]\n         ],\n         \"tanhshrink\": [\n            [\n               \"input\"\n            ]\n         ],\n         \"threshold\": [\n            [\n               \"input\"\n            ],\n            [\n               \"threshold\"\n            ],\n            [\n               \"value\"\n            ],\n            [\n               \"inplace\",\n               false\n            ]\n         ],\n         \"triplet_margin_loss\": [\n            [\n               \"anchor\"\n            ],\n            [\n               \"positive\"\n            ],\n            [\n               \"negative\"\n            ],\n            [\n               \"margin\",\n               1.0\n            ],\n            [\n               \"p\",\n               2\n            ],\n            [\n               \"eps\",\n               1e-06\n            ],\n            [\n               \"swap\",\n               false\n            ],\n            [\n               \"size_average\",\n               null\n            ],\n            [\n               \"reduce\",\n               null\n            ],\n            [\n               \"reduction\",\n               \"mean\"\n            ]\n         ],\n         \"unfold\": [\n            [\n               \"input\"\n            ],\n            [\n               \"kernel_size\"\n            ],\n            [\n               \"dilation\",\n               1\n            ],\n            [\n               \"padding\",\n               0\n            ],\n            [\n               \"stride\",\n               1\n            ]\n         ],\n         \"upsample\": [\n            [\n               \"input\"\n            ],\n            [\n               \"size\",\n               null\n            ],\n            [\n               \"scale_factor\",\n               null\n            ],\n            [\n               \"mode\",\n               \"nearest\"\n            ],\n            [\n               \"align_corners\",\n               null\n            ]\n         ],\n         \"upsample_bilinear\": [\n            [\n               \"input\"\n            ],\n            [\n               \"size\",\n               null\n            ],\n            [\n               \"scale_factor\",\n               null\n            ]\n         ],\n         \"upsample_nearest\": [\n            [\n               \"input\"\n            ],\n            [\n               \"size\",\n               null\n            ],\n            [\n               \"scale_factor\",\n               null\n            ]\n         ]\n      },\n      \"torch.nn.grad\": {\n         \"_grad_input_padding\": [\n            [\n               \"grad_output\"\n            ],\n            [\n               \"input_size\"\n            ],\n            [\n               \"stride\"\n            ],\n            [\n               \"padding\"\n            ],\n            [\n               \"kernel_size\"\n            ]\n         ],\n         \"conv1d_input\": [\n            [\n               \"input_size\"\n            ],\n            [\n               \"weight\"\n            ],\n            [\n               \"grad_output\"\n            ],\n            [\n               \"stride\",\n               1\n            ],\n            [\n               \"padding\",\n               0\n            ],\n            [\n               \"dilation\",\n               1\n            ],\n            [\n               \"groups\",\n               1\n            ]\n         ],\n         \"conv1d_weight\": [\n            [\n               \"input\"\n            ],\n            [\n               \"weight_size\"\n            ],\n            [\n               \"grad_output\"\n            ],\n            [\n               \"stride\",\n               1\n            ],\n            [\n               \"padding\",\n               0\n            ],\n            [\n               \"dilation\",\n               1\n            ],\n            [\n               \"groups\",\n               1\n            ]\n         ],\n         \"conv2d_input\": [\n            [\n               \"input_size\"\n            ],\n            [\n               \"weight\"\n            ],\n            [\n               \"grad_output\"\n            ],\n            [\n               \"stride\",\n               1\n            ],\n            [\n               \"padding\",\n               0\n            ],\n            [\n               \"dilation\",\n               1\n            ],\n            [\n               \"groups\",\n               1\n            ]\n         ],\n         \"conv2d_weight\": [\n            [\n               \"input\"\n            ],\n            [\n               \"weight_size\"\n            ],\n            [\n               \"grad_output\"\n            ],\n            [\n               \"stride\",\n               1\n            ],\n            [\n               \"padding\",\n               0\n            ],\n            [\n               \"dilation\",\n               1\n            ],\n            [\n               \"groups\",\n               1\n            ]\n         ],\n         \"conv3d_input\": [\n            [\n               \"input_size\"\n            ],\n            [\n               \"weight\"\n            ],\n            [\n               \"grad_output\"\n            ],\n            [\n               \"stride\",\n               1\n            ],\n            [\n               \"padding\",\n               0\n            ],\n            [\n               \"dilation\",\n               1\n            ],\n            [\n               \"groups\",\n               1\n            ]\n         ],\n         \"conv3d_weight\": [\n            [\n               \"input\"\n            ],\n            [\n               \"weight_size\"\n            ],\n            [\n               \"grad_output\"\n            ],\n            [\n               \"stride\",\n               1\n            ],\n            [\n               \"padding\",\n               0\n            ],\n            [\n               \"dilation\",\n               1\n            ],\n            [\n               \"groups\",\n               1\n            ]\n         ]\n      },\n      \"torch.nn.init\": {\n         \"_calculate_correct_fan\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"mode\"\n            ]\n         ],\n         \"_calculate_fan_in_and_fan_out\": [\n            [\n               \"tensor\"\n            ]\n         ],\n         \"_make_deprecate\": [\n            [\n               \"meth\"\n            ]\n         ],\n         \"_no_grad_fill_\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"val\"\n            ]\n         ],\n         \"_no_grad_normal_\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"mean\"\n            ],\n            [\n               \"std\"\n            ]\n         ],\n         \"_no_grad_uniform_\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"a\"\n            ],\n            [\n               \"b\"\n            ]\n         ],\n         \"_no_grad_zero_\": [\n            [\n               \"tensor\"\n            ]\n         ],\n         \"calculate_gain\": [\n            [\n               \"nonlinearity\"\n            ],\n            [\n               \"param\",\n               null\n            ]\n         ],\n         \"constant_\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"val\"\n            ]\n         ],\n         \"dirac_\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"groups\",\n               1\n            ]\n         ],\n         \"eye_\": [\n            [\n               \"tensor\"\n            ]\n         ],\n         \"kaiming_normal_\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"a\",\n               0\n            ],\n            [\n               \"mode\",\n               \"fan_in\"\n            ],\n            [\n               \"nonlinearity\",\n               \"leaky_relu\"\n            ]\n         ],\n         \"kaiming_uniform_\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"a\",\n               0\n            ],\n            [\n               \"mode\",\n               \"fan_in\"\n            ],\n            [\n               \"nonlinearity\",\n               \"leaky_relu\"\n            ]\n         ],\n         \"normal_\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"mean\",\n               0.0\n            ],\n            [\n               \"std\",\n               1.0\n            ]\n         ],\n         \"ones_\": [\n            [\n               \"tensor\"\n            ]\n         ],\n         \"orthogonal_\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"gain\",\n               1\n            ]\n         ],\n         \"sparse_\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"sparsity\"\n            ],\n            [\n               \"std\",\n               0.01\n            ]\n         ],\n         \"uniform_\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"a\",\n               0.0\n            ],\n            [\n               \"b\",\n               1.0\n            ]\n         ],\n         \"xavier_normal_\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"gain\",\n               1.0\n            ]\n         ],\n         \"xavier_uniform_\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"gain\",\n               1.0\n            ]\n         ],\n         \"zeros_\": [\n            [\n               \"tensor\"\n            ]\n         ]\n      },\n      \"torch.nn.intrinsic.qat.modules.conv_fused\": {\n         \"freeze_bn_stats\": [\n            [\n               \"mod\"\n            ]\n         ],\n         \"update_bn_stats\": [\n            [\n               \"mod\"\n            ]\n         ]\n      },\n      \"torch.nn.modules.module\": {\n         \"_addindent\": [\n            [\n               \"s_\"\n            ],\n            [\n               \"numSpaces\"\n            ]\n         ]\n      },\n      \"torch.nn.modules.rnn\": {\n         \"apply_permutation\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"permutation\"\n            ],\n            [\n               \"dim\",\n               1\n            ]\n         ]\n      },\n      \"torch.nn.modules.transformer\": {\n         \"_get_activation_fn\": [\n            [\n               \"activation\"\n            ]\n         ],\n         \"_get_clones\": [\n            [\n               \"module\"\n            ],\n            [\n               \"N\"\n            ]\n         ]\n      },\n      \"torch.nn.modules.utils\": {\n         \"_list_with_default\": [\n            [\n               \"out_size\"\n            ],\n            [\n               \"defaults\"\n            ]\n         ],\n         \"_ntuple\": [\n            [\n               \"n\"\n            ]\n         ],\n         \"_repeat_tuple\": [\n            [\n               \"t\"\n            ],\n            [\n               \"n\"\n            ]\n         ]\n      },\n      \"torch.nn.parallel.__init__\": {\n         \"DistributedDataParallelCPU\": []\n      },\n      \"torch.nn.parallel._functions\": {\n         \"_get_stream\": [\n            [\n               \"device\"\n            ]\n         ]\n      },\n      \"torch.nn.parallel.data_parallel\": {\n         \"_check_balance\": [\n            [\n               \"device_ids\"\n            ]\n         ],\n         \"data_parallel\": [\n            [\n               \"module\"\n            ],\n            [\n               \"inputs\"\n            ],\n            [\n               \"device_ids\",\n               null\n            ],\n            [\n               \"output_device\",\n               null\n            ],\n            [\n               \"dim\",\n               0\n            ],\n            [\n               \"module_kwargs\",\n               null\n            ]\n         ]\n      },\n      \"torch.nn.parallel.distributed\": {\n         \"_find_tensors\": [\n            [\n               \"obj\"\n            ]\n         ]\n      },\n      \"torch.nn.parallel.parallel_apply\": {\n         \"get_a_var\": [\n            [\n               \"obj\"\n            ]\n         ],\n         \"parallel_apply\": [\n            [\n               \"modules\"\n            ],\n            [\n               \"inputs\"\n            ],\n            [\n               \"kwargs_tup\",\n               null\n            ],\n            [\n               \"devices\",\n               null\n            ]\n         ]\n      },\n      \"torch.nn.parallel.replicate\": {\n         \"_broadcast_coalesced_reshape\": [\n            [\n               \"tensors\"\n            ],\n            [\n               \"devices\"\n            ],\n            [\n               \"detach\",\n               false\n            ]\n         ],\n         \"_init_script_module\": [],\n         \"_is_jit_enabled\": [],\n         \"_is_script_method\": [\n            [\n               \"module\"\n            ]\n         ],\n         \"_is_script_module\": [\n            [\n               \"module\"\n            ]\n         ],\n         \"_replicatable_module\": [\n            [\n               \"module\"\n            ],\n            [\n               \"memo\",\n               null\n            ]\n         ],\n         \"replicate\": [\n            [\n               \"network\"\n            ],\n            [\n               \"devices\"\n            ],\n            [\n               \"detach\",\n               false\n            ]\n         ]\n      },\n      \"torch.nn.parallel.scatter_gather\": {\n         \"gather\": [\n            [\n               \"outputs\"\n            ],\n            [\n               \"target_device\"\n            ],\n            [\n               \"dim\",\n               0\n            ]\n         ],\n         \"scatter\": [\n            [\n               \"inputs\"\n            ],\n            [\n               \"target_gpus\"\n            ],\n            [\n               \"dim\",\n               0\n            ]\n         ],\n         \"scatter_kwargs\": [\n            [\n               \"inputs\"\n            ],\n            [\n               \"kwargs\"\n            ],\n            [\n               \"target_gpus\"\n            ],\n            [\n               \"dim\",\n               0\n            ]\n         ]\n      },\n      \"torch.nn.quantized.dynamic.modules.rnn\": {\n         \"apply_permutation\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"permutation\"\n            ],\n            [\n               \"dim\",\n               1\n            ]\n         ]\n      },\n      \"torch.nn.quantized.functional\": {\n         \"adaptive_avg_pool2d\": [\n            [\n               \"input\"\n            ],\n            [\n               \"output_size\"\n            ]\n         ],\n         \"avg_pool2d\": [\n            [\n               \"input\"\n            ],\n            [\n               \"kernel_size\"\n            ],\n            [\n               \"stride\",\n               null\n            ],\n            [\n               \"padding\",\n               0\n            ],\n            [\n               \"ceil_mode\",\n               false\n            ],\n            [\n               \"count_include_pad\",\n               true\n            ],\n            [\n               \"divisor_override\",\n               null\n            ]\n         ],\n         \"avg_pool3d\": [\n            [\n               \"input\"\n            ],\n            [\n               \"kernel_size\"\n            ],\n            [\n               \"stride\",\n               null\n            ],\n            [\n               \"padding\",\n               0\n            ],\n            [\n               \"ceil_mode\",\n               false\n            ],\n            [\n               \"count_include_pad\",\n               true\n            ],\n            [\n               \"divisor_override\",\n               null\n            ]\n         ],\n         \"clamp\": [\n            [\n               \"input\"\n            ],\n            [\n               \"min_\"\n            ],\n            [\n               \"max_\"\n            ]\n         ],\n         \"conv2d\": [\n            [\n               \"input\"\n            ],\n            [\n               \"weight\"\n            ],\n            [\n               \"bias\"\n            ],\n            [\n               \"stride\",\n               1\n            ],\n            [\n               \"padding\",\n               0\n            ],\n            [\n               \"dilation\",\n               1\n            ],\n            [\n               \"groups\",\n               1\n            ],\n            [\n               \"padding_mode\",\n               \"zeros\"\n            ],\n            [\n               \"scale\",\n               1.0\n            ],\n            [\n               \"zero_point\",\n               0\n            ],\n            [\n               \"dtype\",\n               {\n                  \"col_offset\": 17,\n                  \"ctx\": {},\n                  \"id\": \"torch\",\n                  \"lineno\": 98\n               }\n            ]\n         ],\n         \"conv3d\": [\n            [\n               \"input\"\n            ],\n            [\n               \"weight\"\n            ],\n            [\n               \"bias\"\n            ],\n            [\n               \"stride\",\n               1\n            ],\n            [\n               \"padding\",\n               0\n            ],\n            [\n               \"dilation\",\n               1\n            ],\n            [\n               \"groups\",\n               1\n            ],\n            [\n               \"padding_mode\",\n               \"zeros\"\n            ],\n            [\n               \"scale\",\n               1.0\n            ],\n            [\n               \"zero_point\",\n               0\n            ],\n            [\n               \"dtype\",\n               {\n                  \"col_offset\": 64,\n                  \"ctx\": {},\n                  \"id\": \"torch\",\n                  \"lineno\": 157\n               }\n            ]\n         ],\n         \"elu\": [\n            [\n               \"input\"\n            ],\n            [\n               \"alpha\",\n               1.0\n            ],\n            [\n               \"inplace\",\n               false\n            ],\n            [\n               \"scale\",\n               null\n            ],\n            [\n               \"zero_point\",\n               null\n            ]\n         ],\n         \"hardtanh\": [\n            [\n               \"input\"\n            ],\n            [\n               \"min_val\",\n               {}\n            ],\n            [\n               \"max_val\",\n               1.0\n            ],\n            [\n               \"inplace\",\n               false\n            ]\n         ],\n         \"interpolate\": [\n            [\n               \"input\"\n            ],\n            [\n               \"size\",\n               null\n            ],\n            [\n               \"scale_factor\",\n               null\n            ],\n            [\n               \"mode\",\n               \"nearest\"\n            ],\n            [\n               \"align_corners\",\n               null\n            ]\n         ],\n         \"leaky_relu\": [\n            [\n               \"input\"\n            ],\n            [\n               \"negative_slope\",\n               0.01\n            ],\n            [\n               \"inplace\",\n               false\n            ],\n            [\n               \"scale\",\n               null\n            ],\n            [\n               \"zero_point\",\n               null\n            ]\n         ],\n         \"linear\": [\n            [\n               \"input\"\n            ],\n            [\n               \"weight\"\n            ],\n            [\n               \"bias\",\n               null\n            ],\n            [\n               \"scale\",\n               null\n            ],\n            [\n               \"zero_point\",\n               null\n            ]\n         ],\n         \"max_pool2d\": [\n            [\n               \"input\"\n            ],\n            [\n               \"kernel_size\"\n            ],\n            [\n               \"stride\",\n               null\n            ],\n            [\n               \"padding\",\n               0\n            ],\n            [\n               \"dilation\",\n               1\n            ],\n            [\n               \"ceil_mode\",\n               false\n            ],\n            [\n               \"return_indices\",\n               false\n            ]\n         ],\n         \"relu\": [\n            [\n               \"input\"\n            ],\n            [\n               \"inplace\",\n               false\n            ]\n         ],\n         \"upsample\": [\n            [\n               \"input\"\n            ],\n            [\n               \"size\",\n               null\n            ],\n            [\n               \"scale_factor\",\n               null\n            ],\n            [\n               \"mode\",\n               \"nearest\"\n            ],\n            [\n               \"align_corners\",\n               null\n            ]\n         ],\n         \"upsample_bilinear\": [\n            [\n               \"input\"\n            ],\n            [\n               \"size\",\n               null\n            ],\n            [\n               \"scale_factor\",\n               null\n            ]\n         ],\n         \"upsample_nearest\": [\n            [\n               \"input\"\n            ],\n            [\n               \"size\",\n               null\n            ],\n            [\n               \"scale_factor\",\n               null\n            ]\n         ]\n      },\n      \"torch.nn.quantized.modules.utils\": {\n         \"_quantize_weight\": [\n            [\n               \"float_wt\"\n            ],\n            [\n               \"observer\"\n            ]\n         ]\n      },\n      \"torch.nn.utils.clip_grad\": {\n         \"clip_grad_norm\": [\n            [\n               \"parameters\"\n            ],\n            [\n               \"max_norm\"\n            ],\n            [\n               \"norm_type\",\n               2\n            ]\n         ],\n         \"clip_grad_norm_\": [\n            [\n               \"parameters\"\n            ],\n            [\n               \"max_norm\"\n            ],\n            [\n               \"norm_type\",\n               2\n            ]\n         ],\n         \"clip_grad_value_\": [\n            [\n               \"parameters\"\n            ],\n            [\n               \"clip_value\"\n            ]\n         ]\n      },\n      \"torch.nn.utils.convert_parameters\": {\n         \"_check_param_device\": [\n            [\n               \"param\"\n            ],\n            [\n               \"old_param_device\"\n            ]\n         ],\n         \"parameters_to_vector\": [\n            [\n               \"parameters\"\n            ]\n         ],\n         \"vector_to_parameters\": [\n            [\n               \"vec\"\n            ],\n            [\n               \"parameters\"\n            ]\n         ]\n      },\n      \"torch.nn.utils.fusion\": {\n         \"fuse_conv_bn_eval\": [\n            [\n               \"conv\"\n            ],\n            [\n               \"bn\"\n            ]\n         ],\n         \"fuse_conv_bn_weights\": [\n            [\n               \"conv_w\"\n            ],\n            [\n               \"conv_b\"\n            ],\n            [\n               \"bn_rm\"\n            ],\n            [\n               \"bn_rv\"\n            ],\n            [\n               \"bn_eps\"\n            ],\n            [\n               \"bn_w\"\n            ],\n            [\n               \"bn_b\"\n            ]\n         ]\n      },\n      \"torch.nn.utils.memory_format\": {\n         \"convert_conv2d_weight_memory_format\": [\n            [\n               \"module\"\n            ],\n            [\n               \"memory_format\"\n            ]\n         ]\n      },\n      \"torch.nn.utils.prune\": {\n         \"_compute_norm\": [\n            [\n               \"t\"\n            ],\n            [\n               \"n\"\n            ],\n            [\n               \"dim\"\n            ]\n         ],\n         \"_compute_nparams_toprune\": [\n            [\n               \"amount\"\n            ],\n            [\n               \"tensor_size\"\n            ]\n         ],\n         \"_validate_pruning_amount\": [\n            [\n               \"amount\"\n            ],\n            [\n               \"tensor_size\"\n            ]\n         ],\n         \"_validate_pruning_amount_init\": [\n            [\n               \"amount\"\n            ]\n         ],\n         \"_validate_pruning_dim\": [\n            [\n               \"t\"\n            ],\n            [\n               \"dim\"\n            ]\n         ],\n         \"_validate_structured_pruning\": [\n            [\n               \"t\"\n            ]\n         ],\n         \"custom_from_mask\": [\n            [\n               \"module\"\n            ],\n            [\n               \"name\"\n            ],\n            [\n               \"mask\"\n            ]\n         ],\n         \"global_unstructured\": [\n            [\n               \"parameters\"\n            ],\n            [\n               \"pruning_method\"\n            ]\n         ],\n         \"identity\": [\n            [\n               \"module\"\n            ],\n            [\n               \"name\"\n            ]\n         ],\n         \"is_pruned\": [\n            [\n               \"module\"\n            ]\n         ],\n         \"l1_unstructured\": [\n            [\n               \"module\"\n            ],\n            [\n               \"name\"\n            ],\n            [\n               \"amount\"\n            ]\n         ],\n         \"ln_structured\": [\n            [\n               \"module\"\n            ],\n            [\n               \"name\"\n            ],\n            [\n               \"amount\"\n            ],\n            [\n               \"n\"\n            ],\n            [\n               \"dim\"\n            ]\n         ],\n         \"random_structured\": [\n            [\n               \"module\"\n            ],\n            [\n               \"name\"\n            ],\n            [\n               \"amount\"\n            ],\n            [\n               \"dim\"\n            ]\n         ],\n         \"random_unstructured\": [\n            [\n               \"module\"\n            ],\n            [\n               \"name\"\n            ],\n            [\n               \"amount\"\n            ]\n         ],\n         \"remove\": [\n            [\n               \"module\"\n            ],\n            [\n               \"name\"\n            ]\n         ]\n      },\n      \"torch.nn.utils.rnn\": {\n         \"_packed_sequence_init\": [\n            [\n               \"data\"\n            ],\n            [\n               \"batch_sizes\",\n               null\n            ],\n            [\n               \"sorted_indices\",\n               null\n            ],\n            [\n               \"unsorted_indices\",\n               null\n            ]\n         ],\n         \"_packed_sequence_init_args\": [\n            [\n               \"data\"\n            ],\n            [\n               \"batch_sizes\",\n               null\n            ],\n            [\n               \"sorted_indices\",\n               null\n            ],\n            [\n               \"unsorted_indices\",\n               null\n            ]\n         ],\n         \"bind\": [\n            [\n               \"optional\"\n            ],\n            [\n               \"fn\"\n            ]\n         ],\n         \"invert_permutation\": [\n            [\n               \"permutation\"\n            ]\n         ],\n         \"pack_padded_sequence\": [\n            [\n               \"input\"\n            ],\n            [\n               \"lengths\"\n            ],\n            [\n               \"batch_first\",\n               false\n            ],\n            [\n               \"enforce_sorted\",\n               true\n            ]\n         ],\n         \"pack_sequence\": [\n            [\n               \"sequences\"\n            ],\n            [\n               \"enforce_sorted\",\n               true\n            ]\n         ],\n         \"pad_packed_sequence\": [\n            [\n               \"sequence\"\n            ],\n            [\n               \"batch_first\",\n               false\n            ],\n            [\n               \"padding_value\",\n               0.0\n            ],\n            [\n               \"total_length\",\n               null\n            ]\n         ],\n         \"pad_sequence\": [\n            [\n               \"sequences\"\n            ],\n            [\n               \"batch_first\",\n               false\n            ],\n            [\n               \"padding_value\",\n               0\n            ]\n         ]\n      },\n      \"torch.nn.utils.spectral_norm\": {\n         \"remove_spectral_norm\": [\n            [\n               \"module\"\n            ],\n            [\n               \"name\",\n               \"weight\"\n            ]\n         ],\n         \"spectral_norm\": [\n            [\n               \"module\"\n            ],\n            [\n               \"name\",\n               \"weight\"\n            ],\n            [\n               \"n_power_iterations\",\n               1\n            ],\n            [\n               \"eps\",\n               1e-12\n            ],\n            [\n               \"dim\",\n               null\n            ]\n         ]\n      },\n      \"torch.nn.utils.weight_norm\": {\n         \"remove_weight_norm\": [\n            [\n               \"module\"\n            ],\n            [\n               \"name\",\n               \"weight\"\n            ]\n         ],\n         \"weight_norm\": [\n            [\n               \"module\"\n            ],\n            [\n               \"name\",\n               \"weight\"\n            ],\n            [\n               \"dim\",\n               0\n            ]\n         ]\n      },\n      \"torch.onnx.__init__\": {\n         \"_export\": [],\n         \"_export_to_pretty_string\": [],\n         \"_optimize_trace\": [\n            [\n               \"graph\"\n            ],\n            [\n               \"operator_export_type\"\n            ]\n         ],\n         \"_run_symbolic_function\": [],\n         \"_run_symbolic_method\": [],\n         \"export\": [\n            [\n               \"model\"\n            ],\n            [\n               \"args\"\n            ],\n            [\n               \"f\"\n            ],\n            [\n               \"export_params\",\n               true\n            ],\n            [\n               \"verbose\",\n               false\n            ],\n            [\n               \"training\",\n               false\n            ],\n            [\n               \"input_names\",\n               null\n            ],\n            [\n               \"output_names\",\n               null\n            ],\n            [\n               \"aten\",\n               false\n            ],\n            [\n               \"export_raw_ir\",\n               false\n            ],\n            [\n               \"operator_export_type\",\n               null\n            ],\n            [\n               \"opset_version\",\n               null\n            ],\n            [\n               \"_retain_param_name\",\n               true\n            ],\n            [\n               \"do_constant_folding\",\n               true\n            ],\n            [\n               \"example_outputs\",\n               null\n            ],\n            [\n               \"strip_doc_string\",\n               true\n            ],\n            [\n               \"dynamic_axes\",\n               null\n            ],\n            [\n               \"keep_initializers_as_inputs\",\n               null\n            ],\n            [\n               \"custom_opsets\",\n               null\n            ],\n            [\n               \"enable_onnx_checker\",\n               true\n            ],\n            [\n               \"use_external_data_format\",\n               false\n            ]\n         ],\n         \"export_to_pretty_string\": [],\n         \"is_in_onnx_export\": [],\n         \"register_custom_op_symbolic\": [\n            [\n               \"symbolic_name\"\n            ],\n            [\n               \"symbolic_fn\"\n            ],\n            [\n               \"opset_version\"\n            ]\n         ],\n         \"set_training\": [\n            [\n               \"model\"\n            ],\n            [\n               \"mode\"\n            ]\n         ]\n      },\n      \"torch.onnx.operators\": {\n         \"reshape_from_tensor_shape\": [\n            [\n               \"x\"\n            ],\n            [\n               \"shape\"\n            ]\n         ],\n         \"shape_as_tensor\": [\n            [\n               \"x\"\n            ]\n         ]\n      },\n      \"torch.onnx.symbolic_caffe2\": {\n         \"_empty_affine_quantized\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"shape\"\n            ],\n            [\n               \"scale\"\n            ],\n            [\n               \"zero_point\"\n            ],\n            [\n               \"dtype\"\n            ],\n            [\n               \"pin_memory\"\n            ],\n            [\n               \"memory_format\"\n            ],\n            [\n               \"layout\"\n            ]\n         ],\n         \"_permute_helper\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"axes\"\n            ]\n         ],\n         \"add\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input_a\"\n            ],\n            [\n               \"input_b\"\n            ],\n            [\n               \"scale\"\n            ],\n            [\n               \"zero_point\"\n            ]\n         ],\n         \"avg_pool2d\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"kernel_size\"\n            ],\n            [\n               \"stride\"\n            ],\n            [\n               \"padding\"\n            ],\n            [\n               \"ceil_mode\"\n            ],\n            [\n               \"count_include_pad\"\n            ],\n            [\n               \"divisor_override\",\n               null\n            ]\n         ],\n         \"cat\": [\n            [\n               \"g\"\n            ],\n            [\n               \"tensor_list\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"scale\",\n               null\n            ],\n            [\n               \"zero_point\",\n               null\n            ]\n         ],\n         \"conv2d\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"weight\"\n            ],\n            [\n               \"bias\"\n            ],\n            [\n               \"stride\"\n            ],\n            [\n               \"padding\"\n            ],\n            [\n               \"dilation\"\n            ],\n            [\n               \"groups\"\n            ],\n            [\n               \"scale\"\n            ],\n            [\n               \"zero_point\"\n            ]\n         ],\n         \"conv2d_relu\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"weight\"\n            ],\n            [\n               \"bias\"\n            ],\n            [\n               \"stride\"\n            ],\n            [\n               \"padding\"\n            ],\n            [\n               \"dilation\"\n            ],\n            [\n               \"groups\"\n            ],\n            [\n               \"scale\"\n            ],\n            [\n               \"zero_point\"\n            ]\n         ],\n         \"conv_prepack\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"weight\"\n            ],\n            [\n               \"bias\"\n            ],\n            [\n               \"stride\"\n            ],\n            [\n               \"padding\"\n            ],\n            [\n               \"dilation\"\n            ],\n            [\n               \"groups\"\n            ]\n         ],\n         \"dequantize\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ]\n         ],\n         \"linear\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"weight\"\n            ],\n            [\n               \"bias\"\n            ],\n            [\n               \"scale\"\n            ],\n            [\n               \"zero_point\"\n            ]\n         ],\n         \"linear_prepack\": [\n            [\n               \"g\"\n            ],\n            [\n               \"weight\"\n            ],\n            [\n               \"bias\"\n            ]\n         ],\n         \"max_pool2d\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"kernel_size\"\n            ],\n            [\n               \"stride\"\n            ],\n            [\n               \"padding\"\n            ],\n            [\n               \"dilation\"\n            ],\n            [\n               \"ceil_mode\"\n            ]\n         ],\n         \"nchw2nhwc\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ]\n         ],\n         \"nhwc2nchw\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ]\n         ],\n         \"quantize_per_tensor\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"scale\"\n            ],\n            [\n               \"zero_point\"\n            ],\n            [\n               \"dtype\"\n            ]\n         ],\n         \"register_quantized_ops\": [\n            [\n               \"domain\"\n            ],\n            [\n               \"version\"\n            ]\n         ],\n         \"relu\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ]\n         ],\n         \"reshape\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"shape\"\n            ]\n         ],\n         \"sigmoid\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ]\n         ],\n         \"slice\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"start\"\n            ],\n            [\n               \"end\"\n            ],\n            [\n               \"step\"\n            ]\n         ],\n         \"upsample_nearest2d\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"output_size\"\n            ],\n            [\n               \"align_corners\",\n               null\n            ],\n            [\n               \"scales_h\",\n               null\n            ],\n            [\n               \"scales_w\",\n               null\n            ]\n         ]\n      },\n      \"torch.onnx.symbolic_helper\": {\n         \"_arange_cast_helper\": [\n            [\n               \"g\"\n            ],\n            [\n               \"end\"\n            ],\n            [\n               \"start\",\n               null\n            ],\n            [\n               \"step\",\n               null\n            ],\n            [\n               \"dtype\",\n               null\n            ]\n         ],\n         \"_avgpool_helper\": [\n            [\n               \"tuple_fn\"\n            ],\n            [\n               \"padding\"\n            ],\n            [\n               \"kernel_size\"\n            ],\n            [\n               \"stride\"\n            ],\n            [\n               \"divisor_override\"\n            ],\n            [\n               \"name\"\n            ]\n         ],\n         \"_black_list_in_opset\": [\n            [\n               \"name\"\n            ]\n         ],\n         \"_cast_func_template\": [\n            [\n               \"to_i\"\n            ],\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"non_blocking\"\n            ]\n         ],\n         \"_get_const\": [\n            [\n               \"value\"\n            ],\n            [\n               \"desc\"\n            ],\n            [\n               \"arg_name\"\n            ]\n         ],\n         \"_get_interpolate_attributes\": [\n            [\n               \"g\"\n            ],\n            [\n               \"mode\"\n            ],\n            [\n               \"args\"\n            ]\n         ],\n         \"_if_scalar_type_as\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"tensor\"\n            ]\n         ],\n         \"_index_fill_reshape_helper\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"index\"\n            ]\n         ],\n         \"_interpolate_get_scales\": [\n            [\n               \"g\"\n            ],\n            [\n               \"scale_factor\"\n            ],\n            [\n               \"dim\"\n            ]\n         ],\n         \"_interpolate_get_scales_and_mode\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"size\"\n            ],\n            [\n               \"scale_factor\"\n            ],\n            [\n               \"mode\"\n            ],\n            [\n               \"align_corners\"\n            ]\n         ],\n         \"_interpolate_get_scales_if_available\": [\n            [\n               \"g\"\n            ],\n            [\n               \"scales\"\n            ]\n         ],\n         \"_interpolate_size_to_scales\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"output_size\"\n            ],\n            [\n               \"dim\"\n            ]\n         ],\n         \"_interpolate_warning\": [\n            [\n               \"interpolate_mode\"\n            ]\n         ],\n         \"_is_fp\": [\n            [\n               \"value\"\n            ]\n         ],\n         \"_is_none\": [\n            [\n               \"x\"\n            ]\n         ],\n         \"_is_packed_list\": [\n            [\n               \"list_value\"\n            ]\n         ],\n         \"_is_tensor_list\": [\n            [\n               \"x\"\n            ]\n         ],\n         \"_is_value\": [\n            [\n               \"x\"\n            ]\n         ],\n         \"_maybe_get_const\": [\n            [\n               \"value\"\n            ],\n            [\n               \"desc\"\n            ]\n         ],\n         \"_maybe_get_scalar\": [\n            [\n               \"value\"\n            ]\n         ],\n         \"_parse_arg\": [\n            [\n               \"value\"\n            ],\n            [\n               \"desc\"\n            ]\n         ],\n         \"_scalar\": [\n            [\n               \"x\"\n            ]\n         ],\n         \"_scatter_helper\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"index\"\n            ],\n            [\n               \"src\"\n            ]\n         ],\n         \"_set_operator_export_type\": [\n            [\n               \"operator_export_type\"\n            ]\n         ],\n         \"_set_opset_version\": [\n            [\n               \"opset_version\"\n            ]\n         ],\n         \"_size_helper\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"dim\"\n            ]\n         ],\n         \"_slice_helper\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"axes\"\n            ],\n            [\n               \"starts\"\n            ],\n            [\n               \"ends\"\n            ],\n            [\n               \"steps\",\n               null\n            ],\n            [\n               \"dynamic_slice\",\n               false\n            ]\n         ],\n         \"_sort_helper\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"decending\",\n               true\n            ],\n            [\n               \"out\",\n               null\n            ]\n         ],\n         \"_topk_helper\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"k\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"largest\",\n               true\n            ],\n            [\n               \"sorted\",\n               false\n            ],\n            [\n               \"out\",\n               null\n            ]\n         ],\n         \"_try_get_scalar_type\": [],\n         \"_unimplemented\": [\n            [\n               \"op\"\n            ],\n            [\n               \"msg\"\n            ]\n         ],\n         \"_unpack_list\": [\n            [\n               \"list_value\"\n            ]\n         ],\n         \"_unsqueeze_helper\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"dim\"\n            ]\n         ],\n         \"parse_args\": []\n      },\n      \"torch.onnx.symbolic_opset10\": {\n         \"__interpolate\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"size\"\n            ],\n            [\n               \"scale_factor\"\n            ],\n            [\n               \"mode\"\n            ],\n            [\n               \"align_corners\"\n            ],\n            [\n               \"recompute_scale_factor\"\n            ]\n         ],\n         \"_avg_pool\": [\n            [\n               \"name\"\n            ],\n            [\n               \"tuple_fn\"\n            ]\n         ],\n         \"_interpolate\": [\n            [\n               \"name\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"interpolate_mode\"\n            ]\n         ],\n         \"_max_pool\": [\n            [\n               \"name\"\n            ],\n            [\n               \"tuple_fn\"\n            ],\n            [\n               \"ndims\"\n            ],\n            [\n               \"return_indices\"\n            ]\n         ],\n         \"_slice\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"axes\"\n            ],\n            [\n               \"starts\"\n            ],\n            [\n               \"ends\"\n            ],\n            [\n               \"steps\",\n               null\n            ],\n            [\n               \"dynamic_slice\",\n               false\n            ]\n         ],\n         \"flip\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"dims\"\n            ]\n         ],\n         \"fmod\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"other\"\n            ]\n         ],\n         \"slice\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"start\"\n            ],\n            [\n               \"end\"\n            ],\n            [\n               \"step\"\n            ]\n         ],\n         \"sort\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"decending\"\n            ],\n            [\n               \"out\",\n               null\n            ]\n         ],\n         \"topk\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"k\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"largest\"\n            ],\n            [\n               \"sorted\"\n            ],\n            [\n               \"out\",\n               null\n            ]\n         ]\n      },\n      \"torch.onnx.symbolic_opset11\": {\n         \"__getitem_\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"i\"\n            ]\n         ],\n         \"__interpolate\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"size\"\n            ],\n            [\n               \"scale_factor\"\n            ],\n            [\n               \"mode\"\n            ],\n            [\n               \"align_corners\"\n            ],\n            [\n               \"recompute_scale_factor\"\n            ]\n         ],\n         \"__lshift_\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"other\"\n            ]\n         ],\n         \"__rshift_\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"other\"\n            ]\n         ],\n         \"_avg_pool\": [\n            [\n               \"name\"\n            ],\n            [\n               \"tuple_fn\"\n            ]\n         ],\n         \"_dim_arange\": [\n            [\n               \"g\"\n            ],\n            [\n               \"like\"\n            ],\n            [\n               \"dim\"\n            ]\n         ],\n         \"_get_im2col_indices_along_dim\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input_d\"\n            ],\n            [\n               \"kernel_size_d\"\n            ],\n            [\n               \"dilation_d\"\n            ],\n            [\n               \"padding_d\"\n            ],\n            [\n               \"stride_d\"\n            ]\n         ],\n         \"_get_im2col_output_shape\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"kernel_h\"\n            ],\n            [\n               \"kernel_w\"\n            ]\n         ],\n         \"_get_im2col_padded_input\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"padding_h\"\n            ],\n            [\n               \"padding_w\"\n            ]\n         ],\n         \"_interpolate\": [\n            [\n               \"name\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"interpolate_mode\"\n            ]\n         ],\n         \"_len\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ]\n         ],\n         \"_prepare_onnx_paddings\": [\n            [\n               \"g\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"pad\"\n            ]\n         ],\n         \"_unique2\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"sorted\"\n            ],\n            [\n               \"return_inverse\"\n            ],\n            [\n               \"return_counts\"\n            ]\n         ],\n         \"append\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"tensor\"\n            ]\n         ],\n         \"arange\": [\n            [\n               \"g\"\n            ]\n         ],\n         \"cat\": [\n            [\n               \"g\"\n            ],\n            [\n               \"tensor_list\"\n            ],\n            [\n               \"dim\"\n            ]\n         ],\n         \"clamp\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"min\"\n            ],\n            [\n               \"max\"\n            ]\n         ],\n         \"constant_pad_nd\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"padding\"\n            ],\n            [\n               \"value\",\n               null\n            ]\n         ],\n         \"cumsum\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"dtype\",\n               null\n            ]\n         ],\n         \"det\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ]\n         ],\n         \"flatten\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"start_dim\"\n            ],\n            [\n               \"end_dim\"\n            ]\n         ],\n         \"gather\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"index\"\n            ],\n            [\n               \"sparse_grad\",\n               false\n            ]\n         ],\n         \"hardtanh\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"min_val\"\n            ],\n            [\n               \"max_val\"\n            ]\n         ],\n         \"im2col\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"kernel_size\"\n            ],\n            [\n               \"dilation\"\n            ],\n            [\n               \"padding\"\n            ],\n            [\n               \"stride\"\n            ]\n         ],\n         \"index_copy\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"index\"\n            ],\n            [\n               \"source\"\n            ]\n         ],\n         \"index_fill\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"index\"\n            ],\n            [\n               \"value\"\n            ]\n         ],\n         \"index_put\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"indices_list_value\"\n            ],\n            [\n               \"values\"\n            ],\n            [\n               \"accumulate\",\n               false\n            ]\n         ],\n         \"insert\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"pos\"\n            ],\n            [\n               \"tensor\"\n            ]\n         ],\n         \"logdet\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ]\n         ],\n         \"masked_scatter\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"mask\"\n            ],\n            [\n               \"source\"\n            ]\n         ],\n         \"masked_select\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"mask\"\n            ]\n         ],\n         \"mm\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"other\"\n            ]\n         ],\n         \"pixel_shuffle\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"upscale_factor\"\n            ]\n         ],\n         \"pop\": [\n            [\n               \"g\"\n            ],\n            [\n               \"tensor_list\"\n            ],\n            [\n               \"dim\"\n            ]\n         ],\n         \"reflection_pad\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"padding\"\n            ]\n         ],\n         \"replication_pad\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"padding\"\n            ]\n         ],\n         \"round\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ]\n         ],\n         \"scatter\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"index\"\n            ],\n            [\n               \"src\"\n            ]\n         ],\n         \"size\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"dim\",\n               null\n            ]\n         ],\n         \"sort\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"decending\"\n            ],\n            [\n               \"out\",\n               null\n            ]\n         ],\n         \"split_with_sizes\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"split_sizes\"\n            ],\n            [\n               \"dim\"\n            ]\n         ],\n         \"squeeze\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"dim\",\n               null\n            ]\n         ],\n         \"stack\": [\n            [\n               \"g\"\n            ],\n            [\n               \"tensor_list\"\n            ],\n            [\n               \"dim\"\n            ]\n         ],\n         \"topk\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"k\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"largest\"\n            ],\n            [\n               \"sorted\"\n            ],\n            [\n               \"out\",\n               null\n            ]\n         ],\n         \"unique_dim\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"sorted\"\n            ],\n            [\n               \"return_inverse\"\n            ],\n            [\n               \"return_counts\"\n            ]\n         ],\n         \"unsqueeze\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"dim\"\n            ]\n         ]\n      },\n      \"torch.onnx.symbolic_opset12\": {\n         \"einsum\": [\n            [\n               \"g\"\n            ],\n            [\n               \"equation\"\n            ],\n            [\n               \"tensor_list\"\n            ]\n         ],\n         \"nll_loss\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"target\"\n            ],\n            [\n               \"weight\"\n            ],\n            [\n               \"reduction\"\n            ],\n            [\n               \"ignore_index\"\n            ]\n         ],\n         \"nll_loss2d\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"target\"\n            ],\n            [\n               \"weight\"\n            ],\n            [\n               \"reduction\"\n            ],\n            [\n               \"ignore_index\"\n            ]\n         ]\n      },\n      \"torch.onnx.symbolic_opset7\": {\n         \"max\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"dim_or_y\",\n               null\n            ],\n            [\n               \"keepdim\",\n               null\n            ]\n         ],\n         \"min\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"dim_or_y\",\n               null\n            ],\n            [\n               \"keepdim\",\n               null\n            ]\n         ]\n      },\n      \"torch.onnx.symbolic_opset8\": {\n         \"__interpolate\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"size\"\n            ],\n            [\n               \"scale_factor\"\n            ],\n            [\n               \"mode\"\n            ],\n            [\n               \"align_corners\"\n            ],\n            [\n               \"recompute_scale_factor\"\n            ]\n         ],\n         \"_cast_to_type\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"to_type\"\n            ]\n         ],\n         \"_comparison_operator\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"other\"\n            ],\n            [\n               \"op_name\"\n            ]\n         ],\n         \"_constant_fill\": [\n            [\n               \"g\"\n            ],\n            [\n               \"sizes\"\n            ],\n            [\n               \"dtype\"\n            ],\n            [\n               \"const_value\"\n            ]\n         ],\n         \"_interpolate\": [\n            [\n               \"name\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"interpolate_mode\"\n            ]\n         ],\n         \"_try_cast_integer_to_float\": [\n            [\n               \"g\"\n            ]\n         ],\n         \"addmm\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"mat1\"\n            ],\n            [\n               \"mat2\"\n            ],\n            [\n               \"beta\"\n            ],\n            [\n               \"alpha\"\n            ]\n         ],\n         \"bmm\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"other\"\n            ]\n         ],\n         \"empty\": [\n            [\n               \"g\"\n            ],\n            [\n               \"sizes\"\n            ],\n            [\n               \"dtype\"\n            ],\n            [\n               \"layout\"\n            ],\n            [\n               \"device\"\n            ],\n            [\n               \"pin_memory\",\n               false\n            ],\n            [\n               \"memory_format\",\n               null\n            ]\n         ],\n         \"empty_like\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"dtype\"\n            ],\n            [\n               \"layout\"\n            ],\n            [\n               \"device\"\n            ],\n            [\n               \"pin_memory\",\n               false\n            ],\n            [\n               \"memory_format\",\n               null\n            ]\n         ],\n         \"flatten\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"start_dim\"\n            ],\n            [\n               \"end_dim\"\n            ]\n         ],\n         \"full\": [\n            [\n               \"g\"\n            ],\n            [\n               \"sizes\"\n            ],\n            [\n               \"value\"\n            ],\n            [\n               \"dtype\"\n            ],\n            [\n               \"layout\"\n            ],\n            [\n               \"device\"\n            ],\n            [\n               \"pin_memory\",\n               false\n            ]\n         ],\n         \"full_like\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"fill_value\"\n            ],\n            [\n               \"dtype\"\n            ],\n            [\n               \"layout\"\n            ],\n            [\n               \"device\"\n            ],\n            [\n               \"pin_memory\",\n               false\n            ],\n            [\n               \"memory_format\",\n               null\n            ]\n         ],\n         \"gt\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"other\"\n            ]\n         ],\n         \"lt\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"other\"\n            ]\n         ],\n         \"matmul\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"other\"\n            ]\n         ],\n         \"mm\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"other\"\n            ]\n         ],\n         \"ones\": [\n            [\n               \"g\"\n            ],\n            [\n               \"sizes\"\n            ],\n            [\n               \"dtype\"\n            ],\n            [\n               \"layout\"\n            ],\n            [\n               \"device\"\n            ],\n            [\n               \"pin_memory\",\n               false\n            ]\n         ],\n         \"ones_like\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"dtype\"\n            ],\n            [\n               \"layout\"\n            ],\n            [\n               \"device\"\n            ],\n            [\n               \"pin_memory\",\n               false\n            ],\n            [\n               \"memory_format\",\n               null\n            ]\n         ],\n         \"prelu\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"weight\"\n            ]\n         ],\n         \"view\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"size\"\n            ]\n         ],\n         \"zeros\": [\n            [\n               \"g\"\n            ],\n            [\n               \"sizes\"\n            ],\n            [\n               \"dtype\"\n            ],\n            [\n               \"layout\"\n            ],\n            [\n               \"device\"\n            ],\n            [\n               \"pin_memory\",\n               false\n            ]\n         ],\n         \"zeros_like\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"dtype\"\n            ],\n            [\n               \"layout\"\n            ],\n            [\n               \"device\"\n            ],\n            [\n               \"pin_memory\",\n               false\n            ],\n            [\n               \"memory_format\",\n               null\n            ]\n         ]\n      },\n      \"torch.onnx.symbolic_opset9\": {\n         \"__and_\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"other\"\n            ]\n         ],\n         \"__getitem_\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"i\"\n            ]\n         ],\n         \"__interpolate\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"size\"\n            ],\n            [\n               \"scale_factor\"\n            ],\n            [\n               \"mode\"\n            ],\n            [\n               \"align_corners\"\n            ],\n            [\n               \"recompute_scale_factor\"\n            ]\n         ],\n         \"__lshift_\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"other\"\n            ]\n         ],\n         \"__or_\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"other\"\n            ]\n         ],\n         \"__rshift_\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"other\"\n            ]\n         ],\n         \"_adaptive_pool\": [\n            [\n               \"name\"\n            ],\n            [\n               \"type\"\n            ],\n            [\n               \"tuple_fn\"\n            ],\n            [\n               \"fn\",\n               null\n            ]\n         ],\n         \"_avg_pool\": [\n            [\n               \"name\"\n            ],\n            [\n               \"tuple_fn\"\n            ]\n         ],\n         \"_convolution\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"weight\"\n            ],\n            [\n               \"bias\"\n            ],\n            [\n               \"stride\"\n            ],\n            [\n               \"padding\"\n            ],\n            [\n               \"dilation\"\n            ],\n            [\n               \"transposed\"\n            ],\n            [\n               \"output_padding\"\n            ],\n            [\n               \"groups\"\n            ],\n            [\n               \"benchmark\"\n            ],\n            [\n               \"deterministic\"\n            ],\n            [\n               \"cudnn_enabled\"\n            ]\n         ],\n         \"_dim_arange\": [\n            [\n               \"g\"\n            ],\n            [\n               \"like\"\n            ],\n            [\n               \"dim\"\n            ]\n         ],\n         \"_generic_rnn\": [\n            [\n               \"g\"\n            ],\n            [\n               \"variant\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"initial_states\"\n            ],\n            [\n               \"all_weights\"\n            ],\n            [\n               \"has_biases\"\n            ],\n            [\n               \"num_layers\"\n            ],\n            [\n               \"dropout\"\n            ],\n            [\n               \"train\"\n            ],\n            [\n               \"bidirectional\"\n            ],\n            [\n               \"batch_first\",\n               null\n            ],\n            [\n               \"batch_sizes\",\n               null\n            ]\n         ],\n         \"_interpolate\": [\n            [\n               \"name\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"interpolate_mode\"\n            ]\n         ],\n         \"_lstm_full\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"hidden_v\"\n            ],\n            [\n               \"weight_v\"\n            ],\n            [\n               \"has_biases\"\n            ],\n            [\n               \"num_layers\"\n            ],\n            [\n               \"dropout\"\n            ],\n            [\n               \"train\"\n            ],\n            [\n               \"bidirectional\"\n            ],\n            [\n               \"batch_first\"\n            ]\n         ],\n         \"_lstm_packed\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"batch_sizes\"\n            ],\n            [\n               \"hidden_v\"\n            ],\n            [\n               \"weight_v\"\n            ],\n            [\n               \"has_biases\"\n            ],\n            [\n               \"num_layers\"\n            ],\n            [\n               \"dropout\"\n            ],\n            [\n               \"train\"\n            ],\n            [\n               \"bidirectional\"\n            ]\n         ],\n         \"_max_pool\": [\n            [\n               \"name\"\n            ],\n            [\n               \"tuple_fn\"\n            ],\n            [\n               \"ndims\"\n            ],\n            [\n               \"return_indices\"\n            ]\n         ],\n         \"_one_hidden_rnn\": [\n            [\n               \"kind\"\n            ]\n         ],\n         \"_pack_padded_sequence\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"lengths\"\n            ],\n            [\n               \"batch_first\"\n            ]\n         ],\n         \"_pad_packed_sequence\": [\n            [\n               \"g\"\n            ],\n            [\n               \"data\"\n            ],\n            [\n               \"batch_sizes\"\n            ],\n            [\n               \"batch_first\"\n            ],\n            [\n               \"padding_value\"\n            ],\n            [\n               \"total_length\"\n            ]\n         ],\n         \"_prepare_onnx_paddings\": [\n            [\n               \"dim\"\n            ],\n            [\n               \"pad\"\n            ]\n         ],\n         \"_reduce_op_symbolic\": [\n            [\n               \"onnx_op_name\"\n            ],\n            [\n               \"allow_multi_dim_support\",\n               true\n            ]\n         ],\n         \"_reduce_with_dtype\": [\n            [\n               \"onnx_op\"\n            ],\n            [\n               \"name\"\n            ],\n            [\n               \"allow_multi_dim_support\",\n               true\n            ]\n         ],\n         \"_reshape_from_tensor\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"shape\"\n            ]\n         ],\n         \"_sample_dirichlet\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"generator\"\n            ]\n         ],\n         \"_shape_as_tensor\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ]\n         ],\n         \"_slice\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"axes\"\n            ],\n            [\n               \"starts\"\n            ],\n            [\n               \"ends\"\n            ]\n         ],\n         \"_standard_gamma\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"generator\"\n            ]\n         ],\n         \"_std\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"unbiased\"\n            ],\n            [\n               \"keepdim\"\n            ]\n         ],\n         \"_unique\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"sorted\"\n            ],\n            [\n               \"return_inverse\"\n            ]\n         ],\n         \"_unique2\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"sorted\"\n            ],\n            [\n               \"return_inverse\"\n            ],\n            [\n               \"return_counts\"\n            ]\n         ],\n         \"_unsupported_dropout\": [\n            [\n               \"name\"\n            ]\n         ],\n         \"_weight_norm\": [\n            [\n               \"g\"\n            ],\n            [\n               \"weight_v\"\n            ],\n            [\n               \"weight_g\"\n            ],\n            [\n               \"dim\"\n            ]\n         ],\n         \"abs\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ]\n         ],\n         \"acos\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ]\n         ],\n         \"add\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"other\"\n            ],\n            [\n               \"alpha\",\n               null\n            ]\n         ],\n         \"addmm\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"mat1\"\n            ],\n            [\n               \"mat2\"\n            ],\n            [\n               \"beta\"\n            ],\n            [\n               \"alpha\"\n            ]\n         ],\n         \"alias\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ]\n         ],\n         \"arange\": [\n            [\n               \"g\"\n            ]\n         ],\n         \"argmax\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"keepdim\"\n            ]\n         ],\n         \"argmin\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"keepdim\"\n            ]\n         ],\n         \"asin\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ]\n         ],\n         \"atan\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ]\n         ],\n         \"baddbmm\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"batch1\"\n            ],\n            [\n               \"batch2\"\n            ],\n            [\n               \"beta\"\n            ],\n            [\n               \"alpha\"\n            ]\n         ],\n         \"batch_norm\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"weight\"\n            ],\n            [\n               \"bias\"\n            ],\n            [\n               \"running_mean\"\n            ],\n            [\n               \"running_var\"\n            ],\n            [\n               \"training\"\n            ],\n            [\n               \"momentum\"\n            ],\n            [\n               \"eps\"\n            ],\n            [\n               \"cudnn_enabled\"\n            ]\n         ],\n         \"bitwise_not\": [\n            [\n               \"g\"\n            ],\n            [\n               \"inp\"\n            ]\n         ],\n         \"bmm\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"other\"\n            ]\n         ],\n         \"cat\": [\n            [\n               \"g\"\n            ],\n            [\n               \"tensor_list\"\n            ],\n            [\n               \"dim\"\n            ]\n         ],\n         \"ceil\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ]\n         ],\n         \"clamp\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"min\"\n            ],\n            [\n               \"max\"\n            ]\n         ],\n         \"clamp_max\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"max\"\n            ]\n         ],\n         \"clamp_min\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"min\"\n            ]\n         ],\n         \"clone\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"unused_memory_format\"\n            ]\n         ],\n         \"constant_pad_nd\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"padding\"\n            ],\n            [\n               \"value\"\n            ]\n         ],\n         \"contiguous\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"memory_format\"\n            ]\n         ],\n         \"conv1d\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"weight\"\n            ],\n            [\n               \"bias\"\n            ],\n            [\n               \"stride\"\n            ],\n            [\n               \"padding\"\n            ],\n            [\n               \"dilation\"\n            ],\n            [\n               \"groups\"\n            ]\n         ],\n         \"conv2d\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"weight\"\n            ],\n            [\n               \"bias\"\n            ],\n            [\n               \"stride\"\n            ],\n            [\n               \"padding\"\n            ],\n            [\n               \"dilation\"\n            ],\n            [\n               \"groups\"\n            ]\n         ],\n         \"conv3d\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"weight\"\n            ],\n            [\n               \"bias\"\n            ],\n            [\n               \"stride\"\n            ],\n            [\n               \"padding\"\n            ],\n            [\n               \"dilation\"\n            ],\n            [\n               \"groups\"\n            ]\n         ],\n         \"conv_tbc\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"weight\"\n            ],\n            [\n               \"bias\"\n            ],\n            [\n               \"pad\"\n            ]\n         ],\n         \"conv_transpose1d\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"weight\"\n            ],\n            [\n               \"bias\"\n            ],\n            [\n               \"stride\"\n            ],\n            [\n               \"padding\"\n            ],\n            [\n               \"output_padding\"\n            ],\n            [\n               \"groups\"\n            ],\n            [\n               \"dilation\"\n            ]\n         ],\n         \"conv_transpose2d\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"weight\"\n            ],\n            [\n               \"bias\"\n            ],\n            [\n               \"stride\"\n            ],\n            [\n               \"padding\"\n            ],\n            [\n               \"output_padding\"\n            ],\n            [\n               \"groups\"\n            ],\n            [\n               \"dilation\"\n            ]\n         ],\n         \"conv_transpose3d\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"weight\"\n            ],\n            [\n               \"bias\"\n            ],\n            [\n               \"stride\"\n            ],\n            [\n               \"padding\"\n            ],\n            [\n               \"output_padding\"\n            ],\n            [\n               \"groups\"\n            ],\n            [\n               \"dilation\"\n            ]\n         ],\n         \"cos\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ]\n         ],\n         \"cosine_similarity\": [\n            [\n               \"g\"\n            ],\n            [\n               \"x1\"\n            ],\n            [\n               \"x2\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"eps\"\n            ]\n         ],\n         \"cumsum\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"dtype\"\n            ]\n         ],\n         \"detach\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ]\n         ],\n         \"dim\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ]\n         ],\n         \"div\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"other\"\n            ]\n         ],\n         \"dropout\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"p\"\n            ],\n            [\n               \"train\"\n            ]\n         ],\n         \"elu\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"alpha\"\n            ],\n            [\n               \"scale\"\n            ],\n            [\n               \"input_scale\"\n            ]\n         ],\n         \"embedding\": [\n            [\n               \"g\"\n            ],\n            [\n               \"weight\"\n            ],\n            [\n               \"indices\"\n            ],\n            [\n               \"padding_idx\"\n            ],\n            [\n               \"scale_grad_by_freq\"\n            ],\n            [\n               \"sparse\"\n            ]\n         ],\n         \"embedding_bag\": [\n            [\n               \"g\"\n            ],\n            [\n               \"embedding_matrix\"\n            ],\n            [\n               \"indices\"\n            ],\n            [\n               \"offsets\"\n            ],\n            [\n               \"scale_grad_by_freq\"\n            ],\n            [\n               \"mode\"\n            ],\n            [\n               \"sparse\"\n            ],\n            [\n               \"per_sample_weights\"\n            ],\n            [\n               \"include_last_offset\"\n            ]\n         ],\n         \"empty\": [\n            [\n               \"g\"\n            ],\n            [\n               \"sizes\"\n            ],\n            [\n               \"dtype\"\n            ],\n            [\n               \"layout\"\n            ],\n            [\n               \"device\"\n            ],\n            [\n               \"pin_memory\",\n               false\n            ],\n            [\n               \"memory_format\",\n               null\n            ]\n         ],\n         \"empty_like\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"dtype\",\n               null\n            ],\n            [\n               \"layout\",\n               null\n            ],\n            [\n               \"device\",\n               null\n            ],\n            [\n               \"pin_memory\",\n               false\n            ],\n            [\n               \"memory_format\",\n               null\n            ]\n         ],\n         \"eq\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"other\"\n            ]\n         ],\n         \"erf\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ]\n         ],\n         \"exp\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ]\n         ],\n         \"expand\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"size\"\n            ],\n            [\n               \"implicit\"\n            ]\n         ],\n         \"expand_as\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"other\"\n            ]\n         ],\n         \"flatten\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"start_dim\"\n            ],\n            [\n               \"end_dim\"\n            ]\n         ],\n         \"floor\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ]\n         ],\n         \"floor_divide\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"other\"\n            ]\n         ],\n         \"frobenius_norm\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"dim\",\n               null\n            ],\n            [\n               \"keepdim\",\n               false\n            ]\n         ],\n         \"full\": [\n            [\n               \"g\"\n            ],\n            [\n               \"sizes\"\n            ],\n            [\n               \"value\"\n            ],\n            [\n               \"dtype\"\n            ],\n            [\n               \"layout\"\n            ],\n            [\n               \"device\"\n            ],\n            [\n               \"pin_memory\",\n               false\n            ]\n         ],\n         \"full_like\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"fill_value\"\n            ],\n            [\n               \"dtype\",\n               null\n            ],\n            [\n               \"layout\",\n               null\n            ],\n            [\n               \"device\",\n               null\n            ],\n            [\n               \"pin_memory\",\n               false\n            ],\n            [\n               \"memory_format\",\n               null\n            ]\n         ],\n         \"gather\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"index\"\n            ],\n            [\n               \"sparse_grad\",\n               false\n            ]\n         ],\n         \"ge\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"other\"\n            ]\n         ],\n         \"gelu\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ]\n         ],\n         \"get_pool_ceil_padding\": [\n            [\n               \"input\"\n            ],\n            [\n               \"kernel_size\"\n            ],\n            [\n               \"stride\"\n            ],\n            [\n               \"padding\"\n            ]\n         ],\n         \"glu\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"dim\"\n            ]\n         ],\n         \"group_norm\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"num_groups\"\n            ],\n            [\n               \"weight\"\n            ],\n            [\n               \"bias\"\n            ],\n            [\n               \"eps\"\n            ],\n            [\n               \"cudnn_enabled\"\n            ]\n         ],\n         \"gt\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"other\"\n            ]\n         ],\n         \"gt_impl\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"other\"\n            ]\n         ],\n         \"hardtanh\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"min_val\"\n            ],\n            [\n               \"max_val\"\n            ]\n         ],\n         \"index\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"index\"\n            ]\n         ],\n         \"index_copy\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"index\"\n            ],\n            [\n               \"source\"\n            ]\n         ],\n         \"index_fill\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"index\"\n            ],\n            [\n               \"value\"\n            ]\n         ],\n         \"index_put\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"indices_list_value\"\n            ],\n            [\n               \"values\"\n            ],\n            [\n               \"accumulate\"\n            ]\n         ],\n         \"index_select\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"index\"\n            ]\n         ],\n         \"instance_norm\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"weight\"\n            ],\n            [\n               \"bias\"\n            ],\n            [\n               \"running_mean\"\n            ],\n            [\n               \"running_var\"\n            ],\n            [\n               \"use_input_stats\"\n            ],\n            [\n               \"momentum\"\n            ],\n            [\n               \"eps\"\n            ],\n            [\n               \"cudnn_enabled\"\n            ]\n         ],\n         \"isnan\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ]\n         ],\n         \"layer_norm\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"normalized_shape\"\n            ],\n            [\n               \"weight\"\n            ],\n            [\n               \"bias\"\n            ],\n            [\n               \"eps\"\n            ],\n            [\n               \"cudnn_enable\"\n            ]\n         ],\n         \"le\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"other\"\n            ]\n         ],\n         \"leaky_relu\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"negative_slope\"\n            ],\n            [\n               \"inplace\",\n               false\n            ]\n         ],\n         \"log\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ]\n         ],\n         \"log1p\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ]\n         ],\n         \"log2\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ]\n         ],\n         \"log_sigmoid\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ]\n         ],\n         \"log_softmax\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"dtype\",\n               null\n            ]\n         ],\n         \"logsumexp\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"keepdim\"\n            ]\n         ],\n         \"lstm\": [\n            [\n               \"g\"\n            ]\n         ],\n         \"lt\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"other\"\n            ]\n         ],\n         \"lt_impl\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"other\"\n            ]\n         ],\n         \"masked_fill\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"mask\"\n            ],\n            [\n               \"value\"\n            ]\n         ],\n         \"matmul\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"other\"\n            ]\n         ],\n         \"max\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"dim_or_y\",\n               null\n            ],\n            [\n               \"keepdim\",\n               null\n            ]\n         ],\n         \"meshgrid\": [\n            [\n               \"g\"\n            ],\n            [\n               \"tensor_list\"\n            ]\n         ],\n         \"min\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"dim_or_y\",\n               null\n            ],\n            [\n               \"keepdim\",\n               null\n            ]\n         ],\n         \"mm\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"other\"\n            ]\n         ],\n         \"mul\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"other\"\n            ]\n         ],\n         \"multinomial\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"num_samples\"\n            ],\n            [\n               \"replacement\",\n               false\n            ],\n            [\n               \"generator\",\n               null\n            ]\n         ],\n         \"narrow\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"start\"\n            ],\n            [\n               \"length\"\n            ]\n         ],\n         \"ne\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"other\"\n            ]\n         ],\n         \"neg\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ]\n         ],\n         \"new_zeros\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"sizes\"\n            ],\n            [\n               \"dtype\"\n            ],\n            [\n               \"layout\"\n            ],\n            [\n               \"device\"\n            ],\n            [\n               \"pin_memory\",\n               false\n            ]\n         ],\n         \"nonzero\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ]\n         ],\n         \"norm\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"p\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"keepdim\"\n            ]\n         ],\n         \"one_hot\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"num_classes\"\n            ]\n         ],\n         \"ones\": [\n            [\n               \"g\"\n            ],\n            [\n               \"sizes\"\n            ],\n            [\n               \"dtype\"\n            ],\n            [\n               \"layout\"\n            ],\n            [\n               \"device\"\n            ],\n            [\n               \"pin_memory\",\n               false\n            ]\n         ],\n         \"ones_like\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"dtype\",\n               null\n            ],\n            [\n               \"layout\",\n               null\n            ],\n            [\n               \"device\",\n               null\n            ],\n            [\n               \"pin_memory\",\n               false\n            ],\n            [\n               \"memory_format\",\n               null\n            ]\n         ],\n         \"overload_by_arg_count\": [\n            [\n               \"fn\"\n            ]\n         ],\n         \"permute\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"dims\"\n            ]\n         ],\n         \"pixel_shuffle\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"upscale_factor\"\n            ]\n         ],\n         \"pow\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"exponent\"\n            ]\n         ],\n         \"prelu\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"weight\"\n            ]\n         ],\n         \"prim_ConstantChunk\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"chunks\"\n            ],\n            [\n               \"dim\"\n            ]\n         ],\n         \"prim_ConstantSplit\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"split_size\"\n            ],\n            [\n               \"dim\"\n            ]\n         ],\n         \"prim_shape\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ]\n         ],\n         \"rand\": [\n            [\n               \"g\"\n            ],\n            [\n               \"shapes\"\n            ],\n            [\n               \"dtype\"\n            ]\n         ],\n         \"rand_like\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"dtype\"\n            ],\n            [\n               \"layout\",\n               null\n            ],\n            [\n               \"device\",\n               null\n            ],\n            [\n               \"pin_memory\",\n               false\n            ],\n            [\n               \"memory_format\",\n               null\n            ]\n         ],\n         \"randn\": [\n            [\n               \"g\"\n            ],\n            [\n               \"shapes\"\n            ],\n            [\n               \"dtype\"\n            ]\n         ],\n         \"randn_like\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"dtype\"\n            ],\n            [\n               \"layout\",\n               null\n            ],\n            [\n               \"device\",\n               null\n            ],\n            [\n               \"pin_memory\",\n               false\n            ],\n            [\n               \"memory_format\",\n               null\n            ]\n         ],\n         \"reciprocal\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ]\n         ],\n         \"reflection_pad\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"padding\"\n            ]\n         ],\n         \"relu\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ]\n         ],\n         \"remainder\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"other\"\n            ]\n         ],\n         \"repeat\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"repeats\"\n            ]\n         ],\n         \"replication_pad\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"padding\"\n            ]\n         ],\n         \"reshape\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"shape\"\n            ]\n         ],\n         \"reshape_as\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"other\"\n            ]\n         ],\n         \"rrelu\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"lower\"\n            ],\n            [\n               \"upper\"\n            ],\n            [\n               \"training\"\n            ],\n            [\n               \"generator\"\n            ]\n         ],\n         \"rsqrt\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ]\n         ],\n         \"rsub\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"other\"\n            ],\n            [\n               \"alpha\",\n               null\n            ]\n         ],\n         \"scalar_tensor\": [\n            [\n               \"g\"\n            ],\n            [\n               \"scalar\"\n            ],\n            [\n               \"dtype\"\n            ]\n         ],\n         \"scatter\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"index\"\n            ],\n            [\n               \"src\"\n            ]\n         ],\n         \"scatter_add\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"index\"\n            ],\n            [\n               \"src\"\n            ]\n         ],\n         \"select\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"index\"\n            ]\n         ],\n         \"selu\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ]\n         ],\n         \"sigmoid\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ]\n         ],\n         \"sign\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ]\n         ],\n         \"sin\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ]\n         ],\n         \"size\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"dim\"\n            ]\n         ],\n         \"slice\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"start\"\n            ],\n            [\n               \"end\"\n            ],\n            [\n               \"step\"\n            ]\n         ],\n         \"softmax\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"dtype\",\n               null\n            ]\n         ],\n         \"softplus\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"beta\"\n            ],\n            [\n               \"threshold\"\n            ]\n         ],\n         \"sort\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"decending\"\n            ],\n            [\n               \"out\",\n               null\n            ]\n         ],\n         \"split\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"split_size_or_sizes\"\n            ],\n            [\n               \"dim\"\n            ]\n         ],\n         \"split_with_sizes\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"split_sizes\"\n            ],\n            [\n               \"dim\"\n            ]\n         ],\n         \"sqrt\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ]\n         ],\n         \"squeeze\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"dim\",\n               null\n            ]\n         ],\n         \"stack\": [\n            [\n               \"g\"\n            ],\n            [\n               \"tensor_list\"\n            ],\n            [\n               \"dim\"\n            ]\n         ],\n         \"std\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ]\n         ],\n         \"sub\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"other\"\n            ],\n            [\n               \"alpha\",\n               null\n            ]\n         ],\n         \"t\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ]\n         ],\n         \"take\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"index\"\n            ]\n         ],\n         \"tan\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ]\n         ],\n         \"tanh\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ]\n         ],\n         \"threshold\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"threshold\"\n            ],\n            [\n               \"value\"\n            ]\n         ],\n         \"to\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ]\n         ],\n         \"topk\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"k\"\n            ],\n            [\n               \"dim\"\n            ],\n            [\n               \"largest\"\n            ],\n            [\n               \"sorted\"\n            ],\n            [\n               \"out\",\n               null\n            ]\n         ],\n         \"transpose\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"dim0\"\n            ],\n            [\n               \"dim1\"\n            ]\n         ],\n         \"true_divide\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"other\"\n            ]\n         ],\n         \"type_as\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"other\"\n            ]\n         ],\n         \"unbind\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"dim\",\n               0\n            ]\n         ],\n         \"unfold\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"dimension\"\n            ],\n            [\n               \"size\"\n            ],\n            [\n               \"step\"\n            ]\n         ],\n         \"unsqueeze\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"dim\"\n            ]\n         ],\n         \"unused\": [\n            [\n               \"g\"\n            ]\n         ],\n         \"view\": [\n            [\n               \"g\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"size\"\n            ]\n         ],\n         \"where\": [\n            [\n               \"g\"\n            ],\n            [\n               \"condition\"\n            ],\n            [\n               \"self\"\n            ],\n            [\n               \"other\"\n            ]\n         ],\n         \"wrap_logical_op_with_cast_to\": [\n            [\n               \"to_type\"\n            ]\n         ],\n         \"wrap_logical_op_with_cast_to_and_from\": [\n            [\n               \"to_type\"\n            ]\n         ],\n         \"wrap_logical_op_with_negation\": [\n            [\n               \"func\"\n            ]\n         ],\n         \"zeros\": [\n            [\n               \"g\"\n            ],\n            [\n               \"sizes\"\n            ],\n            [\n               \"dtype\"\n            ],\n            [\n               \"layout\"\n            ],\n            [\n               \"device\"\n            ],\n            [\n               \"pin_memory\",\n               false\n            ]\n         ],\n         \"zeros_like\": [\n            [\n               \"g\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"dtype\",\n               null\n            ],\n            [\n               \"layout\",\n               null\n            ],\n            [\n               \"device\",\n               null\n            ],\n            [\n               \"pin_memory\",\n               false\n            ],\n            [\n               \"memory_format\",\n               null\n            ]\n         ]\n      },\n      \"torch.onnx.symbolic_registry\": {\n         \"get_op_supported_version\": [\n            [\n               \"opname\"\n            ],\n            [\n               \"domain\"\n            ],\n            [\n               \"version\"\n            ]\n         ],\n         \"get_ops_in_version\": [\n            [\n               \"version\"\n            ]\n         ],\n         \"get_registered_op\": [\n            [\n               \"opname\"\n            ],\n            [\n               \"domain\"\n            ],\n            [\n               \"version\"\n            ]\n         ],\n         \"is_registered_op\": [\n            [\n               \"opname\"\n            ],\n            [\n               \"domain\"\n            ],\n            [\n               \"version\"\n            ]\n         ],\n         \"is_registered_version\": [\n            [\n               \"domain\"\n            ],\n            [\n               \"version\"\n            ]\n         ],\n         \"register_op\": [\n            [\n               \"opname\"\n            ],\n            [\n               \"op\"\n            ],\n            [\n               \"domain\"\n            ],\n            [\n               \"version\"\n            ]\n         ],\n         \"register_ops_helper\": [\n            [\n               \"domain\"\n            ],\n            [\n               \"version\"\n            ],\n            [\n               \"iter_version\"\n            ]\n         ],\n         \"register_ops_in_version\": [\n            [\n               \"domain\"\n            ],\n            [\n               \"version\"\n            ]\n         ],\n         \"register_version\": [\n            [\n               \"domain\"\n            ],\n            [\n               \"version\"\n            ]\n         ]\n      },\n      \"torch.onnx.utils\": {\n         \"_add_attribute\": [\n            [\n               \"node\"\n            ],\n            [\n               \"key\"\n            ],\n            [\n               \"value\"\n            ],\n            [\n               \"aten\"\n            ]\n         ],\n         \"_decide_add_node_names\": [\n            [\n               \"add_node_names\"\n            ],\n            [\n               \"operator_export_type\"\n            ]\n         ],\n         \"_decide_constant_folding\": [\n            [\n               \"do_constant_folding\"\n            ],\n            [\n               \"operator_export_type\"\n            ]\n         ],\n         \"_decide_external_data_format\": [\n            [\n               \"use_external_data_format\"\n            ],\n            [\n               \"operator_export_type\"\n            ],\n            [\n               \"f\"\n            ]\n         ],\n         \"_decide_keep_init_as_input\": [\n            [\n               \"keep_initializers_as_inputs\"\n            ],\n            [\n               \"operator_export_type\"\n            ],\n            [\n               \"opset_version\"\n            ]\n         ],\n         \"_export\": [\n            [\n               \"model\"\n            ],\n            [\n               \"args\"\n            ],\n            [\n               \"f\"\n            ],\n            [\n               \"export_params\",\n               true\n            ],\n            [\n               \"verbose\",\n               false\n            ],\n            [\n               \"training\",\n               false\n            ],\n            [\n               \"input_names\",\n               null\n            ],\n            [\n               \"output_names\",\n               null\n            ],\n            [\n               \"operator_export_type\",\n               null\n            ],\n            [\n               \"export_type\",\n               {\n                  \"col_offset\": 24,\n                  \"ctx\": {},\n                  \"id\": \"ExportTypes\",\n                  \"lineno\": 449\n               }\n            ],\n            [\n               \"example_outputs\",\n               null\n            ],\n            [\n               \"propagate\",\n               false\n            ],\n            [\n               \"opset_version\",\n               null\n            ],\n            [\n               \"_retain_param_name\",\n               false\n            ],\n            [\n               \"do_constant_folding\",\n               true\n            ],\n            [\n               \"strip_doc_string\",\n               true\n            ],\n            [\n               \"dynamic_axes\",\n               null\n            ],\n            [\n               \"keep_initializers_as_inputs\",\n               null\n            ],\n            [\n               \"fixed_batch_size\",\n               false\n            ],\n            [\n               \"custom_opsets\",\n               null\n            ],\n            [\n               \"add_node_names\",\n               true\n            ],\n            [\n               \"enable_onnx_checker\",\n               true\n            ],\n            [\n               \"use_external_data_format\",\n               false\n            ]\n         ],\n         \"_export_to_pretty_string\": [\n            [\n               \"model\"\n            ],\n            [\n               \"args\"\n            ],\n            [\n               \"f\"\n            ],\n            [\n               \"export_params\",\n               true\n            ],\n            [\n               \"verbose\",\n               false\n            ],\n            [\n               \"training\",\n               false\n            ],\n            [\n               \"input_names\",\n               null\n            ],\n            [\n               \"output_names\",\n               null\n            ],\n            [\n               \"operator_export_type\",\n               {\n                  \"col_offset\": 87,\n                  \"ctx\": {},\n                  \"id\": \"OperatorExportTypes\",\n                  \"lineno\": 414\n               }\n            ],\n            [\n               \"export_type\",\n               {\n                  \"col_offset\": 41,\n                  \"ctx\": {},\n                  \"id\": \"ExportTypes\",\n                  \"lineno\": 415\n               }\n            ],\n            [\n               \"example_outputs\",\n               null\n            ],\n            [\n               \"propagate\",\n               false\n            ],\n            [\n               \"google_printer\",\n               false\n            ],\n            [\n               \"opset_version\",\n               null\n            ],\n            [\n               \"_retain_param_name\",\n               false\n            ],\n            [\n               \"do_constant_folding\",\n               true\n            ],\n            [\n               \"keep_initializers_as_inputs\",\n               null\n            ],\n            [\n               \"fixed_batch_size\",\n               false\n            ],\n            [\n               \"custom_opsets\",\n               null\n            ],\n            [\n               \"add_node_names\",\n               true\n            ]\n         ],\n         \"_graph_at\": [\n            [\n               \"g\"\n            ],\n            [\n               \"opname\"\n            ]\n         ],\n         \"_graph_constant\": [\n            [\n               \"g\"\n            ],\n            [\n               \"value\"\n            ],\n            [\n               \"dims\"\n            ],\n            [\n               \"type\"\n            ]\n         ],\n         \"_graph_op\": [\n            [\n               \"g\"\n            ],\n            [\n               \"opname\"\n            ]\n         ],\n         \"_is_onnx_list\": [\n            [\n               \"value\"\n            ]\n         ],\n         \"_model_to_graph\": [\n            [\n               \"model\"\n            ],\n            [\n               \"args\"\n            ],\n            [\n               \"verbose\",\n               false\n            ],\n            [\n               \"training\",\n               false\n            ],\n            [\n               \"input_names\",\n               null\n            ],\n            [\n               \"output_names\",\n               null\n            ],\n            [\n               \"operator_export_type\",\n               {\n                  \"col_offset\": 41,\n                  \"ctx\": {},\n                  \"id\": \"OperatorExportTypes\",\n                  \"lineno\": 303\n               }\n            ],\n            [\n               \"example_outputs\",\n               null\n            ],\n            [\n               \"propagate\",\n               false\n            ],\n            [\n               \"_retain_param_name\",\n               false\n            ],\n            [\n               \"do_constant_folding\",\n               true\n            ],\n            [\n               \"_disable_torch_constant_prop\",\n               false\n            ],\n            [\n               \"fixed_batch_size\",\n               false\n            ]\n         ],\n         \"_newNode\": [\n            [\n               \"g\"\n            ],\n            [\n               \"opname\"\n            ],\n            [\n               \"outputs\"\n            ]\n         ],\n         \"_node_getitem\": [\n            [\n               \"self\"\n            ],\n            [\n               \"k\"\n            ]\n         ],\n         \"_optimize_graph\": [\n            [\n               \"graph\"\n            ],\n            [\n               \"operator_export_type\"\n            ],\n            [\n               \"_disable_torch_constant_prop\",\n               false\n            ],\n            [\n               \"fixed_batch_size\",\n               false\n            ],\n            [\n               \"params_dict\",\n               null\n            ]\n         ],\n         \"_resolve_args_by_export_type\": [\n            [\n               \"arg_name\"\n            ],\n            [\n               \"arg_value\"\n            ],\n            [\n               \"operator_export_type\"\n            ]\n         ],\n         \"_run_symbolic_function\": [\n            [\n               \"g\"\n            ],\n            [\n               \"n\"\n            ],\n            [\n               \"inputs\"\n            ],\n            [\n               \"env\"\n            ],\n            [\n               \"operator_export_type\",\n               {\n                  \"col_offset\": 67,\n                  \"ctx\": {},\n                  \"id\": \"OperatorExportTypes\",\n                  \"lineno\": 697\n               }\n            ]\n         ],\n         \"_run_symbolic_method\": [\n            [\n               \"op_name\"\n            ],\n            [\n               \"symbolic_fn\"\n            ],\n            [\n               \"args\"\n            ]\n         ],\n         \"_scalar\": [\n            [\n               \"x\"\n            ]\n         ],\n         \"_set_input_and_output_names\": [\n            [\n               \"graph\"\n            ],\n            [\n               \"input_names\"\n            ],\n            [\n               \"output_names\"\n            ]\n         ],\n         \"_split_tensor_list_constants\": [\n            [\n               \"g\"\n            ],\n            [\n               \"block\"\n            ]\n         ],\n         \"_trace\": [\n            [\n               \"func\"\n            ],\n            [\n               \"args\"\n            ],\n            [\n               \"operator_export_type\"\n            ],\n            [\n               \"return_outs\",\n               false\n            ]\n         ],\n         \"_trace_and_get_graph_from_model\": [\n            [\n               \"model\"\n            ],\n            [\n               \"args\"\n            ],\n            [\n               \"training\"\n            ]\n         ],\n         \"_validate_dynamic_axes\": [\n            [\n               \"dynamic_axes\"\n            ],\n            [\n               \"model\"\n            ],\n            [\n               \"input_names\"\n            ],\n            [\n               \"output_names\"\n            ]\n         ],\n         \"export\": [\n            [\n               \"model\"\n            ],\n            [\n               \"args\"\n            ],\n            [\n               \"f\"\n            ],\n            [\n               \"export_params\",\n               true\n            ],\n            [\n               \"verbose\",\n               false\n            ],\n            [\n               \"training\",\n               false\n            ],\n            [\n               \"input_names\",\n               null\n            ],\n            [\n               \"output_names\",\n               null\n            ],\n            [\n               \"aten\",\n               false\n            ],\n            [\n               \"export_raw_ir\",\n               false\n            ],\n            [\n               \"operator_export_type\",\n               null\n            ],\n            [\n               \"opset_version\",\n               null\n            ],\n            [\n               \"_retain_param_name\",\n               true\n            ],\n            [\n               \"do_constant_folding\",\n               true\n            ],\n            [\n               \"example_outputs\",\n               null\n            ],\n            [\n               \"strip_doc_string\",\n               true\n            ],\n            [\n               \"dynamic_axes\",\n               null\n            ],\n            [\n               \"keep_initializers_as_inputs\",\n               null\n            ],\n            [\n               \"custom_opsets\",\n               null\n            ],\n            [\n               \"enable_onnx_checker\",\n               true\n            ],\n            [\n               \"use_external_data_format\",\n               false\n            ]\n         ],\n         \"export_to_pretty_string\": [\n            [\n               \"model\"\n            ],\n            [\n               \"args\"\n            ],\n            [\n               \"f\"\n            ],\n            [\n               \"export_params\",\n               true\n            ],\n            [\n               \"verbose\",\n               false\n            ],\n            [\n               \"training\",\n               false\n            ],\n            [\n               \"input_names\",\n               null\n            ],\n            [\n               \"output_names\",\n               null\n            ],\n            [\n               \"aten\",\n               false\n            ],\n            [\n               \"export_raw_ir\",\n               false\n            ],\n            [\n               \"operator_export_type\",\n               null\n            ],\n            [\n               \"export_type\",\n               {\n                  \"col_offset\": 67,\n                  \"ctx\": {},\n                  \"id\": \"ExportTypes\",\n                  \"lineno\": 392\n               }\n            ],\n            [\n               \"example_outputs\",\n               null\n            ],\n            [\n               \"propagate\",\n               false\n            ],\n            [\n               \"google_printer\",\n               false\n            ],\n            [\n               \"opset_version\",\n               null\n            ],\n            [\n               \"_retain_param_name\",\n               true\n            ],\n            [\n               \"keep_initializers_as_inputs\",\n               null\n            ],\n            [\n               \"custom_opsets\",\n               null\n            ],\n            [\n               \"add_node_names\",\n               true\n            ],\n            [\n               \"do_constant_folding\",\n               true\n            ]\n         ],\n         \"is_in_onnx_export\": [],\n         \"register_custom_op_symbolic\": [\n            [\n               \"symbolic_name\"\n            ],\n            [\n               \"symbolic_fn\"\n            ],\n            [\n               \"opset_version\"\n            ]\n         ],\n         \"set_training\": [\n            [\n               \"model\"\n            ],\n            [\n               \"mode\"\n            ]\n         ],\n         \"warn_on_static_input_change\": [\n            [\n               \"input_states\"\n            ]\n         ]\n      },\n      \"torch.optim.lbfgs\": {\n         \"_cubic_interpolate\": [\n            [\n               \"x1\"\n            ],\n            [\n               \"f1\"\n            ],\n            [\n               \"g1\"\n            ],\n            [\n               \"x2\"\n            ],\n            [\n               \"f2\"\n            ],\n            [\n               \"g2\"\n            ],\n            [\n               \"bounds\",\n               null\n            ]\n         ],\n         \"_strong_wolfe\": [\n            [\n               \"obj_func\"\n            ],\n            [\n               \"x\"\n            ],\n            [\n               \"t\"\n            ],\n            [\n               \"d\"\n            ],\n            [\n               \"f\"\n            ],\n            [\n               \"g\"\n            ],\n            [\n               \"gtd\"\n            ],\n            [\n               \"c1\",\n               0.0001\n            ],\n            [\n               \"c2\",\n               0.9\n            ],\n            [\n               \"tolerance_change\",\n               1e-09\n            ],\n            [\n               \"max_ls\",\n               25\n            ]\n         ]\n      },\n      \"torch.quantization.__init__\": {\n         \"default_eval_fn\": [\n            [\n               \"model\"\n            ],\n            [\n               \"calib_data\"\n            ]\n         ]\n      },\n      \"torch.quantization._quantize_script\": {\n         \"_check_is_script_module\": [\n            [\n               \"model\"\n            ]\n         ],\n         \"convert_script\": [\n            [\n               \"model\"\n            ],\n            [\n               \"inplace\",\n               false\n            ],\n            [\n               \"debug\",\n               false\n            ]\n         ],\n         \"prepare_script\": [\n            [\n               \"model\"\n            ],\n            [\n               \"qconfig_dict\"\n            ],\n            [\n               \"inplace\",\n               false\n            ]\n         ],\n         \"quantize_script\": [\n            [\n               \"model\"\n            ],\n            [\n               \"qconfig_dict\"\n            ],\n            [\n               \"run_fn\"\n            ],\n            [\n               \"run_args\"\n            ],\n            [\n               \"inplace\",\n               false\n            ],\n            [\n               \"debug\",\n               false\n            ]\n         ],\n         \"script_qconfig\": [\n            [\n               \"qconfig\"\n            ]\n         ]\n      },\n      \"torch.quantization.fake_quantize\": {\n         \"disable_fake_quant\": [\n            [\n               \"mod\"\n            ]\n         ],\n         \"disable_observer\": [\n            [\n               \"mod\"\n            ]\n         ],\n         \"enable_fake_quant\": [\n            [\n               \"mod\"\n            ]\n         ],\n         \"enable_observer\": [\n            [\n               \"mod\"\n            ]\n         ]\n      },\n      \"torch.quantization.fuse_modules\": {\n         \"_fuse_modules\": [\n            [\n               \"model\"\n            ],\n            [\n               \"modules_to_fuse\"\n            ],\n            [\n               \"fuser_func\",\n               \"fuse_known_modules\"\n            ]\n         ],\n         \"_get_module\": [\n            [\n               \"model\"\n            ],\n            [\n               \"submodule_key\"\n            ]\n         ],\n         \"_set_module\": [\n            [\n               \"model\"\n            ],\n            [\n               \"submodule_key\"\n            ],\n            [\n               \"module\"\n            ]\n         ],\n         \"fuse_conv_bn\": [\n            [\n               \"conv\"\n            ],\n            [\n               \"bn\"\n            ]\n         ],\n         \"fuse_conv_bn_relu\": [\n            [\n               \"conv\"\n            ],\n            [\n               \"bn\"\n            ],\n            [\n               \"relu\"\n            ]\n         ],\n         \"fuse_known_modules\": [\n            [\n               \"mod_list\"\n            ]\n         ],\n         \"fuse_modules\": [\n            [\n               \"model\"\n            ],\n            [\n               \"modules_to_fuse\"\n            ],\n            [\n               \"inplace\",\n               false\n            ],\n            [\n               \"fuser_func\",\n               \"fuse_known_modules\"\n            ]\n         ]\n      },\n      \"torch.quantization.observer\": {\n         \"_with_args\": [\n            [\n               \"cls_or_self\"\n            ]\n         ]\n      },\n      \"torch.quantization.qconfig\": {\n         \"get_default_qat_qconfig\": [\n            [\n               \"backend\",\n               \"fbgemm\"\n            ]\n         ],\n         \"get_default_qconfig\": [\n            [\n               \"backend\",\n               \"fbgemm\"\n            ]\n         ]\n      },\n      \"torch.quantization.quantize\": {\n         \"_observer_forward_hook\": [\n            [\n               \"self\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"output\"\n            ]\n         ],\n         \"_propagate_qconfig_helper\": [\n            [\n               \"module\"\n            ],\n            [\n               \"qconfig_dict\"\n            ],\n            [\n               \"white_list\",\n               null\n            ],\n            [\n               \"qconfig_parent\",\n               null\n            ],\n            [\n               \"prefix\",\n               \"\"\n            ]\n         ],\n         \"add_observer_\": [\n            [\n               \"module\"\n            ]\n         ],\n         \"add_quant_dequant\": [\n            [\n               \"module\"\n            ]\n         ],\n         \"convert\": [\n            [\n               \"module\"\n            ],\n            [\n               \"mapping\",\n               null\n            ],\n            [\n               \"inplace\",\n               false\n            ]\n         ],\n         \"get_observer_dict\": [\n            [\n               \"mod\"\n            ],\n            [\n               \"target_dict\"\n            ],\n            [\n               \"prefix\",\n               \"\"\n            ]\n         ],\n         \"prepare\": [\n            [\n               \"model\"\n            ],\n            [\n               \"inplace\",\n               false\n            ]\n         ],\n         \"prepare_qat\": [\n            [\n               \"model\"\n            ],\n            [\n               \"mapping\",\n               null\n            ],\n            [\n               \"inplace\",\n               false\n            ]\n         ],\n         \"propagate_qconfig_\": [\n            [\n               \"module\"\n            ],\n            [\n               \"qconfig_dict\",\n               null\n            ]\n         ],\n         \"quantize\": [\n            [\n               \"model\"\n            ],\n            [\n               \"run_fn\"\n            ],\n            [\n               \"run_args\"\n            ],\n            [\n               \"mapping\",\n               null\n            ],\n            [\n               \"inplace\",\n               false\n            ]\n         ],\n         \"quantize_dynamic\": [\n            [\n               \"model\"\n            ],\n            [\n               \"qconfig_spec\",\n               null\n            ],\n            [\n               \"dtype\",\n               {\n                  \"col_offset\": 53,\n                  \"ctx\": {},\n                  \"id\": \"torch\",\n                  \"lineno\": 178\n               }\n            ],\n            [\n               \"mapping\",\n               null\n            ],\n            [\n               \"inplace\",\n               false\n            ]\n         ],\n         \"quantize_qat\": [\n            [\n               \"model\"\n            ],\n            [\n               \"run_fn\"\n            ],\n            [\n               \"run_args\"\n            ],\n            [\n               \"inplace\",\n               false\n            ]\n         ],\n         \"swap_module\": [\n            [\n               \"mod\"\n            ],\n            [\n               \"mapping\"\n            ]\n         ]\n      },\n      \"torch.random\": {\n         \"fork_rng\": [\n            [\n               \"devices\",\n               null\n            ],\n            [\n               \"enabled\",\n               true\n            ],\n            [\n               \"_caller\",\n               \"fork_rng\"\n            ],\n            [\n               \"_devices_kw\",\n               \"devices\"\n            ]\n         ],\n         \"get_rng_state\": [],\n         \"initial_seed\": [],\n         \"manual_seed\": [\n            [\n               \"seed\"\n            ]\n         ],\n         \"seed\": [],\n         \"set_rng_state\": [\n            [\n               \"new_state\"\n            ]\n         ]\n      },\n      \"torch.serialization\": {\n         \"_check_dill_version\": [\n            [\n               \"pickle_module\"\n            ]\n         ],\n         \"_check_seekable\": [\n            [\n               \"f\"\n            ]\n         ],\n         \"_cpu_deserialize\": [\n            [\n               \"obj\"\n            ],\n            [\n               \"location\"\n            ]\n         ],\n         \"_cpu_tag\": [\n            [\n               \"obj\"\n            ]\n         ],\n         \"_cuda_deserialize\": [\n            [\n               \"obj\"\n            ],\n            [\n               \"location\"\n            ]\n         ],\n         \"_cuda_tag\": [\n            [\n               \"obj\"\n            ]\n         ],\n         \"_get_layout\": [\n            [\n               \"name\"\n            ]\n         ],\n         \"_get_restore_location\": [\n            [\n               \"map_location\"\n            ]\n         ],\n         \"_is_compressed_file\": [\n            [\n               \"f\"\n            ]\n         ],\n         \"_is_path\": [\n            [\n               \"name_or_buffer\"\n            ]\n         ],\n         \"_is_torchscript_zip\": [\n            [\n               \"zip_file\"\n            ]\n         ],\n         \"_is_zipfile\": [\n            [\n               \"f\"\n            ]\n         ],\n         \"_legacy_load\": [\n            [\n               \"f\"\n            ],\n            [\n               \"map_location\"\n            ],\n            [\n               \"pickle_module\"\n            ]\n         ],\n         \"_legacy_save\": [\n            [\n               \"obj\"\n            ],\n            [\n               \"f\"\n            ],\n            [\n               \"pickle_module\"\n            ],\n            [\n               \"pickle_protocol\"\n            ]\n         ],\n         \"_load\": [\n            [\n               \"zip_file\"\n            ],\n            [\n               \"map_location\"\n            ],\n            [\n               \"pickle_module\"\n            ]\n         ],\n         \"_maybe_decode_ascii\": [\n            [\n               \"bytes_str\"\n            ]\n         ],\n         \"_open_file_like\": [\n            [\n               \"name_or_buffer\"\n            ],\n            [\n               \"mode\"\n            ]\n         ],\n         \"_open_zipfile_writer\": [\n            [\n               \"name_or_buffer\"\n            ]\n         ],\n         \"_save\": [\n            [\n               \"obj\"\n            ],\n            [\n               \"zip_file\"\n            ],\n            [\n               \"pickle_module\"\n            ],\n            [\n               \"pickle_protocol\"\n            ]\n         ],\n         \"_should_read_directly\": [\n            [\n               \"f\"\n            ]\n         ],\n         \"check_module_version_greater_or_equal\": [\n            [\n               \"module\"\n            ],\n            [\n               \"req_version_tuple\"\n            ],\n            [\n               \"error_if_malformed\",\n               true\n            ]\n         ],\n         \"default_restore_location\": [\n            [\n               \"storage\"\n            ],\n            [\n               \"location\"\n            ]\n         ],\n         \"load\": [\n            [\n               \"f\"\n            ],\n            [\n               \"map_location\",\n               null\n            ],\n            [\n               \"pickle_module\",\n               \"pickle\"\n            ]\n         ],\n         \"location_tag\": [\n            [\n               \"storage\"\n            ]\n         ],\n         \"mkdtemp\": [],\n         \"normalize_storage_type\": [\n            [\n               \"storage_type\"\n            ]\n         ],\n         \"register_package\": [\n            [\n               \"priority\"\n            ],\n            [\n               \"tagger\"\n            ],\n            [\n               \"deserializer\"\n            ]\n         ],\n         \"save\": [\n            [\n               \"obj\"\n            ],\n            [\n               \"f\"\n            ],\n            [\n               \"pickle_module\",\n               \"pickle\"\n            ],\n            [\n               \"pickle_protocol\",\n               \"DEFAULT_PROTOCOL\"\n            ],\n            [\n               \"_use_new_zipfile_serialization\",\n               false\n            ]\n         ],\n         \"storage_to_tensor_type\": [\n            [\n               \"storage\"\n            ]\n         ],\n         \"validate_cuda_device\": [\n            [\n               \"location\"\n            ]\n         ]\n      },\n      \"torch.sparse.__init__\": {\n         \"addmm\": [\n            [\n               \"mat\"\n            ],\n            [\n               \"mat1\"\n            ],\n            [\n               \"mat2\"\n            ],\n            [\n               \"beta\",\n               1\n            ],\n            [\n               \"alpha\",\n               1\n            ]\n         ],\n         \"mm\": [\n            [\n               \"mat1\"\n            ],\n            [\n               \"mat2\"\n            ]\n         ],\n         \"sum\": [\n            [\n               \"input\"\n            ],\n            [\n               \"dim\",\n               null\n            ],\n            [\n               \"dtype\",\n               null\n            ]\n         ]\n      },\n      \"torch.storage\": {\n         \"_load_from_bytes\": [\n            [\n               \"b\"\n            ]\n         ]\n      },\n      \"torch.tensor\": {\n         \"_wrap_type_error_to_not_implemented\": [\n            [\n               \"f\"\n            ]\n         ]\n      },\n      \"torch.testing.__init__\": {\n         \"_get_default_tolerance\": [\n            [\n               \"a\"\n            ],\n            [\n               \"b\",\n               null\n            ]\n         ],\n         \"assert_allclose\": [\n            [\n               \"actual\"\n            ],\n            [\n               \"expected\"\n            ],\n            [\n               \"rtol\",\n               null\n            ],\n            [\n               \"atol\",\n               null\n            ],\n            [\n               \"equal_nan\",\n               true\n            ]\n         ],\n         \"get_all_device_types\": [],\n         \"get_all_dtypes\": [],\n         \"get_all_math_dtypes\": [\n            [\n               \"device\"\n            ]\n         ],\n         \"make_non_contiguous\": [\n            [\n               \"tensor\"\n            ]\n         ]\n      },\n      \"torch.testing._internal.common_cuda\": {\n         \"initialize_cuda_context_rng\": []\n      },\n      \"torch.testing._internal.common_device_type\": {\n         \"expectedFailureCUDA\": [\n            [\n               \"fn\"\n            ]\n         ],\n         \"instantiate_device_type_tests\": [\n            [\n               \"generic_test_class\"\n            ],\n            [\n               \"scope\"\n            ],\n            [\n               \"except_for\",\n               null\n            ]\n         ],\n         \"largeCUDATensorTest\": [\n            [\n               \"size\"\n            ]\n         ],\n         \"onlyCPU\": [\n            [\n               \"fn\"\n            ]\n         ],\n         \"onlyCUDA\": [\n            [\n               \"fn\"\n            ]\n         ],\n         \"onlyOnCPUAndCUDA\": [\n            [\n               \"fn\"\n            ]\n         ],\n         \"skipCPUIfNoLapack\": [\n            [\n               \"fn\"\n            ]\n         ],\n         \"skipCPUIfNoMkl\": [\n            [\n               \"fn\"\n            ]\n         ],\n         \"skipCUDAIfCudnnVersionLessThan\": [\n            [\n               \"version\",\n               0\n            ]\n         ],\n         \"skipCUDAIfNoCudnn\": [\n            [\n               \"fn\"\n            ]\n         ],\n         \"skipCUDAIfNoMagma\": [\n            [\n               \"fn\"\n            ]\n         ],\n         \"skipCUDAIfNotRocm\": [\n            [\n               \"fn\"\n            ]\n         ],\n         \"skipCUDAIfRocm\": [\n            [\n               \"fn\"\n            ]\n         ]\n      },\n      \"torch.testing._internal.common_distributed\": {\n         \"get_timeout\": [\n            [\n               \"test_id\"\n            ]\n         ],\n         \"requires_gloo\": [],\n         \"requires_mpi\": [],\n         \"requires_nccl\": [],\n         \"requires_nccl_version\": [\n            [\n               \"version\"\n            ],\n            [\n               \"msg\"\n            ]\n         ],\n         \"simple_sparse_reduce_tests\": [\n            [\n               \"rank\"\n            ],\n            [\n               \"world_size\"\n            ],\n            [\n               \"num_inputs\",\n               1\n            ]\n         ],\n         \"skip_for_known_issues\": [\n            [\n               \"func\"\n            ]\n         ],\n         \"skip_if_lt_x_gpu\": [\n            [\n               \"x\"\n            ]\n         ],\n         \"skip_if_not_multigpu\": [\n            [\n               \"func\"\n            ]\n         ],\n         \"skip_if_rocm\": [\n            [\n               \"func\"\n            ]\n         ]\n      },\n      \"torch.testing._internal.common_methods_invocations\": {\n         \"_compare_large_trilu_indices\": [\n            [\n               \"self\"\n            ],\n            [\n               \"row\"\n            ],\n            [\n               \"col\"\n            ],\n            [\n               \"offset\",\n               0\n            ],\n            [\n               \"dtype\",\n               {\n                  \"col_offset\": 40,\n                  \"ctx\": {},\n                  \"id\": \"torch\",\n                  \"lineno\": 966\n               }\n            ],\n            [\n               \"device\",\n               \"cpu\"\n            ]\n         ],\n         \"_compare_trilu_indices\": [\n            [\n               \"self\"\n            ],\n            [\n               \"row\"\n            ],\n            [\n               \"col\"\n            ],\n            [\n               \"offset\",\n               0\n            ],\n            [\n               \"dtype\",\n               {\n                  \"col_offset\": 40,\n                  \"ctx\": {},\n                  \"id\": \"torch\",\n                  \"lineno\": 941\n               }\n            ],\n            [\n               \"device\",\n               \"cpu\"\n            ]\n         ],\n         \"bernoulli_scalar\": [],\n         \"create_input\": [\n            [\n               \"call_args\"\n            ],\n            [\n               \"requires_grad\",\n               true\n            ],\n            [\n               \"non_contiguous\",\n               false\n            ],\n            [\n               \"call_kwargs\",\n               null\n            ],\n            [\n               \"device\",\n               null\n            ]\n         ],\n         \"exclude_tensor_method\": [\n            [\n               \"name\"\n            ],\n            [\n               \"test_name\"\n            ]\n         ],\n         \"gather_variable\": [\n            [\n               \"shape\"\n            ],\n            [\n               \"index_dim\"\n            ],\n            [\n               \"max_indices\"\n            ],\n            [\n               \"duplicate\",\n               false\n            ]\n         ],\n         \"ident\": [\n            [\n               \"x\"\n            ]\n         ],\n         \"index_perm_variable\": [\n            [\n               \"shape\"\n            ],\n            [\n               \"max_indices\"\n            ]\n         ],\n         \"index_variable\": [\n            [\n               \"shape\"\n            ],\n            [\n               \"max_indices\"\n            ]\n         ],\n         \"mask_not_all_zeros\": [\n            [\n               \"shape\"\n            ]\n         ],\n         \"method_tests\": [],\n         \"normal_scalar_clamp\": [\n            [\n               \"amin\"\n            ],\n            [\n               \"amax\"\n            ],\n            [\n               \"requires_grad\",\n               false\n            ]\n         ],\n         \"prod_zeros\": [\n            [\n               \"dim_size\"\n            ],\n            [\n               \"dim_select\"\n            ]\n         ],\n         \"run_additional_tri_tests\": [\n            [\n               \"self\"\n            ],\n            [\n               \"device\"\n            ]\n         ],\n         \"uniform_scalar\": [\n            [\n               \"offset\",\n               0\n            ],\n            [\n               \"requires_grad\",\n               false\n            ]\n         ],\n         \"unpack_variables\": [\n            [\n               \"args\"\n            ]\n         ]\n      },\n      \"torch.testing._internal.common_nn\": {\n         \"_multilabelmarginloss_reference\": [\n            [\n               \"input\"\n            ],\n            [\n               \"target\"\n            ]\n         ],\n         \"_multimarginloss_reference\": [\n            [\n               \"input\"\n            ],\n            [\n               \"target_idx\"\n            ],\n            [\n               \"p\"\n            ],\n            [\n               \"margin\"\n            ],\n            [\n               \"weight\"\n            ]\n         ],\n         \"_rand_tensor_non_equal\": [],\n         \"bce_with_logistic_legacy_enum_test\": [],\n         \"bce_with_logistic_no_reduce_scalar_test\": [],\n         \"bce_with_logistic_no_reduce_test\": [],\n         \"bceloss_no_reduce_scalar_test\": [],\n         \"bceloss_no_reduce_test\": [],\n         \"bceloss_weights_no_reduce_scalar_test\": [],\n         \"bceloss_weights_no_reduce_test\": [],\n         \"cosineembeddingloss_reference\": [\n            [\n               \"input1\"\n            ],\n            [\n               \"input2\"\n            ],\n            [\n               \"target\"\n            ],\n            [\n               \"margin\",\n               0\n            ],\n            [\n               \"reduction\",\n               \"mean\"\n            ]\n         ],\n         \"ctcloss_reference\": [\n            [\n               \"log_probs\"\n            ],\n            [\n               \"targets\"\n            ],\n            [\n               \"input_lengths\"\n            ],\n            [\n               \"target_lengths\"\n            ],\n            [\n               \"blank\",\n               0\n            ],\n            [\n               \"reduction\",\n               \"mean\"\n            ]\n         ],\n         \"fractional_max_pool2d_test\": [\n            [\n               \"test_case\"\n            ]\n         ],\n         \"fractional_max_pool3d_test\": [\n            [\n               \"test_case\"\n            ]\n         ],\n         \"get_reduction\": [\n            [\n               \"m\"\n            ]\n         ],\n         \"get_weight\": [\n            [\n               \"m\"\n            ]\n         ],\n         \"hingeembeddingloss_margin_no_reduce_test\": [],\n         \"hingeembeddingloss_no_reduce_test\": [],\n         \"hingeembeddingloss_reference\": [\n            [\n               \"input\"\n            ],\n            [\n               \"target\"\n            ],\n            [\n               \"margin\",\n               1.0\n            ],\n            [\n               \"reduction\",\n               \"mean\"\n            ]\n         ],\n         \"kldivloss_no_reduce_scalar_test\": [],\n         \"kldivloss_no_reduce_test\": [],\n         \"kldivloss_reference\": [\n            [\n               \"input\"\n            ],\n            [\n               \"target\"\n            ],\n            [\n               \"reduction\",\n               \"mean\"\n            ]\n         ],\n         \"kldivloss_with_target_no_reduce_test\": [],\n         \"l1loss_no_reduce_scalar_test\": [],\n         \"l1loss_no_reduce_test\": [],\n         \"marginrankingloss_reference\": [\n            [\n               \"input1\"\n            ],\n            [\n               \"input2\"\n            ],\n            [\n               \"target\"\n            ],\n            [\n               \"margin\",\n               0\n            ],\n            [\n               \"reduction\",\n               \"mean\"\n            ]\n         ],\n         \"mseloss_no_reduce_scalar_test\": [],\n         \"mseloss_no_reduce_test\": [],\n         \"multilabelmarginloss_0d_no_reduce_test\": [],\n         \"multilabelmarginloss_1d_no_reduce_test\": [],\n         \"multilabelmarginloss_index_neg_test\": [],\n         \"multilabelmarginloss_no_reduce_test\": [],\n         \"multilabelmarginloss_reference\": [\n            [\n               \"input\"\n            ],\n            [\n               \"target\"\n            ],\n            [\n               \"reduction\",\n               \"mean\"\n            ]\n         ],\n         \"multilabelsoftmarginloss_no_reduce_test\": [],\n         \"multilabelsoftmarginloss_weights_no_reduce_test\": [],\n         \"multimarginloss_1d_input_0d_target_no_reduce_test\": [],\n         \"multimarginloss_1d_no_reduce_test\": [],\n         \"multimarginloss_margin_no_reduce_test\": [],\n         \"multimarginloss_no_reduce_test\": [],\n         \"multimarginloss_p_no_reduce_test\": [],\n         \"multimarginloss_reference\": [\n            [\n               \"input\"\n            ],\n            [\n               \"target\"\n            ],\n            [\n               \"p\",\n               1\n            ],\n            [\n               \"margin\",\n               1\n            ],\n            [\n               \"weight\",\n               null\n            ],\n            [\n               \"reduction\",\n               \"mean\"\n            ]\n         ],\n         \"multimarginloss_weights_no_reduce_test\": [],\n         \"nllloss2d_no_reduce_ignore_index_test\": [],\n         \"nllloss2d_no_reduce_test\": [],\n         \"nllloss2d_no_reduce_weights_test\": [],\n         \"nlllossNd_no_reduce_ignore_index_test\": [],\n         \"nlllossNd_no_reduce_test\": [],\n         \"nlllossNd_no_reduce_weights_test\": [],\n         \"nlllossNd_reference\": [\n            [\n               \"input\"\n            ],\n            [\n               \"target\"\n            ],\n            [\n               \"weight\",\n               null\n            ],\n            [\n               \"ignore_index\",\n               {}\n            ],\n            [\n               \"reduction\",\n               \"mean\"\n            ]\n         ],\n         \"nllloss_no_reduce_ignore_index_test\": [],\n         \"nllloss_no_reduce_test\": [],\n         \"nllloss_no_reduce_weights_ignore_index_neg_test\": [],\n         \"nllloss_no_reduce_weights_ignore_index_test\": [],\n         \"nllloss_no_reduce_weights_test\": [],\n         \"nllloss_reference\": [\n            [\n               \"input\"\n            ],\n            [\n               \"target\"\n            ],\n            [\n               \"weight\",\n               null\n            ],\n            [\n               \"ignore_index\",\n               {}\n            ],\n            [\n               \"reduction\",\n               \"mean\"\n            ]\n         ],\n         \"padding1d_circular\": [\n            [\n               \"input\"\n            ],\n            [\n               \"pad\"\n            ]\n         ],\n         \"padding2d_circular\": [\n            [\n               \"input\"\n            ],\n            [\n               \"pad\"\n            ]\n         ],\n         \"padding3d_circular\": [\n            [\n               \"input\"\n            ],\n            [\n               \"pad\"\n            ]\n         ],\n         \"poissonnllloss_no_reduce_test\": [],\n         \"smoothl1loss_no_reduce_scalar_test\": [],\n         \"smoothl1loss_no_reduce_test\": [],\n         \"smoothl1loss_reference\": [\n            [\n               \"input\"\n            ],\n            [\n               \"target\"\n            ],\n            [\n               \"reduction\",\n               \"mean\"\n            ]\n         ],\n         \"softmarginloss_no_reduce_test\": [],\n         \"softmarginloss_reference\": [\n            [\n               \"input\"\n            ],\n            [\n               \"target\"\n            ],\n            [\n               \"reduction\",\n               \"mean\"\n            ]\n         ],\n         \"tripletmarginloss_reference\": [\n            [\n               \"anchor\"\n            ],\n            [\n               \"positive\"\n            ],\n            [\n               \"negative\"\n            ],\n            [\n               \"margin\",\n               1.0\n            ],\n            [\n               \"p\",\n               2\n            ],\n            [\n               \"eps\",\n               1e-06\n            ],\n            [\n               \"swap\",\n               false\n            ],\n            [\n               \"reduction\",\n               \"mean\"\n            ]\n         ],\n         \"wrap_functional\": [\n            [\n               \"fn\"\n            ]\n         ]\n      },\n      \"torch.testing._internal.common_quantization\": {\n         \"__init__\": [\n            [\n               \"self\"\n            ]\n         ],\n         \"convert_dynamic\": [\n            [\n               \"module\"\n            ]\n         ],\n         \"forward\": [\n            [\n               \"self\"\n            ],\n            [\n               \"x\"\n            ]\n         ],\n         \"prepare_dynamic\": [\n            [\n               \"model\"\n            ],\n            [\n               \"qconfig_dict\",\n               null\n            ]\n         ],\n         \"test_only_eval_fn\": [\n            [\n               \"model\"\n            ],\n            [\n               \"calib_data\"\n            ]\n         ],\n         \"test_only_train_fn\": [\n            [\n               \"model\"\n            ],\n            [\n               \"train_data\"\n            ],\n            [\n               \"loss_fn\",\n               \"_default_loss_fn\"\n            ]\n         ]\n      },\n      \"torch.testing._internal.common_quantized\": {\n         \"_calculate_dynamic_per_channel_qparams\": [\n            [\n               \"X\"\n            ],\n            [\n               \"dtype\"\n            ]\n         ],\n         \"_calculate_dynamic_qparams\": [\n            [\n               \"X\"\n            ],\n            [\n               \"dtype\"\n            ],\n            [\n               \"reduce_range\",\n               false\n            ]\n         ],\n         \"_conv_output_shape\": [\n            [\n               \"input_size\"\n            ],\n            [\n               \"kernel_size\"\n            ],\n            [\n               \"padding\"\n            ],\n            [\n               \"stride\"\n            ],\n            [\n               \"dilation\"\n            ],\n            [\n               \"output_padding\",\n               0\n            ]\n         ],\n         \"_dequantize\": [\n            [\n               \"qx\"\n            ],\n            [\n               \"scale\"\n            ],\n            [\n               \"zero_point\"\n            ]\n         ],\n         \"_quantize\": [\n            [\n               \"x\"\n            ],\n            [\n               \"scale\"\n            ],\n            [\n               \"zero_point\"\n            ],\n            [\n               \"qmin\",\n               null\n            ],\n            [\n               \"qmax\",\n               null\n            ],\n            [\n               \"dtype\",\n               {\n                  \"col_offset\": 64,\n                  \"ctx\": {},\n                  \"id\": \"np\",\n                  \"lineno\": 16\n               }\n            ]\n         ],\n         \"_requantize\": [\n            [\n               \"x\"\n            ],\n            [\n               \"multiplier\"\n            ],\n            [\n               \"zero_point\"\n            ],\n            [\n               \"qmin\",\n               0\n            ],\n            [\n               \"qmax\",\n               255\n            ],\n            [\n               \"qtype\",\n               {\n                  \"col_offset\": 67,\n                  \"ctx\": {},\n                  \"id\": \"np\",\n                  \"lineno\": 34\n               }\n            ]\n         ],\n         \"override_quantized_engine\": [\n            [\n               \"qengine\"\n            ]\n         ]\n      },\n      \"torch.testing._internal.common_utils\": {\n         \"TemporaryFileName\": [],\n         \"_assertGradAndGradgradChecks\": [\n            [\n               \"test_case\"\n            ],\n            [\n               \"apply_fn\"\n            ],\n            [\n               \"inputs\"\n            ]\n         ],\n         \"_check_module_exists\": [\n            [\n               \"name\"\n            ]\n         ],\n         \"_test_function\": [\n            [\n               \"fn\"\n            ],\n            [\n               \"device\"\n            ]\n         ],\n         \"check_disabled\": [\n            [\n               \"test_name\"\n            ]\n         ],\n         \"check_test_defined_in_running_script\": [\n            [\n               \"test_case\"\n            ]\n         ],\n         \"do_test_dtypes\": [\n            [\n               \"self\"\n            ],\n            [\n               \"dtypes\"\n            ],\n            [\n               \"layout\"\n            ],\n            [\n               \"device\"\n            ]\n         ],\n         \"do_test_empty_full\": [\n            [\n               \"self\"\n            ],\n            [\n               \"dtypes\"\n            ],\n            [\n               \"layout\"\n            ],\n            [\n               \"device\"\n            ]\n         ],\n         \"download_file\": [\n            [\n               \"url\"\n            ],\n            [\n               \"binary\",\n               true\n            ]\n         ],\n         \"enable_profiling_mode\": [],\n         \"find_free_port\": [],\n         \"freeze_rng_state\": [],\n         \"get_cpu_type\": [\n            [\n               \"type_name\"\n            ]\n         ],\n         \"get_function_arglist\": [\n            [\n               \"func\"\n            ]\n         ],\n         \"get_gpu_type\": [\n            [\n               \"type_name\"\n            ]\n         ],\n         \"is_iterable\": [\n            [\n               \"obj\"\n            ]\n         ],\n         \"iter_indices\": [\n            [\n               \"tensor\"\n            ]\n         ],\n         \"load_tests\": [\n            [\n               \"loader\"\n            ],\n            [\n               \"tests\"\n            ],\n            [\n               \"pattern\"\n            ]\n         ],\n         \"make_nonzero_det\": [\n            [\n               \"A\"\n            ],\n            [\n               \"sign\",\n               null\n            ],\n            [\n               \"min_singular_value\",\n               0.1\n            ]\n         ],\n         \"prod_single_zero\": [\n            [\n               \"dim_size\"\n            ]\n         ],\n         \"prof_callable\": [\n            [\n               \"callable\"\n            ]\n         ],\n         \"prof_func_call\": [],\n         \"prof_meth_call\": [],\n         \"random_fullrank_matrix_distinct_singular_value\": [\n            [\n               \"matrix_size\"\n            ]\n         ],\n         \"random_lowrank_matrix\": [\n            [\n               \"rank\"\n            ],\n            [\n               \"rows\"\n            ],\n            [\n               \"columns\"\n            ]\n         ],\n         \"random_matrix\": [\n            [\n               \"rows\"\n            ],\n            [\n               \"columns\"\n            ]\n         ],\n         \"random_sparse_matrix\": [\n            [\n               \"rows\"\n            ],\n            [\n               \"columns\"\n            ],\n            [\n               \"density\",\n               0.01\n            ]\n         ],\n         \"random_sparse_pd_matrix\": [\n            [\n               \"matrix_size\"\n            ],\n            [\n               \"density\",\n               0.01\n            ]\n         ],\n         \"random_square_matrix_of_rank\": [\n            [\n               \"l\"\n            ],\n            [\n               \"rank\"\n            ],\n            [\n               \"dtype\",\n               {\n                  \"col_offset\": 48,\n                  \"ctx\": {},\n                  \"id\": \"torch\",\n                  \"lineno\": 1265\n               }\n            ],\n            [\n               \"device\",\n               \"cpu\"\n            ]\n         ],\n         \"random_symmetric_matrix\": [\n            [\n               \"l\"\n            ]\n         ],\n         \"random_symmetric_pd_matrix\": [\n            [\n               \"matrix_size\"\n            ]\n         ],\n         \"random_symmetric_psd_matrix\": [\n            [\n               \"l\"\n            ]\n         ],\n         \"repeat_test_for_types\": [\n            [\n               \"dtypes\"\n            ]\n         ],\n         \"retry\": [\n            [\n               \"ExceptionToCheck\"\n            ],\n            [\n               \"tries\",\n               3\n            ],\n            [\n               \"delay\",\n               3\n            ]\n         ],\n         \"retry_on_connect_failures\": [\n            [\n               \"func\",\n               null\n            ],\n            [\n               \"connect_errors\",\n               \"ADDRESS_IN_USE\"\n            ]\n         ],\n         \"run_tests\": [\n            [\n               \"argv\",\n               \"UNITTEST_ARGS\"\n            ]\n         ],\n         \"set_rng_seed\": [\n            [\n               \"seed\"\n            ]\n         ],\n         \"set_running_script_path\": [],\n         \"shell\": [\n            [\n               \"command\"\n            ],\n            [\n               \"cwd\",\n               null\n            ],\n            [\n               \"env\",\n               null\n            ]\n         ],\n         \"skipCUDAMemoryLeakCheckIf\": [\n            [\n               \"condition\"\n            ]\n         ],\n         \"skipCUDANonDefaultStreamIf\": [\n            [\n               \"condition\"\n            ]\n         ],\n         \"skipIfCompiledWithoutNumpy\": [\n            [\n               \"fn\"\n            ]\n         ],\n         \"skipIfNoLapack\": [\n            [\n               \"fn\"\n            ]\n         ],\n         \"skipIfNotRegistered\": [\n            [\n               \"op_name\"\n            ],\n            [\n               \"message\"\n            ]\n         ],\n         \"skipIfRocm\": [\n            [\n               \"fn\"\n            ]\n         ],\n         \"slowTest\": [\n            [\n               \"fn\"\n            ]\n         ],\n         \"suppress_warnings\": [\n            [\n               \"fn\"\n            ]\n         ],\n         \"to_gpu\": [\n            [\n               \"obj\"\n            ],\n            [\n               \"type_map\",\n               null\n            ]\n         ]\n      },\n      \"torch.testing._internal.dist_utils\": {\n         \"dist_init\": [\n            [\n               \"old_test_method\",\n               null\n            ],\n            [\n               \"setup_rpc\",\n               true\n            ],\n            [\n               \"clean_shutdown\",\n               true\n            ]\n         ],\n         \"get_shutdown_error_regex\": [\n            [\n               \"rpc_backend\"\n            ]\n         ],\n         \"initialize_pg\": [\n            [\n               \"init_method\"\n            ],\n            [\n               \"rank\"\n            ],\n            [\n               \"world_size\"\n            ]\n         ],\n         \"noop\": [],\n         \"wait_until_node_failure\": [\n            [\n               \"rank\"\n            ],\n            [\n               \"expected_error_regex\",\n               \".*\"\n            ]\n         ],\n         \"wait_until_pending_users_flushed\": [],\n         \"worker_name\": [\n            [\n               \"rank\"\n            ]\n         ]\n      },\n      \"torch.testing._internal.distributed.rpc.dist_autograd_test\": {\n         \"_all_contexts_cleaned_up\": [\n            [\n               \"timeout_seconds\",\n               10\n            ]\n         ],\n         \"_call_remote_embedding\": [\n            [\n               \"cls\"\n            ],\n            [\n               \"embedding_rref\"\n            ],\n            [\n               \"input\"\n            ],\n            [\n               \"offsets\"\n            ],\n            [\n               \"per_sample_weights\"\n            ]\n         ],\n         \"_check_rpc_done\": [\n            [\n               \"rank_distance\"\n            ]\n         ],\n         \"_compare_owner_value\": [\n            [\n               \"context_id\"\n            ],\n            [\n               \"rref\"\n            ],\n            [\n               \"grad\"\n            ]\n         ],\n         \"_get_grad\": [\n            [\n               \"cls\"\n            ],\n            [\n               \"embedding_rref\"\n            ],\n            [\n               \"context_id\"\n            ]\n         ],\n         \"_mixed_requires_grad\": [\n            [\n               \"cls\"\n            ],\n            [\n               \"t1\"\n            ],\n            [\n               \"t2\"\n            ]\n         ],\n         \"_run_trainer\": [\n            [\n               \"rref_t1\"\n            ],\n            [\n               \"t2\"\n            ],\n            [\n               \"ps\"\n            ],\n            [\n               \"rank_diff\"\n            ]\n         ],\n         \"_run_trainer_torchscript\": [\n            [\n               \"rref_t1\"\n            ],\n            [\n               \"t2\"\n            ],\n            [\n               \"ps\"\n            ],\n            [\n               \"rank_diff\"\n            ]\n         ],\n         \"_set_rpc_done\": [\n            [\n               \"ctx_id\"\n            ],\n            [\n               \"rank_distance\"\n            ]\n         ],\n         \"_test_nested_backward_accumulate_grads\": [\n            [\n               \"t1\"\n            ],\n            [\n               \"t2\"\n            ],\n            [\n               \"dst_rank\"\n            ]\n         ],\n         \"_torch_ones\": [\n            [\n               \"sizes\"\n            ],\n            [\n               \"requires_grad\",\n               false\n            ]\n         ],\n         \"_workload_thread\": [],\n         \"create_tensor\": [],\n         \"create_torchscript_tensor\": [],\n         \"my_nested_rref_add\": [\n            [\n               \"dst\"\n            ],\n            [\n               \"rref_t1\"\n            ],\n            [\n               \"t2\"\n            ]\n         ],\n         \"my_py_add\": [\n            [\n               \"t1\"\n            ],\n            [\n               \"t2\"\n            ]\n         ],\n         \"my_py_nested_call\": [\n            [\n               \"t1\"\n            ],\n            [\n               \"t2\"\n            ],\n            [\n               \"dst\"\n            ],\n            [\n               \"world_size\"\n            ],\n            [\n               \"hops\"\n            ]\n         ],\n         \"my_rref_add\": [\n            [\n               \"rref_t1\"\n            ],\n            [\n               \"t2\"\n            ]\n         ],\n         \"my_scalar_add\": [\n            [\n               \"a\"\n            ],\n            [\n               \"b\"\n            ]\n         ],\n         \"my_script_add\": [\n            [\n               \"t1\"\n            ],\n            [\n               \"t2\"\n            ]\n         ],\n         \"my_script_ref_add\": [\n            [\n               \"ref_t1\"\n            ],\n            [\n               \"t2\"\n            ]\n         ],\n         \"ret_requires_grad\": [],\n         \"test_async_dist_autograd\": [\n            [\n               \"self\"\n            ]\n         ],\n         \"test_backward_accumulate_grads\": [\n            [\n               \"self\"\n            ]\n         ],\n         \"test_backward_verify_hooks\": [\n            [\n               \"self\"\n            ]\n         ],\n         \"test_clean_context_during_backward\": [\n            [\n               \"self\"\n            ]\n         ],\n         \"test_debug_info\": [\n            [\n               \"self\"\n            ]\n         ],\n         \"test_embedding_bag_with_no_grad_tensors\": [\n            [\n               \"self\"\n            ]\n         ],\n         \"test_mixed_requires_grad\": [\n            [\n               \"self\"\n            ]\n         ],\n         \"test_multiple_backward\": [\n            [\n               \"self\"\n            ]\n         ],\n         \"test_multiple_backward_with_errors\": [\n            [\n               \"self\"\n            ]\n         ],\n         \"test_nested_backward_accumulate_grads\": [\n            [\n               \"self\"\n            ]\n         ],\n         \"test_no_grad_copy\": [\n            [\n               \"self\"\n            ]\n         ]\n      },\n      \"torch.testing._internal.distributed.rpc.dist_optimizer_test\": {\n         \"_call_method\": [\n            [\n               \"method\"\n            ],\n            [\n               \"obj_rref\"\n            ]\n         ],\n         \"remote_method\": [\n            [\n               \"method\"\n            ],\n            [\n               \"obj_rref\"\n            ]\n         ],\n         \"rpc_async_method\": [\n            [\n               \"method\"\n            ],\n            [\n               \"obj_rref\"\n            ]\n         ]\n      },\n      \"torch.testing._internal.distributed.rpc.jit.rpc_test\": {\n         \"assorted_types_args_kwargs\": [\n            [\n               \"tensor_arg\"\n            ],\n            [\n               \"str_arg\"\n            ],\n            [\n               \"int_arg\"\n            ],\n            [\n               \"tensor_kwarg\",\n               {\n                  \"attr\": \"tensor\",\n                  \"col_offset\": 27,\n                  \"ctx\": {},\n                  \"lineno\": 201,\n                  \"value\": {\n                     \"col_offset\": 27,\n                     \"ctx\": {},\n                     \"id\": \"torch\",\n                     \"lineno\": 201\n                  }\n               }\n            ],\n            [\n               \"str_kwarg\",\n               \"str_kwarg\"\n            ],\n            [\n               \"int_kwarg\",\n               2\n            ]\n         ],\n         \"construct_my_script_module\": [\n            [\n               \"rank\"\n            ]\n         ],\n         \"my_script_module_init\": [\n            [\n               \"rank\"\n            ]\n         ],\n         \"no_arg\": [],\n         \"one_arg\": [\n            [\n               \"value\"\n            ]\n         ],\n         \"owner_create_rref_my_script_class\": [\n            [\n               \"a\"\n            ]\n         ],\n         \"owner_create_rref_my_script_module\": [\n            [\n               \"a\"\n            ]\n         ],\n         \"python_function\": [],\n         \"raise_script\": [],\n         \"return_rref\": [\n            [\n               \"rref_var\"\n            ]\n         ],\n         \"rpc_async_call_remote_torchscript_in_torchscript\": [\n            [\n               \"dst_worker_name\"\n            ],\n            [\n               \"args\"\n            ],\n            [\n               \"kwargs\"\n            ]\n         ],\n         \"rpc_return_rref\": [\n            [\n               \"dst\"\n            ]\n         ],\n         \"rref_python_annotation\": [\n            [\n               \"rref_var\"\n            ]\n         ],\n         \"rref_script_annotation\": [\n            [\n               \"rref_var\"\n            ]\n         ],\n         \"rref_to_here\": [\n            [\n               \"rref_var\"\n            ]\n         ],\n         \"run_ref_script_module\": [\n            [\n               \"ref_script_module\"\n            ],\n            [\n               \"t\"\n            ]\n         ],\n         \"save_rref\": [\n            [\n               \"rref_var\"\n            ],\n            [\n               \"fname\"\n            ]\n         ],\n         \"script_check_rref_confirmed\": [\n            [\n               \"rref\"\n            ]\n         ],\n         \"script_run_forward_rref_my_script_module\": [\n            [\n               \"rref\"\n            ]\n         ],\n         \"script_run_get_value_rref_my_script_class\": [\n            [\n               \"rref\"\n            ]\n         ],\n         \"two_args_two_kwargs\": [\n            [\n               \"first_arg\"\n            ],\n            [\n               \"second_arg\"\n            ],\n            [\n               \"first_kwarg\",\n               {\n                  \"attr\": \"tensor\",\n                  \"col_offset\": 16,\n                  \"ctx\": {},\n                  \"lineno\": 190,\n                  \"value\": {\n                     \"col_offset\": 16,\n                     \"ctx\": {},\n                     \"id\": \"torch\",\n                     \"lineno\": 190\n                  }\n               }\n            ],\n            [\n               \"second_kwarg\",\n               {\n                  \"attr\": \"tensor\",\n                  \"col_offset\": 17,\n                  \"ctx\": {},\n                  \"lineno\": 191,\n                  \"value\": {\n                     \"col_offset\": 17,\n                     \"ctx\": {},\n                     \"id\": \"torch\",\n                     \"lineno\": 191\n                  }\n               }\n            ]\n         ]\n      },\n      \"torch.testing._internal.distributed.rpc.rpc_test\": {\n         \"_call_method_on_rref\": [\n            [\n               \"method\"\n            ],\n            [\n               \"rref\"\n            ]\n         ],\n         \"_stub_construct_rpc_backend_options_handler\": [],\n         \"_stub_init_rpc_backend_handler\": [\n            [\n               \"store\"\n            ],\n            [\n               \"name\"\n            ],\n            [\n               \"rank\"\n            ],\n            [\n               \"world_size\"\n            ],\n            [\n               \"rpc_backend_options\"\n            ]\n         ],\n         \"add_rref_to_value\": [\n            [\n               \"rref\"\n            ],\n            [\n               \"value\"\n            ]\n         ],\n         \"build_complex_tensors\": [],\n         \"check_rref_confirmed\": [\n            [\n               \"rref\"\n            ]\n         ],\n         \"clear_global_rref\": [],\n         \"foo_add\": [],\n         \"get_rref_list\": [\n            [\n               \"values\"\n            ]\n         ],\n         \"heavy_rpc\": [\n            [\n               \"tensor\"\n            ]\n         ],\n         \"heavy_rpc_torchscript\": [\n            [\n               \"tensor\"\n            ]\n         ],\n         \"light_rpc\": [],\n         \"multi_layer_nested_async_rpc\": [\n            [\n               \"dst\"\n            ],\n            [\n               \"world_size\"\n            ],\n            [\n               \"ttl\"\n            ]\n         ],\n         \"my_complex_tensor_function\": [\n            [\n               \"list_input\"\n            ],\n            [\n               \"tensor_class_input\"\n            ],\n            [\n               \"dict_input\"\n            ]\n         ],\n         \"my_function\": [\n            [\n               \"a\"\n            ],\n            [\n               \"b\"\n            ],\n            [\n               \"c\"\n            ]\n         ],\n         \"my_rref_function\": [\n            [\n               \"rref_a\"\n            ],\n            [\n               \"rref_b\"\n            ]\n         ],\n         \"my_sleep_func\": [\n            [\n               \"seconds\",\n               1\n            ]\n         ],\n         \"my_tensor_function\": [\n            [\n               \"a\"\n            ],\n            [\n               \"b\"\n            ]\n         ],\n         \"nested_remote\": [\n            [\n               \"dst\"\n            ]\n         ],\n         \"nested_rpc\": [\n            [\n               \"dst\"\n            ]\n         ],\n         \"nested_rref\": [\n            [\n               \"dst\"\n            ]\n         ],\n         \"no_result\": [],\n         \"raise_func\": [],\n         \"requires_process_group_agent\": [\n            [\n               \"message\",\n               \"\"\n            ]\n         ],\n         \"rpc_return_rref\": [\n            [\n               \"dst\"\n            ]\n         ],\n         \"rref_forward_chain\": [\n            [\n               \"dst\"\n            ],\n            [\n               \"world_size\"\n            ],\n            [\n               \"rref\"\n            ],\n            [\n               \"ttl\"\n            ]\n         ],\n         \"run_nested_pickle\": [\n            [\n               \"pickle_cls_instance\"\n            ],\n            [\n               \"tensor\"\n            ]\n         ],\n         \"set_and_check_done\": [\n            [\n               \"value\"\n            ]\n         ],\n         \"set_global_rref\": [\n            [\n               \"rref\"\n            ]\n         ],\n         \"set_value\": [\n            [\n               \"value\"\n            ]\n         ],\n         \"wait_for_value_future\": []\n      },\n      \"torch.testing._internal.expecttest\": {\n         \"escape_trailing_quote\": [\n            [\n               \"s\"\n            ],\n            [\n               \"quote\"\n            ]\n         ],\n         \"normalize_nl\": [\n            [\n               \"t\"\n            ]\n         ],\n         \"nth_eol\": [\n            [\n               \"src\"\n            ],\n            [\n               \"lineno\"\n            ]\n         ],\n         \"nth_line\": [\n            [\n               \"src\"\n            ],\n            [\n               \"lineno\"\n            ]\n         ],\n         \"ok_for_raw_triple_quoted_string\": [\n            [\n               \"s\"\n            ],\n            [\n               \"quote\"\n            ]\n         ],\n         \"replace_string_literal\": [\n            [\n               \"src\"\n            ],\n            [\n               \"lineno\"\n            ],\n            [\n               \"new_string\"\n            ]\n         ]\n      },\n      \"torch.testing._internal.hypothesis_utils\": {\n         \"_floats_wrapper\": [],\n         \"_get_valid_min_max\": [\n            [\n               \"qparams\"\n            ]\n         ],\n         \"array_shapes\": [\n            [\n               \"draw\"\n            ],\n            [\n               \"min_dims\",\n               1\n            ],\n            [\n               \"max_dims\",\n               null\n            ],\n            [\n               \"min_side\",\n               1\n            ],\n            [\n               \"max_side\",\n               null\n            ]\n         ],\n         \"assert_deadline_disabled\": [],\n         \"assume_not_overflowing\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"qparams\"\n            ]\n         ],\n         \"floats\": [],\n         \"per_channel_tensor\": [\n            [\n               \"draw\"\n            ],\n            [\n               \"shapes\",\n               null\n            ],\n            [\n               \"elements\",\n               null\n            ],\n            [\n               \"qparams\",\n               null\n            ]\n         ],\n         \"qparams\": [\n            [\n               \"draw\"\n            ],\n            [\n               \"dtypes\",\n               null\n            ],\n            [\n               \"scale_min\",\n               null\n            ],\n            [\n               \"scale_max\",\n               null\n            ],\n            [\n               \"zero_point_min\",\n               null\n            ],\n            [\n               \"zero_point_max\",\n               null\n            ]\n         ],\n         \"tensor\": [\n            [\n               \"draw\"\n            ],\n            [\n               \"shapes\",\n               null\n            ],\n            [\n               \"elements\",\n               null\n            ],\n            [\n               \"qparams\",\n               null\n            ]\n         ],\n         \"tensor_conv\": [\n            [\n               \"draw\"\n            ],\n            [\n               \"spatial_dim\",\n               2\n            ],\n            [\n               \"batch_size_range\",\n               [\n                  {\n                     \"col_offset\": 43,\n                     \"lineno\": 271,\n                     \"n\": 1\n                  },\n                  {\n                     \"col_offset\": 46,\n                     \"lineno\": 271,\n                     \"n\": 4\n                  }\n               ]\n            ],\n            [\n               \"input_channels_per_group_range\",\n               [\n                  {\n                     \"col_offset\": 36,\n                     \"lineno\": 272,\n                     \"n\": 3\n                  },\n                  {\n                     \"col_offset\": 39,\n                     \"lineno\": 272,\n                     \"n\": 7\n                  }\n               ]\n            ],\n            [\n               \"output_channels_per_group_range\",\n               [\n                  {\n                     \"col_offset\": 37,\n                     \"lineno\": 273,\n                     \"n\": 3\n                  },\n                  {\n                     \"col_offset\": 40,\n                     \"lineno\": 273,\n                     \"n\": 7\n                  }\n               ]\n            ],\n            [\n               \"feature_map_range\",\n               [\n                  {\n                     \"col_offset\": 63,\n                     \"lineno\": 273,\n                     \"n\": 6\n                  },\n                  {\n                     \"col_offset\": 66,\n                     \"lineno\": 273,\n                     \"n\": 12\n                  }\n               ]\n            ],\n            [\n               \"kernel_range\",\n               [\n                  {\n                     \"col_offset\": 18,\n                     \"lineno\": 274,\n                     \"n\": 3\n                  },\n                  {\n                     \"col_offset\": 21,\n                     \"lineno\": 274,\n                     \"n\": 7\n                  }\n               ]\n            ],\n            [\n               \"max_groups\",\n               1\n            ],\n            [\n               \"elements\",\n               null\n            ],\n            [\n               \"qparams\",\n               null\n            ]\n         ]\n      },\n      \"torch.testing._internal.jit_utils\": {\n         \"_compared_saved_loaded\": [\n            [\n               \"self\"\n            ],\n            [\n               \"m\"\n            ]\n         ],\n         \"_inline_everything\": [\n            [\n               \"fn\"\n            ]\n         ],\n         \"_isHookExceptionOk\": [\n            [\n               \"self\"\n            ],\n            [\n               \"e\"\n            ]\n         ],\n         \"_tmp_donotuse_dont_inline_everything\": [\n            [\n               \"fn\"\n            ]\n         ],\n         \"_trace\": [],\n         \"assertAutodiffNode\": [\n            [\n               \"self\"\n            ],\n            [\n               \"graph\"\n            ],\n            [\n               \"should_autodiff_node\"\n            ],\n            [\n               \"nonfusible_nodes\"\n            ],\n            [\n               \"fusible_nodes\"\n            ]\n         ],\n         \"assertExpectedGraph\": [\n            [\n               \"self\"\n            ],\n            [\n               \"trace\"\n            ]\n         ],\n         \"assertExpectedONNXGraph\": [\n            [\n               \"self\"\n            ],\n            [\n               \"g\"\n            ]\n         ],\n         \"assertExportImport\": [\n            [\n               \"self\"\n            ],\n            [\n               \"trace\"\n            ],\n            [\n               \"inputs\"\n            ]\n         ],\n         \"assertExportImportModule\": [\n            [\n               \"self\"\n            ],\n            [\n               \"m\"\n            ],\n            [\n               \"inputs\"\n            ]\n         ],\n         \"assertGraphContains\": [\n            [\n               \"self\"\n            ],\n            [\n               \"graph\"\n            ],\n            [\n               \"kind\"\n            ]\n         ],\n         \"assertGraphContainsExactly\": [\n            [\n               \"self\"\n            ],\n            [\n               \"graph\"\n            ],\n            [\n               \"kind\"\n            ],\n            [\n               \"num_kind_nodes\"\n            ],\n            [\n               \"consider_subgraphs\",\n               false\n            ]\n         ],\n         \"attrs_with_prefix\": [\n            [\n               \"module\"\n            ],\n            [\n               \"prefix\"\n            ]\n         ],\n         \"checkBailouts\": [\n            [\n               \"self\"\n            ],\n            [\n               \"model\"\n            ],\n            [\n               \"inputs\"\n            ],\n            [\n               \"expected\"\n            ]\n         ],\n         \"checkModule\": [\n            [\n               \"self\"\n            ],\n            [\n               \"nn_module\"\n            ],\n            [\n               \"args\"\n            ]\n         ],\n         \"checkScript\": [\n            [\n               \"self\"\n            ],\n            [\n               \"script\"\n            ],\n            [\n               \"inputs\"\n            ],\n            [\n               \"name\",\n               \"func\"\n            ],\n            [\n               \"optimize\",\n               true\n            ],\n            [\n               \"inputs_requires_grad\",\n               false\n            ],\n            [\n               \"capture_output\",\n               false\n            ],\n            [\n               \"frames_up\",\n               1\n            ],\n            [\n               \"profiling\",\n               {\n                  \"col_offset\": 30,\n                  \"ctx\": {},\n                  \"id\": \"ProfilingMode\",\n                  \"lineno\": 362\n               }\n            ]\n         ],\n         \"checkScriptRaisesRegex\": [\n            [\n               \"self\"\n            ],\n            [\n               \"script\"\n            ],\n            [\n               \"inputs\"\n            ],\n            [\n               \"exception\"\n            ],\n            [\n               \"regex\"\n            ],\n            [\n               \"outputs\",\n               null\n            ],\n            [\n               \"capture_output\",\n               false\n            ],\n            [\n               \"profiling\",\n               {\n                  \"col_offset\": 77,\n                  \"ctx\": {},\n                  \"id\": \"ProfilingMode\",\n                  \"lineno\": 315\n               }\n            ]\n         ],\n         \"checkTrace\": [\n            [\n               \"self\"\n            ],\n            [\n               \"func\"\n            ],\n            [\n               \"reference_tensors\"\n            ],\n            [\n               \"input_tensors\",\n               null\n            ],\n            [\n               \"drop\",\n               null\n            ],\n            [\n               \"allow_unused\",\n               false\n            ],\n            [\n               \"verbose\",\n               false\n            ],\n            [\n               \"inputs_require_grads\",\n               true\n            ],\n            [\n               \"check_tolerance\",\n               1e-05\n            ],\n            [\n               \"export_import\",\n               true\n            ],\n            [\n               \"_force_outplace\",\n               false\n            ]\n         ],\n         \"clearHooks\": [\n            [\n               \"self\"\n            ]\n         ],\n         \"clear_class_registry\": [],\n         \"createFunctionFromGraph\": [\n            [\n               \"self\"\n            ],\n            [\n               \"trace\"\n            ]\n         ],\n         \"disable_autodiff_subgraph_inlining\": [\n            [\n               \"enabled\",\n               true\n            ]\n         ],\n         \"do_input_map\": [\n            [\n               \"fn\"\n            ],\n            [\n               \"input\"\n            ]\n         ],\n         \"emitFunctionHook\": [\n            [\n               \"self\"\n            ],\n            [\n               \"func\"\n            ]\n         ],\n         \"emitModuleHook\": [\n            [\n               \"self\"\n            ],\n            [\n               \"module\"\n            ]\n         ],\n         \"enable_cpu_fuser\": [\n            [\n               \"fn\"\n            ]\n         ],\n         \"enable_cpu_fuser_if\": [\n            [\n               \"cond\"\n            ]\n         ],\n         \"execWrapper\": [\n            [\n               \"code\"\n            ],\n            [\n               \"glob\"\n            ],\n            [\n               \"loc\"\n            ]\n         ],\n         \"getExportImportCopy\": [\n            [\n               \"self\"\n            ],\n            [\n               \"m\"\n            ],\n            [\n               \"also_test_file\",\n               true\n            ],\n            [\n               \"map_location\",\n               null\n            ]\n         ],\n         \"getExportImportCopyWithPacking\": [\n            [\n               \"self\"\n            ],\n            [\n               \"m\"\n            ],\n            [\n               \"also_test_file\",\n               true\n            ],\n            [\n               \"map_location\",\n               null\n            ]\n         ],\n         \"get_execution_plan\": [\n            [\n               \"graph_executor_state\"\n            ]\n         ],\n         \"get_forward\": [\n            [\n               \"c\"\n            ]\n         ],\n         \"get_forward_graph\": [\n            [\n               \"c\"\n            ]\n         ],\n         \"get_frame_vars\": [\n            [\n               \"self\"\n            ],\n            [\n               \"frames_up\"\n            ]\n         ],\n         \"get_module_method\": [\n            [\n               \"m\"\n            ],\n            [\n               \"module\"\n            ],\n            [\n               \"method\"\n            ]\n         ],\n         \"inline_everything_mode\": [\n            [\n               \"should_inline\"\n            ]\n         ],\n         \"runAndSaveRNG\": [\n            [\n               \"self\"\n            ],\n            [\n               \"func\"\n            ],\n            [\n               \"inputs\"\n            ],\n            [\n               \"kwargs\",\n               null\n            ]\n         ],\n         \"run_pass\": [\n            [\n               \"self\"\n            ],\n            [\n               \"name\"\n            ],\n            [\n               \"trace\"\n            ]\n         ],\n         \"setHooks\": [\n            [\n               \"self\"\n            ]\n         ],\n         \"setUp\": [\n            [\n               \"self\"\n            ]\n         ],\n         \"tearDown\": [\n            [\n               \"self\"\n            ]\n         ]\n      },\n      \"torch.testing._internal.test_module.future_div\": {\n         \"div_float_future\": [],\n         \"div_int_future\": []\n      },\n      \"torch.testing._internal.test_module.no_future_div\": {\n         \"div_float_nofuture\": [],\n         \"div_int_nofuture\": []\n      },\n      \"torch.utils.__init__\": {\n         \"set_module\": [\n            [\n               \"obj\"\n            ],\n            [\n               \"mod\"\n            ]\n         ]\n      },\n      \"torch.utils._cpp_extension_versioner\": {\n         \"hash_build_arguments\": [\n            [\n               \"hash_value\"\n            ],\n            [\n               \"build_arguments\"\n            ]\n         ],\n         \"hash_source_files\": [\n            [\n               \"hash_value\"\n            ],\n            [\n               \"source_files\"\n            ]\n         ],\n         \"update_hash\": [\n            [\n               \"seed\"\n            ],\n            [\n               \"value\"\n            ]\n         ]\n      },\n      \"torch.utils.bottleneck.__main__\": {\n         \"compiled_with_cuda\": [\n            [\n               \"sysinfo\"\n            ]\n         ],\n         \"cpu_time_total\": [\n            [\n               \"autograd_prof\"\n            ]\n         ],\n         \"main\": [],\n         \"parse_args\": [],\n         \"print_autograd_prof_summary\": [\n            [\n               \"prof\"\n            ],\n            [\n               \"mode\"\n            ],\n            [\n               \"sortby\",\n               \"cpu_time\"\n            ],\n            [\n               \"topk\",\n               15\n            ]\n         ],\n         \"print_cprofile_summary\": [\n            [\n               \"prof\"\n            ],\n            [\n               \"sortby\",\n               \"tottime\"\n            ],\n            [\n               \"topk\",\n               15\n            ]\n         ],\n         \"redirect_argv\": [\n            [\n               \"new_argv\"\n            ]\n         ],\n         \"run_autograd_prof\": [\n            [\n               \"code\"\n            ],\n            [\n               \"globs\"\n            ]\n         ],\n         \"run_cprofile\": [\n            [\n               \"code\"\n            ],\n            [\n               \"globs\"\n            ],\n            [\n               \"launch_blocking\",\n               false\n            ]\n         ],\n         \"run_env_analysis\": []\n      },\n      \"torch.utils.checkpoint\": {\n         \"check_backward_validity\": [\n            [\n               \"inputs\"\n            ]\n         ],\n         \"checkpoint\": [\n            [\n               \"function\"\n            ]\n         ],\n         \"checkpoint_sequential\": [\n            [\n               \"functions\"\n            ],\n            [\n               \"segments\"\n            ],\n            [\n               \"input\"\n            ]\n         ],\n         \"detach_variable\": [\n            [\n               \"inputs\"\n            ]\n         ],\n         \"get_device_states\": [],\n         \"set_device_states\": [\n            [\n               \"devices\"\n            ],\n            [\n               \"states\"\n            ]\n         ]\n      },\n      \"torch.utils.collect_env\": {\n         \"check_release_file\": [\n            [\n               \"run_lambda\"\n            ]\n         ],\n         \"get_cmake_version\": [\n            [\n               \"run_lambda\"\n            ]\n         ],\n         \"get_conda_packages\": [\n            [\n               \"run_lambda\"\n            ]\n         ],\n         \"get_cudnn_version\": [\n            [\n               \"run_lambda\"\n            ]\n         ],\n         \"get_env_info\": [],\n         \"get_gcc_version\": [\n            [\n               \"run_lambda\"\n            ]\n         ],\n         \"get_gpu_info\": [\n            [\n               \"run_lambda\"\n            ]\n         ],\n         \"get_lsb_version\": [\n            [\n               \"run_lambda\"\n            ]\n         ],\n         \"get_mac_version\": [\n            [\n               \"run_lambda\"\n            ]\n         ],\n         \"get_nvidia_driver_version\": [\n            [\n               \"run_lambda\"\n            ]\n         ],\n         \"get_nvidia_smi\": [],\n         \"get_os\": [\n            [\n               \"run_lambda\"\n            ]\n         ],\n         \"get_pip_packages\": [\n            [\n               \"run_lambda\"\n            ]\n         ],\n         \"get_platform\": [],\n         \"get_pretty_env_info\": [],\n         \"get_running_cuda_version\": [\n            [\n               \"run_lambda\"\n            ]\n         ],\n         \"get_windows_version\": [\n            [\n               \"run_lambda\"\n            ]\n         ],\n         \"main\": [],\n         \"pretty_str\": [\n            [\n               \"envinfo\"\n            ]\n         ],\n         \"run\": [\n            [\n               \"command\"\n            ]\n         ],\n         \"run_and_parse_first_match\": [\n            [\n               \"run_lambda\"\n            ],\n            [\n               \"command\"\n            ],\n            [\n               \"regex\"\n            ]\n         ],\n         \"run_and_read_all\": [\n            [\n               \"run_lambda\"\n            ],\n            [\n               \"command\"\n            ]\n         ]\n      },\n      \"torch.utils.cpp_extension\": {\n         \"CUDAExtension\": [\n            [\n               \"name\"\n            ],\n            [\n               \"sources\"\n            ]\n         ],\n         \"CppExtension\": [\n            [\n               \"name\"\n            ],\n            [\n               \"sources\"\n            ]\n         ],\n         \"_accepted_compilers_for_platform\": [],\n         \"_find_cuda_home\": [],\n         \"_find_rocm_home\": [],\n         \"_get_build_directory\": [\n            [\n               \"name\"\n            ],\n            [\n               \"verbose\"\n            ]\n         ],\n         \"_get_cuda_arch_flags\": [\n            [\n               \"cflags\",\n               null\n            ]\n         ],\n         \"_get_num_workers\": [\n            [\n               \"verbose\"\n            ]\n         ],\n         \"_get_rocm_arch_flags\": [\n            [\n               \"cflags\",\n               null\n            ]\n         ],\n         \"_import_module_from_library\": [\n            [\n               \"module_name\"\n            ],\n            [\n               \"path\"\n            ],\n            [\n               \"is_python_module\"\n            ]\n         ],\n         \"_is_binary_build\": [],\n         \"_is_cuda_file\": [\n            [\n               \"path\"\n            ]\n         ],\n         \"_is_ninja_available\": [],\n         \"_jit_compile\": [\n            [\n               \"name\"\n            ],\n            [\n               \"sources\"\n            ],\n            [\n               \"extra_cflags\"\n            ],\n            [\n               \"extra_cuda_cflags\"\n            ],\n            [\n               \"extra_ldflags\"\n            ],\n            [\n               \"extra_include_paths\"\n            ],\n            [\n               \"build_directory\"\n            ],\n            [\n               \"verbose\"\n            ],\n            [\n               \"with_cuda\"\n            ],\n            [\n               \"is_python_module\"\n            ]\n         ],\n         \"_join_cuda_home\": [],\n         \"_join_rocm_home\": [],\n         \"_prepare_ldflags\": [\n            [\n               \"extra_ldflags\"\n            ],\n            [\n               \"with_cuda\"\n            ],\n            [\n               \"verbose\"\n            ]\n         ],\n         \"_run_ninja_build\": [\n            [\n               \"build_directory\"\n            ],\n            [\n               \"verbose\"\n            ],\n            [\n               \"error_prefix\"\n            ]\n         ],\n         \"_write_ninja_file\": [\n            [\n               \"path\"\n            ],\n            [\n               \"cflags\"\n            ],\n            [\n               \"post_cflags\"\n            ],\n            [\n               \"cuda_cflags\"\n            ],\n            [\n               \"cuda_post_cflags\"\n            ],\n            [\n               \"sources\"\n            ],\n            [\n               \"objects\"\n            ],\n            [\n               \"ldflags\"\n            ],\n            [\n               \"library_target\"\n            ],\n            [\n               \"with_cuda\"\n            ]\n         ],\n         \"_write_ninja_file_and_build_library\": [\n            [\n               \"name\"\n            ],\n            [\n               \"sources\"\n            ],\n            [\n               \"extra_cflags\"\n            ],\n            [\n               \"extra_cuda_cflags\"\n            ],\n            [\n               \"extra_ldflags\"\n            ],\n            [\n               \"extra_include_paths\"\n            ],\n            [\n               \"build_directory\"\n            ],\n            [\n               \"verbose\"\n            ],\n            [\n               \"with_cuda\"\n            ]\n         ],\n         \"_write_ninja_file_and_compile_objects\": [\n            [\n               \"sources\"\n            ],\n            [\n               \"objects\"\n            ],\n            [\n               \"cflags\"\n            ],\n            [\n               \"post_cflags\"\n            ],\n            [\n               \"cuda_cflags\"\n            ],\n            [\n               \"cuda_post_cflags\"\n            ],\n            [\n               \"build_directory\"\n            ],\n            [\n               \"verbose\"\n            ],\n            [\n               \"with_cuda\"\n            ]\n         ],\n         \"_write_ninja_file_to_build_library\": [\n            [\n               \"path\"\n            ],\n            [\n               \"name\"\n            ],\n            [\n               \"sources\"\n            ],\n            [\n               \"extra_cflags\"\n            ],\n            [\n               \"extra_cuda_cflags\"\n            ],\n            [\n               \"extra_ldflags\"\n            ],\n            [\n               \"extra_include_paths\"\n            ],\n            [\n               \"with_cuda\"\n            ]\n         ],\n         \"check_compiler_abi_compatibility\": [\n            [\n               \"compiler\"\n            ]\n         ],\n         \"check_compiler_ok_for_platform\": [\n            [\n               \"compiler\"\n            ]\n         ],\n         \"get_default_build_root\": [],\n         \"include_paths\": [\n            [\n               \"cuda\",\n               false\n            ]\n         ],\n         \"library_paths\": [\n            [\n               \"cuda\",\n               false\n            ]\n         ],\n         \"load\": [\n            [\n               \"name\"\n            ],\n            [\n               \"sources\"\n            ],\n            [\n               \"extra_cflags\",\n               null\n            ],\n            [\n               \"extra_cuda_cflags\",\n               null\n            ],\n            [\n               \"extra_ldflags\",\n               null\n            ],\n            [\n               \"extra_include_paths\",\n               null\n            ],\n            [\n               \"build_directory\",\n               null\n            ],\n            [\n               \"verbose\",\n               false\n            ],\n            [\n               \"with_cuda\",\n               null\n            ],\n            [\n               \"is_python_module\",\n               true\n            ]\n         ],\n         \"load_inline\": [\n            [\n               \"name\"\n            ],\n            [\n               \"cpp_sources\"\n            ],\n            [\n               \"cuda_sources\",\n               null\n            ],\n            [\n               \"functions\",\n               null\n            ],\n            [\n               \"extra_cflags\",\n               null\n            ],\n            [\n               \"extra_cuda_cflags\",\n               null\n            ],\n            [\n               \"extra_ldflags\",\n               null\n            ],\n            [\n               \"extra_include_paths\",\n               null\n            ],\n            [\n               \"build_directory\",\n               null\n            ],\n            [\n               \"verbose\",\n               false\n            ],\n            [\n               \"with_cuda\",\n               null\n            ],\n            [\n               \"is_python_module\",\n               true\n            ],\n            [\n               \"with_pytorch_error_handling\",\n               true\n            ]\n         ],\n         \"verify_ninja_availability\": []\n      },\n      \"torch.utils.data._utils.__init__\": {\n         \"_set_python_exit_flag\": []\n      },\n      \"torch.utils.data._utils.collate\": {\n         \"default_collate\": [\n            [\n               \"batch\"\n            ]\n         ],\n         \"default_convert\": [\n            [\n               \"data\"\n            ]\n         ]\n      },\n      \"torch.utils.data._utils.pin_memory\": {\n         \"_pin_memory_loop\": [\n            [\n               \"in_queue\"\n            ],\n            [\n               \"out_queue\"\n            ],\n            [\n               \"device_id\"\n            ],\n            [\n               \"done_event\"\n            ]\n         ],\n         \"pin_memory\": [\n            [\n               \"data\"\n            ]\n         ]\n      },\n      \"torch.utils.data._utils.signal_handling\": {\n         \"_set_SIGCHLD_handler\": []\n      },\n      \"torch.utils.data._utils.worker\": {\n         \"_worker_loop\": [\n            [\n               \"dataset_kind\"\n            ],\n            [\n               \"dataset\"\n            ],\n            [\n               \"index_queue\"\n            ],\n            [\n               \"data_queue\"\n            ],\n            [\n               \"done_event\"\n            ],\n            [\n               \"auto_collation\"\n            ],\n            [\n               \"collate_fn\"\n            ],\n            [\n               \"drop_last\"\n            ],\n            [\n               \"seed\"\n            ],\n            [\n               \"init_fn\"\n            ],\n            [\n               \"worker_id\"\n            ],\n            [\n               \"num_workers\"\n            ]\n         ],\n         \"get_worker_info\": []\n      },\n      \"torch.utils.data.dataset\": {\n         \"random_split\": [\n            [\n               \"dataset\"\n            ],\n            [\n               \"lengths\"\n            ]\n         ]\n      },\n      \"torch.utils.hipify.hipify_python\": {\n         \"add_dim3\": [\n            [\n               \"kernel_string\"\n            ],\n            [\n               \"cuda_kernel\"\n            ]\n         ],\n         \"compute_stats\": [\n            [\n               \"stats\"\n            ]\n         ],\n         \"extract_arguments\": [\n            [\n               \"start\"\n            ],\n            [\n               \"string\"\n            ]\n         ],\n         \"file_add_header\": [\n            [\n               \"filepath\"\n            ],\n            [\n               \"header\"\n            ]\n         ],\n         \"file_specific_replacement\": [\n            [\n               \"filepath\"\n            ],\n            [\n               \"search_string\"\n            ],\n            [\n               \"replace_string\"\n            ],\n            [\n               \"strict\",\n               false\n            ]\n         ],\n         \"find_bracket_group\": [\n            [\n               \"input_string\"\n            ],\n            [\n               \"start\"\n            ]\n         ],\n         \"find_closure_group\": [\n            [\n               \"input_string\"\n            ],\n            [\n               \"start\"\n            ],\n            [\n               \"group\"\n            ]\n         ],\n         \"find_parentheses_group\": [\n            [\n               \"input_string\"\n            ],\n            [\n               \"start\"\n            ]\n         ],\n         \"fix_static_global_kernels\": [\n            [\n               \"in_txt\"\n            ]\n         ],\n         \"get_hip_file_path\": [\n            [\n               \"filepath\"\n            ]\n         ],\n         \"hip_header_magic\": [\n            [\n               \"input_string\"\n            ]\n         ],\n         \"hipify\": [\n            [\n               \"project_directory\"\n            ],\n            [\n               \"show_detailed\",\n               false\n            ],\n            [\n               \"extensions\",\n               [\n                  {\n                     \"col_offset\": 16,\n                     \"lineno\": 776,\n                     \"s\": \".cu\"\n                  },\n                  {\n                     \"col_offset\": 23,\n                     \"lineno\": 776,\n                     \"s\": \".cuh\"\n                  },\n                  {\n                     \"col_offset\": 31,\n                     \"lineno\": 776,\n                     \"s\": \".c\"\n                  },\n                  {\n                     \"col_offset\": 37,\n                     \"lineno\": 776,\n                     \"s\": \".cc\"\n                  },\n                  {\n                     \"col_offset\": 44,\n                     \"lineno\": 776,\n                     \"s\": \".cpp\"\n                  },\n                  {\n                     \"col_offset\": 52,\n                     \"lineno\": 776,\n                     \"s\": \".h\"\n                  },\n                  {\n                     \"col_offset\": 58,\n                     \"lineno\": 776,\n                     \"s\": \".in\"\n                  },\n                  {\n                     \"col_offset\": 65,\n                     \"lineno\": 776,\n                     \"s\": \".hpp\"\n                  }\n               ]\n            ],\n            [\n               \"output_directory\",\n               \"\"\n            ],\n            [\n               \"includes\",\n               []\n            ],\n            [\n               \"out_of_place_only\",\n               false\n            ],\n            [\n               \"ignores\",\n               []\n            ],\n            [\n               \"show_progress\",\n               true\n            ],\n            [\n               \"hip_clang_launch\",\n               false\n            ],\n            [\n               \"is_pytorch_extension\",\n               false\n            ]\n         ],\n         \"is_caffe2_gpu_file\": [\n            [\n               \"filepath\"\n            ]\n         ],\n         \"is_out_of_place\": [\n            [\n               \"filepath\"\n            ]\n         ],\n         \"is_pytorch_file\": [\n            [\n               \"filepath\"\n            ]\n         ],\n         \"matched_files_iter\": [\n            [\n               \"root_path\"\n            ],\n            [\n               \"includes\",\n               [\n                  {\n                     \"col_offset\": 44,\n                     \"lineno\": 76,\n                     \"s\": \"*\"\n                  }\n               ]\n            ],\n            [\n               \"ignores\",\n               []\n            ],\n            [\n               \"extensions\",\n               []\n            ],\n            [\n               \"out_of_place_only\",\n               false\n            ]\n         ],\n         \"openf\": [\n            [\n               \"filename\"\n            ],\n            [\n               \"mode\"\n            ]\n         ],\n         \"preprocess\": [\n            [\n               \"output_directory\"\n            ],\n            [\n               \"all_files\"\n            ],\n            [\n               \"show_detailed\",\n               false\n            ],\n            [\n               \"show_progress\",\n               true\n            ],\n            [\n               \"hip_clang_launch\",\n               false\n            ],\n            [\n               \"is_pytorch_extension\",\n               false\n            ]\n         ],\n         \"preprocessor\": [\n            [\n               \"output_directory\"\n            ],\n            [\n               \"filepath\"\n            ],\n            [\n               \"stats\"\n            ],\n            [\n               \"hip_clang_launch\"\n            ],\n            [\n               \"is_pytorch_extension\"\n            ]\n         ],\n         \"processKernelLaunches\": [\n            [\n               \"string\"\n            ],\n            [\n               \"stats\"\n            ]\n         ],\n         \"replace_extern_shared\": [\n            [\n               \"input_string\"\n            ]\n         ],\n         \"replace_math_functions\": [\n            [\n               \"input_string\"\n            ]\n         ],\n         \"str2bool\": [\n            [\n               \"v\"\n            ]\n         ]\n      },\n      \"torch.utils.hooks\": {\n         \"unserializable_hook\": [\n            [\n               \"f\"\n            ]\n         ],\n         \"warn_if_has_hooks\": [\n            [\n               \"tensor\"\n            ]\n         ]\n      },\n      \"torch.utils.mkldnn\": {\n         \"to_mkldnn\": [\n            [\n               \"module\"\n            ]\n         ]\n      },\n      \"torch.utils.tensorboard._caffe2_graph\": {\n         \"_add_gradient_scope\": [\n            [\n               \"shapes\"\n            ],\n            [\n               \"blob_name_tracker\"\n            ],\n            [\n               \"ops\"\n            ]\n         ],\n         \"_add_tf_shape\": [\n            [\n               \"attr_dict\"\n            ],\n            [\n               \"ints\"\n            ]\n         ],\n         \"_blob_to_node\": [\n            [\n               \"producing_ops\"\n            ],\n            [\n               \"shapes\"\n            ],\n            [\n               \"name\"\n            ]\n         ],\n         \"_check_if_cpu\": [\n            [\n               \"blob\"\n            ]\n         ],\n         \"_check_if_forward\": [\n            [\n               \"blob\"\n            ]\n         ],\n         \"_clear_debug_info\": [\n            [\n               \"ops\"\n            ],\n            [\n               \"perform_clear\"\n            ]\n         ],\n         \"_compute_in_out\": [\n            [\n               \"ops\"\n            ]\n         ],\n         \"_convert_to_ssa\": [\n            [\n               \"shapes\"\n            ],\n            [\n               \"blob_name_tracker\"\n            ],\n            [\n               \"ops\"\n            ]\n         ],\n         \"_fill_missing_operator_names\": [\n            [\n               \"ops\"\n            ]\n         ],\n         \"_filter_ops\": [\n            [\n               \"ops\"\n            ],\n            [\n               \"filter_fn\"\n            ],\n            [\n               \"perform_filter\"\n            ]\n         ],\n         \"_get_blob_names\": [\n            [\n               \"ops\"\n            ]\n         ],\n         \"_make_unique_name\": [\n            [\n               \"seen\"\n            ],\n            [\n               \"name\"\n            ],\n            [\n               \"min_version\",\n               0\n            ]\n         ],\n         \"_operator_to_node\": [\n            [\n               \"shapes\"\n            ],\n            [\n               \"op\"\n            ]\n         ],\n         \"_operator_to_node_simp\": [\n            [\n               \"op\"\n            ],\n            [\n               \"inter_blobs\"\n            ],\n            [\n               \"seen\"\n            ]\n         ],\n         \"_operators_to_graph_def\": [\n            [\n               \"shapes\"\n            ],\n            [\n               \"ops\"\n            ],\n            [\n               \"colon_replacement\",\n               \"$\"\n            ],\n            [\n               \"with_ssa\",\n               true\n            ],\n            [\n               \"with_gradient_scope\",\n               true\n            ],\n            [\n               \"blob_name_tracker\",\n               null\n            ],\n            [\n               \"show_simplified\",\n               false\n            ],\n            [\n               \"custom_rename\",\n               null\n            ]\n         ],\n         \"_propagate_device_option\": [\n            [\n               \"net_def\"\n            ]\n         ],\n         \"_remap_keys\": [\n            [\n               \"old_dict\"\n            ],\n            [\n               \"rename_fn\"\n            ]\n         ],\n         \"_rename_all\": [\n            [\n               \"shapes\"\n            ],\n            [\n               \"blob_name_tracker\"\n            ],\n            [\n               \"ops\"\n            ],\n            [\n               \"rename_fn\"\n            ]\n         ],\n         \"_rename_tensorflow_style\": [\n            [\n               \"shapes\"\n            ],\n            [\n               \"blob_name_tracker\"\n            ],\n            [\n               \"ops\"\n            ]\n         ],\n         \"_replace_colons\": [\n            [\n               \"shapes\"\n            ],\n            [\n               \"blob_name_tracker\"\n            ],\n            [\n               \"ops\"\n            ],\n            [\n               \"repl\"\n            ]\n         ],\n         \"_set_tf_attr\": [\n            [\n               \"attr_dict\"\n            ],\n            [\n               \"arg\"\n            ]\n         ],\n         \"_tf_device\": [\n            [\n               \"device_option\"\n            ]\n         ],\n         \"_try_get_shapes\": [\n            [\n               \"nets\"\n            ]\n         ],\n         \"model_to_graph_def\": [\n            [\n               \"model\"\n            ]\n         ],\n         \"nets_to_graph_def\": [\n            [\n               \"nets\"\n            ],\n            [\n               \"shapes\",\n               null\n            ]\n         ],\n         \"protos_to_graph_def\": [\n            [\n               \"net_defs\"\n            ],\n            [\n               \"shapes\",\n               null\n            ]\n         ]\n      },\n      \"torch.utils.tensorboard._convert_np\": {\n         \"_prepare_caffe2\": [\n            [\n               \"x\"\n            ]\n         ],\n         \"_prepare_pytorch\": [\n            [\n               \"x\"\n            ]\n         ],\n         \"make_np\": [\n            [\n               \"x\"\n            ]\n         ]\n      },\n      \"torch.utils.tensorboard._embedding\": {\n         \"get_embedding_info\": [\n            [\n               \"metadata\"\n            ],\n            [\n               \"label_img\"\n            ],\n            [\n               \"filesys\"\n            ],\n            [\n               \"subdir\"\n            ],\n            [\n               \"global_step\"\n            ],\n            [\n               \"tag\"\n            ]\n         ],\n         \"make_mat\": [\n            [\n               \"matlist\"\n            ],\n            [\n               \"save_path\"\n            ]\n         ],\n         \"make_sprite\": [\n            [\n               \"label_img\"\n            ],\n            [\n               \"save_path\"\n            ]\n         ],\n         \"make_tsv\": [\n            [\n               \"metadata\"\n            ],\n            [\n               \"save_path\"\n            ],\n            [\n               \"metadata_header\",\n               null\n            ]\n         ],\n         \"write_pbtxt\": [\n            [\n               \"save_path\"\n            ],\n            [\n               \"contents\"\n            ]\n         ]\n      },\n      \"torch.utils.tensorboard._onnx_graph\": {\n         \"load_onnx_graph\": [\n            [\n               \"fname\"\n            ]\n         ],\n         \"parse\": [\n            [\n               \"graph\"\n            ]\n         ]\n      },\n      \"torch.utils.tensorboard._proto_graph\": {\n         \"attr_value_proto\": [\n            [\n               \"dtype\"\n            ],\n            [\n               \"shape\"\n            ],\n            [\n               \"s\"\n            ]\n         ],\n         \"node_proto\": [\n            [\n               \"name\"\n            ],\n            [\n               \"op\",\n               \"UnSpecified\"\n            ],\n            [\n               \"input\",\n               null\n            ],\n            [\n               \"dtype\",\n               null\n            ],\n            [\n               \"shape\",\n               null\n            ],\n            [\n               \"outputsize\",\n               null\n            ],\n            [\n               \"attributes\",\n               \"\"\n            ]\n         ],\n         \"tensor_shape_proto\": [\n            [\n               \"outputsize\"\n            ]\n         ]\n      },\n      \"torch.utils.tensorboard._pytorch_graph\": {\n         \"graph\": [\n            [\n               \"model\"\n            ],\n            [\n               \"args\"\n            ],\n            [\n               \"verbose\",\n               false\n            ]\n         ],\n         \"parse\": [\n            [\n               \"graph\"\n            ],\n            [\n               \"trace\"\n            ],\n            [\n               \"args\",\n               null\n            ],\n            [\n               \"omit_useless_nodes\",\n               true\n            ]\n         ]\n      },\n      \"torch.utils.tensorboard._utils\": {\n         \"_prepare_video\": [\n            [\n               \"V\"\n            ]\n         ],\n         \"convert_to_HWC\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"input_format\"\n            ]\n         ],\n         \"figure_to_image\": [\n            [\n               \"figures\"\n            ],\n            [\n               \"close\",\n               true\n            ]\n         ],\n         \"make_grid\": [\n            [\n               \"I\"\n            ],\n            [\n               \"ncols\",\n               8\n            ]\n         ]\n      },\n      \"torch.utils.tensorboard.summary\": {\n         \"_calc_scale_factor\": [\n            [\n               \"tensor\"\n            ]\n         ],\n         \"_draw_single_box\": [\n            [\n               \"image\"\n            ],\n            [\n               \"xmin\"\n            ],\n            [\n               \"ymin\"\n            ],\n            [\n               \"xmax\"\n            ],\n            [\n               \"ymax\"\n            ],\n            [\n               \"display_str\"\n            ],\n            [\n               \"color\",\n               \"black\"\n            ],\n            [\n               \"color_text\",\n               \"black\"\n            ],\n            [\n               \"thickness\",\n               2\n            ]\n         ],\n         \"_get_json_config\": [\n            [\n               \"config_dict\"\n            ]\n         ],\n         \"_get_tensor_summary\": [\n            [\n               \"name\"\n            ],\n            [\n               \"display_name\"\n            ],\n            [\n               \"description\"\n            ],\n            [\n               \"tensor\"\n            ],\n            [\n               \"content_type\"\n            ],\n            [\n               \"components\"\n            ],\n            [\n               \"json_config\"\n            ]\n         ],\n         \"audio\": [\n            [\n               \"tag\"\n            ],\n            [\n               \"tensor\"\n            ],\n            [\n               \"sample_rate\",\n               44100\n            ]\n         ],\n         \"compute_curve\": [\n            [\n               \"labels\"\n            ],\n            [\n               \"predictions\"\n            ],\n            [\n               \"num_thresholds\",\n               null\n            ],\n            [\n               \"weights\",\n               null\n            ]\n         ],\n         \"custom_scalars\": [\n            [\n               \"layout\"\n            ]\n         ],\n         \"draw_boxes\": [\n            [\n               \"disp_image\"\n            ],\n            [\n               \"boxes\"\n            ]\n         ],\n         \"histogram\": [\n            [\n               \"name\"\n            ],\n            [\n               \"values\"\n            ],\n            [\n               \"bins\"\n            ],\n            [\n               \"max_bins\",\n               null\n            ]\n         ],\n         \"histogram_raw\": [\n            [\n               \"name\"\n            ],\n            [\n               \"min\"\n            ],\n            [\n               \"max\"\n            ],\n            [\n               \"num\"\n            ],\n            [\n               \"sum\"\n            ],\n            [\n               \"sum_squares\"\n            ],\n            [\n               \"bucket_limits\"\n            ],\n            [\n               \"bucket_counts\"\n            ]\n         ],\n         \"hparams\": [\n            [\n               \"hparam_dict\",\n               null\n            ],\n            [\n               \"metric_dict\",\n               null\n            ]\n         ],\n         \"image\": [\n            [\n               \"tag\"\n            ],\n            [\n               \"tensor\"\n            ],\n            [\n               \"rescale\",\n               1\n            ],\n            [\n               \"dataformats\",\n               \"NCHW\"\n            ]\n         ],\n         \"image_boxes\": [\n            [\n               \"tag\"\n            ],\n            [\n               \"tensor_image\"\n            ],\n            [\n               \"tensor_boxes\"\n            ],\n            [\n               \"rescale\",\n               1\n            ],\n            [\n               \"dataformats\",\n               \"CHW\"\n            ]\n         ],\n         \"make_histogram\": [\n            [\n               \"values\"\n            ],\n            [\n               \"bins\"\n            ],\n            [\n               \"max_bins\",\n               null\n            ]\n         ],\n         \"make_image\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"rescale\",\n               1\n            ],\n            [\n               \"rois\",\n               null\n            ]\n         ],\n         \"make_video\": [\n            [\n               \"tensor\"\n            ],\n            [\n               \"fps\"\n            ]\n         ],\n         \"mesh\": [\n            [\n               \"tag\"\n            ],\n            [\n               \"vertices\"\n            ],\n            [\n               \"colors\"\n            ],\n            [\n               \"faces\"\n            ],\n            [\n               \"config_dict\"\n            ],\n            [\n               \"display_name\",\n               null\n            ],\n            [\n               \"description\",\n               null\n            ]\n         ],\n         \"pr_curve\": [\n            [\n               \"tag\"\n            ],\n            [\n               \"labels\"\n            ],\n            [\n               \"predictions\"\n            ],\n            [\n               \"num_thresholds\",\n               127\n            ],\n            [\n               \"weights\",\n               null\n            ]\n         ],\n         \"pr_curve_raw\": [\n            [\n               \"tag\"\n            ],\n            [\n               \"tp\"\n            ],\n            [\n               \"fp\"\n            ],\n            [\n               \"tn\"\n            ],\n            [\n               \"fn\"\n            ],\n            [\n               \"precision\"\n            ],\n            [\n               \"recall\"\n            ],\n            [\n               \"num_thresholds\",\n               127\n            ],\n            [\n               \"weights\",\n               null\n            ]\n         ],\n         \"scalar\": [\n            [\n               \"name\"\n            ],\n            [\n               \"scalar\"\n            ],\n            [\n               \"collections\",\n               null\n            ]\n         ],\n         \"text\": [\n            [\n               \"tag\"\n            ],\n            [\n               \"text\"\n            ]\n         ],\n         \"video\": [\n            [\n               \"tag\"\n            ],\n            [\n               \"tensor\"\n            ],\n            [\n               \"fps\",\n               4\n            ]\n         ]\n      },\n      \"torch.utils.throughput_benchmark\": {\n         \"format_time\": [\n            [\n               \"time_us\",\n               null\n            ],\n            [\n               \"time_ms\",\n               null\n            ],\n            [\n               \"time_s\",\n               null\n            ]\n         ]\n      }\n   },\n   \"method\": {\n      \"torch._VF\": {\n         \"VFModule\": {\n            \"__getattr__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"attr\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"name\"\n               ]\n            ]\n         }\n      },\n      \"torch._classes\": {\n         \"_ClassNamespace\": {\n            \"__getattr__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"attr\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"name\"\n               ]\n            ]\n         },\n         \"_Classes\": {\n            \"__getattr__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"name\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"load_library\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"path\"\n               ]\n            ],\n            \"loaded_libraries\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch._jit_internal\": {\n         \"BroadcastingListCls\": {\n            \"__getitem__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"types\"\n               ]\n            ]\n         },\n         \"DictCls\": {\n            \"__getitem__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"types\"\n               ]\n            ]\n         },\n         \"DictInstance\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"types\"\n               ]\n            ]\n         },\n         \"FinalCls\": {\n            \"__getitem__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"types\"\n               ]\n            ]\n         },\n         \"FinalInstance\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"types\"\n               ]\n            ]\n         },\n         \"ListCls\": {\n            \"__getitem__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"types\"\n               ]\n            ]\n         },\n         \"ListInstance\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"types\"\n               ]\n            ]\n         },\n         \"OptionalCls\": {\n            \"__getitem__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"types\"\n               ]\n            ]\n         },\n         \"OptionalInstance\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"types\"\n               ]\n            ]\n         },\n         \"RRef\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"types\"\n               ]\n            ]\n         },\n         \"RRefCls\": {\n            \"__getitem__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"types\"\n               ]\n            ]\n         },\n         \"RRefInstance\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"types\"\n               ]\n            ]\n         },\n         \"SourceContext\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"source\"\n               ],\n               [\n                  \"filename\"\n               ],\n               [\n                  \"file_lineno\"\n               ],\n               [\n                  \"leading_whitespace_len\"\n               ],\n               [\n                  \"uses_true_division\",\n                  true\n               ]\n            ]\n         },\n         \"TupleCls\": {\n            \"__getitem__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"types\"\n               ]\n            ]\n         },\n         \"TupleInstance\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"types\"\n               ]\n            ]\n         }\n      },\n      \"torch._lobpcg\": {\n         \"LOBPCG\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"A\"\n               ],\n               [\n                  \"B\"\n               ],\n               [\n                  \"X\"\n               ],\n               [\n                  \"iK\"\n               ],\n               [\n                  \"iparams\"\n               ],\n               [\n                  \"fparams\"\n               ],\n               [\n                  \"bparams\"\n               ],\n               [\n                  \"method\"\n               ],\n               [\n                  \"tracker\"\n               ]\n            ],\n            \"__str__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_get_ortho\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"U\"\n               ],\n               [\n                  \"V\"\n               ]\n            ],\n            \"_get_rayleigh_ritz_transform\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"S\"\n               ]\n            ],\n            \"_get_svqb\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"U\"\n               ],\n               [\n                  \"drop\"\n               ],\n               [\n                  \"tau\"\n               ]\n            ],\n            \"_update_basic\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_update_ortho\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"call_tracker\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"run\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"stop_iteration\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"update\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"update_converged_count\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"update_residual\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch._ops\": {\n         \"_OpNamespace\": {\n            \"__getattr__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"op_name\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"name\"\n               ]\n            ]\n         },\n         \"_Ops\": {\n            \"__getattr__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"name\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"load_library\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"path\"\n               ]\n            ]\n         }\n      },\n      \"torch._tensor_str\": {\n         \"_Formatter\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"tensor\"\n               ]\n            ],\n            \"format\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"width\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch._utils\": {\n         \"ExceptionWrapper\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"exc_info\",\n                  null\n               ],\n               [\n                  \"where\",\n                  \"in background\"\n               ]\n            ],\n            \"reraise\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"KeyErrorMessage\": {\n            \"__repr__\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.autograd._functions.tensor\": {\n         \"Resize\": {\n            \"backward\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"grad_output\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"tensor\"\n               ],\n               [\n                  \"sizes\"\n               ]\n            ]\n         },\n         \"Type\": {\n            \"backward\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"grad_output\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"i\"\n               ],\n               [\n                  \"dest_type\"\n               ]\n            ]\n         }\n      },\n      \"torch.autograd.anomaly_mode\": {\n         \"detect_anomaly\": {\n            \"__enter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__exit__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"set_detect_anomaly\": {\n            \"__enter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__exit__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"mode\"\n               ]\n            ]\n         }\n      },\n      \"torch.autograd.function\": {\n         \"BackwardCFunction\": {\n            \"apply\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"Function\": {\n            \"__call__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"backward\": [\n               [\n                  \"ctx\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"ctx\"\n               ]\n            ]\n         },\n         \"FunctionMeta\": {\n            \"__init__\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"name\"\n               ],\n               [\n                  \"bases\"\n               ],\n               [\n                  \"attrs\"\n               ]\n            ]\n         },\n         \"InplaceFunction\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"inplace\",\n                  false\n               ]\n            ]\n         },\n         \"NestedIOFunction\": {\n            \"_do_backward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"gradients\"\n               ],\n               [\n                  \"retain_variables\"\n               ]\n            ],\n            \"_do_forward\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"backward\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"backward_extended\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward_extended\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"mark_dirty\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"mark_non_differentiable\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"save_for_backward\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"saved_tensors\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"_ContextMethodMixin\": {\n            \"mark_dirty\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"mark_non_differentiable\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"mark_shared_storage\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"save_for_backward\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"_HookMixin\": {\n            \"_register_hook\": [\n               [\n                  \"backward_hooks\"\n               ],\n               [\n                  \"hook\"\n               ]\n            ]\n         }\n      },\n      \"torch.autograd.grad_mode\": {\n         \"_DecoratorContextManager\": {\n            \"__call__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"func\"\n               ]\n            ],\n            \"_wrap_generator\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"func\"\n               ]\n            ]\n         },\n         \"enable_grad\": {\n            \"__enter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__exit__\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"no_grad\": {\n            \"__enter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__exit__\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"set_grad_enabled\": {\n            \"__enter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__exit__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"mode\"\n               ]\n            ]\n         }\n      },\n      \"torch.autograd.profiler\": {\n         \"ContextDecorator\": {\n            \"__call__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"func\"\n               ]\n            ]\n         },\n         \"EnforceUnique\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"see\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"EventList\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__str__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"cpu_children_populated\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"export_chrome_trace\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"path\"\n               ]\n            ],\n            \"key_averages\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"group_by_input_shapes\",\n                  false\n               ]\n            ],\n            \"populate_cpu_children\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"self_cpu_time_total\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"table\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sort_by\",\n                  null\n               ],\n               [\n                  \"row_limit\",\n                  100\n               ],\n               [\n                  \"header\",\n                  null\n               ]\n            ],\n            \"total_average\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"FormattedTimesMixin\": {\n            \"cpu_time\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"cuda_time\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"FunctionEvent\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"id\"\n               ],\n               [\n                  \"name\"\n               ],\n               [\n                  \"thread\"\n               ],\n               [\n                  \"cpu_start\"\n               ],\n               [\n                  \"cpu_end\"\n               ],\n               [\n                  \"input_shapes\",\n                  null\n               ]\n            ],\n            \"__repr__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"append_cpu_child\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"child\"\n               ]\n            ],\n            \"append_kernel\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"name\"\n               ],\n               [\n                  \"device\"\n               ],\n               [\n                  \"start\"\n               ],\n               [\n                  \"end\"\n               ]\n            ],\n            \"cpu_time_total\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"cuda_time_total\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"key\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"self_cpu_time_total\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"FunctionEventAvg\": {\n            \"__iadd__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"other\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__repr__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"add\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"other\"\n               ],\n               [\n                  \"group_by_input_shapes\",\n                  false\n               ]\n            ]\n         },\n         \"Interval\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"start\"\n               ],\n               [\n                  \"end\"\n               ]\n            ],\n            \"elapsed_us\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"StringTable\": {\n            \"__missing__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"key\"\n               ]\n            ]\n         },\n         \"emit_nvtx\": {\n            \"__enter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__exit__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"exc_type\"\n               ],\n               [\n                  \"exc_val\"\n               ],\n               [\n                  \"exc_tb\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"enabled\",\n                  true\n               ],\n               [\n                  \"record_shapes\",\n                  false\n               ]\n            ]\n         },\n         \"profile\": {\n            \"__enter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__exit__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"exc_type\"\n               ],\n               [\n                  \"exc_val\"\n               ],\n               [\n                  \"exc_tb\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"enabled\",\n                  true\n               ],\n               [\n                  \"use_cuda\",\n                  false\n               ],\n               [\n                  \"record_shapes\",\n                  false\n               ]\n            ],\n            \"__repr__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__str__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_check_finish\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"export_chrome_trace\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"path\"\n               ]\n            ],\n            \"key_averages\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"group_by_input_shape\",\n                  false\n               ]\n            ],\n            \"self_cpu_time_total\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"table\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sort_by\",\n                  null\n               ],\n               [\n                  \"row_limit\",\n                  100\n               ],\n               [\n                  \"header\",\n                  null\n               ]\n            ],\n            \"total_average\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"record_function\": {\n            \"__enter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__exit__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"name\"\n               ]\n            ]\n         }\n      },\n      \"torch.autograd.variable\": {\n         \"VariableMeta\": {\n            \"__instancecheck__\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"other\"\n               ]\n            ]\n         }\n      },\n      \"torch.backends.__init__\": {\n         \"ContextProp\": {\n            \"__get__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"obj\"\n               ],\n               [\n                  \"objtype\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"getter\"\n               ],\n               [\n                  \"setter\"\n               ]\n            ],\n            \"__set__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"obj\"\n               ],\n               [\n                  \"val\"\n               ]\n            ]\n         },\n         \"PropModule\": {\n            \"__getattr__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"attr\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"m\"\n               ],\n               [\n                  \"name\"\n               ]\n            ]\n         }\n      },\n      \"torch.backends.cuda.__init__\": {\n         \"CUDAModule\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"m\"\n               ]\n            ]\n         },\n         \"cuFFTPlanCache\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"device_index\"\n               ]\n            ],\n            \"clear\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"cuFFTPlanCacheAttrContextProp\": {\n            \"__get__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"obj\"\n               ],\n               [\n                  \"objtype\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"getter\"\n               ],\n               [\n                  \"setter\"\n               ]\n            ],\n            \"__set__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"obj\"\n               ],\n               [\n                  \"val\"\n               ]\n            ]\n         },\n         \"cuFFTPlanCacheManager\": {\n            \"__getattr__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"name\"\n               ]\n            ],\n            \"__getitem__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"device\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__setattr__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"name\"\n               ],\n               [\n                  \"value\"\n               ]\n            ]\n         }\n      },\n      \"torch.backends.cudnn.__init__\": {\n         \"CudnnModule\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"m\"\n               ],\n               [\n                  \"name\"\n               ]\n            ]\n         }\n      },\n      \"torch.backends.cudnn.rnn\": {\n         \"Unserializable\": {\n            \"__getstate__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"inner\"\n               ]\n            ],\n            \"__setstate__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state\"\n               ]\n            ],\n            \"get\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.backends.mkldnn.__init__\": {\n         \"MkldnnModule\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"m\"\n               ],\n               [\n                  \"name\"\n               ]\n            ]\n         }\n      },\n      \"torch.backends.quantized.__init__\": {\n         \"QuantizedEngine\": {\n            \"__getattr__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"attr\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"m\"\n               ],\n               [\n                  \"name\"\n               ]\n            ]\n         },\n         \"_QEngineProp\": {\n            \"__get__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"obj\"\n               ],\n               [\n                  \"objtype\"\n               ]\n            ],\n            \"__set__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"obj\"\n               ],\n               [\n                  \"val\"\n               ]\n            ]\n         },\n         \"_SupportedQEnginesProp\": {\n            \"__get__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"obj\"\n               ],\n               [\n                  \"objtype\"\n               ]\n            ],\n            \"__set__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"obj\"\n               ],\n               [\n                  \"val\"\n               ]\n            ]\n         }\n      },\n      \"torch.backends.xnnpack.__init__\": {\n         \"XNNPACKEngine\": {\n            \"__getattr__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"attr\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"m\"\n               ],\n               [\n                  \"name\"\n               ]\n            ]\n         },\n         \"_XNNPACKEnabled\": {\n            \"__get__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"obj\"\n               ],\n               [\n                  \"objtype\"\n               ]\n            ],\n            \"__set__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"obj\"\n               ],\n               [\n                  \"val\"\n               ]\n            ]\n         }\n      },\n      \"torch.cuda.__init__\": {\n         \"CudaError\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"code\"\n               ]\n            ]\n         },\n         \"_CudaBase\": {\n            \"type\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"device\": {\n            \"__enter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__exit__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"device\"\n               ]\n            ]\n         },\n         \"device_of\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"obj\"\n               ]\n            ]\n         }\n      },\n      \"torch.cuda.amp.grad_scaler\": {\n         \"GradScaler\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"init_scale\",\n                  {\n                     \"col_offset\": 28,\n                     \"lineno\": 92,\n                     \"n\": 2.0\n                  }\n               ],\n               [\n                  \"growth_factor\",\n                  2.0\n               ],\n               [\n                  \"backoff_factor\",\n                  0.5\n               ],\n               [\n                  \"growth_interval\",\n                  2000\n               ],\n               [\n                  \"enabled\",\n                  true\n               ]\n            ],\n            \"_check_inf_per_device\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"optimizer\"\n               ]\n            ],\n            \"_check_scale_growth_tracker\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"funcname\"\n               ]\n            ],\n            \"_found_inf_per_device\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"optimizer\"\n               ]\n            ],\n            \"_get_growth_tracker\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_get_scale_async\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_lazy_init_scale_growth_tracker\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"dev\"\n               ]\n            ],\n            \"_unscale_grads_\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"optimizer\"\n               ],\n               [\n                  \"inv_scale\"\n               ],\n               [\n                  \"found_inf\"\n               ],\n               [\n                  \"allow_fp16\"\n               ]\n            ],\n            \"get_backoff_factor\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"get_growth_factor\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"get_growth_interval\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"get_scale\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"is_enabled\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"load_state_dict\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state_dict\"\n               ]\n            ],\n            \"scale\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"outputs\"\n               ]\n            ],\n            \"set_backoff_factor\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"new_factor\"\n               ]\n            ],\n            \"set_growth_factor\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"new_factor\"\n               ]\n            ],\n            \"set_growth_interval\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"new_interval\"\n               ]\n            ],\n            \"state_dict\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"step\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"optimizer\"\n               ]\n            ],\n            \"unscale_\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"optimizer\"\n               ]\n            ],\n            \"update\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"new_scale\",\n                  null\n               ]\n            ]\n         },\n         \"_MultiDeviceReplicator\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"master_tensor\"\n               ]\n            ],\n            \"get\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"device\"\n               ]\n            ]\n         }\n      },\n      \"torch.cuda.nvtx\": {\n         \"_NVTXStub\": {\n            \"_fail\": []\n         }\n      },\n      \"torch.cuda.streams\": {\n         \"Event\": {\n            \"__new__\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"enable_timing\",\n                  false\n               ],\n               [\n                  \"blocking\",\n                  false\n               ],\n               [\n                  \"interprocess\",\n                  false\n               ]\n            ],\n            \"__repr__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_as_parameter_\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"elapsed_time\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"end_event\"\n               ]\n            ],\n            \"from_ipc_handle\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"device\"\n               ],\n               [\n                  \"handle\"\n               ]\n            ],\n            \"ipc_handle\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"query\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"record\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"stream\",\n                  null\n               ]\n            ],\n            \"synchronize\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"wait\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"stream\",\n                  null\n               ]\n            ]\n         },\n         \"Stream\": {\n            \"__eq__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"o\"\n               ]\n            ],\n            \"__hash__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__new__\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"device\",\n                  null\n               ],\n               [\n                  \"priority\",\n                  0\n               ]\n            ],\n            \"__repr__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_as_parameter_\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"query\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"record_event\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"event\",\n                  null\n               ]\n            ],\n            \"synchronize\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"wait_event\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"event\"\n               ]\n            ],\n            \"wait_stream\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"stream\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributed.autograd.__init__\": {\n         \"context\": {\n            \"__enter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__exit__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"type\"\n               ],\n               [\n                  \"value\"\n               ],\n               [\n                  \"traceback\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributed.distributed_c10d\": {\n         \"Backend\": {\n            \"__new__\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"name\"\n               ]\n            ]\n         },\n         \"reduce_op\": {\n            \"__getattribute__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"key\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributed.optim.optimizer\": {\n         \"DistributedOptimizer\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"optimizer_class\"\n               ],\n               [\n                  \"params_rref\"\n               ]\n            ],\n            \"step\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"context_id\"\n               ]\n            ]\n         },\n         \"_LocalOptimizer\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"optim_cls\"\n               ],\n               [\n                  \"local_params_rref\"\n               ]\n            ],\n            \"step\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"autograd_ctx_id\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributed.rpc.api\": {\n         \"WaitAllWorkersStates\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributed.rpc.internal\": {\n         \"_InternalRPCPickler\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_rref_receiver\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"rref_fork_data\"\n               ]\n            ],\n            \"_rref_reducer\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"rref\"\n               ]\n            ],\n            \"_tensor_receiver\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"tensor_index\"\n               ]\n            ],\n            \"_tensor_reducer\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"tensor\"\n               ]\n            ],\n            \"deserialize\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"binary_data\"\n               ],\n               [\n                  \"tensor_table\"\n               ]\n            ],\n            \"serialize\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"obj\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.bernoulli\": {\n         \"Bernoulli\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"probs\",\n                  null\n               ],\n               [\n                  \"logits\",\n                  null\n               ],\n               [\n                  \"validate_args\",\n                  null\n               ]\n            ],\n            \"_log_normalizer\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ],\n            \"_natural_params\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_new\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"entropy\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"enumerate_support\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"expand\",\n                  true\n               ]\n            ],\n            \"expand\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\"\n               ],\n               [\n                  \"_instance\",\n                  null\n               ]\n            ],\n            \"log_prob\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"logits\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"mean\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"param_shape\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"probs\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"sample\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sample_shape\",\n                  {\n                     \"attr\": \"Size\",\n                     \"col_offset\": 34,\n                     \"ctx\": {},\n                     \"lineno\": 86,\n                     \"value\": {\n                        \"col_offset\": 34,\n                        \"ctx\": {},\n                        \"id\": \"torch\",\n                        \"lineno\": 86\n                     }\n                  }\n               ]\n            ],\n            \"variance\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.beta\": {\n         \"Beta\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"concentration1\"\n               ],\n               [\n                  \"concentration0\"\n               ],\n               [\n                  \"validate_args\",\n                  null\n               ]\n            ],\n            \"_log_normalizer\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ],\n               [\n                  \"y\"\n               ]\n            ],\n            \"_natural_params\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"concentration0\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"concentration1\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"entropy\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"expand\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\"\n               ],\n               [\n                  \"_instance\",\n                  null\n               ]\n            ],\n            \"log_prob\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"mean\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"rsample\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sample_shape\",\n                  []\n               ]\n            ],\n            \"variance\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.binomial\": {\n         \"Binomial\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"total_count\",\n                  1\n               ],\n               [\n                  \"probs\",\n                  null\n               ],\n               [\n                  \"logits\",\n                  null\n               ],\n               [\n                  \"validate_args\",\n                  null\n               ]\n            ],\n            \"_new\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"enumerate_support\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"expand\",\n                  true\n               ]\n            ],\n            \"expand\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\"\n               ],\n               [\n                  \"_instance\",\n                  null\n               ]\n            ],\n            \"log_prob\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"logits\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"mean\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"param_shape\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"probs\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"sample\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sample_shape\",\n                  {\n                     \"attr\": \"Size\",\n                     \"col_offset\": 34,\n                     \"ctx\": {},\n                     \"lineno\": 100,\n                     \"value\": {\n                        \"col_offset\": 34,\n                        \"ctx\": {},\n                        \"id\": \"torch\",\n                        \"lineno\": 100\n                     }\n                  }\n               ]\n            ],\n            \"support\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"variance\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.categorical\": {\n         \"Categorical\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"probs\",\n                  null\n               ],\n               [\n                  \"logits\",\n                  null\n               ],\n               [\n                  \"validate_args\",\n                  null\n               ]\n            ],\n            \"_new\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"entropy\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"enumerate_support\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"expand\",\n                  true\n               ]\n            ],\n            \"expand\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\"\n               ],\n               [\n                  \"_instance\",\n                  null\n               ]\n            ],\n            \"log_prob\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"logits\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"mean\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"param_shape\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"probs\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"sample\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sample_shape\",\n                  {\n                     \"attr\": \"Size\",\n                     \"col_offset\": 34,\n                     \"ctx\": {},\n                     \"lineno\": 102,\n                     \"value\": {\n                        \"col_offset\": 34,\n                        \"ctx\": {},\n                        \"id\": \"torch\",\n                        \"lineno\": 102\n                     }\n                  }\n               ]\n            ],\n            \"support\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"variance\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.cauchy\": {\n         \"Cauchy\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"loc\"\n               ],\n               [\n                  \"scale\"\n               ],\n               [\n                  \"validate_args\",\n                  null\n               ]\n            ],\n            \"cdf\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"entropy\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"expand\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\"\n               ],\n               [\n                  \"_instance\",\n                  null\n               ]\n            ],\n            \"icdf\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"log_prob\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"mean\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"rsample\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sample_shape\",\n                  {\n                     \"attr\": \"Size\",\n                     \"col_offset\": 35,\n                     \"ctx\": {},\n                     \"lineno\": 56,\n                     \"value\": {\n                        \"col_offset\": 35,\n                        \"ctx\": {},\n                        \"id\": \"torch\",\n                        \"lineno\": 56\n                     }\n                  }\n               ]\n            ],\n            \"variance\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.chi2\": {\n         \"Chi2\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"df\"\n               ],\n               [\n                  \"validate_args\",\n                  null\n               ]\n            ],\n            \"df\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"expand\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\"\n               ],\n               [\n                  \"_instance\",\n                  null\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.constraint_registry\": {\n         \"ConstraintRegistry\": {\n            \"__call__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"constraint\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"register\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"constraint\"\n               ],\n               [\n                  \"factory\",\n                  null\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.constraints\": {\n         \"Constraint\": {\n            \"__repr__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"check\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ]\n         },\n         \"_Boolean\": {\n            \"check\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ]\n         },\n         \"_Cat\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"cseq\"\n               ],\n               [\n                  \"dim\",\n                  0\n               ],\n               [\n                  \"lengths\",\n                  null\n               ]\n            ],\n            \"check\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ]\n         },\n         \"_Dependent\": {\n            \"check\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ]\n         },\n         \"_GreaterThan\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"lower_bound\"\n               ]\n            ],\n            \"__repr__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"check\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ]\n         },\n         \"_GreaterThanEq\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"lower_bound\"\n               ]\n            ],\n            \"__repr__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"check\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ]\n         },\n         \"_HalfOpenInterval\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"lower_bound\"\n               ],\n               [\n                  \"upper_bound\"\n               ]\n            ],\n            \"__repr__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"check\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ]\n         },\n         \"_IntegerGreaterThan\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"lower_bound\"\n               ]\n            ],\n            \"__repr__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"check\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ]\n         },\n         \"_IntegerInterval\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"lower_bound\"\n               ],\n               [\n                  \"upper_bound\"\n               ]\n            ],\n            \"__repr__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"check\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ]\n         },\n         \"_IntegerLessThan\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"upper_bound\"\n               ]\n            ],\n            \"__repr__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"check\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ]\n         },\n         \"_Interval\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"lower_bound\"\n               ],\n               [\n                  \"upper_bound\"\n               ]\n            ],\n            \"__repr__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"check\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ]\n         },\n         \"_LessThan\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"upper_bound\"\n               ]\n            ],\n            \"__repr__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"check\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ]\n         },\n         \"_LowerCholesky\": {\n            \"check\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ]\n         },\n         \"_LowerTriangular\": {\n            \"check\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ]\n         },\n         \"_PositiveDefinite\": {\n            \"check\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ]\n         },\n         \"_Real\": {\n            \"check\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ]\n         },\n         \"_RealVector\": {\n            \"check\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ]\n         },\n         \"_Simplex\": {\n            \"check\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ]\n         },\n         \"_Stack\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"cseq\"\n               ],\n               [\n                  \"dim\",\n                  0\n               ]\n            ],\n            \"check\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.continuous_bernoulli\": {\n         \"ContinuousBernoulli\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"probs\",\n                  null\n               ],\n               [\n                  \"logits\",\n                  null\n               ],\n               [\n                  \"lims\",\n                  [\n                     {\n                        \"col_offset\": 54,\n                        \"lineno\": 42,\n                        \"n\": 0.499\n                     },\n                     {\n                        \"col_offset\": 61,\n                        \"lineno\": 42,\n                        \"n\": 0.501\n                     }\n                  ]\n               ],\n               [\n                  \"validate_args\",\n                  null\n               ]\n            ],\n            \"_cont_bern_log_norm\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_cut_probs\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_log_normalizer\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ],\n            \"_natural_params\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_new\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_outside_unstable_region\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"cdf\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"entropy\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"expand\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\"\n               ],\n               [\n                  \"_instance\",\n                  null\n               ]\n            ],\n            \"icdf\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"log_prob\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"logits\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"mean\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"param_shape\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"probs\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"rsample\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sample_shape\",\n                  {\n                     \"attr\": \"Size\",\n                     \"col_offset\": 35,\n                     \"ctx\": {},\n                     \"lineno\": 147,\n                     \"value\": {\n                        \"col_offset\": 35,\n                        \"ctx\": {},\n                        \"id\": \"torch\",\n                        \"lineno\": 147\n                     }\n                  }\n               ]\n            ],\n            \"sample\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sample_shape\",\n                  {\n                     \"attr\": \"Size\",\n                     \"col_offset\": 34,\n                     \"ctx\": {},\n                     \"lineno\": 141,\n                     \"value\": {\n                        \"col_offset\": 34,\n                        \"ctx\": {},\n                        \"id\": \"torch\",\n                        \"lineno\": 141\n                     }\n                  }\n               ]\n            ],\n            \"stddev\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"variance\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.dirichlet\": {\n         \"Dirichlet\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"concentration\"\n               ],\n               [\n                  \"validate_args\",\n                  null\n               ]\n            ],\n            \"_log_normalizer\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ],\n            \"_natural_params\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"entropy\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"expand\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\"\n               ],\n               [\n                  \"_instance\",\n                  null\n               ]\n            ],\n            \"log_prob\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"mean\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"rsample\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sample_shape\",\n                  []\n               ]\n            ],\n            \"variance\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"_Dirichlet\": {\n            \"backward\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"grad_output\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"concentration\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.distribution\": {\n         \"Distribution\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\",\n                  {\n                     \"attr\": \"Size\",\n                     \"col_offset\": 35,\n                     \"ctx\": {},\n                     \"lineno\": 24,\n                     \"value\": {\n                        \"col_offset\": 35,\n                        \"ctx\": {},\n                        \"id\": \"torch\",\n                        \"lineno\": 24\n                     }\n                  }\n               ],\n               [\n                  \"event_shape\",\n                  {\n                     \"attr\": \"Size\",\n                     \"col_offset\": 61,\n                     \"ctx\": {},\n                     \"lineno\": 24,\n                     \"value\": {\n                        \"col_offset\": 61,\n                        \"ctx\": {},\n                        \"id\": \"torch\",\n                        \"lineno\": 24\n                     }\n                  }\n               ],\n               [\n                  \"validate_args\",\n                  null\n               ]\n            ],\n            \"__repr__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_extended_shape\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sample_shape\",\n                  {\n                     \"attr\": \"Size\",\n                     \"col_offset\": 43,\n                     \"ctx\": {},\n                     \"lineno\": 209,\n                     \"value\": {\n                        \"col_offset\": 43,\n                        \"ctx\": {},\n                        \"id\": \"torch\",\n                        \"lineno\": 209\n                     }\n                  }\n               ]\n            ],\n            \"_get_checked_instance\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"cls\"\n               ],\n               [\n                  \"_instance\",\n                  null\n               ]\n            ],\n            \"_validate_sample\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"arg_constraints\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"batch_shape\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"cdf\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"entropy\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"enumerate_support\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"expand\",\n                  true\n               ]\n            ],\n            \"event_shape\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"expand\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\"\n               ],\n               [\n                  \"_instance\",\n                  null\n               ]\n            ],\n            \"icdf\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"log_prob\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"mean\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"perplexity\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"rsample\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sample_shape\",\n                  {\n                     \"attr\": \"Size\",\n                     \"col_offset\": 35,\n                     \"ctx\": {},\n                     \"lineno\": 121,\n                     \"value\": {\n                        \"col_offset\": 35,\n                        \"ctx\": {},\n                        \"id\": \"torch\",\n                        \"lineno\": 121\n                     }\n                  }\n               ]\n            ],\n            \"sample\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sample_shape\",\n                  {\n                     \"attr\": \"Size\",\n                     \"col_offset\": 34,\n                     \"ctx\": {},\n                     \"lineno\": 113,\n                     \"value\": {\n                        \"col_offset\": 34,\n                        \"ctx\": {},\n                        \"id\": \"torch\",\n                        \"lineno\": 113\n                     }\n                  }\n               ]\n            ],\n            \"sample_n\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"n\"\n               ]\n            ],\n            \"set_default_validate_args\": [\n               [\n                  \"value\"\n               ]\n            ],\n            \"stddev\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"support\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"variance\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.exp_family\": {\n         \"ExponentialFamily\": {\n            \"_log_normalizer\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_mean_carrier_measure\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_natural_params\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"entropy\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.exponential\": {\n         \"Exponential\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"rate\"\n               ],\n               [\n                  \"validate_args\",\n                  null\n               ]\n            ],\n            \"_log_normalizer\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ],\n            \"_natural_params\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"cdf\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"entropy\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"expand\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\"\n               ],\n               [\n                  \"_instance\",\n                  null\n               ]\n            ],\n            \"icdf\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"log_prob\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"mean\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"rsample\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sample_shape\",\n                  {\n                     \"attr\": \"Size\",\n                     \"col_offset\": 35,\n                     \"ctx\": {},\n                     \"lineno\": 52,\n                     \"value\": {\n                        \"col_offset\": 35,\n                        \"ctx\": {},\n                        \"id\": \"torch\",\n                        \"lineno\": 52\n                     }\n                  }\n               ]\n            ],\n            \"stddev\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"variance\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.fishersnedecor\": {\n         \"FisherSnedecor\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"df1\"\n               ],\n               [\n                  \"df2\"\n               ],\n               [\n                  \"validate_args\",\n                  null\n               ]\n            ],\n            \"expand\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\"\n               ],\n               [\n                  \"_instance\",\n                  null\n               ]\n            ],\n            \"log_prob\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"mean\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"rsample\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sample_shape\",\n                  {\n                     \"attr\": \"Size\",\n                     \"col_offset\": 35,\n                     \"ctx\": {},\n                     \"lineno\": 62,\n                     \"value\": {\n                        \"col_offset\": 35,\n                        \"ctx\": {},\n                        \"id\": \"torch\",\n                        \"lineno\": 62\n                     }\n                  }\n               ]\n            ],\n            \"variance\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.gamma\": {\n         \"Gamma\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"concentration\"\n               ],\n               [\n                  \"rate\"\n               ],\n               [\n                  \"validate_args\",\n                  null\n               ]\n            ],\n            \"_log_normalizer\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ],\n               [\n                  \"y\"\n               ]\n            ],\n            \"_natural_params\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"entropy\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"expand\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\"\n               ],\n               [\n                  \"_instance\",\n                  null\n               ]\n            ],\n            \"log_prob\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"mean\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"rsample\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sample_shape\",\n                  {\n                     \"attr\": \"Size\",\n                     \"col_offset\": 35,\n                     \"ctx\": {},\n                     \"lineno\": 59,\n                     \"value\": {\n                        \"col_offset\": 35,\n                        \"ctx\": {},\n                        \"id\": \"torch\",\n                        \"lineno\": 59\n                     }\n                  }\n               ]\n            ],\n            \"variance\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.geometric\": {\n         \"Geometric\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"probs\",\n                  null\n               ],\n               [\n                  \"logits\",\n                  null\n               ],\n               [\n                  \"validate_args\",\n                  null\n               ]\n            ],\n            \"entropy\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"expand\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\"\n               ],\n               [\n                  \"_instance\",\n                  null\n               ]\n            ],\n            \"log_prob\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"logits\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"mean\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"probs\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"sample\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sample_shape\",\n                  {\n                     \"attr\": \"Size\",\n                     \"col_offset\": 34,\n                     \"ctx\": {},\n                     \"lineno\": 76,\n                     \"value\": {\n                        \"col_offset\": 34,\n                        \"ctx\": {},\n                        \"id\": \"torch\",\n                        \"lineno\": 76\n                     }\n                  }\n               ]\n            ],\n            \"variance\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.gumbel\": {\n         \"Gumbel\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"loc\"\n               ],\n               [\n                  \"scale\"\n               ],\n               [\n                  \"validate_args\",\n                  null\n               ]\n            ],\n            \"entropy\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"expand\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\"\n               ],\n               [\n                  \"_instance\",\n                  null\n               ]\n            ],\n            \"log_prob\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"mean\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"stddev\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"variance\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.half_cauchy\": {\n         \"HalfCauchy\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"scale\"\n               ],\n               [\n                  \"validate_args\",\n                  null\n               ]\n            ],\n            \"cdf\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"entropy\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"expand\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\"\n               ],\n               [\n                  \"_instance\",\n                  null\n               ]\n            ],\n            \"icdf\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"prob\"\n               ]\n            ],\n            \"log_prob\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"mean\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"scale\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"variance\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.half_normal\": {\n         \"HalfNormal\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"scale\"\n               ],\n               [\n                  \"validate_args\",\n                  null\n               ]\n            ],\n            \"cdf\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"entropy\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"expand\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\"\n               ],\n               [\n                  \"_instance\",\n                  null\n               ]\n            ],\n            \"icdf\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"prob\"\n               ]\n            ],\n            \"log_prob\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"mean\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"scale\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"variance\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.independent\": {\n         \"Independent\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"base_distribution\"\n               ],\n               [\n                  \"reinterpreted_batch_ndims\"\n               ],\n               [\n                  \"validate_args\",\n                  null\n               ]\n            ],\n            \"__repr__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"entropy\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"enumerate_support\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"expand\",\n                  true\n               ]\n            ],\n            \"expand\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\"\n               ],\n               [\n                  \"_instance\",\n                  null\n               ]\n            ],\n            \"has_enumerate_support\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"has_rsample\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"log_prob\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"mean\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"rsample\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sample_shape\",\n                  {\n                     \"attr\": \"Size\",\n                     \"col_offset\": 35,\n                     \"ctx\": {},\n                     \"lineno\": 84,\n                     \"value\": {\n                        \"col_offset\": 35,\n                        \"ctx\": {},\n                        \"id\": \"torch\",\n                        \"lineno\": 84\n                     }\n                  }\n               ]\n            ],\n            \"sample\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sample_shape\",\n                  {\n                     \"attr\": \"Size\",\n                     \"col_offset\": 34,\n                     \"ctx\": {},\n                     \"lineno\": 81,\n                     \"value\": {\n                        \"col_offset\": 34,\n                        \"ctx\": {},\n                        \"id\": \"torch\",\n                        \"lineno\": 81\n                     }\n                  }\n               ]\n            ],\n            \"support\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"variance\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.kl\": {\n         \"_Match\": {\n            \"__eq__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"other\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__le__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"other\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.laplace\": {\n         \"Laplace\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"loc\"\n               ],\n               [\n                  \"scale\"\n               ],\n               [\n                  \"validate_args\",\n                  null\n               ]\n            ],\n            \"cdf\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"entropy\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"expand\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\"\n               ],\n               [\n                  \"_instance\",\n                  null\n               ]\n            ],\n            \"icdf\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"log_prob\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"mean\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"rsample\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sample_shape\",\n                  {\n                     \"attr\": \"Size\",\n                     \"col_offset\": 35,\n                     \"ctx\": {},\n                     \"lineno\": 55,\n                     \"value\": {\n                        \"col_offset\": 35,\n                        \"ctx\": {},\n                        \"id\": \"torch\",\n                        \"lineno\": 55\n                     }\n                  }\n               ]\n            ],\n            \"stddev\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"variance\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.log_normal\": {\n         \"LogNormal\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"loc\"\n               ],\n               [\n                  \"scale\"\n               ],\n               [\n                  \"validate_args\",\n                  null\n               ]\n            ],\n            \"entropy\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"expand\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\"\n               ],\n               [\n                  \"_instance\",\n                  null\n               ]\n            ],\n            \"loc\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"mean\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"scale\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"variance\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.logistic_normal\": {\n         \"LogisticNormal\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"loc\"\n               ],\n               [\n                  \"scale\"\n               ],\n               [\n                  \"validate_args\",\n                  null\n               ]\n            ],\n            \"expand\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\"\n               ],\n               [\n                  \"_instance\",\n                  null\n               ]\n            ],\n            \"loc\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"scale\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.lowrank_multivariate_normal\": {\n         \"LowRankMultivariateNormal\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"loc\"\n               ],\n               [\n                  \"cov_factor\"\n               ],\n               [\n                  \"cov_diag\"\n               ],\n               [\n                  \"validate_args\",\n                  null\n               ]\n            ],\n            \"covariance_matrix\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"entropy\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"expand\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\"\n               ],\n               [\n                  \"_instance\",\n                  null\n               ]\n            ],\n            \"log_prob\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"mean\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"precision_matrix\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"rsample\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sample_shape\",\n                  {\n                     \"attr\": \"Size\",\n                     \"col_offset\": 35,\n                     \"ctx\": {},\n                     \"lineno\": 173,\n                     \"value\": {\n                        \"col_offset\": 35,\n                        \"ctx\": {},\n                        \"id\": \"torch\",\n                        \"lineno\": 173\n                     }\n                  }\n               ]\n            ],\n            \"scale_tril\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"variance\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.mixture_same_family\": {\n         \"MixtureSameFamily\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"mixture_distribution\"\n               ],\n               [\n                  \"component_distribution\"\n               ],\n               [\n                  \"validate_args\",\n                  null\n               ]\n            ],\n            \"__repr__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_pad\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ],\n            \"_pad_mixture_dimensions\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ],\n            \"cdf\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ],\n            \"component_distribution\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"expand\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\"\n               ],\n               [\n                  \"_instance\",\n                  null\n               ]\n            ],\n            \"log_prob\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ],\n            \"mean\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"mixture_distribution\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"sample\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sample_shape\",\n                  {\n                     \"attr\": \"Size\",\n                     \"col_offset\": 34,\n                     \"ctx\": {},\n                     \"lineno\": 152,\n                     \"value\": {\n                        \"col_offset\": 34,\n                        \"ctx\": {},\n                        \"id\": \"torch\",\n                        \"lineno\": 152\n                     }\n                  }\n               ]\n            ],\n            \"support\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"variance\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.multinomial\": {\n         \"Multinomial\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"total_count\",\n                  1\n               ],\n               [\n                  \"probs\",\n                  null\n               ],\n               [\n                  \"logits\",\n                  null\n               ],\n               [\n                  \"validate_args\",\n                  null\n               ]\n            ],\n            \"_new\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"expand\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\"\n               ],\n               [\n                  \"_instance\",\n                  null\n               ]\n            ],\n            \"log_prob\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"logits\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"mean\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"param_shape\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"probs\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"sample\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sample_shape\",\n                  {\n                     \"attr\": \"Size\",\n                     \"col_offset\": 34,\n                     \"ctx\": {},\n                     \"lineno\": 89,\n                     \"value\": {\n                        \"col_offset\": 34,\n                        \"ctx\": {},\n                        \"id\": \"torch\",\n                        \"lineno\": 89\n                     }\n                  }\n               ]\n            ],\n            \"support\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"variance\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.multivariate_normal\": {\n         \"MultivariateNormal\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"loc\"\n               ],\n               [\n                  \"covariance_matrix\",\n                  null\n               ],\n               [\n                  \"precision_matrix\",\n                  null\n               ],\n               [\n                  \"scale_tril\",\n                  null\n               ],\n               [\n                  \"validate_args\",\n                  null\n               ]\n            ],\n            \"covariance_matrix\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"entropy\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"expand\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\"\n               ],\n               [\n                  \"_instance\",\n                  null\n               ]\n            ],\n            \"log_prob\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"mean\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"precision_matrix\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"rsample\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sample_shape\",\n                  {\n                     \"attr\": \"Size\",\n                     \"col_offset\": 35,\n                     \"ctx\": {},\n                     \"lineno\": 199,\n                     \"value\": {\n                        \"col_offset\": 35,\n                        \"ctx\": {},\n                        \"id\": \"torch\",\n                        \"lineno\": 199\n                     }\n                  }\n               ]\n            ],\n            \"scale_tril\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"variance\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.negative_binomial\": {\n         \"NegativeBinomial\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"total_count\"\n               ],\n               [\n                  \"probs\",\n                  null\n               ],\n               [\n                  \"logits\",\n                  null\n               ],\n               [\n                  \"validate_args\",\n                  null\n               ]\n            ],\n            \"_gamma\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_new\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"expand\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\"\n               ],\n               [\n                  \"_instance\",\n                  null\n               ]\n            ],\n            \"log_prob\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"logits\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"mean\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"param_shape\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"probs\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"sample\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sample_shape\",\n                  {\n                     \"attr\": \"Size\",\n                     \"col_offset\": 34,\n                     \"ctx\": {},\n                     \"lineno\": 83,\n                     \"value\": {\n                        \"col_offset\": 34,\n                        \"ctx\": {},\n                        \"id\": \"torch\",\n                        \"lineno\": 83\n                     }\n                  }\n               ]\n            ],\n            \"variance\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.normal\": {\n         \"Normal\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"loc\"\n               ],\n               [\n                  \"scale\"\n               ],\n               [\n                  \"validate_args\",\n                  null\n               ]\n            ],\n            \"_log_normalizer\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ],\n               [\n                  \"y\"\n               ]\n            ],\n            \"_natural_params\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"cdf\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"entropy\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"expand\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\"\n               ],\n               [\n                  \"_instance\",\n                  null\n               ]\n            ],\n            \"icdf\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"log_prob\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"mean\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"rsample\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sample_shape\",\n                  {\n                     \"attr\": \"Size\",\n                     \"col_offset\": 35,\n                     \"ctx\": {},\n                     \"lineno\": 65,\n                     \"value\": {\n                        \"col_offset\": 35,\n                        \"ctx\": {},\n                        \"id\": \"torch\",\n                        \"lineno\": 65\n                     }\n                  }\n               ]\n            ],\n            \"sample\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sample_shape\",\n                  {\n                     \"attr\": \"Size\",\n                     \"col_offset\": 34,\n                     \"ctx\": {},\n                     \"lineno\": 60,\n                     \"value\": {\n                        \"col_offset\": 34,\n                        \"ctx\": {},\n                        \"id\": \"torch\",\n                        \"lineno\": 60\n                     }\n                  }\n               ]\n            ],\n            \"stddev\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"variance\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.one_hot_categorical\": {\n         \"OneHotCategorical\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"probs\",\n                  null\n               ],\n               [\n                  \"logits\",\n                  null\n               ],\n               [\n                  \"validate_args\",\n                  null\n               ]\n            ],\n            \"_new\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_param\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"entropy\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"enumerate_support\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"expand\",\n                  true\n               ]\n            ],\n            \"expand\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\"\n               ],\n               [\n                  \"_instance\",\n                  null\n               ]\n            ],\n            \"log_prob\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"logits\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"mean\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"param_shape\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"probs\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"sample\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sample_shape\",\n                  {\n                     \"attr\": \"Size\",\n                     \"col_offset\": 34,\n                     \"ctx\": {},\n                     \"lineno\": 76,\n                     \"value\": {\n                        \"col_offset\": 34,\n                        \"ctx\": {},\n                        \"id\": \"torch\",\n                        \"lineno\": 76\n                     }\n                  }\n               ]\n            ],\n            \"variance\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.pareto\": {\n         \"Pareto\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"scale\"\n               ],\n               [\n                  \"alpha\"\n               ],\n               [\n                  \"validate_args\",\n                  null\n               ]\n            ],\n            \"entropy\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"expand\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\"\n               ],\n               [\n                  \"_instance\",\n                  null\n               ]\n            ],\n            \"mean\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"support\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"variance\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.poisson\": {\n         \"Poisson\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"rate\"\n               ],\n               [\n                  \"validate_args\",\n                  null\n               ]\n            ],\n            \"_log_normalizer\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ],\n            \"_natural_params\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"expand\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\"\n               ],\n               [\n                  \"_instance\",\n                  null\n               ]\n            ],\n            \"log_prob\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"mean\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"sample\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sample_shape\",\n                  {\n                     \"attr\": \"Size\",\n                     \"col_offset\": 34,\n                     \"ctx\": {},\n                     \"lineno\": 54,\n                     \"value\": {\n                        \"col_offset\": 34,\n                        \"ctx\": {},\n                        \"id\": \"torch\",\n                        \"lineno\": 54\n                     }\n                  }\n               ]\n            ],\n            \"variance\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.relaxed_bernoulli\": {\n         \"LogitRelaxedBernoulli\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"temperature\"\n               ],\n               [\n                  \"probs\",\n                  null\n               ],\n               [\n                  \"logits\",\n                  null\n               ],\n               [\n                  \"validate_args\",\n                  null\n               ]\n            ],\n            \"_new\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"expand\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\"\n               ],\n               [\n                  \"_instance\",\n                  null\n               ]\n            ],\n            \"log_prob\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"logits\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"param_shape\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"probs\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"rsample\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sample_shape\",\n                  {\n                     \"attr\": \"Size\",\n                     \"col_offset\": 35,\n                     \"ctx\": {},\n                     \"lineno\": 79,\n                     \"value\": {\n                        \"col_offset\": 35,\n                        \"ctx\": {},\n                        \"id\": \"torch\",\n                        \"lineno\": 79\n                     }\n                  }\n               ]\n            ]\n         },\n         \"RelaxedBernoulli\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"temperature\"\n               ],\n               [\n                  \"probs\",\n                  null\n               ],\n               [\n                  \"logits\",\n                  null\n               ],\n               [\n                  \"validate_args\",\n                  null\n               ]\n            ],\n            \"expand\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\"\n               ],\n               [\n                  \"_instance\",\n                  null\n               ]\n            ],\n            \"logits\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"probs\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"temperature\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.relaxed_categorical\": {\n         \"ExpRelaxedCategorical\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"temperature\"\n               ],\n               [\n                  \"probs\",\n                  null\n               ],\n               [\n                  \"logits\",\n                  null\n               ],\n               [\n                  \"validate_args\",\n                  null\n               ]\n            ],\n            \"_new\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"expand\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\"\n               ],\n               [\n                  \"_instance\",\n                  null\n               ]\n            ],\n            \"log_prob\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"logits\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"param_shape\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"probs\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"rsample\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sample_shape\",\n                  {\n                     \"attr\": \"Size\",\n                     \"col_offset\": 35,\n                     \"ctx\": {},\n                     \"lineno\": 68,\n                     \"value\": {\n                        \"col_offset\": 35,\n                        \"ctx\": {},\n                        \"id\": \"torch\",\n                        \"lineno\": 68\n                     }\n                  }\n               ]\n            ]\n         },\n         \"RelaxedOneHotCategorical\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"temperature\"\n               ],\n               [\n                  \"probs\",\n                  null\n               ],\n               [\n                  \"logits\",\n                  null\n               ],\n               [\n                  \"validate_args\",\n                  null\n               ]\n            ],\n            \"expand\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\"\n               ],\n               [\n                  \"_instance\",\n                  null\n               ]\n            ],\n            \"logits\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"probs\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"temperature\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.studentT\": {\n         \"StudentT\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"df\"\n               ],\n               [\n                  \"loc\",\n                  0.0\n               ],\n               [\n                  \"scale\",\n                  1.0\n               ],\n               [\n                  \"validate_args\",\n                  null\n               ]\n            ],\n            \"entropy\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"expand\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\"\n               ],\n               [\n                  \"_instance\",\n                  null\n               ]\n            ],\n            \"log_prob\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"mean\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"rsample\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sample_shape\",\n                  {\n                     \"attr\": \"Size\",\n                     \"col_offset\": 35,\n                     \"ctx\": {},\n                     \"lineno\": 61,\n                     \"value\": {\n                        \"col_offset\": 35,\n                        \"ctx\": {},\n                        \"id\": \"torch\",\n                        \"lineno\": 61\n                     }\n                  }\n               ]\n            ],\n            \"variance\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.transformed_distribution\": {\n         \"TransformedDistribution\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"base_distribution\"\n               ],\n               [\n                  \"transforms\"\n               ],\n               [\n                  \"validate_args\",\n                  null\n               ]\n            ],\n            \"_monotonize_cdf\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"cdf\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"expand\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\"\n               ],\n               [\n                  \"_instance\",\n                  null\n               ]\n            ],\n            \"has_rsample\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"icdf\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"log_prob\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"rsample\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sample_shape\",\n                  {\n                     \"attr\": \"Size\",\n                     \"col_offset\": 35,\n                     \"ctx\": {},\n                     \"lineno\": 90,\n                     \"value\": {\n                        \"col_offset\": 35,\n                        \"ctx\": {},\n                        \"id\": \"torch\",\n                        \"lineno\": 90\n                     }\n                  }\n               ]\n            ],\n            \"sample\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sample_shape\",\n                  {\n                     \"attr\": \"Size\",\n                     \"col_offset\": 34,\n                     \"ctx\": {},\n                     \"lineno\": 77,\n                     \"value\": {\n                        \"col_offset\": 34,\n                        \"ctx\": {},\n                        \"id\": \"torch\",\n                        \"lineno\": 77\n                     }\n                  }\n               ]\n            ],\n            \"support\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.transforms\": {\n         \"AbsTransform\": {\n            \"__eq__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"other\"\n               ]\n            ],\n            \"_call\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ],\n            \"_inverse\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"y\"\n               ]\n            ]\n         },\n         \"AffineTransform\": {\n            \"__eq__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"other\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"loc\"\n               ],\n               [\n                  \"scale\"\n               ],\n               [\n                  \"event_dim\",\n                  0\n               ],\n               [\n                  \"cache_size\",\n                  0\n               ]\n            ],\n            \"_call\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ],\n            \"_inverse\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"y\"\n               ]\n            ],\n            \"log_abs_det_jacobian\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ],\n               [\n                  \"y\"\n               ]\n            ],\n            \"sign\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"CatTransform\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"tseq\"\n               ],\n               [\n                  \"dim\",\n                  0\n               ],\n               [\n                  \"lengths\",\n                  null\n               ]\n            ],\n            \"_call\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ],\n            \"_inverse\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"y\"\n               ]\n            ],\n            \"bijective\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"codomain\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"domain\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"length\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"log_abs_det_jacobian\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ],\n               [\n                  \"y\"\n               ]\n            ]\n         },\n         \"ComposeTransform\": {\n            \"__call__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ],\n            \"__eq__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"other\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"parts\"\n               ]\n            ],\n            \"__repr__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"bijective\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"codomain\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"domain\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"event_dim\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"inv\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"log_abs_det_jacobian\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ],\n               [\n                  \"y\"\n               ]\n            ],\n            \"sign\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"ExpTransform\": {\n            \"__eq__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"other\"\n               ]\n            ],\n            \"_call\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ],\n            \"_inverse\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"y\"\n               ]\n            ],\n            \"log_abs_det_jacobian\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ],\n               [\n                  \"y\"\n               ]\n            ]\n         },\n         \"LowerCholeskyTransform\": {\n            \"__eq__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"other\"\n               ]\n            ],\n            \"_call\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ],\n            \"_inverse\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"y\"\n               ]\n            ]\n         },\n         \"PowerTransform\": {\n            \"__eq__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"other\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"exponent\"\n               ],\n               [\n                  \"cache_size\",\n                  0\n               ]\n            ],\n            \"_call\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ],\n            \"_inverse\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"y\"\n               ]\n            ],\n            \"log_abs_det_jacobian\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ],\n               [\n                  \"y\"\n               ]\n            ]\n         },\n         \"SigmoidTransform\": {\n            \"__eq__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"other\"\n               ]\n            ],\n            \"_call\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ],\n            \"_inverse\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"y\"\n               ]\n            ],\n            \"log_abs_det_jacobian\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ],\n               [\n                  \"y\"\n               ]\n            ]\n         },\n         \"SoftmaxTransform\": {\n            \"__eq__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"other\"\n               ]\n            ],\n            \"_call\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ],\n            \"_inverse\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"y\"\n               ]\n            ]\n         },\n         \"StackTransform\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"tseq\"\n               ],\n               [\n                  \"dim\",\n                  0\n               ]\n            ],\n            \"_call\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ],\n            \"_inverse\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"y\"\n               ]\n            ],\n            \"_slice\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"z\"\n               ]\n            ],\n            \"bijective\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"codomain\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"domain\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"log_abs_det_jacobian\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ],\n               [\n                  \"y\"\n               ]\n            ]\n         },\n         \"StickBreakingTransform\": {\n            \"__eq__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"other\"\n               ]\n            ],\n            \"_call\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ],\n            \"_inverse\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"y\"\n               ]\n            ],\n            \"log_abs_det_jacobian\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ],\n               [\n                  \"y\"\n               ]\n            ]\n         },\n         \"TanhTransform\": {\n            \"__eq__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"other\"\n               ]\n            ],\n            \"_call\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ],\n            \"_inverse\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"y\"\n               ]\n            ],\n            \"atanh\": [\n               [\n                  \"x\"\n               ]\n            ],\n            \"log_abs_det_jacobian\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ],\n               [\n                  \"y\"\n               ]\n            ]\n         },\n         \"Transform\": {\n            \"__call__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ],\n            \"__eq__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"other\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"cache_size\",\n                  0\n               ]\n            ],\n            \"__ne__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"other\"\n               ]\n            ],\n            \"__repr__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_call\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ],\n            \"_inv_call\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"y\"\n               ]\n            ],\n            \"_inverse\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"y\"\n               ]\n            ],\n            \"inv\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"log_abs_det_jacobian\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ],\n               [\n                  \"y\"\n               ]\n            ],\n            \"sign\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"_InverseTransform\": {\n            \"__call__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ],\n            \"__eq__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"other\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"transform\"\n               ]\n            ],\n            \"bijective\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"codomain\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"domain\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"event_dim\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"inv\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"log_abs_det_jacobian\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ],\n               [\n                  \"y\"\n               ]\n            ],\n            \"sign\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.uniform\": {\n         \"Uniform\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"low\"\n               ],\n               [\n                  \"high\"\n               ],\n               [\n                  \"validate_args\",\n                  null\n               ]\n            ],\n            \"cdf\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"entropy\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"expand\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\"\n               ],\n               [\n                  \"_instance\",\n                  null\n               ]\n            ],\n            \"icdf\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"log_prob\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"mean\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"rsample\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sample_shape\",\n                  {\n                     \"attr\": \"Size\",\n                     \"col_offset\": 35,\n                     \"ctx\": {},\n                     \"lineno\": 65,\n                     \"value\": {\n                        \"col_offset\": 35,\n                        \"ctx\": {},\n                        \"id\": \"torch\",\n                        \"lineno\": 65\n                     }\n                  }\n               ]\n            ],\n            \"stddev\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"support\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"variance\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.utils\": {\n         \"lazy_property\": {\n            \"__get__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"instance\"\n               ],\n               [\n                  \"obj_type\",\n                  null\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"wrapped\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.von_mises\": {\n         \"VonMises\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"loc\"\n               ],\n               [\n                  \"concentration\"\n               ],\n               [\n                  \"validate_args\",\n                  null\n               ]\n            ],\n            \"expand\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\"\n               ]\n            ],\n            \"log_prob\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"mean\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"sample\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sample_shape\",\n                  {\n                     \"attr\": \"Size\",\n                     \"col_offset\": 34,\n                     \"ctx\": {},\n                     \"lineno\": 108,\n                     \"value\": {\n                        \"col_offset\": 34,\n                        \"ctx\": {},\n                        \"id\": \"torch\",\n                        \"lineno\": 108\n                     }\n                  }\n               ]\n            ],\n            \"variance\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.distributions.weibull\": {\n         \"Weibull\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"scale\"\n               ],\n               [\n                  \"concentration\"\n               ],\n               [\n                  \"validate_args\",\n                  null\n               ]\n            ],\n            \"entropy\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"expand\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"batch_shape\"\n               ],\n               [\n                  \"_instance\",\n                  null\n               ]\n            ],\n            \"mean\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"variance\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.hub\": {\n         \"tqdm\": {\n            \"__enter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__exit__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"exc_type\"\n               ],\n               [\n                  \"exc_val\"\n               ],\n               [\n                  \"exc_tb\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"total\",\n                  null\n               ],\n               [\n                  \"disable\",\n                  false\n               ],\n               [\n                  \"unit\",\n                  null\n               ],\n               [\n                  \"unit_scale\",\n                  null\n               ],\n               [\n                  \"unit_divisor\",\n                  null\n               ]\n            ],\n            \"update\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"n\"\n               ]\n            ]\n         }\n      },\n      \"torch.jit.__init__\": {\n         \"CompilationUnit\": {\n            \"__getattr__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"attr\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"lang\",\n                  null\n               ],\n               [\n                  \"_frames_up\",\n                  0\n               ]\n            ],\n            \"define\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"lang\"\n               ],\n               [\n                  \"rcb\",\n                  null\n               ],\n               [\n                  \"_frames_up\",\n                  0\n               ]\n            ]\n         },\n         \"ONNXTracedModule\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"inner\"\n               ],\n               [\n                  \"force_outplace\",\n                  false\n               ],\n               [\n                  \"return_inputs\",\n                  false\n               ],\n               [\n                  \"return_inputs_states\",\n                  false\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"OrderedDictWrapper\": {\n            \"__contains__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"k\"\n               ]\n            ],\n            \"__delitem__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"k\"\n               ]\n            ],\n            \"__getitem__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"k\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"_c\"\n               ]\n            ],\n            \"__len__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__setitem__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"k\"\n               ],\n               [\n                  \"v\"\n               ]\n            ],\n            \"items\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"keys\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"values\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"OrderedModuleDict\": {\n            \"__contains__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"k\"\n               ]\n            ],\n            \"__getitem__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"k\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"module\"\n               ],\n               [\n                  \"python_dict\"\n               ]\n            ],\n            \"__setitem__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"k\"\n               ],\n               [\n                  \"v\"\n               ]\n            ],\n            \"items\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"RecursiveScriptModule\": {\n            \"__bool__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__contains__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"key\"\n               ]\n            ],\n            \"__dir__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__getattr__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"attr\"\n               ]\n            ],\n            \"__getitem__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"idx\"\n               ]\n            ],\n            \"__getstate__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"cpp_module\"\n               ]\n            ],\n            \"__iter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__len__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__setattr__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"attr\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"_construct\": [\n               [\n                  \"cpp_module\"\n               ],\n               [\n                  \"init_fn\"\n               ]\n            ],\n            \"_save_for_lite_interpreter\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"code\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"copy\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"copy_instance\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"define\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"src\"\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward_magic_method\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"method_name\"\n               ]\n            ],\n            \"get_debug_state\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"graph\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"graph_for\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"inlined_graph\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"original_name\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"save\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"save_to_buffer\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"ScriptMeta\": {\n            \"__init__\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"name\"\n               ],\n               [\n                  \"bases\"\n               ],\n               [\n                  \"attrs\"\n               ]\n            ]\n         },\n         \"ScriptModule\": {\n            \"__getattr__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"attr\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__setattr__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"attr\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"define\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"src\"\n               ]\n            ]\n         },\n         \"TracedModule\": {\n            \"__getattr__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"attr\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"orig\"\n               ],\n               [\n                  \"id_set\",\n                  null\n               ],\n               [\n                  \"_compilation_unit\",\n                  null\n               ]\n            ],\n            \"__setattr__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"attr\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"_get_name\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"TracerWarning\": {\n            \"ignore_lib_warnings\": []\n         },\n         \"TracingCheckError\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"graph_diff_error\"\n               ],\n               [\n                  \"tensor_compare_error\"\n               ],\n               [\n                  \"extra_msg\",\n                  null\n               ]\n            ]\n         },\n         \"_CachedForward\": {\n            \"__get__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"obj\"\n               ],\n               [\n                  \"cls\"\n               ]\n            ]\n         },\n         \"_disable_tracing\": {\n            \"__enter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__exit__\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.jit._recursive\": {\n         \"ConcreteTypeStore\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"get_or_create_concrete_type\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"nn_module\"\n               ]\n            ]\n         },\n         \"SourceContext\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"source\"\n               ],\n               [\n                  \"filename\"\n               ],\n               [\n                  \"file_lineno\"\n               ],\n               [\n                  \"leading_whitespace_len\"\n               ]\n            ]\n         }\n      },\n      \"torch.jit.annotations\": {\n         \"EvalEnv\": {\n            \"__getitem__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"name\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"rcb\"\n               ]\n            ]\n         },\n         \"Module\": {\n            \"__getattr__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"name\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"name\"\n               ],\n               [\n                  \"members\"\n               ]\n            ]\n         }\n      },\n      \"torch.jit.frontend\": {\n         \"Builder\": {\n            \"__call__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"node\"\n               ]\n            ]\n         },\n         \"ExprBuilder\": {\n            \"build_Attribute\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"expr\"\n               ]\n            ],\n            \"build_BinOp\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"expr\"\n               ]\n            ],\n            \"build_BoolOp\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"expr\"\n               ]\n            ],\n            \"build_Call\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"expr\"\n               ]\n            ],\n            \"build_Compare\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"expr\"\n               ]\n            ],\n            \"build_Constant\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"expr\"\n               ]\n            ],\n            \"build_Dict\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"expr\"\n               ]\n            ],\n            \"build_Ellipsis\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"expr\"\n               ]\n            ],\n            \"build_IfExp\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"expr\"\n               ]\n            ],\n            \"build_JoinedStr\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"expr\"\n               ]\n            ],\n            \"build_List\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"expr\"\n               ]\n            ],\n            \"build_ListComp\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"stmt\"\n               ]\n            ],\n            \"build_Name\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"expr\"\n               ]\n            ],\n            \"build_NameConstant\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"expr\"\n               ]\n            ],\n            \"build_Num\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"expr\"\n               ]\n            ],\n            \"build_Starred\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"expr\"\n               ]\n            ],\n            \"build_Str\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"expr\"\n               ]\n            ],\n            \"build_Subscript\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"expr\"\n               ]\n            ],\n            \"build_Tuple\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"expr\"\n               ]\n            ],\n            \"build_UnaryOp\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"expr\"\n               ]\n            ]\n         },\n         \"FrontendError\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"source_range\"\n               ],\n               [\n                  \"msg\"\n               ]\n            ],\n            \"__str__\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"StmtBuilder\": {\n            \"build_AnnAssign\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"stmt\"\n               ]\n            ],\n            \"build_Assert\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"stmt\"\n               ]\n            ],\n            \"build_Assign\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"stmt\"\n               ]\n            ],\n            \"build_AugAssign\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"stmt\"\n               ]\n            ],\n            \"build_Break\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"stmt\"\n               ]\n            ],\n            \"build_Continue\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"stmt\"\n               ]\n            ],\n            \"build_Delete\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"stmt\"\n               ]\n            ],\n            \"build_Expr\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"stmt\"\n               ]\n            ],\n            \"build_For\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"stmt\"\n               ]\n            ],\n            \"build_If\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"stmt\"\n               ]\n            ],\n            \"build_Pass\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"stmt\"\n               ]\n            ],\n            \"build_Print\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"stmt\"\n               ]\n            ],\n            \"build_Raise\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"stmt\"\n               ]\n            ],\n            \"build_Return\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"stmt\"\n               ]\n            ],\n            \"build_While\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"stmt\"\n               ]\n            ]\n         },\n         \"UnsupportedNodeError\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"offending_node\"\n               ],\n               [\n                  \"reason\",\n                  \"\"\n               ]\n            ]\n         }\n      },\n      \"torch.jit.quantized\": {\n         \"QuantizedGRU\": {\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"hx\",\n                  null\n               ]\n            ],\n            \"forward_impl\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"hx\"\n               ],\n               [\n                  \"batch_sizes\"\n               ],\n               [\n                  \"max_batch_size\"\n               ],\n               [\n                  \"sorted_indices\"\n               ]\n            ],\n            \"forward_packed\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"hx\",\n                  null\n               ]\n            ],\n            \"forward_tensor\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"hx\",\n                  null\n               ]\n            ]\n         },\n         \"QuantizedGRUCell\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"other\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"hx\",\n                  null\n               ]\n            ]\n         },\n         \"QuantizedLSTM\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"other\"\n               ],\n               [\n                  \"dtype\"\n               ]\n            ],\n            \"check_forward_args\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"hidden\"\n               ],\n               [\n                  \"batch_sizes\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"hx\",\n                  null\n               ]\n            ],\n            \"forward_impl\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"hx\"\n               ],\n               [\n                  \"batch_sizes\"\n               ],\n               [\n                  \"max_batch_size\"\n               ],\n               [\n                  \"sorted_indices\"\n               ]\n            ],\n            \"forward_packed\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"hx\",\n                  null\n               ]\n            ],\n            \"forward_tensor\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"hx\",\n                  null\n               ]\n            ],\n            \"permute_hidden\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"hx\"\n               ],\n               [\n                  \"permutation\"\n               ]\n            ]\n         },\n         \"QuantizedLSTMCell\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"other\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"hx\",\n                  null\n               ]\n            ]\n         },\n         \"QuantizedLinear\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"other\"\n               ]\n            ],\n            \"_pack\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_unpack\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"QuantizedLinearFP16\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"other\"\n               ]\n            ],\n            \"_pack\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_unpack\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"QuantizedRNNBase\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"other\"\n               ],\n               [\n                  \"dtype\",\n                  {\n                     \"col_offset\": 36,\n                     \"ctx\": {},\n                     \"id\": \"torch\",\n                     \"lineno\": 248\n                  }\n               ]\n            ],\n            \"__setattr__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"attr\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"_pack\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_unpack\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"check_forward_args\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"hidden\"\n               ],\n               [\n                  \"batch_sizes\"\n               ]\n            ],\n            \"check_hidden_size\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"hx\"\n               ],\n               [\n                  \"expected_hidden_size\"\n               ],\n               [\n                  \"msg\",\n                  \"Expected hidden size {}, got {}\"\n               ]\n            ],\n            \"check_input\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"batch_sizes\"\n               ]\n            ],\n            \"get_expected_hidden_size\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"batch_sizes\"\n               ]\n            ],\n            \"permute_hidden\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"hx\"\n               ],\n               [\n                  \"permutation\"\n               ]\n            ]\n         },\n         \"QuantizedRNNCell\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"other\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"hx\",\n                  null\n               ]\n            ]\n         },\n         \"QuantizedRNNCellBase\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"other\"\n               ]\n            ],\n            \"_pack\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_unpack\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"check_forward_hidden\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"hx\"\n               ],\n               [\n                  \"hidden_label\",\n                  \"\"\n               ]\n            ],\n            \"check_forward_input\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.multiprocessing.pool\": {\n         \"Pool\": {\n            \"_repopulate_pool\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_setup_queues\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.multiprocessing.queue\": {\n         \"ConnectionWrapper\": {\n            \"__getattr__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"name\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"conn\"\n               ]\n            ],\n            \"recv\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"send\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"obj\"\n               ]\n            ]\n         },\n         \"Queue\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"SimpleQueue\": {\n            \"_make_methods\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.multiprocessing.reductions\": {\n         \"SharedCache\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__setitem__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"key\"\n               ],\n               [\n                  \"storage_ref\"\n               ]\n            ],\n            \"_after_fork\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"free_dead_references\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"StorageWeakRef\": {\n            \"__del__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"storage\"\n               ]\n            ],\n            \"expired\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.multiprocessing.spawn\": {\n         \"ProcessContext\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"processes\"\n               ],\n               [\n                  \"error_queues\"\n               ]\n            ],\n            \"join\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"timeout\",\n                  null\n               ]\n            ],\n            \"pids\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"SpawnContext\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"processes\"\n               ],\n               [\n                  \"error_queues\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.cpp\": {\n         \"ModuleWrapper\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"cpp_module\"\n               ]\n            ],\n            \"__repr__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_apply\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"fn\"\n               ]\n            ],\n            \"training\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"mode\"\n               ]\n            ]\n         },\n         \"OrderedDictWrapper\": {\n            \"__contains__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"key\"\n               ]\n            ],\n            \"__getitem__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"key\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"cpp_module\"\n               ],\n               [\n                  \"attr\"\n               ]\n            ],\n            \"__iter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__len__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"cpp_dict\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"items\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"keys\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"values\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.intrinsic.modules.fused\": {\n         \"ConvBn2d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"conv\"\n               ],\n               [\n                  \"bn\"\n               ]\n            ]\n         },\n         \"ConvBnReLU2d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"conv\"\n               ],\n               [\n                  \"bn\"\n               ],\n               [\n                  \"relu\"\n               ]\n            ]\n         },\n         \"ConvReLU2d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"conv\"\n               ],\n               [\n                  \"relu\"\n               ]\n            ]\n         },\n         \"ConvReLU3d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"conv\"\n               ],\n               [\n                  \"relu\"\n               ]\n            ]\n         },\n         \"LinearReLU\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"linear\"\n               ],\n               [\n                  \"relu\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.intrinsic.qat.modules.conv_fused\": {\n         \"ConvBn2d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"in_channels\"\n               ],\n               [\n                  \"out_channels\"\n               ],\n               [\n                  \"kernel_size\"\n               ],\n               [\n                  \"stride\",\n                  1\n               ],\n               [\n                  \"padding\",\n                  0\n               ],\n               [\n                  \"dilation\",\n                  1\n               ],\n               [\n                  \"groups\",\n                  1\n               ],\n               [\n                  \"padding_mode\",\n                  \"zeros\"\n               ],\n               [\n                  \"eps\",\n                  1e-05\n               ],\n               [\n                  \"momentum\",\n                  0.1\n               ],\n               [\n                  \"freeze_bn\",\n                  false\n               ],\n               [\n                  \"qconfig\",\n                  null\n               ]\n            ]\n         },\n         \"ConvBnReLU2d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"in_channels\"\n               ],\n               [\n                  \"out_channels\"\n               ],\n               [\n                  \"kernel_size\"\n               ],\n               [\n                  \"stride\",\n                  1\n               ],\n               [\n                  \"padding\",\n                  0\n               ],\n               [\n                  \"dilation\",\n                  1\n               ],\n               [\n                  \"groups\",\n                  1\n               ],\n               [\n                  \"padding_mode\",\n                  \"zeros\"\n               ],\n               [\n                  \"eps\",\n                  1e-05\n               ],\n               [\n                  \"momentum\",\n                  0.1\n               ],\n               [\n                  \"freeze_bn\",\n                  false\n               ],\n               [\n                  \"qconfig\",\n                  null\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ],\n            \"from_float\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"mod\"\n               ],\n               [\n                  \"qconfig\",\n                  null\n               ]\n            ]\n         },\n         \"ConvReLU2d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"in_channels\"\n               ],\n               [\n                  \"out_channels\"\n               ],\n               [\n                  \"kernel_size\"\n               ],\n               [\n                  \"stride\",\n                  1\n               ],\n               [\n                  \"padding\",\n                  0\n               ],\n               [\n                  \"dilation\",\n                  1\n               ],\n               [\n                  \"groups\",\n                  1\n               ],\n               [\n                  \"bias\",\n                  true\n               ],\n               [\n                  \"padding_mode\",\n                  \"zeros\"\n               ],\n               [\n                  \"qconfig\",\n                  null\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ],\n            \"from_float\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"mod\"\n               ],\n               [\n                  \"qconfig\",\n                  null\n               ]\n            ]\n         },\n         \"_ConvBnNd\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"in_channels\"\n               ],\n               [\n                  \"out_channels\"\n               ],\n               [\n                  \"kernel_size\"\n               ],\n               [\n                  \"stride\"\n               ],\n               [\n                  \"padding\"\n               ],\n               [\n                  \"dilation\"\n               ],\n               [\n                  \"transposed\"\n               ],\n               [\n                  \"output_padding\"\n               ],\n               [\n                  \"groups\"\n               ],\n               [\n                  \"padding_mode\"\n               ],\n               [\n                  \"eps\",\n                  1e-05\n               ],\n               [\n                  \"momentum\",\n                  0.1\n               ],\n               [\n                  \"freeze_bn\",\n                  false\n               ],\n               [\n                  \"qconfig\",\n                  null\n               ]\n            ],\n            \"_forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ],\n            \"freeze_bn_stats\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"from_float\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"mod\"\n               ],\n               [\n                  \"qconfig\",\n                  null\n               ]\n            ],\n            \"reset_bn_parameters\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"reset_parameters\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"reset_running_stats\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"update_bn_stats\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.intrinsic.qat.modules.linear_relu\": {\n         \"LinearReLU\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"in_features\"\n               ],\n               [\n                  \"out_features\"\n               ],\n               [\n                  \"bias\",\n                  true\n               ],\n               [\n                  \"qconfig\",\n                  null\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ],\n            \"from_float\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"mod\"\n               ],\n               [\n                  \"qconfig\",\n                  null\n               ]\n            ]\n         }\n      },\n      \"torch.nn.intrinsic.quantized.modules.conv_relu\": {\n         \"ConvReLU2d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"in_channels\"\n               ],\n               [\n                  \"out_channels\"\n               ],\n               [\n                  \"kernel_size\"\n               ],\n               [\n                  \"stride\",\n                  1\n               ],\n               [\n                  \"padding\",\n                  0\n               ],\n               [\n                  \"dilation\",\n                  1\n               ],\n               [\n                  \"groups\",\n                  1\n               ],\n               [\n                  \"bias\",\n                  true\n               ],\n               [\n                  \"padding_mode\",\n                  \"zeros\"\n               ]\n            ],\n            \"_get_name\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ],\n            \"from_float\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"mod\"\n               ]\n            ]\n         },\n         \"ConvReLU3d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"in_channels\"\n               ],\n               [\n                  \"out_channels\"\n               ],\n               [\n                  \"kernel_size\"\n               ],\n               [\n                  \"stride\",\n                  1\n               ],\n               [\n                  \"padding\",\n                  0\n               ],\n               [\n                  \"dilation\",\n                  1\n               ],\n               [\n                  \"groups\",\n                  1\n               ],\n               [\n                  \"bias\",\n                  true\n               ],\n               [\n                  \"padding_mode\",\n                  \"zeros\"\n               ]\n            ],\n            \"_get_name\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ],\n            \"from_float\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"mod\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.intrinsic.quantized.modules.linear_relu\": {\n         \"LinearReLU\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"in_features\"\n               ],\n               [\n                  \"out_features\"\n               ],\n               [\n                  \"bias\",\n                  true\n               ],\n               [\n                  \"dtype\",\n                  {\n                     \"col_offset\": 67,\n                     \"ctx\": {},\n                     \"id\": \"torch\",\n                     \"lineno\": 25\n                  }\n               ]\n            ],\n            \"_get_name\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ],\n            \"from_float\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"mod\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.modules._functions\": {\n         \"CrossMapLRN2d\": {\n            \"backward\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"grad_output\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"size\"\n               ],\n               [\n                  \"alpha\",\n                  0.0001\n               ],\n               [\n                  \"beta\",\n                  0.75\n               ],\n               [\n                  \"k\",\n                  1\n               ]\n            ]\n         },\n         \"SyncBatchNorm\": {\n            \"backward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"grad_output\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"weight\"\n               ],\n               [\n                  \"bias\"\n               ],\n               [\n                  \"running_mean\"\n               ],\n               [\n                  \"running_var\"\n               ],\n               [\n                  \"eps\"\n               ],\n               [\n                  \"momentum\"\n               ],\n               [\n                  \"process_group\"\n               ],\n               [\n                  \"world_size\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.modules.activation\": {\n         \"CELU\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"alpha\",\n                  1.0\n               ],\n               [\n                  \"inplace\",\n                  false\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"ELU\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"alpha\",\n                  1.0\n               ],\n               [\n                  \"inplace\",\n                  false\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"GELU\": {\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"GLU\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"dim\",\n                  {}\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"Hardshrink\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"lambd\",\n                  0.5\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"Hardsigmoid\": {\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"Hardtanh\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"min_val\",\n                  {}\n               ],\n               [\n                  \"max_val\",\n                  1.0\n               ],\n               [\n                  \"inplace\",\n                  false\n               ],\n               [\n                  \"min_value\",\n                  null\n               ],\n               [\n                  \"max_value\",\n                  null\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"LeakyReLU\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"negative_slope\",\n                  0.01\n               ],\n               [\n                  \"inplace\",\n                  false\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"LogSigmoid\": {\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"LogSoftmax\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"dim\",\n                  null\n               ]\n            ],\n            \"__setstate__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"MultiheadAttention\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"embed_dim\"\n               ],\n               [\n                  \"num_heads\"\n               ],\n               [\n                  \"dropout\",\n                  0.0\n               ],\n               [\n                  \"bias\",\n                  true\n               ],\n               [\n                  \"add_bias_kv\",\n                  false\n               ],\n               [\n                  \"add_zero_attn\",\n                  false\n               ],\n               [\n                  \"kdim\",\n                  null\n               ],\n               [\n                  \"vdim\",\n                  null\n               ]\n            ],\n            \"__setstate__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state\"\n               ]\n            ],\n            \"_reset_parameters\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"query\"\n               ],\n               [\n                  \"key\"\n               ],\n               [\n                  \"value\"\n               ],\n               [\n                  \"key_padding_mask\",\n                  null\n               ],\n               [\n                  \"need_weights\",\n                  true\n               ],\n               [\n                  \"attn_mask\",\n                  null\n               ]\n            ]\n         },\n         \"PReLU\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"num_parameters\",\n                  1\n               ],\n               [\n                  \"init\",\n                  0.25\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"RReLU\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"lower\",\n                  {\n                     \"col_offset\": 29,\n                     \"lineno\": 142,\n                     \"n\": 1.0\n                  }\n               ],\n               [\n                  \"upper\",\n                  {\n                     \"col_offset\": 43,\n                     \"lineno\": 142,\n                     \"n\": 1.0\n                  }\n               ],\n               [\n                  \"inplace\",\n                  false\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"ReLU\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"inplace\",\n                  false\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"ReLU6\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"inplace\",\n                  false\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"SELU\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"inplace\",\n                  false\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"Sigmoid\": {\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"Softmax\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"dim\",\n                  null\n               ]\n            ],\n            \"__setstate__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state\"\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"Softmax2d\": {\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"Softmin\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"dim\",\n                  null\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"Softplus\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"beta\",\n                  1\n               ],\n               [\n                  \"threshold\",\n                  20\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"Softshrink\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"lambd\",\n                  0.5\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"Softsign\": {\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"Tanh\": {\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"Tanhshrink\": {\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"Threshold\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"threshold\"\n               ],\n               [\n                  \"value\"\n               ],\n               [\n                  \"inplace\",\n                  false\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.modules.adaptive\": {\n         \"AdaptiveLogSoftmaxWithLoss\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"in_features\"\n               ],\n               [\n                  \"n_classes\"\n               ],\n               [\n                  \"cutoffs\"\n               ],\n               [\n                  \"div_value\",\n                  4.0\n               ],\n               [\n                  \"head_bias\",\n                  false\n               ]\n            ],\n            \"_get_full_log_prob\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"head_output\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"target\"\n               ]\n            ],\n            \"log_prob\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ],\n            \"predict\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ],\n            \"reset_parameters\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.modules.batchnorm\": {\n         \"BatchNorm1d\": {\n            \"_check_input_dim\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"BatchNorm2d\": {\n            \"_check_input_dim\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"BatchNorm3d\": {\n            \"_check_input_dim\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"SyncBatchNorm\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"num_features\"\n               ],\n               [\n                  \"eps\",\n                  1e-05\n               ],\n               [\n                  \"momentum\",\n                  0.1\n               ],\n               [\n                  \"affine\",\n                  true\n               ],\n               [\n                  \"track_running_stats\",\n                  true\n               ],\n               [\n                  \"process_group\",\n                  null\n               ]\n            ],\n            \"_check_input_dim\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ],\n            \"_specify_ddp_gpu_num\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"gpu_size\"\n               ]\n            ],\n            \"convert_sync_batchnorm\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"module\"\n               ],\n               [\n                  \"process_group\",\n                  null\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"_BatchNorm\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"num_features\"\n               ],\n               [\n                  \"eps\",\n                  1e-05\n               ],\n               [\n                  \"momentum\",\n                  0.1\n               ],\n               [\n                  \"affine\",\n                  true\n               ],\n               [\n                  \"track_running_stats\",\n                  true\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"_NormBase\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"num_features\"\n               ],\n               [\n                  \"eps\",\n                  1e-05\n               ],\n               [\n                  \"momentum\",\n                  0.1\n               ],\n               [\n                  \"affine\",\n                  true\n               ],\n               [\n                  \"track_running_stats\",\n                  true\n               ]\n            ],\n            \"_check_input_dim\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ],\n            \"_load_from_state_dict\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state_dict\"\n               ],\n               [\n                  \"prefix\"\n               ],\n               [\n                  \"local_metadata\"\n               ],\n               [\n                  \"strict\"\n               ],\n               [\n                  \"missing_keys\"\n               ],\n               [\n                  \"unexpected_keys\"\n               ],\n               [\n                  \"error_msgs\"\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"reset_parameters\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"reset_running_stats\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.modules.container\": {\n         \"Container\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"ModuleDict\": {\n            \"__contains__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"key\"\n               ]\n            ],\n            \"__delitem__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"key\"\n               ]\n            ],\n            \"__getitem__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"key\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"modules\",\n                  null\n               ]\n            ],\n            \"__iter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__len__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__setitem__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"key\"\n               ],\n               [\n                  \"module\"\n               ]\n            ],\n            \"clear\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"items\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"keys\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"pop\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"key\"\n               ]\n            ],\n            \"update\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"modules\"\n               ]\n            ],\n            \"values\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"ModuleList\": {\n            \"__delitem__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"idx\"\n               ]\n            ],\n            \"__dir__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__getitem__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"idx\"\n               ]\n            ],\n            \"__iadd__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"modules\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"modules\",\n                  null\n               ]\n            ],\n            \"__iter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__len__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__setitem__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"idx\"\n               ],\n               [\n                  \"module\"\n               ]\n            ],\n            \"_get_abs_string_index\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"idx\"\n               ]\n            ],\n            \"append\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"module\"\n               ]\n            ],\n            \"extend\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"modules\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"insert\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"index\"\n               ],\n               [\n                  \"module\"\n               ]\n            ]\n         },\n         \"ParameterDict\": {\n            \"__call__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ],\n            \"__contains__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"key\"\n               ]\n            ],\n            \"__delitem__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"key\"\n               ]\n            ],\n            \"__getitem__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"key\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"parameters\",\n                  null\n               ]\n            ],\n            \"__iter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__len__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__setitem__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"key\"\n               ],\n               [\n                  \"parameter\"\n               ]\n            ],\n            \"clear\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"items\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"keys\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"pop\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"key\"\n               ]\n            ],\n            \"update\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"parameters\"\n               ]\n            ],\n            \"values\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"ParameterList\": {\n            \"__call__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ],\n            \"__dir__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__getitem__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"idx\"\n               ]\n            ],\n            \"__iadd__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"parameters\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"parameters\",\n                  null\n               ]\n            ],\n            \"__iter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__len__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__setitem__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"idx\"\n               ],\n               [\n                  \"param\"\n               ]\n            ],\n            \"_get_abs_string_index\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"idx\"\n               ]\n            ],\n            \"append\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"parameter\"\n               ]\n            ],\n            \"extend\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"parameters\"\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"Sequential\": {\n            \"__delitem__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"idx\"\n               ]\n            ],\n            \"__dir__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__getitem__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"idx\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__iter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__len__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__setitem__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"idx\"\n               ],\n               [\n                  \"module\"\n               ]\n            ],\n            \"_get_item_by_idx\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"iterator\"\n               ],\n               [\n                  \"idx\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.modules.conv\": {\n         \"Conv1d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"in_channels\"\n               ],\n               [\n                  \"out_channels\"\n               ],\n               [\n                  \"kernel_size\"\n               ],\n               [\n                  \"stride\",\n                  1\n               ],\n               [\n                  \"padding\",\n                  0\n               ],\n               [\n                  \"dilation\",\n                  1\n               ],\n               [\n                  \"groups\",\n                  1\n               ],\n               [\n                  \"bias\",\n                  true\n               ],\n               [\n                  \"padding_mode\",\n                  \"zeros\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"Conv2d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"in_channels\"\n               ],\n               [\n                  \"out_channels\"\n               ],\n               [\n                  \"kernel_size\"\n               ],\n               [\n                  \"stride\",\n                  1\n               ],\n               [\n                  \"padding\",\n                  0\n               ],\n               [\n                  \"dilation\",\n                  1\n               ],\n               [\n                  \"groups\",\n                  1\n               ],\n               [\n                  \"bias\",\n                  true\n               ],\n               [\n                  \"padding_mode\",\n                  \"zeros\"\n               ]\n            ],\n            \"_conv_forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"weight\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"Conv3d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"in_channels\"\n               ],\n               [\n                  \"out_channels\"\n               ],\n               [\n                  \"kernel_size\"\n               ],\n               [\n                  \"stride\",\n                  1\n               ],\n               [\n                  \"padding\",\n                  0\n               ],\n               [\n                  \"dilation\",\n                  1\n               ],\n               [\n                  \"groups\",\n                  1\n               ],\n               [\n                  \"bias\",\n                  true\n               ],\n               [\n                  \"padding_mode\",\n                  \"zeros\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"ConvTranspose1d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"in_channels\"\n               ],\n               [\n                  \"out_channels\"\n               ],\n               [\n                  \"kernel_size\"\n               ],\n               [\n                  \"stride\",\n                  1\n               ],\n               [\n                  \"padding\",\n                  0\n               ],\n               [\n                  \"output_padding\",\n                  0\n               ],\n               [\n                  \"groups\",\n                  1\n               ],\n               [\n                  \"bias\",\n                  true\n               ],\n               [\n                  \"dilation\",\n                  1\n               ],\n               [\n                  \"padding_mode\",\n                  \"zeros\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"output_size\",\n                  null\n               ]\n            ]\n         },\n         \"ConvTranspose2d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"in_channels\"\n               ],\n               [\n                  \"out_channels\"\n               ],\n               [\n                  \"kernel_size\"\n               ],\n               [\n                  \"stride\",\n                  1\n               ],\n               [\n                  \"padding\",\n                  0\n               ],\n               [\n                  \"output_padding\",\n                  0\n               ],\n               [\n                  \"groups\",\n                  1\n               ],\n               [\n                  \"bias\",\n                  true\n               ],\n               [\n                  \"dilation\",\n                  1\n               ],\n               [\n                  \"padding_mode\",\n                  \"zeros\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"output_size\",\n                  null\n               ]\n            ]\n         },\n         \"ConvTranspose3d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"in_channels\"\n               ],\n               [\n                  \"out_channels\"\n               ],\n               [\n                  \"kernel_size\"\n               ],\n               [\n                  \"stride\",\n                  1\n               ],\n               [\n                  \"padding\",\n                  0\n               ],\n               [\n                  \"output_padding\",\n                  0\n               ],\n               [\n                  \"groups\",\n                  1\n               ],\n               [\n                  \"bias\",\n                  true\n               ],\n               [\n                  \"dilation\",\n                  1\n               ],\n               [\n                  \"padding_mode\",\n                  \"zeros\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"output_size\",\n                  null\n               ]\n            ]\n         },\n         \"_ConvNd\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"in_channels\"\n               ],\n               [\n                  \"out_channels\"\n               ],\n               [\n                  \"kernel_size\"\n               ],\n               [\n                  \"stride\"\n               ],\n               [\n                  \"padding\"\n               ],\n               [\n                  \"dilation\"\n               ],\n               [\n                  \"transposed\"\n               ],\n               [\n                  \"output_padding\"\n               ],\n               [\n                  \"groups\"\n               ],\n               [\n                  \"bias\"\n               ],\n               [\n                  \"padding_mode\"\n               ]\n            ],\n            \"__setstate__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state\"\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"reset_parameters\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"_ConvTransposeMixin\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"_ConvTransposeNd\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"in_channels\"\n               ],\n               [\n                  \"out_channels\"\n               ],\n               [\n                  \"kernel_size\"\n               ],\n               [\n                  \"stride\"\n               ],\n               [\n                  \"padding\"\n               ],\n               [\n                  \"dilation\"\n               ],\n               [\n                  \"transposed\"\n               ],\n               [\n                  \"output_padding\"\n               ],\n               [\n                  \"groups\"\n               ],\n               [\n                  \"bias\"\n               ],\n               [\n                  \"padding_mode\"\n               ]\n            ],\n            \"_output_padding\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"output_size\"\n               ],\n               [\n                  \"stride\"\n               ],\n               [\n                  \"padding\"\n               ],\n               [\n                  \"kernel_size\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.modules.distance\": {\n         \"CosineSimilarity\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"dim\",\n                  1\n               ],\n               [\n                  \"eps\",\n                  1e-08\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x1\"\n               ],\n               [\n                  \"x2\"\n               ]\n            ]\n         },\n         \"PairwiseDistance\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"p\",\n                  2.0\n               ],\n               [\n                  \"eps\",\n                  1e-06\n               ],\n               [\n                  \"keepdim\",\n                  false\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x1\"\n               ],\n               [\n                  \"x2\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.modules.dropout\": {\n         \"AlphaDropout\": {\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"Dropout\": {\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"Dropout2d\": {\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"Dropout3d\": {\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"FeatureAlphaDropout\": {\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"_DropoutNd\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"p\",\n                  0.5\n               ],\n               [\n                  \"inplace\",\n                  false\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.modules.flatten\": {\n         \"Flatten\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"start_dim\",\n                  1\n               ],\n               [\n                  \"end_dim\",\n                  {}\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.modules.fold\": {\n         \"Fold\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"output_size\"\n               ],\n               [\n                  \"kernel_size\"\n               ],\n               [\n                  \"dilation\",\n                  1\n               ],\n               [\n                  \"padding\",\n                  0\n               ],\n               [\n                  \"stride\",\n                  1\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"Unfold\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"kernel_size\"\n               ],\n               [\n                  \"dilation\",\n                  1\n               ],\n               [\n                  \"padding\",\n                  0\n               ],\n               [\n                  \"stride\",\n                  1\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.modules.instancenorm\": {\n         \"InstanceNorm1d\": {\n            \"_check_input_dim\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"InstanceNorm2d\": {\n            \"_check_input_dim\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"InstanceNorm3d\": {\n            \"_check_input_dim\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"_InstanceNorm\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"num_features\"\n               ],\n               [\n                  \"eps\",\n                  1e-05\n               ],\n               [\n                  \"momentum\",\n                  0.1\n               ],\n               [\n                  \"affine\",\n                  false\n               ],\n               [\n                  \"track_running_stats\",\n                  false\n               ]\n            ],\n            \"_check_input_dim\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ],\n            \"_load_from_state_dict\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state_dict\"\n               ],\n               [\n                  \"prefix\"\n               ],\n               [\n                  \"local_metadata\"\n               ],\n               [\n                  \"strict\"\n               ],\n               [\n                  \"missing_keys\"\n               ],\n               [\n                  \"unexpected_keys\"\n               ],\n               [\n                  \"error_msgs\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.modules.linear\": {\n         \"Bilinear\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"in1_features\"\n               ],\n               [\n                  \"in2_features\"\n               ],\n               [\n                  \"out_features\"\n               ],\n               [\n                  \"bias\",\n                  true\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input1\"\n               ],\n               [\n                  \"input2\"\n               ]\n            ],\n            \"reset_parameters\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"Identity\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"Linear\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"in_features\"\n               ],\n               [\n                  \"out_features\"\n               ],\n               [\n                  \"bias\",\n                  true\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ],\n            \"reset_parameters\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.modules.loss\": {\n         \"BCELoss\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"weight\",\n                  null\n               ],\n               [\n                  \"size_average\",\n                  null\n               ],\n               [\n                  \"reduce\",\n                  null\n               ],\n               [\n                  \"reduction\",\n                  \"mean\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"target\"\n               ]\n            ]\n         },\n         \"BCEWithLogitsLoss\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"weight\",\n                  null\n               ],\n               [\n                  \"size_average\",\n                  null\n               ],\n               [\n                  \"reduce\",\n                  null\n               ],\n               [\n                  \"reduction\",\n                  \"mean\"\n               ],\n               [\n                  \"pos_weight\",\n                  null\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"target\"\n               ]\n            ]\n         },\n         \"CTCLoss\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"blank\",\n                  0\n               ],\n               [\n                  \"reduction\",\n                  \"mean\"\n               ],\n               [\n                  \"zero_infinity\",\n                  false\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"log_probs\"\n               ],\n               [\n                  \"targets\"\n               ],\n               [\n                  \"input_lengths\"\n               ],\n               [\n                  \"target_lengths\"\n               ]\n            ]\n         },\n         \"CosineEmbeddingLoss\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"margin\",\n                  0.0\n               ],\n               [\n                  \"size_average\",\n                  null\n               ],\n               [\n                  \"reduce\",\n                  null\n               ],\n               [\n                  \"reduction\",\n                  \"mean\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input1\"\n               ],\n               [\n                  \"input2\"\n               ],\n               [\n                  \"target\"\n               ]\n            ]\n         },\n         \"CrossEntropyLoss\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"weight\",\n                  null\n               ],\n               [\n                  \"size_average\",\n                  null\n               ],\n               [\n                  \"ignore_index\",\n                  {}\n               ],\n               [\n                  \"reduce\",\n                  null\n               ],\n               [\n                  \"reduction\",\n                  \"mean\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"target\"\n               ]\n            ]\n         },\n         \"HingeEmbeddingLoss\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"margin\",\n                  1.0\n               ],\n               [\n                  \"size_average\",\n                  null\n               ],\n               [\n                  \"reduce\",\n                  null\n               ],\n               [\n                  \"reduction\",\n                  \"mean\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"target\"\n               ]\n            ]\n         },\n         \"KLDivLoss\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"size_average\",\n                  null\n               ],\n               [\n                  \"reduce\",\n                  null\n               ],\n               [\n                  \"reduction\",\n                  \"mean\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"target\"\n               ]\n            ]\n         },\n         \"L1Loss\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"size_average\",\n                  null\n               ],\n               [\n                  \"reduce\",\n                  null\n               ],\n               [\n                  \"reduction\",\n                  \"mean\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"target\"\n               ]\n            ]\n         },\n         \"MSELoss\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"size_average\",\n                  null\n               ],\n               [\n                  \"reduce\",\n                  null\n               ],\n               [\n                  \"reduction\",\n                  \"mean\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"target\"\n               ]\n            ]\n         },\n         \"MarginRankingLoss\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"margin\",\n                  0.0\n               ],\n               [\n                  \"size_average\",\n                  null\n               ],\n               [\n                  \"reduce\",\n                  null\n               ],\n               [\n                  \"reduction\",\n                  \"mean\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input1\"\n               ],\n               [\n                  \"input2\"\n               ],\n               [\n                  \"target\"\n               ]\n            ]\n         },\n         \"MultiLabelMarginLoss\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"size_average\",\n                  null\n               ],\n               [\n                  \"reduce\",\n                  null\n               ],\n               [\n                  \"reduction\",\n                  \"mean\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"target\"\n               ]\n            ]\n         },\n         \"MultiLabelSoftMarginLoss\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"weight\",\n                  null\n               ],\n               [\n                  \"size_average\",\n                  null\n               ],\n               [\n                  \"reduce\",\n                  null\n               ],\n               [\n                  \"reduction\",\n                  \"mean\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"target\"\n               ]\n            ]\n         },\n         \"MultiMarginLoss\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"p\",\n                  1\n               ],\n               [\n                  \"margin\",\n                  1.0\n               ],\n               [\n                  \"weight\",\n                  null\n               ],\n               [\n                  \"size_average\",\n                  null\n               ],\n               [\n                  \"reduce\",\n                  null\n               ],\n               [\n                  \"reduction\",\n                  \"mean\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"target\"\n               ]\n            ]\n         },\n         \"NLLLoss\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"weight\",\n                  null\n               ],\n               [\n                  \"size_average\",\n                  null\n               ],\n               [\n                  \"ignore_index\",\n                  {}\n               ],\n               [\n                  \"reduce\",\n                  null\n               ],\n               [\n                  \"reduction\",\n                  \"mean\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"target\"\n               ]\n            ]\n         },\n         \"NLLLoss2d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"weight\",\n                  null\n               ],\n               [\n                  \"size_average\",\n                  null\n               ],\n               [\n                  \"ignore_index\",\n                  {}\n               ],\n               [\n                  \"reduce\",\n                  null\n               ],\n               [\n                  \"reduction\",\n                  \"mean\"\n               ]\n            ]\n         },\n         \"PoissonNLLLoss\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"log_input\",\n                  true\n               ],\n               [\n                  \"full\",\n                  false\n               ],\n               [\n                  \"size_average\",\n                  null\n               ],\n               [\n                  \"eps\",\n                  1e-08\n               ],\n               [\n                  \"reduce\",\n                  null\n               ],\n               [\n                  \"reduction\",\n                  \"mean\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"log_input\"\n               ],\n               [\n                  \"target\"\n               ]\n            ]\n         },\n         \"SmoothL1Loss\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"size_average\",\n                  null\n               ],\n               [\n                  \"reduce\",\n                  null\n               ],\n               [\n                  \"reduction\",\n                  \"mean\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"target\"\n               ]\n            ]\n         },\n         \"SoftMarginLoss\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"size_average\",\n                  null\n               ],\n               [\n                  \"reduce\",\n                  null\n               ],\n               [\n                  \"reduction\",\n                  \"mean\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"target\"\n               ]\n            ]\n         },\n         \"TripletMarginLoss\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"margin\",\n                  1.0\n               ],\n               [\n                  \"p\",\n                  2.0\n               ],\n               [\n                  \"eps\",\n                  1e-06\n               ],\n               [\n                  \"swap\",\n                  false\n               ],\n               [\n                  \"size_average\",\n                  null\n               ],\n               [\n                  \"reduce\",\n                  null\n               ],\n               [\n                  \"reduction\",\n                  \"mean\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"anchor\"\n               ],\n               [\n                  \"positive\"\n               ],\n               [\n                  \"negative\"\n               ]\n            ]\n         },\n         \"_Loss\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"size_average\",\n                  null\n               ],\n               [\n                  \"reduce\",\n                  null\n               ],\n               [\n                  \"reduction\",\n                  \"mean\"\n               ]\n            ]\n         },\n         \"_WeightedLoss\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"weight\",\n                  null\n               ],\n               [\n                  \"size_average\",\n                  null\n               ],\n               [\n                  \"reduce\",\n                  null\n               ],\n               [\n                  \"reduction\",\n                  \"mean\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.modules.module\": {\n         \"Module\": {\n            \"__call__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__delattr__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"name\"\n               ]\n            ],\n            \"__dir__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__getattr__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"name\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__repr__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__setattr__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"name\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"__setstate__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state\"\n               ]\n            ],\n            \"_apply\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"fn\"\n               ]\n            ],\n            \"_get_name\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_load_from_state_dict\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state_dict\"\n               ],\n               [\n                  \"prefix\"\n               ],\n               [\n                  \"local_metadata\"\n               ],\n               [\n                  \"strict\"\n               ],\n               [\n                  \"missing_keys\"\n               ],\n               [\n                  \"unexpected_keys\"\n               ],\n               [\n                  \"error_msgs\"\n               ]\n            ],\n            \"_named_members\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"get_members_fn\"\n               ],\n               [\n                  \"prefix\",\n                  \"\"\n               ],\n               [\n                  \"recurse\",\n                  true\n               ]\n            ],\n            \"_register_load_state_dict_pre_hook\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"hook\"\n               ]\n            ],\n            \"_register_state_dict_hook\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"hook\"\n               ]\n            ],\n            \"_replicate_for_data_parallel\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_save_to_state_dict\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"destination\"\n               ],\n               [\n                  \"prefix\"\n               ],\n               [\n                  \"keep_vars\"\n               ]\n            ],\n            \"_slow_forward\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"add_module\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"name\"\n               ],\n               [\n                  \"module\"\n               ]\n            ],\n            \"apply\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"fn\"\n               ]\n            ],\n            \"bfloat16\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"buffers\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"recurse\",\n                  true\n               ]\n            ],\n            \"children\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"cpu\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"cuda\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"device\",\n                  null\n               ]\n            ],\n            \"double\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"eval\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"float\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"half\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"load_state_dict\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state_dict\"\n               ],\n               [\n                  \"strict\",\n                  true\n               ]\n            ],\n            \"modules\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"named_buffers\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"prefix\",\n                  \"\"\n               ],\n               [\n                  \"recurse\",\n                  true\n               ]\n            ],\n            \"named_children\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"named_modules\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"memo\",\n                  null\n               ],\n               [\n                  \"prefix\",\n                  \"\"\n               ]\n            ],\n            \"named_parameters\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"prefix\",\n                  \"\"\n               ],\n               [\n                  \"recurse\",\n                  true\n               ]\n            ],\n            \"parameters\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"recurse\",\n                  true\n               ]\n            ],\n            \"register_backward_hook\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"hook\"\n               ]\n            ],\n            \"register_buffer\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"name\"\n               ],\n               [\n                  \"tensor\"\n               ]\n            ],\n            \"register_forward_hook\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"hook\"\n               ]\n            ],\n            \"register_forward_pre_hook\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"hook\"\n               ]\n            ],\n            \"register_parameter\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"name\"\n               ],\n               [\n                  \"param\"\n               ]\n            ],\n            \"requires_grad_\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"requires_grad\",\n                  true\n               ]\n            ],\n            \"share_memory\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"state_dict\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"destination\",\n                  null\n               ],\n               [\n                  \"prefix\",\n                  \"\"\n               ],\n               [\n                  \"keep_vars\",\n                  false\n               ]\n            ],\n            \"to\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"train\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"mode\",\n                  true\n               ]\n            ],\n            \"type\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"dst_type\"\n               ]\n            ],\n            \"zero_grad\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"_IncompatibleKeys\": {\n            \"__repr__\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.modules.normalization\": {\n         \"CrossMapLRN2d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"size\"\n               ],\n               [\n                  \"alpha\",\n                  0.0001\n               ],\n               [\n                  \"beta\",\n                  0.75\n               ],\n               [\n                  \"k\",\n                  1\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"GroupNorm\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"num_groups\"\n               ],\n               [\n                  \"num_channels\"\n               ],\n               [\n                  \"eps\",\n                  1e-05\n               ],\n               [\n                  \"affine\",\n                  true\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ],\n            \"reset_parameters\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"LayerNorm\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"normalized_shape\"\n               ],\n               [\n                  \"eps\",\n                  1e-05\n               ],\n               [\n                  \"elementwise_affine\",\n                  true\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ],\n            \"reset_parameters\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"LocalResponseNorm\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"size\"\n               ],\n               [\n                  \"alpha\",\n                  0.0001\n               ],\n               [\n                  \"beta\",\n                  0.75\n               ],\n               [\n                  \"k\",\n                  1.0\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.modules.padding\": {\n         \"ConstantPad1d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"padding\"\n               ],\n               [\n                  \"value\"\n               ]\n            ]\n         },\n         \"ConstantPad2d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"padding\"\n               ],\n               [\n                  \"value\"\n               ]\n            ]\n         },\n         \"ConstantPad3d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"padding\"\n               ],\n               [\n                  \"value\"\n               ]\n            ]\n         },\n         \"ReflectionPad1d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"padding\"\n               ]\n            ]\n         },\n         \"ReflectionPad2d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"padding\"\n               ]\n            ]\n         },\n         \"ReplicationPad1d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"padding\"\n               ]\n            ]\n         },\n         \"ReplicationPad2d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"padding\"\n               ]\n            ]\n         },\n         \"ReplicationPad3d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"padding\"\n               ]\n            ]\n         },\n         \"ZeroPad2d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"padding\"\n               ]\n            ]\n         },\n         \"_ConstantPadNd\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"_ReflectionPadNd\": {\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"_ReplicationPadNd\": {\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.modules.pixelshuffle\": {\n         \"PixelShuffle\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"upscale_factor\"\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.modules.pooling\": {\n         \"AdaptiveAvgPool1d\": {\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"AdaptiveAvgPool2d\": {\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"AdaptiveAvgPool3d\": {\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"AdaptiveMaxPool1d\": {\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"AdaptiveMaxPool2d\": {\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"AdaptiveMaxPool3d\": {\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"AvgPool1d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"kernel_size\"\n               ],\n               [\n                  \"stride\",\n                  null\n               ],\n               [\n                  \"padding\",\n                  0\n               ],\n               [\n                  \"ceil_mode\",\n                  false\n               ],\n               [\n                  \"count_include_pad\",\n                  true\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"AvgPool2d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"kernel_size\"\n               ],\n               [\n                  \"stride\",\n                  null\n               ],\n               [\n                  \"padding\",\n                  0\n               ],\n               [\n                  \"ceil_mode\",\n                  false\n               ],\n               [\n                  \"count_include_pad\",\n                  true\n               ],\n               [\n                  \"divisor_override\",\n                  null\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"AvgPool3d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"kernel_size\"\n               ],\n               [\n                  \"stride\",\n                  null\n               ],\n               [\n                  \"padding\",\n                  0\n               ],\n               [\n                  \"ceil_mode\",\n                  false\n               ],\n               [\n                  \"count_include_pad\",\n                  true\n               ],\n               [\n                  \"divisor_override\",\n                  null\n               ]\n            ],\n            \"__setstate__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"d\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"FractionalMaxPool2d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"kernel_size\"\n               ],\n               [\n                  \"output_size\",\n                  null\n               ],\n               [\n                  \"output_ratio\",\n                  null\n               ],\n               [\n                  \"return_indices\",\n                  false\n               ],\n               [\n                  \"_random_samples\",\n                  null\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"FractionalMaxPool3d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"kernel_size\"\n               ],\n               [\n                  \"output_size\",\n                  null\n               ],\n               [\n                  \"output_ratio\",\n                  null\n               ],\n               [\n                  \"return_indices\",\n                  false\n               ],\n               [\n                  \"_random_samples\",\n                  null\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"LPPool1d\": {\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"LPPool2d\": {\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"MaxPool1d\": {\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"MaxPool2d\": {\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"MaxPool3d\": {\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"MaxUnpool1d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"kernel_size\"\n               ],\n               [\n                  \"stride\",\n                  null\n               ],\n               [\n                  \"padding\",\n                  0\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"indices\"\n               ],\n               [\n                  \"output_size\",\n                  null\n               ]\n            ]\n         },\n         \"MaxUnpool2d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"kernel_size\"\n               ],\n               [\n                  \"stride\",\n                  null\n               ],\n               [\n                  \"padding\",\n                  0\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"indices\"\n               ],\n               [\n                  \"output_size\",\n                  null\n               ]\n            ]\n         },\n         \"MaxUnpool3d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"kernel_size\"\n               ],\n               [\n                  \"stride\",\n                  null\n               ],\n               [\n                  \"padding\",\n                  0\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"indices\"\n               ],\n               [\n                  \"output_size\",\n                  null\n               ]\n            ]\n         },\n         \"_AdaptiveAvgPoolNd\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"output_size\"\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"_AdaptiveMaxPoolNd\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"output_size\"\n               ],\n               [\n                  \"return_indices\",\n                  false\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"_AvgPoolNd\": {\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"_LPPoolNd\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"norm_type\"\n               ],\n               [\n                  \"kernel_size\"\n               ],\n               [\n                  \"stride\",\n                  null\n               ],\n               [\n                  \"ceil_mode\",\n                  false\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"_MaxPoolNd\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"kernel_size\"\n               ],\n               [\n                  \"stride\",\n                  null\n               ],\n               [\n                  \"padding\",\n                  0\n               ],\n               [\n                  \"dilation\",\n                  1\n               ],\n               [\n                  \"return_indices\",\n                  false\n               ],\n               [\n                  \"ceil_mode\",\n                  false\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"_MaxUnpoolNd\": {\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.modules.rnn\": {\n         \"GRU\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"hx\",\n                  null\n               ]\n            ]\n         },\n         \"GRUCell\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input_size\"\n               ],\n               [\n                  \"hidden_size\"\n               ],\n               [\n                  \"bias\",\n                  true\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"hx\",\n                  null\n               ]\n            ]\n         },\n         \"LSTM\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"check_forward_args\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"hidden\"\n               ],\n               [\n                  \"batch_sizes\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"hx\",\n                  null\n               ]\n            ],\n            \"permute_hidden\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"hx\"\n               ],\n               [\n                  \"permutation\"\n               ]\n            ]\n         },\n         \"LSTMCell\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input_size\"\n               ],\n               [\n                  \"hidden_size\"\n               ],\n               [\n                  \"bias\",\n                  true\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"hx\",\n                  null\n               ]\n            ]\n         },\n         \"RNN\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"RNNBase\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"mode\"\n               ],\n               [\n                  \"input_size\"\n               ],\n               [\n                  \"hidden_size\"\n               ],\n               [\n                  \"num_layers\",\n                  1\n               ],\n               [\n                  \"bias\",\n                  true\n               ],\n               [\n                  \"batch_first\",\n                  false\n               ],\n               [\n                  \"dropout\",\n                  0.0\n               ],\n               [\n                  \"bidirectional\",\n                  false\n               ]\n            ],\n            \"__setattr__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"attr\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"__setstate__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"d\"\n               ]\n            ],\n            \"_apply\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"fn\"\n               ]\n            ],\n            \"_replicate_for_data_parallel\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"all_weights\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"check_forward_args\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"hidden\"\n               ],\n               [\n                  \"batch_sizes\"\n               ]\n            ],\n            \"check_hidden_size\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"hx\"\n               ],\n               [\n                  \"expected_hidden_size\"\n               ],\n               [\n                  \"msg\",\n                  \"Expected hidden size {}, got {}\"\n               ]\n            ],\n            \"check_input\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"batch_sizes\"\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"flatten_parameters\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"hx\",\n                  null\n               ]\n            ],\n            \"get_expected_hidden_size\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"batch_sizes\"\n               ]\n            ],\n            \"permute_hidden\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"hx\"\n               ],\n               [\n                  \"permutation\"\n               ]\n            ],\n            \"reset_parameters\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"RNNCell\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input_size\"\n               ],\n               [\n                  \"hidden_size\"\n               ],\n               [\n                  \"bias\",\n                  true\n               ],\n               [\n                  \"nonlinearity\",\n                  \"tanh\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"hx\",\n                  null\n               ]\n            ]\n         },\n         \"RNNCellBase\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input_size\"\n               ],\n               [\n                  \"hidden_size\"\n               ],\n               [\n                  \"bias\"\n               ],\n               [\n                  \"num_chunks\"\n               ]\n            ],\n            \"check_forward_hidden\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"hx\"\n               ],\n               [\n                  \"hidden_label\",\n                  \"\"\n               ]\n            ],\n            \"check_forward_input\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"reset_parameters\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.modules.sparse\": {\n         \"Embedding\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"num_embeddings\"\n               ],\n               [\n                  \"embedding_dim\"\n               ],\n               [\n                  \"padding_idx\",\n                  null\n               ],\n               [\n                  \"max_norm\",\n                  null\n               ],\n               [\n                  \"norm_type\",\n                  2.0\n               ],\n               [\n                  \"scale_grad_by_freq\",\n                  false\n               ],\n               [\n                  \"sparse\",\n                  false\n               ],\n               [\n                  \"_weight\",\n                  null\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ],\n            \"from_pretrained\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"embeddings\"\n               ],\n               [\n                  \"freeze\",\n                  true\n               ],\n               [\n                  \"padding_idx\",\n                  null\n               ],\n               [\n                  \"max_norm\",\n                  null\n               ],\n               [\n                  \"norm_type\",\n                  2.0\n               ],\n               [\n                  \"scale_grad_by_freq\",\n                  false\n               ],\n               [\n                  \"sparse\",\n                  false\n               ]\n            ],\n            \"reset_parameters\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"EmbeddingBag\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"num_embeddings\"\n               ],\n               [\n                  \"embedding_dim\"\n               ],\n               [\n                  \"max_norm\",\n                  null\n               ],\n               [\n                  \"norm_type\",\n                  2.0\n               ],\n               [\n                  \"scale_grad_by_freq\",\n                  false\n               ],\n               [\n                  \"mode\",\n                  \"mean\"\n               ],\n               [\n                  \"sparse\",\n                  false\n               ],\n               [\n                  \"_weight\",\n                  null\n               ],\n               [\n                  \"include_last_offset\",\n                  false\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"offsets\",\n                  null\n               ],\n               [\n                  \"per_sample_weights\",\n                  null\n               ]\n            ],\n            \"from_pretrained\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"embeddings\"\n               ],\n               [\n                  \"freeze\",\n                  true\n               ],\n               [\n                  \"max_norm\",\n                  null\n               ],\n               [\n                  \"norm_type\",\n                  2.0\n               ],\n               [\n                  \"scale_grad_by_freq\",\n                  false\n               ],\n               [\n                  \"mode\",\n                  \"mean\"\n               ],\n               [\n                  \"sparse\",\n                  false\n               ],\n               [\n                  \"include_last_offset\",\n                  false\n               ]\n            ],\n            \"reset_parameters\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.modules.transformer\": {\n         \"Transformer\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"d_model\",\n                  512\n               ],\n               [\n                  \"nhead\",\n                  8\n               ],\n               [\n                  \"num_encoder_layers\",\n                  6\n               ],\n               [\n                  \"num_decoder_layers\",\n                  6\n               ],\n               [\n                  \"dim_feedforward\",\n                  2048\n               ],\n               [\n                  \"dropout\",\n                  0.1\n               ],\n               [\n                  \"activation\",\n                  \"relu\"\n               ],\n               [\n                  \"custom_encoder\",\n                  null\n               ],\n               [\n                  \"custom_decoder\",\n                  null\n               ]\n            ],\n            \"_reset_parameters\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"src\"\n               ],\n               [\n                  \"tgt\"\n               ],\n               [\n                  \"src_mask\",\n                  null\n               ],\n               [\n                  \"tgt_mask\",\n                  null\n               ],\n               [\n                  \"memory_mask\",\n                  null\n               ],\n               [\n                  \"src_key_padding_mask\",\n                  null\n               ],\n               [\n                  \"tgt_key_padding_mask\",\n                  null\n               ],\n               [\n                  \"memory_key_padding_mask\",\n                  null\n               ]\n            ],\n            \"generate_square_subsequent_mask\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sz\"\n               ]\n            ]\n         },\n         \"TransformerDecoder\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"decoder_layer\"\n               ],\n               [\n                  \"num_layers\"\n               ],\n               [\n                  \"norm\",\n                  null\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"tgt\"\n               ],\n               [\n                  \"memory\"\n               ],\n               [\n                  \"tgt_mask\",\n                  null\n               ],\n               [\n                  \"memory_mask\",\n                  null\n               ],\n               [\n                  \"tgt_key_padding_mask\",\n                  null\n               ],\n               [\n                  \"memory_key_padding_mask\",\n                  null\n               ]\n            ]\n         },\n         \"TransformerDecoderLayer\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"d_model\"\n               ],\n               [\n                  \"nhead\"\n               ],\n               [\n                  \"dim_feedforward\",\n                  2048\n               ],\n               [\n                  \"dropout\",\n                  0.1\n               ],\n               [\n                  \"activation\",\n                  \"relu\"\n               ]\n            ],\n            \"__setstate__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"tgt\"\n               ],\n               [\n                  \"memory\"\n               ],\n               [\n                  \"tgt_mask\",\n                  null\n               ],\n               [\n                  \"memory_mask\",\n                  null\n               ],\n               [\n                  \"tgt_key_padding_mask\",\n                  null\n               ],\n               [\n                  \"memory_key_padding_mask\",\n                  null\n               ]\n            ]\n         },\n         \"TransformerEncoder\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"encoder_layer\"\n               ],\n               [\n                  \"num_layers\"\n               ],\n               [\n                  \"norm\",\n                  null\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"src\"\n               ],\n               [\n                  \"mask\",\n                  null\n               ],\n               [\n                  \"src_key_padding_mask\",\n                  null\n               ]\n            ]\n         },\n         \"TransformerEncoderLayer\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"d_model\"\n               ],\n               [\n                  \"nhead\"\n               ],\n               [\n                  \"dim_feedforward\",\n                  2048\n               ],\n               [\n                  \"dropout\",\n                  0.1\n               ],\n               [\n                  \"activation\",\n                  \"relu\"\n               ]\n            ],\n            \"__setstate__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"src\"\n               ],\n               [\n                  \"src_mask\",\n                  null\n               ],\n               [\n                  \"src_key_padding_mask\",\n                  null\n               ]\n            ]\n         }\n      },\n      \"torch.nn.modules.upsampling\": {\n         \"Upsample\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"size\",\n                  null\n               ],\n               [\n                  \"scale_factor\",\n                  null\n               ],\n               [\n                  \"mode\",\n                  \"nearest\"\n               ],\n               [\n                  \"align_corners\",\n                  null\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"UpsamplingBilinear2d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"size\",\n                  null\n               ],\n               [\n                  \"scale_factor\",\n                  null\n               ]\n            ]\n         },\n         \"UpsamplingNearest2d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"size\",\n                  null\n               ],\n               [\n                  \"scale_factor\",\n                  null\n               ]\n            ]\n         }\n      },\n      \"torch.nn.parallel._functions\": {\n         \"Broadcast\": {\n            \"backward\": [\n               [\n                  \"ctx\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"target_gpus\"\n               ]\n            ]\n         },\n         \"Gather\": {\n            \"backward\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"grad_output\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"target_device\"\n               ],\n               [\n                  \"dim\"\n               ]\n            ]\n         },\n         \"ReduceAddCoalesced\": {\n            \"backward\": [\n               [\n                  \"ctx\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"destination\"\n               ],\n               [\n                  \"num_inputs\"\n               ]\n            ]\n         },\n         \"Scatter\": {\n            \"backward\": [\n               [\n                  \"ctx\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"target_gpus\"\n               ],\n               [\n                  \"chunk_sizes\"\n               ],\n               [\n                  \"dim\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.parallel.data_parallel\": {\n         \"DataParallel\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"module\"\n               ],\n               [\n                  \"device_ids\",\n                  null\n               ],\n               [\n                  \"output_device\",\n                  null\n               ],\n               [\n                  \"dim\",\n                  0\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"gather\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"outputs\"\n               ],\n               [\n                  \"output_device\"\n               ]\n            ],\n            \"parallel_apply\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"replicas\"\n               ],\n               [\n                  \"inputs\"\n               ],\n               [\n                  \"kwargs\"\n               ]\n            ],\n            \"replicate\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"module\"\n               ],\n               [\n                  \"device_ids\"\n               ]\n            ],\n            \"scatter\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"inputs\"\n               ],\n               [\n                  \"kwargs\"\n               ],\n               [\n                  \"device_ids\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.parallel.distributed\": {\n         \"DistributedDataParallel\": {\n            \"__getstate__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"module\"\n               ],\n               [\n                  \"device_ids\",\n                  null\n               ],\n               [\n                  \"output_device\",\n                  null\n               ],\n               [\n                  \"dim\",\n                  0\n               ],\n               [\n                  \"broadcast_buffers\",\n                  true\n               ],\n               [\n                  \"process_group\",\n                  null\n               ],\n               [\n                  \"bucket_cap_mb\",\n                  25\n               ],\n               [\n                  \"find_unused_parameters\",\n                  false\n               ],\n               [\n                  \"check_reduction\",\n                  false\n               ]\n            ],\n            \"__setstate__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state\"\n               ]\n            ],\n            \"_check_default_group\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_ddp_init_helper\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_distributed_broadcast_coalesced\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"tensors\"\n               ],\n               [\n                  \"buffer_size\"\n               ]\n            ],\n            \"_passing_sync_batchnorm_handle\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"module_copies\"\n               ]\n            ],\n            \"_sync_params\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"gather\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"outputs\"\n               ],\n               [\n                  \"output_device\"\n               ]\n            ],\n            \"no_sync\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"parallel_apply\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"replicas\"\n               ],\n               [\n                  \"inputs\"\n               ],\n               [\n                  \"kwargs\"\n               ]\n            ],\n            \"scatter\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"inputs\"\n               ],\n               [\n                  \"kwargs\"\n               ],\n               [\n                  \"device_ids\"\n               ]\n            ],\n            \"train\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"mode\",\n                  true\n               ]\n            ]\n         }\n      },\n      \"torch.nn.parameter\": {\n         \"Parameter\": {\n            \"__deepcopy__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"memo\"\n               ]\n            ],\n            \"__new__\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"data\",\n                  null\n               ],\n               [\n                  \"requires_grad\",\n                  true\n               ]\n            ],\n            \"__reduce_ex__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"proto\"\n               ]\n            ],\n            \"__repr__\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.qat.modules.conv\": {\n         \"Conv2d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"in_channels\"\n               ],\n               [\n                  \"out_channels\"\n               ],\n               [\n                  \"kernel_size\"\n               ],\n               [\n                  \"stride\",\n                  1\n               ],\n               [\n                  \"padding\",\n                  0\n               ],\n               [\n                  \"dilation\",\n                  1\n               ],\n               [\n                  \"groups\",\n                  1\n               ],\n               [\n                  \"bias\",\n                  true\n               ],\n               [\n                  \"padding_mode\",\n                  \"zeros\"\n               ],\n               [\n                  \"qconfig\",\n                  null\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ],\n            \"from_float\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"mod\"\n               ],\n               [\n                  \"qconfig\",\n                  null\n               ]\n            ]\n         }\n      },\n      \"torch.nn.qat.modules.linear\": {\n         \"Linear\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"in_features\"\n               ],\n               [\n                  \"out_features\"\n               ],\n               [\n                  \"bias\",\n                  true\n               ],\n               [\n                  \"qconfig\",\n                  null\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ],\n            \"from_float\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"mod\"\n               ],\n               [\n                  \"qconfig\",\n                  null\n               ]\n            ]\n         }\n      },\n      \"torch.nn.quantized.dynamic.modules.linear\": {\n         \"Linear\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"in_features\"\n               ],\n               [\n                  \"out_features\"\n               ],\n               [\n                  \"bias_\",\n                  true\n               ],\n               [\n                  \"dtype\",\n                  {\n                     \"col_offset\": 68,\n                     \"ctx\": {},\n                     \"id\": \"torch\",\n                     \"lineno\": 31\n                  }\n               ]\n            ],\n            \"_get_name\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ],\n            \"from_float\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"mod\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.quantized.dynamic.modules.rnn\": {\n         \"LSTM\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_get_name\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"check_forward_args\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"hidden\"\n               ],\n               [\n                  \"batch_sizes\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"hx\",\n                  null\n               ]\n            ],\n            \"forward_impl\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"hx\"\n               ],\n               [\n                  \"batch_sizes\"\n               ],\n               [\n                  \"max_batch_size\"\n               ],\n               [\n                  \"sorted_indices\"\n               ]\n            ],\n            \"forward_packed\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"hx\",\n                  null\n               ]\n            ],\n            \"forward_tensor\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"hx\",\n                  null\n               ]\n            ],\n            \"from_float\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"mod\"\n               ]\n            ],\n            \"permute_hidden\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"hx\"\n               ],\n               [\n                  \"permutation\"\n               ]\n            ]\n         },\n         \"PackedParameter\": {\n            \"__getstate__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"param\"\n               ]\n            ],\n            \"__repr__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__setstate__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state\"\n               ]\n            ],\n            \"_load_from_state_dict\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state_dict\"\n               ],\n               [\n                  \"prefix\"\n               ],\n               [\n                  \"local_metadata\"\n               ],\n               [\n                  \"strict\"\n               ],\n               [\n                  \"missing_keys\"\n               ],\n               [\n                  \"unexpected_keys\"\n               ],\n               [\n                  \"error_msgs\"\n               ]\n            ],\n            \"_save_to_state_dict\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"destination\"\n               ],\n               [\n                  \"prefix\"\n               ],\n               [\n                  \"keep_vars\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"unpack\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"RNNBase\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"mode\"\n               ],\n               [\n                  \"input_size\"\n               ],\n               [\n                  \"hidden_size\"\n               ],\n               [\n                  \"num_layers\",\n                  1\n               ],\n               [\n                  \"bias\",\n                  true\n               ],\n               [\n                  \"batch_first\",\n                  false\n               ],\n               [\n                  \"dropout\",\n                  0.0\n               ],\n               [\n                  \"bidirectional\",\n                  false\n               ],\n               [\n                  \"dtype\",\n                  {\n                     \"col_offset\": 56,\n                     \"ctx\": {},\n                     \"id\": \"torch\",\n                     \"lineno\": 73\n                  }\n               ]\n            ],\n            \"__repr__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_get_name\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"all_weights\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"check_forward_args\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"hidden\"\n               ],\n               [\n                  \"batch_sizes\"\n               ]\n            ],\n            \"check_hidden_size\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"hx\"\n               ],\n               [\n                  \"expected_hidden_size\"\n               ],\n               [\n                  \"msg\",\n                  \"Expected hidden size {}, got {}\"\n               ]\n            ],\n            \"check_input\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"batch_sizes\"\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"from_float\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"mod\"\n               ]\n            ],\n            \"get_expected_hidden_size\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"batch_sizes\"\n               ]\n            ],\n            \"permute_hidden\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"hx\"\n               ],\n               [\n                  \"permutation\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.quantized.modules.__init__\": {\n         \"DeQuantize\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"Xq\"\n               ]\n            ],\n            \"from_float\": [\n               [\n                  \"mod\"\n               ]\n            ]\n         },\n         \"Quantize\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"scale\"\n               ],\n               [\n                  \"zero_point\"\n               ],\n               [\n                  \"dtype\"\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"X\"\n               ]\n            ],\n            \"from_float\": [\n               [\n                  \"mod\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.quantized.modules.activation\": {\n         \"ReLU\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"inplace\",\n                  false\n               ]\n            ],\n            \"_get_name\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ],\n            \"from_float\": [\n               [\n                  \"mod\"\n               ]\n            ]\n         },\n         \"ReLU6\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"inplace\",\n                  false\n               ]\n            ],\n            \"_get_name\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ],\n            \"from_float\": [\n               [\n                  \"mod\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.quantized.modules.batchnorm\": {\n         \"BatchNorm2d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"num_features\"\n               ],\n               [\n                  \"eps\",\n                  1e-05\n               ],\n               [\n                  \"momentum\",\n                  0.1\n               ]\n            ],\n            \"_get_name\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ],\n            \"from_float\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"mod\"\n               ]\n            ]\n         },\n         \"BatchNorm3d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"num_features\"\n               ],\n               [\n                  \"eps\",\n                  1e-05\n               ],\n               [\n                  \"momentum\",\n                  0.1\n               ]\n            ],\n            \"_get_name\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ],\n            \"from_float\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"mod\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.quantized.modules.conv\": {\n         \"Conv2d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"in_channels\"\n               ],\n               [\n                  \"out_channels\"\n               ],\n               [\n                  \"kernel_size\"\n               ],\n               [\n                  \"stride\",\n                  1\n               ],\n               [\n                  \"padding\",\n                  0\n               ],\n               [\n                  \"dilation\",\n                  1\n               ],\n               [\n                  \"groups\",\n                  1\n               ],\n               [\n                  \"bias\",\n                  true\n               ],\n               [\n                  \"padding_mode\",\n                  \"zeros\"\n               ]\n            ],\n            \"_get_name\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_weight_bias\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"bias\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ],\n            \"from_float\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"mod\"\n               ]\n            ],\n            \"set_weight_bias\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"w\"\n               ],\n               [\n                  \"b\"\n               ]\n            ],\n            \"weight\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"Conv3d\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"in_channels\"\n               ],\n               [\n                  \"out_channels\"\n               ],\n               [\n                  \"kernel_size\"\n               ],\n               [\n                  \"stride\",\n                  1\n               ],\n               [\n                  \"padding\",\n                  0\n               ],\n               [\n                  \"dilation\",\n                  1\n               ],\n               [\n                  \"groups\",\n                  1\n               ],\n               [\n                  \"bias\",\n                  true\n               ],\n               [\n                  \"padding_mode\",\n                  \"zeros\"\n               ]\n            ],\n            \"_get_name\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_weight_bias\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"bias\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ],\n            \"from_float\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"mod\"\n               ]\n            ],\n            \"set_weight_bias\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"w\"\n               ],\n               [\n                  \"b\"\n               ]\n            ],\n            \"weight\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"_ConvNd\": {\n            \"__getstate__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"in_channels\"\n               ],\n               [\n                  \"out_channels\"\n               ],\n               [\n                  \"kernel_size\"\n               ],\n               [\n                  \"stride\",\n                  1\n               ],\n               [\n                  \"padding\",\n                  0\n               ],\n               [\n                  \"dilation\",\n                  1\n               ],\n               [\n                  \"groups\",\n                  1\n               ],\n               [\n                  \"bias\",\n                  true\n               ],\n               [\n                  \"padding_mode\",\n                  \"zeros\"\n               ]\n            ],\n            \"__setstate__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state\"\n               ]\n            ],\n            \"_load_from_state_dict\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state_dict\"\n               ],\n               [\n                  \"prefix\"\n               ],\n               [\n                  \"local_metadata\"\n               ],\n               [\n                  \"strict\"\n               ],\n               [\n                  \"missing_keys\"\n               ],\n               [\n                  \"unexpected_keys\"\n               ],\n               [\n                  \"error_msgs\"\n               ]\n            ],\n            \"_save_to_state_dict\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"destination\"\n               ],\n               [\n                  \"prefix\"\n               ],\n               [\n                  \"keep_vars\"\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.quantized.modules.functional_modules\": {\n         \"FloatFunctional\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"add\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ],\n               [\n                  \"y\"\n               ]\n            ],\n            \"add_relu\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ],\n               [\n                  \"y\"\n               ]\n            ],\n            \"add_scalar\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ],\n               [\n                  \"y\"\n               ]\n            ],\n            \"cat\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ],\n               [\n                  \"dim\",\n                  0\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ],\n            \"mul\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ],\n               [\n                  \"y\"\n               ]\n            ],\n            \"mul_scalar\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ],\n               [\n                  \"y\"\n               ]\n            ]\n         },\n         \"QFunctional\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_get_name\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_load_from_state_dict\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state_dict\"\n               ],\n               [\n                  \"prefix\"\n               ],\n               [\n                  \"local_metadata\"\n               ],\n               [\n                  \"strict\"\n               ],\n               [\n                  \"missing_keys\"\n               ],\n               [\n                  \"unexpected_keys\"\n               ],\n               [\n                  \"error_msgs\"\n               ]\n            ],\n            \"_save_to_state_dict\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"destination\"\n               ],\n               [\n                  \"prefix\"\n               ],\n               [\n                  \"keep_vars\"\n               ]\n            ],\n            \"add\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ],\n               [\n                  \"y\"\n               ]\n            ],\n            \"add_relu\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ],\n               [\n                  \"y\"\n               ]\n            ],\n            \"add_scalar\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ],\n               [\n                  \"y\"\n               ]\n            ],\n            \"cat\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ],\n               [\n                  \"dim\",\n                  0\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ],\n            \"from_float\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"mod\"\n               ]\n            ],\n            \"mul\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ],\n               [\n                  \"y\"\n               ]\n            ],\n            \"mul_scalar\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ],\n               [\n                  \"y\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.quantized.modules.linear\": {\n         \"Linear\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"in_features\"\n               ],\n               [\n                  \"out_features\"\n               ],\n               [\n                  \"bias_\",\n                  true\n               ],\n               [\n                  \"dtype\",\n                  {\n                     \"col_offset\": 68,\n                     \"ctx\": {},\n                     \"id\": \"torch\",\n                     \"lineno\": 116\n                  }\n               ]\n            ],\n            \"__repr__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_get_name\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_load_from_state_dict\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state_dict\"\n               ],\n               [\n                  \"prefix\"\n               ],\n               [\n                  \"local_metadata\"\n               ],\n               [\n                  \"strict\"\n               ],\n               [\n                  \"missing_keys\"\n               ],\n               [\n                  \"unexpected_keys\"\n               ],\n               [\n                  \"error_msgs\"\n               ]\n            ],\n            \"_save_to_state_dict\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"destination\"\n               ],\n               [\n                  \"prefix\"\n               ],\n               [\n                  \"keep_vars\"\n               ]\n            ],\n            \"_weight_bias\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"bias\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ],\n            \"from_float\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"mod\"\n               ]\n            ],\n            \"set_weight_bias\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"w\"\n               ],\n               [\n                  \"b\"\n               ]\n            ],\n            \"weight\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"LinearPackedParams\": {\n            \"__getstate__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"dtype\",\n                  {\n                     \"col_offset\": 29,\n                     \"ctx\": {},\n                     \"id\": \"torch\",\n                     \"lineno\": 13\n                  }\n               ]\n            ],\n            \"__repr__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__setstate__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state\"\n               ]\n            ],\n            \"_load_from_state_dict\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state_dict\"\n               ],\n               [\n                  \"prefix\"\n               ],\n               [\n                  \"local_metadata\"\n               ],\n               [\n                  \"strict\"\n               ],\n               [\n                  \"missing_keys\"\n               ],\n               [\n                  \"unexpected_keys\"\n               ],\n               [\n                  \"error_msgs\"\n               ]\n            ],\n            \"_save_to_state_dict\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"destination\"\n               ],\n               [\n                  \"prefix\"\n               ],\n               [\n                  \"keep_vars\"\n               ]\n            ],\n            \"_weight_bias\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ],\n            \"set_weight_bias\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"weight\"\n               ],\n               [\n                  \"bias\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.utils.prune\": {\n         \"BasePruningMethod\": {\n            \"__call__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"module\"\n               ],\n               [\n                  \"inputs\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"apply\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"module\"\n               ],\n               [\n                  \"name\"\n               ]\n            ],\n            \"apply_mask\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"module\"\n               ]\n            ],\n            \"compute_mask\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"t\"\n               ],\n               [\n                  \"default_mask\"\n               ]\n            ],\n            \"prune\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"t\"\n               ],\n               [\n                  \"default_mask\",\n                  null\n               ]\n            ],\n            \"remove\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"module\"\n               ]\n            ]\n         },\n         \"CustomFromMask\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"mask\"\n               ]\n            ],\n            \"apply\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"module\"\n               ],\n               [\n                  \"name\"\n               ],\n               [\n                  \"mask\"\n               ]\n            ],\n            \"compute_mask\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"t\"\n               ],\n               [\n                  \"default_mask\"\n               ]\n            ]\n         },\n         \"Identity\": {\n            \"apply\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"module\"\n               ],\n               [\n                  \"name\"\n               ]\n            ],\n            \"compute_mask\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"t\"\n               ],\n               [\n                  \"default_mask\"\n               ]\n            ]\n         },\n         \"L1Unstructured\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"amount\"\n               ]\n            ],\n            \"apply\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"module\"\n               ],\n               [\n                  \"name\"\n               ],\n               [\n                  \"amount\"\n               ]\n            ],\n            \"compute_mask\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"t\"\n               ],\n               [\n                  \"default_mask\"\n               ]\n            ]\n         },\n         \"LnStructured\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"amount\"\n               ],\n               [\n                  \"n\"\n               ],\n               [\n                  \"dim\",\n                  {}\n               ]\n            ],\n            \"apply\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"module\"\n               ],\n               [\n                  \"name\"\n               ],\n               [\n                  \"amount\"\n               ],\n               [\n                  \"n\"\n               ],\n               [\n                  \"dim\"\n               ]\n            ],\n            \"compute_mask\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"t\"\n               ],\n               [\n                  \"default_mask\"\n               ]\n            ]\n         },\n         \"PruningContainer\": {\n            \"__getitem__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"idx\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__iter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__len__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"add_pruning_method\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"method\"\n               ]\n            ],\n            \"compute_mask\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"t\"\n               ],\n               [\n                  \"default_mask\"\n               ]\n            ]\n         },\n         \"RandomStructured\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"amount\"\n               ],\n               [\n                  \"dim\",\n                  {}\n               ]\n            ],\n            \"apply\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"module\"\n               ],\n               [\n                  \"name\"\n               ],\n               [\n                  \"amount\"\n               ],\n               [\n                  \"dim\",\n                  {}\n               ]\n            ],\n            \"compute_mask\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"t\"\n               ],\n               [\n                  \"default_mask\"\n               ]\n            ]\n         },\n         \"RandomUnstructured\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"amount\"\n               ]\n            ],\n            \"apply\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"module\"\n               ],\n               [\n                  \"name\"\n               ],\n               [\n                  \"amount\"\n               ]\n            ],\n            \"compute_mask\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"t\"\n               ],\n               [\n                  \"default_mask\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.utils.rnn\": {\n         \"PackedSequence\": {\n            \"__new__\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"data\"\n               ],\n               [\n                  \"batch_sizes\",\n                  null\n               ],\n               [\n                  \"sorted_indices\",\n                  null\n               ],\n               [\n                  \"unsorted_indices\",\n                  null\n               ]\n            ],\n            \"byte\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"char\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"cpu\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"cuda\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"double\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"float\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"half\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"int\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"is_cuda\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"is_pinned\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"long\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"pin_memory\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"short\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"to\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.utils.spectral_norm\": {\n         \"SpectralNorm\": {\n            \"__call__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"module\"\n               ],\n               [\n                  \"inputs\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"name\",\n                  \"weight\"\n               ],\n               [\n                  \"n_power_iterations\",\n                  1\n               ],\n               [\n                  \"dim\",\n                  0\n               ],\n               [\n                  \"eps\",\n                  1e-12\n               ]\n            ],\n            \"_solve_v_and_rescale\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"weight_mat\"\n               ],\n               [\n                  \"u\"\n               ],\n               [\n                  \"target_sigma\"\n               ]\n            ],\n            \"apply\": [\n               [\n                  \"module\"\n               ],\n               [\n                  \"name\"\n               ],\n               [\n                  \"n_power_iterations\"\n               ],\n               [\n                  \"dim\"\n               ],\n               [\n                  \"eps\"\n               ]\n            ],\n            \"compute_weight\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"module\"\n               ],\n               [\n                  \"do_power_iteration\"\n               ]\n            ],\n            \"remove\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"module\"\n               ]\n            ],\n            \"reshape_weight_to_matrix\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"weight\"\n               ]\n            ]\n         },\n         \"SpectralNormLoadStateDictPreHook\": {\n            \"__call__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state_dict\"\n               ],\n               [\n                  \"prefix\"\n               ],\n               [\n                  \"local_metadata\"\n               ],\n               [\n                  \"strict\"\n               ],\n               [\n                  \"missing_keys\"\n               ],\n               [\n                  \"unexpected_keys\"\n               ],\n               [\n                  \"error_msgs\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"fn\"\n               ]\n            ]\n         },\n         \"SpectralNormStateDictHook\": {\n            \"__call__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"module\"\n               ],\n               [\n                  \"state_dict\"\n               ],\n               [\n                  \"prefix\"\n               ],\n               [\n                  \"local_metadata\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"fn\"\n               ]\n            ]\n         }\n      },\n      \"torch.nn.utils.weight_norm\": {\n         \"WeightNorm\": {\n            \"__call__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"module\"\n               ],\n               [\n                  \"inputs\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"name\"\n               ],\n               [\n                  \"dim\"\n               ]\n            ],\n            \"apply\": [\n               [\n                  \"module\"\n               ],\n               [\n                  \"name\"\n               ],\n               [\n                  \"dim\"\n               ]\n            ],\n            \"compute_weight\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"module\"\n               ]\n            ],\n            \"remove\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"module\"\n               ]\n            ]\n         }\n      },\n      \"torch.optim.adadelta\": {\n         \"Adadelta\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"params\"\n               ],\n               [\n                  \"lr\",\n                  1.0\n               ],\n               [\n                  \"rho\",\n                  0.9\n               ],\n               [\n                  \"eps\",\n                  1e-06\n               ],\n               [\n                  \"weight_decay\",\n                  0\n               ]\n            ],\n            \"step\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"closure\",\n                  null\n               ]\n            ]\n         }\n      },\n      \"torch.optim.adagrad\": {\n         \"Adagrad\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"params\"\n               ],\n               [\n                  \"lr\",\n                  0.01\n               ],\n               [\n                  \"lr_decay\",\n                  0\n               ],\n               [\n                  \"weight_decay\",\n                  0\n               ],\n               [\n                  \"initial_accumulator_value\",\n                  0\n               ],\n               [\n                  \"eps\",\n                  1e-10\n               ]\n            ],\n            \"share_memory\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"step\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"closure\",\n                  null\n               ]\n            ]\n         }\n      },\n      \"torch.optim.adam\": {\n         \"Adam\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"params\"\n               ],\n               [\n                  \"lr\",\n                  0.001\n               ],\n               [\n                  \"betas\",\n                  [\n                     {\n                        \"col_offset\": 47,\n                        \"lineno\": 30,\n                        \"n\": 0.9\n                     },\n                     {\n                        \"col_offset\": 52,\n                        \"lineno\": 30,\n                        \"n\": 0.999\n                     }\n                  ]\n               ],\n               [\n                  \"eps\",\n                  1e-08\n               ],\n               [\n                  \"weight_decay\",\n                  0\n               ],\n               [\n                  \"amsgrad\",\n                  false\n               ]\n            ],\n            \"__setstate__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state\"\n               ]\n            ],\n            \"step\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"closure\",\n                  null\n               ]\n            ]\n         }\n      },\n      \"torch.optim.adamax\": {\n         \"Adamax\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"params\"\n               ],\n               [\n                  \"lr\",\n                  0.002\n               ],\n               [\n                  \"betas\",\n                  [\n                     {\n                        \"col_offset\": 47,\n                        \"lineno\": 23,\n                        \"n\": 0.9\n                     },\n                     {\n                        \"col_offset\": 52,\n                        \"lineno\": 23,\n                        \"n\": 0.999\n                     }\n                  ]\n               ],\n               [\n                  \"eps\",\n                  1e-08\n               ],\n               [\n                  \"weight_decay\",\n                  0\n               ]\n            ],\n            \"step\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"closure\",\n                  null\n               ]\n            ]\n         }\n      },\n      \"torch.optim.adamw\": {\n         \"AdamW\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"params\"\n               ],\n               [\n                  \"lr\",\n                  0.001\n               ],\n               [\n                  \"betas\",\n                  [\n                     {\n                        \"col_offset\": 47,\n                        \"lineno\": 33,\n                        \"n\": 0.9\n                     },\n                     {\n                        \"col_offset\": 52,\n                        \"lineno\": 33,\n                        \"n\": 0.999\n                     }\n                  ]\n               ],\n               [\n                  \"eps\",\n                  1e-08\n               ],\n               [\n                  \"weight_decay\",\n                  0.01\n               ],\n               [\n                  \"amsgrad\",\n                  false\n               ]\n            ],\n            \"__setstate__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state\"\n               ]\n            ],\n            \"step\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"closure\",\n                  null\n               ]\n            ]\n         }\n      },\n      \"torch.optim.asgd\": {\n         \"ASGD\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"params\"\n               ],\n               [\n                  \"lr\",\n                  0.01\n               ],\n               [\n                  \"lambd\",\n                  0.0001\n               ],\n               [\n                  \"alpha\",\n                  0.75\n               ],\n               [\n                  \"t0\",\n                  1000000.0\n               ],\n               [\n                  \"weight_decay\",\n                  0\n               ]\n            ],\n            \"step\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"closure\",\n                  null\n               ]\n            ]\n         }\n      },\n      \"torch.optim.lbfgs\": {\n         \"LBFGS\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"params\"\n               ],\n               [\n                  \"lr\",\n                  1\n               ],\n               [\n                  \"max_iter\",\n                  20\n               ],\n               [\n                  \"max_eval\",\n                  null\n               ],\n               [\n                  \"tolerance_grad\",\n                  1e-07\n               ],\n               [\n                  \"tolerance_change\",\n                  1e-09\n               ],\n               [\n                  \"history_size\",\n                  100\n               ],\n               [\n                  \"line_search_fn\",\n                  null\n               ]\n            ],\n            \"_add_grad\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"step_size\"\n               ],\n               [\n                  \"update\"\n               ]\n            ],\n            \"_clone_param\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_directional_evaluate\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"closure\"\n               ],\n               [\n                  \"x\"\n               ],\n               [\n                  \"t\"\n               ],\n               [\n                  \"d\"\n               ]\n            ],\n            \"_gather_flat_grad\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_numel\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_set_param\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"params_data\"\n               ]\n            ],\n            \"step\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"closure\"\n               ]\n            ]\n         }\n      },\n      \"torch.optim.lr_scheduler\": {\n         \"CosineAnnealingLR\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"optimizer\"\n               ],\n               [\n                  \"T_max\"\n               ],\n               [\n                  \"eta_min\",\n                  0\n               ],\n               [\n                  \"last_epoch\",\n                  {}\n               ]\n            ],\n            \"_get_closed_form_lr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"get_lr\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"CosineAnnealingWarmRestarts\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"optimizer\"\n               ],\n               [\n                  \"T_0\"\n               ],\n               [\n                  \"T_mult\",\n                  1\n               ],\n               [\n                  \"eta_min\",\n                  0\n               ],\n               [\n                  \"last_epoch\",\n                  {}\n               ]\n            ],\n            \"get_lr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"step\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"epoch\",\n                  null\n               ]\n            ]\n         },\n         \"CyclicLR\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"optimizer\"\n               ],\n               [\n                  \"base_lr\"\n               ],\n               [\n                  \"max_lr\"\n               ],\n               [\n                  \"step_size_up\",\n                  2000\n               ],\n               [\n                  \"step_size_down\",\n                  null\n               ],\n               [\n                  \"mode\",\n                  \"triangular\"\n               ],\n               [\n                  \"gamma\",\n                  1.0\n               ],\n               [\n                  \"scale_fn\",\n                  null\n               ],\n               [\n                  \"scale_mode\",\n                  \"cycle\"\n               ],\n               [\n                  \"cycle_momentum\",\n                  true\n               ],\n               [\n                  \"base_momentum\",\n                  0.8\n               ],\n               [\n                  \"max_momentum\",\n                  0.9\n               ],\n               [\n                  \"last_epoch\",\n                  {}\n               ]\n            ],\n            \"_exp_range_scale_fn\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ],\n            \"_format_param\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"name\"\n               ],\n               [\n                  \"optimizer\"\n               ],\n               [\n                  \"param\"\n               ]\n            ],\n            \"_triangular2_scale_fn\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ],\n            \"_triangular_scale_fn\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ],\n            \"get_lr\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"ExponentialLR\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"optimizer\"\n               ],\n               [\n                  \"gamma\"\n               ],\n               [\n                  \"last_epoch\",\n                  {}\n               ]\n            ],\n            \"_get_closed_form_lr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"get_lr\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"LambdaLR\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"optimizer\"\n               ],\n               [\n                  \"lr_lambda\"\n               ],\n               [\n                  \"last_epoch\",\n                  {}\n               ]\n            ],\n            \"get_lr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"load_state_dict\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state_dict\"\n               ]\n            ],\n            \"state_dict\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"MultiStepLR\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"optimizer\"\n               ],\n               [\n                  \"milestones\"\n               ],\n               [\n                  \"gamma\",\n                  0.1\n               ],\n               [\n                  \"last_epoch\",\n                  {}\n               ]\n            ],\n            \"_get_closed_form_lr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"get_lr\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"MultiplicativeLR\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"optimizer\"\n               ],\n               [\n                  \"lr_lambda\"\n               ],\n               [\n                  \"last_epoch\",\n                  {}\n               ]\n            ],\n            \"get_lr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"load_state_dict\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state_dict\"\n               ]\n            ],\n            \"state_dict\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"OneCycleLR\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"optimizer\"\n               ],\n               [\n                  \"max_lr\"\n               ],\n               [\n                  \"total_steps\",\n                  null\n               ],\n               [\n                  \"epochs\",\n                  null\n               ],\n               [\n                  \"steps_per_epoch\",\n                  null\n               ],\n               [\n                  \"pct_start\",\n                  0.3\n               ],\n               [\n                  \"anneal_strategy\",\n                  \"cos\"\n               ],\n               [\n                  \"cycle_momentum\",\n                  true\n               ],\n               [\n                  \"base_momentum\",\n                  0.85\n               ],\n               [\n                  \"max_momentum\",\n                  0.95\n               ],\n               [\n                  \"div_factor\",\n                  25.0\n               ],\n               [\n                  \"final_div_factor\",\n                  10000.0\n               ],\n               [\n                  \"last_epoch\",\n                  {}\n               ]\n            ],\n            \"_annealing_cos\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"start\"\n               ],\n               [\n                  \"end\"\n               ],\n               [\n                  \"pct\"\n               ]\n            ],\n            \"_annealing_linear\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"start\"\n               ],\n               [\n                  \"end\"\n               ],\n               [\n                  \"pct\"\n               ]\n            ],\n            \"_format_param\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"name\"\n               ],\n               [\n                  \"optimizer\"\n               ],\n               [\n                  \"param\"\n               ]\n            ],\n            \"get_lr\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"ReduceLROnPlateau\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"optimizer\"\n               ],\n               [\n                  \"mode\",\n                  \"min\"\n               ],\n               [\n                  \"factor\",\n                  0.1\n               ],\n               [\n                  \"patience\",\n                  10\n               ],\n               [\n                  \"verbose\",\n                  false\n               ],\n               [\n                  \"threshold\",\n                  0.0001\n               ],\n               [\n                  \"threshold_mode\",\n                  \"rel\"\n               ],\n               [\n                  \"cooldown\",\n                  0\n               ],\n               [\n                  \"min_lr\",\n                  0\n               ],\n               [\n                  \"eps\",\n                  1e-08\n               ]\n            ],\n            \"_init_is_better\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"mode\"\n               ],\n               [\n                  \"threshold\"\n               ],\n               [\n                  \"threshold_mode\"\n               ]\n            ],\n            \"_reduce_lr\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"epoch\"\n               ]\n            ],\n            \"_reset\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"in_cooldown\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"is_better\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"a\"\n               ],\n               [\n                  \"best\"\n               ]\n            ],\n            \"load_state_dict\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state_dict\"\n               ]\n            ],\n            \"state_dict\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"step\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"metrics\"\n               ],\n               [\n                  \"epoch\",\n                  null\n               ]\n            ]\n         },\n         \"StepLR\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"optimizer\"\n               ],\n               [\n                  \"step_size\"\n               ],\n               [\n                  \"gamma\",\n                  0.1\n               ],\n               [\n                  \"last_epoch\",\n                  {}\n               ]\n            ],\n            \"_get_closed_form_lr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"get_lr\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"_LRScheduler\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"optimizer\"\n               ],\n               [\n                  \"last_epoch\",\n                  {}\n               ]\n            ],\n            \"get_last_lr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"get_lr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"load_state_dict\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state_dict\"\n               ]\n            ],\n            \"state_dict\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"step\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"epoch\",\n                  null\n               ]\n            ]\n         }\n      },\n      \"torch.optim.optimizer\": {\n         \"Optimizer\": {\n            \"__getstate__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"params\"\n               ],\n               [\n                  \"defaults\"\n               ]\n            ],\n            \"__repr__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__setstate__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state\"\n               ]\n            ],\n            \"add_param_group\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"param_group\"\n               ]\n            ],\n            \"load_state_dict\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state_dict\"\n               ]\n            ],\n            \"state_dict\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"step\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"closure\"\n               ]\n            ],\n            \"zero_grad\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"_RequiredParameter\": {\n            \"__repr__\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.optim.rmsprop\": {\n         \"RMSprop\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"params\"\n               ],\n               [\n                  \"lr\",\n                  0.01\n               ],\n               [\n                  \"alpha\",\n                  0.99\n               ],\n               [\n                  \"eps\",\n                  1e-08\n               ],\n               [\n                  \"weight_decay\",\n                  0\n               ],\n               [\n                  \"momentum\",\n                  0\n               ],\n               [\n                  \"centered\",\n                  false\n               ]\n            ],\n            \"__setstate__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state\"\n               ]\n            ],\n            \"step\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"closure\",\n                  null\n               ]\n            ]\n         }\n      },\n      \"torch.optim.rprop\": {\n         \"Rprop\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"params\"\n               ],\n               [\n                  \"lr\",\n                  0.01\n               ],\n               [\n                  \"etas\",\n                  [\n                     {\n                        \"col_offset\": 46,\n                        \"lineno\": 19,\n                        \"n\": 0.5\n                     },\n                     {\n                        \"col_offset\": 51,\n                        \"lineno\": 19,\n                        \"n\": 1.2\n                     }\n                  ]\n               ],\n               [\n                  \"step_sizes\",\n                  [\n                     {\n                        \"col_offset\": 69,\n                        \"lineno\": 19,\n                        \"n\": 1e-06\n                     },\n                     {\n                        \"col_offset\": 75,\n                        \"lineno\": 19,\n                        \"n\": 50\n                     }\n                  ]\n               ]\n            ],\n            \"step\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"closure\",\n                  null\n               ]\n            ]\n         }\n      },\n      \"torch.optim.sgd\": {\n         \"SGD\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"params\"\n               ],\n               [\n                  \"lr\",\n                  \"required\"\n               ],\n               [\n                  \"momentum\",\n                  0\n               ],\n               [\n                  \"dampening\",\n                  0\n               ],\n               [\n                  \"weight_decay\",\n                  0\n               ],\n               [\n                  \"nesterov\",\n                  false\n               ]\n            ],\n            \"__setstate__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state\"\n               ]\n            ],\n            \"step\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"closure\",\n                  null\n               ]\n            ]\n         }\n      },\n      \"torch.optim.sparse_adam\": {\n         \"SparseAdam\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"params\"\n               ],\n               [\n                  \"lr\",\n                  0.001\n               ],\n               [\n                  \"betas\",\n                  [\n                     {\n                        \"col_offset\": 47,\n                        \"lineno\": 25,\n                        \"n\": 0.9\n                     },\n                     {\n                        \"col_offset\": 52,\n                        \"lineno\": 25,\n                        \"n\": 0.999\n                     }\n                  ]\n               ],\n               [\n                  \"eps\",\n                  1e-08\n               ]\n            ],\n            \"step\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"closure\",\n                  null\n               ]\n            ]\n         }\n      },\n      \"torch.quantization._quantize_script\": {\n         \"ConvPackedParams\": {\n            \"__getstate__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__setstate__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state\"\n               ]\n            ],\n            \"_weight_bias\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ],\n            \"set_conv_params\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"stride\"\n               ],\n               [\n                  \"padding\"\n               ],\n               [\n                  \"dilation\"\n               ],\n               [\n                  \"groups\"\n               ]\n            ],\n            \"set_weight_bias\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"weight\"\n               ],\n               [\n                  \"bias\"\n               ]\n            ]\n         }\n      },\n      \"torch.quantization.fake_quantize\": {\n         \"FakeQuantize\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"observer\",\n                  \"MovingAverageMinMaxObserver\"\n               ],\n               [\n                  \"quant_min\",\n                  0\n               ],\n               [\n                  \"quant_max\",\n                  255\n               ]\n            ],\n            \"_load_from_state_dict\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state_dict\"\n               ],\n               [\n                  \"prefix\"\n               ],\n               [\n                  \"local_metadata\"\n               ],\n               [\n                  \"strict\"\n               ],\n               [\n                  \"missing_keys\"\n               ],\n               [\n                  \"unexpected_keys\"\n               ],\n               [\n                  \"error_msgs\"\n               ]\n            ],\n            \"_save_to_state_dict\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"destination\"\n               ],\n               [\n                  \"prefix\"\n               ],\n               [\n                  \"keep_vars\"\n               ]\n            ],\n            \"calculate_qparams\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"disable_fake_quant\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"disable_observer\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"enable_fake_quant\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"enabled\",\n                  true\n               ]\n            ],\n            \"enable_observer\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"enabled\",\n                  true\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"X\"\n               ]\n            ]\n         }\n      },\n      \"torch.quantization.observer\": {\n         \"HistogramObserver\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"bins\",\n                  2048\n               ],\n               [\n                  \"upsample_rate\",\n                  128\n               ],\n               [\n                  \"dtype\",\n                  {\n                     \"col_offset\": 59,\n                     \"ctx\": {},\n                     \"id\": \"torch\",\n                     \"lineno\": 616\n                  }\n               ],\n               [\n                  \"qscheme\",\n                  {\n                     \"col_offset\": 25,\n                     \"ctx\": {},\n                     \"id\": \"torch\",\n                     \"lineno\": 617\n                  }\n               ],\n               [\n                  \"reduce_range\",\n                  false\n               ]\n            ],\n            \"_adjust_min_max\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"combined_min\"\n               ],\n               [\n                  \"combined_max\"\n               ],\n               [\n                  \"upsample_rate\"\n               ]\n            ],\n            \"_combine_histograms\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"orig_hist\"\n               ],\n               [\n                  \"new_hist\"\n               ],\n               [\n                  \"upsample_rate\"\n               ],\n               [\n                  \"downsample_rate\"\n               ],\n               [\n                  \"start_idx\"\n               ],\n               [\n                  \"Nbins\"\n               ]\n            ],\n            \"_load_from_state_dict\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state_dict\"\n               ],\n               [\n                  \"prefix\"\n               ],\n               [\n                  \"local_metadata\"\n               ],\n               [\n                  \"strict\"\n               ],\n               [\n                  \"missing_keys\"\n               ],\n               [\n                  \"unexpected_keys\"\n               ],\n               [\n                  \"error_msgs\"\n               ]\n            ],\n            \"_non_linear_param_search\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_save_to_state_dict\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"destination\"\n               ],\n               [\n                  \"prefix\"\n               ],\n               [\n                  \"keep_vars\"\n               ]\n            ],\n            \"calculate_qparams\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x_orig\"\n               ]\n            ]\n         },\n         \"MinMaxObserver\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"dtype\",\n                  {\n                     \"col_offset\": 29,\n                     \"ctx\": {},\n                     \"id\": \"torch\",\n                     \"lineno\": 315\n                  }\n               ],\n               [\n                  \"qscheme\",\n                  {\n                     \"col_offset\": 51,\n                     \"ctx\": {},\n                     \"id\": \"torch\",\n                     \"lineno\": 315\n                  }\n               ],\n               [\n                  \"reduce_range\",\n                  false\n               ]\n            ],\n            \"_load_from_state_dict\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state_dict\"\n               ],\n               [\n                  \"prefix\"\n               ],\n               [\n                  \"local_metadata\"\n               ],\n               [\n                  \"strict\"\n               ],\n               [\n                  \"missing_keys\"\n               ],\n               [\n                  \"unexpected_keys\"\n               ],\n               [\n                  \"error_msgs\"\n               ]\n            ],\n            \"_save_to_state_dict\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"destination\"\n               ],\n               [\n                  \"prefix\"\n               ],\n               [\n                  \"keep_vars\"\n               ]\n            ],\n            \"calculate_qparams\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x_orig\"\n               ]\n            ]\n         },\n         \"MovingAverageMinMaxObserver\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"averaging_constant\",\n                  0.01\n               ],\n               [\n                  \"dtype\",\n                  {\n                     \"col_offset\": 54,\n                     \"ctx\": {},\n                     \"id\": \"torch\",\n                     \"lineno\": 420\n                  }\n               ],\n               [\n                  \"qscheme\",\n                  {\n                     \"col_offset\": 25,\n                     \"ctx\": {},\n                     \"id\": \"torch\",\n                     \"lineno\": 421\n                  }\n               ],\n               [\n                  \"reduce_range\",\n                  false\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x_orig\"\n               ]\n            ]\n         },\n         \"MovingAveragePerChannelMinMaxObserver\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"averaging_constant\",\n                  0.01\n               ],\n               [\n                  \"ch_axis\",\n                  0\n               ],\n               [\n                  \"dtype\",\n                  {\n                     \"col_offset\": 65,\n                     \"ctx\": {},\n                     \"id\": \"torch\",\n                     \"lineno\": 563\n                  }\n               ],\n               [\n                  \"qscheme\",\n                  {\n                     \"col_offset\": 25,\n                     \"ctx\": {},\n                     \"id\": \"torch\",\n                     \"lineno\": 564\n                  }\n               ],\n               [\n                  \"reduce_range\",\n                  false\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x_orig\"\n               ]\n            ]\n         },\n         \"NoopObserver\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"dtype\",\n                  {\n                     \"col_offset\": 29,\n                     \"ctx\": {},\n                     \"id\": \"torch\",\n                     \"lineno\": 915\n                  }\n               ]\n            ],\n            \"calculate_qparams\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ],\n            \"get_qparams\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"ObserverBase\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"dtype\"\n               ]\n            ],\n            \"calculate_qparams\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ],\n            \"get_qparams\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"PerChannelMinMaxObserver\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"ch_axis\",\n                  0\n               ],\n               [\n                  \"dtype\",\n                  {\n                     \"col_offset\": 40,\n                     \"ctx\": {},\n                     \"id\": \"torch\",\n                     \"lineno\": 466\n                  }\n               ],\n               [\n                  \"qscheme\",\n                  {\n                     \"col_offset\": 25,\n                     \"ctx\": {},\n                     \"id\": \"torch\",\n                     \"lineno\": 467\n                  }\n               ],\n               [\n                  \"reduce_range\",\n                  false\n               ]\n            ],\n            \"_forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x_orig\"\n               ]\n            ],\n            \"_load_from_state_dict\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state_dict\"\n               ],\n               [\n                  \"prefix\"\n               ],\n               [\n                  \"local_metadata\"\n               ],\n               [\n                  \"strict\"\n               ],\n               [\n                  \"missing_keys\"\n               ],\n               [\n                  \"unexpected_keys\"\n               ],\n               [\n                  \"error_msgs\"\n               ]\n            ],\n            \"_save_to_state_dict\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"destination\"\n               ],\n               [\n                  \"prefix\"\n               ],\n               [\n                  \"keep_vars\"\n               ]\n            ],\n            \"calculate_qparams\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"extra_repr\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x_orig\"\n               ]\n            ],\n            \"get_qparams\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"RecordingObserver\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"calculate_qparams\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ],\n            \"get_tensor_value\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"_ObserverBase\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"dtype\",\n                  {\n                     \"col_offset\": 29,\n                     \"ctx\": {},\n                     \"id\": \"torch\",\n                     \"lineno\": 107\n                  }\n               ],\n               [\n                  \"qscheme\",\n                  {\n                     \"col_offset\": 51,\n                     \"ctx\": {},\n                     \"id\": \"torch\",\n                     \"lineno\": 107\n                  }\n               ],\n               [\n                  \"reduce_range\",\n                  false\n               ]\n            ],\n            \"_calculate_per_channel_qparams\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"min_vals\"\n               ],\n               [\n                  \"max_vals\"\n               ]\n            ],\n            \"_calculate_qparams\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"min_val\"\n               ],\n               [\n                  \"max_val\"\n               ]\n            ],\n            \"get_qparams\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.quantization.qconfig\": {\n         \"QConfig\": {\n            \"__new__\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"activation\"\n               ],\n               [\n                  \"weight\"\n               ]\n            ]\n         },\n         \"QConfigDynamic\": {\n            \"__new__\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"weight\"\n               ]\n            ]\n         }\n      },\n      \"torch.quantization.stubs\": {\n         \"DeQuantStub\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ]\n         },\n         \"QuantStub\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"qconfig\",\n                  null\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ]\n         },\n         \"QuantWrapper\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"module\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"X\"\n               ]\n            ]\n         }\n      },\n      \"torch.quasirandom\": {\n         \"SobolEngine\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"dimension\"\n               ],\n               [\n                  \"scramble\",\n                  false\n               ],\n               [\n                  \"seed\",\n                  null\n               ]\n            ],\n            \"__repr__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"draw\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"n\",\n                  1\n               ],\n               [\n                  \"out\",\n                  null\n               ],\n               [\n                  \"dtype\",\n                  {\n                     \"col_offset\": 40,\n                     \"ctx\": {},\n                     \"id\": \"torch\",\n                     \"lineno\": 79\n                  }\n               ]\n            ],\n            \"fast_forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"n\"\n               ]\n            ],\n            \"reset\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.serialization\": {\n         \"_open_buffer_reader\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"buffer\"\n               ]\n            ]\n         },\n         \"_open_buffer_writer\": {\n            \"__exit__\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"_open_file\": {\n            \"__exit__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"name\"\n               ],\n               [\n                  \"mode\"\n               ]\n            ]\n         },\n         \"_open_zipfile_reader\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"name_or_buffer\"\n               ]\n            ]\n         },\n         \"_open_zipfile_writer_buffer\": {\n            \"__exit__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"buffer\"\n               ]\n            ]\n         },\n         \"_open_zipfile_writer_file\": {\n            \"__exit__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"name\"\n               ]\n            ]\n         },\n         \"_opener\": {\n            \"__enter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__exit__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"file_like\"\n               ]\n            ]\n         }\n      },\n      \"torch.storage\": {\n         \"_StorageBase\": {\n            \"__copy__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__deepcopy__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"memo\"\n               ]\n            ],\n            \"__iter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__reduce__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__repr__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__sizeof__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__str__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_new_shared\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"size\"\n               ]\n            ],\n            \"bfloat16\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"bool\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"byte\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"char\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"clone\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"cpu\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"double\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"float\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"half\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"int\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"long\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"pin_memory\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"share_memory_\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"short\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"tolist\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.tensor\": {\n         \"Tensor\": {\n            \"__array__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"dtype\",\n                  null\n               ]\n            ],\n            \"__array_wrap__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"array\"\n               ]\n            ],\n            \"__contains__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"element\"\n               ]\n            ],\n            \"__cuda_array_interface__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__deepcopy__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"memo\"\n               ]\n            ],\n            \"__dir__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__floordiv__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"other\"\n               ]\n            ],\n            \"__format__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"format_spec\"\n               ]\n            ],\n            \"__hash__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__ipow__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"other\"\n               ]\n            ],\n            \"__iter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__len__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__rdiv__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"other\"\n               ]\n            ],\n            \"__reduce_ex__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"proto\"\n               ]\n            ],\n            \"__repr__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__reversed__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__rfloordiv__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"other\"\n               ]\n            ],\n            \"__rpow__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"other\"\n               ]\n            ],\n            \"__rsub__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"other\"\n               ]\n            ],\n            \"__setstate__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state\"\n               ]\n            ],\n            \"_update_names\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"names\"\n               ],\n               [\n                  \"inplace\"\n               ]\n            ],\n            \"align_to\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"backward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"gradient\",\n                  null\n               ],\n               [\n                  \"retain_graph\",\n                  null\n               ],\n               [\n                  \"create_graph\",\n                  false\n               ]\n            ],\n            \"grad\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"is_shared\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"lu\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"pivot\",\n                  true\n               ],\n               [\n                  \"get_infos\",\n                  false\n               ]\n            ],\n            \"norm\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"p\",\n                  \"fro\"\n               ],\n               [\n                  \"dim\",\n                  null\n               ],\n               [\n                  \"keepdim\",\n                  false\n               ],\n               [\n                  \"dtype\",\n                  null\n               ]\n            ],\n            \"refine_names\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"register_hook\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"hook\"\n               ]\n            ],\n            \"reinforce\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"reward\"\n               ]\n            ],\n            \"rename\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"rename_\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"resize\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"resize_as\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"tensor\"\n               ]\n            ],\n            \"retain_grad\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"share_memory_\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"split\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"split_size\"\n               ],\n               [\n                  \"dim\",\n                  0\n               ]\n            ],\n            \"stft\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"n_fft\"\n               ],\n               [\n                  \"hop_length\",\n                  null\n               ],\n               [\n                  \"win_length\",\n                  null\n               ],\n               [\n                  \"window\",\n                  null\n               ],\n               [\n                  \"center\",\n                  true\n               ],\n               [\n                  \"pad_mode\",\n                  \"reflect\"\n               ],\n               [\n                  \"normalized\",\n                  false\n               ],\n               [\n                  \"onesided\",\n                  true\n               ]\n            ],\n            \"unflatten\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"dim\"\n               ],\n               [\n                  \"namedshape\"\n               ]\n            ],\n            \"unique\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sorted\",\n                  true\n               ],\n               [\n                  \"return_inverse\",\n                  false\n               ],\n               [\n                  \"return_counts\",\n                  false\n               ],\n               [\n                  \"dim\",\n                  null\n               ]\n            ],\n            \"unique_consecutive\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"return_inverse\",\n                  false\n               ],\n               [\n                  \"return_counts\",\n                  false\n               ],\n               [\n                  \"dim\",\n                  null\n               ]\n            ]\n         }\n      },\n      \"torch.testing._internal.common_device_type\": {\n         \"CUDATestBase\": {\n            \"get_all_devices\": [\n               [\n                  \"cls\"\n               ]\n            ],\n            \"get_primary_device\": [\n               [\n                  \"cls\"\n               ]\n            ],\n            \"has_cudnn\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"setUpClass\": [\n               [\n                  \"cls\"\n               ]\n            ]\n         },\n         \"DeviceTypeTestBase\": {\n            \"_get_dtypes\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"test\"\n               ]\n            ],\n            \"_get_precision_override\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"test\"\n               ],\n               [\n                  \"dtype\"\n               ]\n            ],\n            \"get_all_devices\": [\n               [\n                  \"cls\"\n               ]\n            ],\n            \"get_primary_device\": [\n               [\n                  \"cls\"\n               ]\n            ],\n            \"instantiate_test\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"name\"\n               ],\n               [\n                  \"test\"\n               ]\n            ],\n            \"precision\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"prec\"\n               ]\n            ]\n         },\n         \"deviceCountAtLeast\": {\n            \"__call__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"fn\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"num_required_devices\"\n               ]\n            ]\n         },\n         \"dtypes\": {\n            \"__call__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"fn\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"dtypesIfCPU\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"dtypesIfCUDA\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"expectedFailure\": {\n            \"__call__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"fn\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"device_type\"\n               ]\n            ]\n         },\n         \"onlyOn\": {\n            \"__call__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"fn\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"device_type\"\n               ]\n            ]\n         },\n         \"precisionOverride\": {\n            \"__call__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"fn\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"d\"\n               ]\n            ]\n         },\n         \"skipCPUIf\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"dep\"\n               ],\n               [\n                  \"reason\"\n               ]\n            ]\n         },\n         \"skipCUDAIf\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"dep\"\n               ],\n               [\n                  \"reason\"\n               ]\n            ]\n         },\n         \"skipIf\": {\n            \"__call__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"fn\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"dep\"\n               ],\n               [\n                  \"reason\"\n               ],\n               [\n                  \"device_type\",\n                  null\n               ]\n            ]\n         }\n      },\n      \"torch.testing._internal.common_distributed\": {\n         \"MultiProcessTestCase\": {\n            \"_check_no_test_errors\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"elapsed_time\"\n               ]\n            ],\n            \"_check_return_codes\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"elapsed_time\"\n               ]\n            ],\n            \"_current_test_name\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_fork_processes\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_join_processes\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"fn\"\n               ]\n            ],\n            \"_run\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"rank\"\n               ],\n               [\n                  \"test_name\"\n               ],\n               [\n                  \"file_name\"\n               ]\n            ],\n            \"_spawn_processes\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_start_processes\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"proc\"\n               ]\n            ],\n            \"is_master\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"join_or_run\": [\n               [\n                  \"fn\"\n               ]\n            ],\n            \"setUp\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"setUpClass\": [\n               [\n                  \"cls\"\n               ]\n            ],\n            \"tearDown\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"world_size\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.testing._internal.common_methods_invocations\": {\n         \"NoArgsClass\": {\n            \"__iter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__len__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__next__\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.testing._internal.common_nn\": {\n         \"CriterionTest\": {\n            \"__call__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"test_case\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_do_extra_tests\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"test_case\"\n               ],\n               [\n                  \"module\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"target\"\n               ]\n            ],\n            \"_get_target\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_cuda\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"test_case\"\n               ]\n            ]\n         },\n         \"InputVariableMixin\": {\n            \"_get_input\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"ModuleTest\": {\n            \"__call__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"test_case\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"noncontiguize\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"obj\"\n               ]\n            ],\n            \"test_cuda\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"test_case\"\n               ]\n            ],\n            \"test_noncontig\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"test_case\"\n               ],\n               [\n                  \"module\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"NNTestCase\": {\n            \"_analytical_jacobian\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"module\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"jacobian_input\",\n                  true\n               ],\n               [\n                  \"jacobian_parameters\",\n                  true\n               ]\n            ],\n            \"_flatten_tensors\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ],\n            \"_jacobian\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"num_out\"\n               ]\n            ],\n            \"_numerical_jacobian\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"module\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"jacobian_input\",\n                  true\n               ],\n               [\n                  \"jacobian_parameters\",\n                  true\n               ]\n            ],\n            \"_zero_grad_input\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"input\"\n               ]\n            ],\n            \"check_criterion_jacobian\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"criterion\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"target\"\n               ]\n            ],\n            \"check_jacobian\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"module\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"jacobian_input\",\n                  true\n               ]\n            ]\n         },\n         \"NewCriterionTest\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_do_extra_tests\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"test_case\"\n               ],\n               [\n                  \"module\"\n               ],\n               [\n                  \"input\"\n               ],\n               [\n                  \"target\"\n               ]\n            ],\n            \"_get_target\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"constructor_args\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"extra_args\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_cuda\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"test_case\"\n               ],\n               [\n                  \"dtype\",\n                  null\n               ],\n               [\n                  \"extra_args\",\n                  null\n               ]\n            ]\n         },\n         \"NewModuleTest\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_do_test\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"test_case\"\n               ],\n               [\n                  \"module\"\n               ],\n               [\n                  \"input\"\n               ]\n            ],\n            \"_get_target\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"constructor_args\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"TestBase\": {\n            \"__call__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"test_case\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"constructor\"\n               ],\n               [\n                  \"desc\",\n                  \"\"\n               ],\n               [\n                  \"reference_fn\",\n                  null\n               ],\n               [\n                  \"fullname\",\n                  null\n               ]\n            ],\n            \"_get_arg\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"name\"\n               ],\n               [\n                  \"unpack\"\n               ]\n            ],\n            \"_get_input\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"unpack\",\n                  true\n               ]\n            ],\n            \"_unpack\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ],\n            \"constructor_args\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"extra_args\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"get_name\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.testing._internal.common_quantization\": {\n         \"AnnotatedConvBnModel\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ]\n         },\n         \"AnnotatedConvModel\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ]\n         },\n         \"AnnotatedCustomConfigNestedModel\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ]\n         },\n         \"AnnotatedNestedModel\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ]\n         },\n         \"AnnotatedSingleLayerLinearModel\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ]\n         },\n         \"AnnotatedSubNestedModel\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ]\n         },\n         \"AnnotatedTwoLayerLinearModel\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ]\n         },\n         \"ConvBNReLU\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"ConvBnModel\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ]\n         },\n         \"ConvModel\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ]\n         },\n         \"DummyObserver\": {\n            \"calculate_qparams\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ]\n         },\n         \"InnerModule\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ]\n         },\n         \"LSTMDynamicModel\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ]\n         },\n         \"LinearReluModel\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ]\n         },\n         \"ListOutModule\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ]\n         },\n         \"ManualConvLinearQATModel\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ]\n         },\n         \"ManualLinearQATModel\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ]\n         },\n         \"ModelForFusion\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"qconfig\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ]\n         },\n         \"ModelMultipleOps\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ]\n         },\n         \"ModelMultipleOpsNoAvgPool\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ]\n         },\n         \"ModelWithFunctionals\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ]\n         },\n         \"ModelWithSequentialFusion\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ]\n         },\n         \"NestedModel\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ]\n         },\n         \"QuantStubModel\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ]\n         },\n         \"QuantSubModel\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ]\n         },\n         \"QuantizationTestCase\": {\n            \"_checkModuleCorrectnessAgainstOrig\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"orig_mod\"\n               ],\n               [\n                  \"test_mod\"\n               ],\n               [\n                  \"calib_data\"\n               ]\n            ],\n            \"_checkScriptable\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"orig_mod\"\n               ],\n               [\n                  \"script_mod\"\n               ],\n               [\n                  \"calib_data\"\n               ],\n               [\n                  \"check_save_load\"\n               ]\n            ],\n            \"checkDynamicQuantizedLinear\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"mod\"\n               ],\n               [\n                  \"dtype\"\n               ]\n            ],\n            \"checkHasPrepModules\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"module\"\n               ]\n            ],\n            \"checkLinear\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"mod\"\n               ]\n            ],\n            \"checkNoPrepModules\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"module\"\n               ]\n            ],\n            \"checkObservers\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"module\"\n               ]\n            ],\n            \"checkQuantDequant\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"mod\"\n               ]\n            ],\n            \"checkQuantizedLinear\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"mod\"\n               ]\n            ],\n            \"checkScriptable\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"orig_mod\"\n               ],\n               [\n                  \"calib_data\"\n               ],\n               [\n                  \"check_save_load\",\n                  false\n               ]\n            ],\n            \"checkWrappedQuantizedLinear\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"mod\"\n               ]\n            ],\n            \"setUp\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"ResNetBase\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ]\n         },\n         \"SingleLayerLinearDynamicModel\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ]\n         },\n         \"SingleLayerLinearModel\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ]\n         },\n         \"SkipQuantModel\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ]\n         },\n         \"SubModelForFusion\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ]\n         },\n         \"SubModelWithoutFusion\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ]\n         },\n         \"TwoLayerLinearModel\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ]\n         }\n      },\n      \"torch.testing._internal.common_utils\": {\n         \"BytesIOContext\": {\n            \"__enter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__exit__\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"CudaMemoryLeakCheck\": {\n            \"__enter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__exit__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"exec_type\"\n               ],\n               [\n                  \"exec_value\"\n               ],\n               [\n                  \"traceback\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"testcase\"\n               ],\n               [\n                  \"name\",\n                  null\n               ]\n            ],\n            \"get_cuda_memory_usage\": []\n         },\n         \"CudaNonDefaultStream\": {\n            \"__enter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__exit__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"exec_type\"\n               ],\n               [\n                  \"exec_value\"\n               ],\n               [\n                  \"traceback\"\n               ]\n            ]\n         },\n         \"TestCase\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"method_name\",\n                  \"runTest\"\n               ]\n            ],\n            \"_reset_warning_registry\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"assertAlmostEqual\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ],\n               [\n                  \"y\"\n               ],\n               [\n                  \"places\",\n                  null\n               ],\n               [\n                  \"msg\",\n                  null\n               ],\n               [\n                  \"delta\",\n                  null\n               ],\n               [\n                  \"allow_inf\",\n                  null\n               ]\n            ],\n            \"assertEqual\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ],\n               [\n                  \"y\"\n               ],\n               [\n                  \"prec\",\n                  null\n               ],\n               [\n                  \"message\",\n                  \"\"\n               ],\n               [\n                  \"allow_inf\",\n                  false\n               ],\n               [\n                  \"exact_dtype\",\n                  null\n               ]\n            ],\n            \"assertExpected\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"s\"\n               ],\n               [\n                  \"subname\",\n                  null\n               ]\n            ],\n            \"assertExpectedRaises\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"exc_type\"\n               ],\n               [\n                  \"callable\"\n               ]\n            ],\n            \"assertExpectedStripMangled\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"s\"\n               ],\n               [\n                  \"subname\",\n                  null\n               ]\n            ],\n            \"assertLeaksNoCudaTensors\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"name\",\n                  null\n               ]\n            ],\n            \"assertNotEqual\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ],\n               [\n                  \"y\"\n               ],\n               [\n                  \"prec\",\n                  null\n               ],\n               [\n                  \"message\",\n                  \"\"\n               ]\n            ],\n            \"assertNotWarn\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"callable\"\n               ],\n               [\n                  \"msg\",\n                  \"\"\n               ]\n            ],\n            \"assertObjectIn\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"obj\"\n               ],\n               [\n                  \"iterable\"\n               ]\n            ],\n            \"assertTensorsSlowEqual\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ],\n               [\n                  \"y\"\n               ],\n               [\n                  \"prec\",\n                  null\n               ],\n               [\n                  \"message\",\n                  \"\"\n               ]\n            ],\n            \"assertWarns\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"callable\"\n               ],\n               [\n                  \"msg\",\n                  \"\"\n               ]\n            ],\n            \"assertWarnsRegex\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"callable\"\n               ],\n               [\n                  \"regex\"\n               ],\n               [\n                  \"msg\",\n                  \"\"\n               ]\n            ],\n            \"enforceNonDefaultStream\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"genSparseTensor\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"size\"\n               ],\n               [\n                  \"sparse_dim\"\n               ],\n               [\n                  \"nnz\"\n               ],\n               [\n                  \"is_uncoalesced\"\n               ],\n               [\n                  \"device\",\n                  \"cpu\"\n               ]\n            ],\n            \"maybeWarnsRegex\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"category\"\n               ],\n               [\n                  \"regex\",\n                  \"\"\n               ]\n            ],\n            \"runWithPytorchAPIUsageStderr\": [\n               [\n                  \"code\"\n               ]\n            ],\n            \"safeCoalesce\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"t\"\n               ]\n            ],\n            \"safeToDense\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"t\"\n               ]\n            ],\n            \"setUp\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"wrap_method_with_cuda_policy\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"method\"\n               ],\n               [\n                  \"policy\"\n               ]\n            ],\n            \"wrap_with_cuda_memory_check\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"method\"\n               ]\n            ],\n            \"wrap_with_cuda_policy\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"method_name\"\n               ],\n               [\n                  \"policy\"\n               ]\n            ]\n         }\n      },\n      \"torch.testing._internal.data.network1\": {\n         \"Net\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.testing._internal.data.network2\": {\n         \"Net\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.testing._internal.dist_utils\": {\n         \"TestConfig\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.testing._internal.distributed.rpc.dist_autograd_test\": {\n         \"DistAutogradTest\": {\n            \"_check_rpc_done\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"rank_distance\"\n               ]\n            ],\n            \"_complex_python_udf\": [\n               [\n                  \"t1\"\n               ],\n               [\n                  \"t2\"\n               ]\n            ],\n            \"_exec_func\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"exec_mode\"\n               ],\n               [\n                  \"method\"\n               ]\n            ],\n            \"_exec_func_with_dst\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"dst\"\n               ],\n               [\n                  \"exec_mode\"\n               ],\n               [\n                  \"method\"\n               ]\n            ],\n            \"_nested_python_udf\": [\n               [\n                  \"t1\"\n               ],\n               [\n                  \"t2\"\n               ],\n               [\n                  \"dst\"\n               ]\n            ],\n            \"_nested_rpc_call_backward_error\": [\n               [\n                  \"t1\"\n               ],\n               [\n                  \"t2\"\n               ],\n               [\n                  \"dst\"\n               ]\n            ],\n            \"_next_rank\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_python_udf_with_backward_error\": [\n               [\n                  \"t1\"\n               ],\n               [\n                  \"t2\"\n               ]\n            ],\n            \"_run_test_backward_unused_send_function_in_thread\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_set_backward_done\": [],\n            \"_test_backward_rref\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"callee\"\n               ],\n               [\n                  \"rref_owner\"\n               ]\n            ],\n            \"_test_backward_simple\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"dst\"\n               ]\n            ],\n            \"_test_grad_only_on_return_value\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"exec_mode\"\n               ]\n            ],\n            \"_test_graph\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"fn\"\n               ],\n               [\n                  \"exec_mode\"\n               ]\n            ],\n            \"_test_graph_for_py_nested_call\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"exec_mode\"\n               ]\n            ],\n            \"_test_graph_for_py_nested_call_itself\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"exec_mode\"\n               ]\n            ],\n            \"_test_no_graph_with_tensors_not_require_grad\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"exec_mode\"\n               ]\n            ],\n            \"_test_rpc_complex_args\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"exec_mode\"\n               ]\n            ],\n            \"_test_trainer_ps\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"create_ref_fn\"\n               ],\n               [\n                  \"trainer_fn\"\n               ]\n            ],\n            \"_verify_backwards\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"exec_mode\"\n               ],\n               [\n                  \"tensors\"\n               ],\n               [\n                  \"context_id\"\n               ],\n               [\n                  \"local_grads\"\n               ]\n            ],\n            \"_verify_backwards_remote\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"tensors\"\n               ],\n               [\n                  \"context_id\"\n               ],\n               [\n                  \"local_grads\"\n               ]\n            ],\n            \"_verify_graph_for_first_rpc_call\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"send_function\"\n               ],\n               [\n                  \"recv_function\"\n               ],\n               [\n                  \"t1\"\n               ],\n               [\n                  \"t2\"\n               ],\n               [\n                  \"ret\"\n               ]\n            ],\n            \"_verify_graph_for_nested_rpc_call\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"ctx\"\n               ]\n            ],\n            \"_verify_graph_for_rpc_call_exec\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"send_function\"\n               ]\n            ],\n            \"_wait_backward_done\": [],\n            \"context_cleanup_test_helper\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"rpc_args\"\n               ],\n               [\n                  \"func\"\n               ],\n               [\n                  \"nested\",\n                  false\n               ]\n            ],\n            \"test_autograd_context\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_backward_autograd_engine_error\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_backward_complex_python_udf\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_backward_different_dtypes\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_backward_different_tensor_dims\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_backward_invalid_args\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_backward_multiple_output_tensors\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_backward_multiple_roots\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_backward_multiple_round_trips\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_backward_no_grad_on_tensor\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_backward_node_failure\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_backward_node_failure_python_udf\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_backward_python_udf_error\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_backward_rref\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_backward_rref_multi\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_backward_rref_nested\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_backward_simple\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_backward_simple_python_udf\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_backward_simple_script_call\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_backward_simple_self\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_backward_unused_send_function\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_backward_unused_tensors\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_backward_without_context\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_backward_without_rpc\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_backwards_nested_python_udf\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_context_cleanup_nested_rpc\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_context_cleanup_no_tensors\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_context_cleanup_tensor_no_grad\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_context_cleanup_tensor_with_grad\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_error_in_context\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_grad_only_on_return_value\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_grad_only_on_return_value_remote\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_graph_for_builtin_call\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_graph_for_builtin_remote_call\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_graph_for_py_nested_call\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_graph_for_py_nested_call_itself\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_graph_for_py_nested_remote_call\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_graph_for_py_nested_remote_call_itself\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_graph_for_python_call\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_graph_for_python_remote_call\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_nested_context\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_no_graph_with_tensors_not_require_grad\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_no_graph_with_tensors_not_require_grad_remote\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_remote_complex_args\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_rpc_complex_args\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_trainer_ps\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_trainer_ps_torchscript_functions\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_worker_ids_recorded\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"MyBackwardFunc\": {\n            \"backward\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"input\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"SimulateBackwardError\": {\n            \"backward\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"input\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         },\n         \"TestDebugInfoFunc\": {\n            \"backward\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"input\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"input\"\n               ]\n            ]\n         }\n      },\n      \"torch.testing._internal.distributed.rpc.dist_optimizer_test\": {\n         \"DistOptimizerTest\": {\n            \"test_dist_optim\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_dist_optim_exception\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_dist_optim_exception_on_constructor\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"FailingOptimizer\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"params\"\n               ]\n            ],\n            \"step\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"closure\",\n                  null\n               ]\n            ]\n         },\n         \"MyModule\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"t1\"\n               ]\n            ],\n            \"get_w\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"OptimizerFailingOnConstructor\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"params\"\n               ]\n            ],\n            \"step\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"closure\",\n                  null\n               ]\n            ]\n         }\n      },\n      \"torch.testing._internal.distributed.rpc.jit.dist_autograd_test\": {\n         \"JitDistAutogradTest\": {\n            \"test_get_gradients\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.testing._internal.distributed.rpc.jit.rpc_test\": {\n         \"JitRpcAsyncOpTest\": {\n            \"test_all_kwargs_are_populated_by_defaults\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_args_and_kwargs_contain_different_types\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_args_kwargs_are_neither_passed\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_call_python_function_remotely_from_script_not_supported\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_call_script_function_that_not_exists_remotely_from_script\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_call_script_function_that_raises_remotely_from_script\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_kwargs_in_the_front_can_be_specified_by_extra_args\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_kwargs_not_passed\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_less_than_needed_args_are_specified\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_more_than_needed_args_are_specified\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_no_kwargs_are_populated_by_defaults\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_some_kwargs_are_populated_by_defaults\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_unexepected_kwarg_is_specified\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"JitRpcTest\": {\n            \"_create_rref\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_my_script_module_with_rrefs\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_remote_script_module\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_rref_as_arg_and_return\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_rref_is_owner\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_rref_jit_pickle_not_supported\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_rref_python_annotation\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_torchscript_function\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_torchscript_function_exception\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_torchscript_functions_not_supported\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_user_rrefs_confirmed\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_user_rrefs_confirmed_remote\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"LocalRRefTest\": {\n            \"test_create_local_script_class_rref_in_py\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_create_local_script_module_rref_in_py\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_return_local_script_class_rref_in_py_and_use_in_script\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_return_local_script_module_rref_in_py_and_use_in_script\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"MyModuleInterface\": {\n            \"forward\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"MyScriptClass\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"a\"\n               ]\n            ],\n            \"get_value\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"MyScriptModule\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"rank\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"MyScriptModuleWithRRefs\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"dst_worker\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.testing._internal.distributed.rpc.rpc_agent_test_fixture\": {\n         \"RpcAgentTestFixture\": {\n            \"init_method\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"rpc_backend\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"rpc_backend_options\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"world_size\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.testing._internal.distributed.rpc.rpc_test\": {\n         \"MyClass\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"a\"\n               ]\n            ],\n            \"get_value\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"increment_value\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"increment\"\n               ]\n            ],\n            \"my_class_method\": [\n               [\n                  \"cls\"\n               ],\n               [\n                  \"d\"\n               ],\n               [\n                  \"e\"\n               ]\n            ],\n            \"my_instance_method\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"b\"\n               ]\n            ],\n            \"my_static_method\": [\n               [\n                  \"f\"\n               ]\n            ]\n         },\n         \"MyPickleClass\": {\n            \"__getstate__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__setstate__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"obj\"\n               ]\n            ],\n            \"set\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"val\"\n               ]\n            ]\n         },\n         \"RpcTest\": {\n            \"_create_rref\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_gpu_tensor_list_arg\": [\n               [\n                  \"tensor_list\"\n               ]\n            ],\n            \"_profiler_test_with_rpc\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"rpc_exec_mode\"\n               ],\n               [\n                  \"func\"\n               ],\n               [\n                  \"args\"\n               ],\n               [\n                  \"use_record_function\",\n                  false\n               ]\n            ],\n            \"_return_gpu_tensor\": [],\n            \"_return_gpu_tensor_list\": [],\n            \"_run_uneven_workload\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"num_repeat\",\n                  30\n               ]\n            ],\n            \"_stress_test_rpc\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"f\"\n               ],\n               [\n                  \"repeat\",\n                  1000\n               ],\n               [\n                  \"args\",\n                  []\n               ]\n            ],\n            \"_test_multi_remote_call\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"fn\"\n               ],\n               [\n                  \"args_fn\",\n                  {\n                     \"args\": [\n                        {\n                           \"annotation\": null,\n                           \"arg\": \"x\",\n                           \"col_offset\": 57,\n                           \"lineno\": 918\n                        }\n                     ],\n                     \"defaults\": [],\n                     \"kw_defaults\": [],\n                     \"kwarg\": null,\n                     \"kwonlyargs\": [],\n                     \"vararg\": null\n                  }\n               ],\n               [\n                  \"kwargs_fn\",\n                  {\n                     \"args\": [\n                        {\n                           \"annotation\": null,\n                           \"arg\": \"x\",\n                           \"col_offset\": 81,\n                           \"lineno\": 918\n                        }\n                     ],\n                     \"defaults\": [],\n                     \"kw_defaults\": [],\n                     \"kwarg\": null,\n                     \"kwonlyargs\": [],\n                     \"vararg\": null\n                  }\n               ]\n            ],\n            \"_test_rref_leak\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"_mock_delete_all_user_rrefs\"\n               ],\n               [\n                  \"ignore_leak\"\n               ]\n            ],\n            \"_test_self_remote_rref_as_remote_arg\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"dst\"\n               ]\n            ],\n            \"_test_self_remote_rref_as_rpc_arg\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"dst\"\n               ]\n            ],\n            \"test_add\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_add_with_id\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_async_add\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_builtin_remote_ret\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_builtin_remote_self\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_call_method_on_rref\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_cuda\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_debug_info\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_disable_gil_profiling\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_dist_init_decorator\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_duplicate_name\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_expected_src\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_function_not_on_callee\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_get_rpc_timeout\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_get_worker_infos\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_graceful_shutdown_with_uneven_workload\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_handle_send_exceptions\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_ignore_rref_leak\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_invalid_names\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_local_rref_no_fork\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_local_shutdown\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_local_shutdown_with_rpc\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_local_value_not_on_owner\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_multi_builtin_remote_ret\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_multi_layer_nested_async_rpc\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_multi_py_udf_remote\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_multi_rpc\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_nested_remote\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_nested_rpc\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_nested_rref\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_nested_rref_stress\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_non_garbage_collected_user_rref_due_to_local_circular_dependency\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_nonzero\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_owner_equality\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_pass_local_rrefs\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_process_group_debug_info\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_profiler_with_async_rpc_builtin\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_profiler_with_async_rpc_udf\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_profiler_with_remote_builtin\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_profiler_with_remote_udf\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_profiler_with_sync_rpc_builtin\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_profiler_with_sync_rpc_udf\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_py_built_in\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_py_class_constructor\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_py_class_instance_method\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_py_class_method\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_py_class_static_method\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_py_function_exception\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_py_multi_async_call\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_py_nested_pickle\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_py_no_return_result\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_py_raise_in_user_func\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_py_rpc_rref_args\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_py_rref_args\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_py_rref_args_user_share\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_py_tensors\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_py_tensors_in_container\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_py_tensors_multi_async_call\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_py_udf_remote\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_py_user_defined\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_register_rpc_backend_and_set_and_start_rpc_backend\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"mock_rpc_agent\"\n               ],\n               [\n                  \"mock_dist_autograd_init\"\n               ]\n            ],\n            \"test_reinit\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_remote_same_worker\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_remote_with_exception\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_requires_process_group_agent_decorator\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_return_local_rrefs\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_rpc_return_rref\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_rpc_timeouts\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_rref_context_debug_info\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_rref_forward_chain\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_rref_leak\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_rref_py_pickle_not_supported\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_rref_str\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_scalar_add\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_self_add\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_self_py_udf_remote\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_self_remote_rref_as_remote_arg\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_self_remote_rref_as_rpc_arg\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_self_remote_rref_as_self_remote_arg\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_self_remote_rref_as_self_rpc_arg\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_set_and_get_num_send_recv_threads\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_shutdown_followed_by_rpc\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_stress_heavy_rpc\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_stress_heavy_rpc_torchscript\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_stress_light_rpc\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_use_rpc_pickler\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_use_rref_after_shutdown\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_user_rrefs_confirmed\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_user_rrefs_confirmed_remote\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_wait_all_workers\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_wait_all_workers_twice\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"test_worker_id\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"StubRpcAgent\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"world_size\"\n               ]\n            ],\n            \"get_worker_infos\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.testing._internal.expecttest\": {\n         \"EditHistory\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"adjust_lineno\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"fn\"\n               ],\n               [\n                  \"lineno\"\n               ]\n            ],\n            \"record_edit\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"fn\"\n               ],\n               [\n                  \"lineno\"\n               ],\n               [\n                  \"delta\"\n               ]\n            ],\n            \"seen_file\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"fn\"\n               ]\n            ]\n         },\n         \"TestCase\": {\n            \"assertExpectedInline\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"actual\"\n               ],\n               [\n                  \"expect\"\n               ],\n               [\n                  \"skip\",\n                  0\n               ]\n            ]\n         }\n      },\n      \"torch.testing._internal.jit_utils\": {\n         \"capture_stdout\": {\n            \"__enter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__exit__\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.utils._cpp_extension_versioner\": {\n         \"ExtensionVersioner\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"bump_version_if_changed\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"name\"\n               ],\n               [\n                  \"source_files\"\n               ],\n               [\n                  \"build_arguments\"\n               ],\n               [\n                  \"build_directory\"\n               ],\n               [\n                  \"with_cuda\"\n               ]\n            ],\n            \"get_version\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"name\"\n               ]\n            ]\n         }\n      },\n      \"torch.utils.backcompat.__init__\": {\n         \"Warning\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"setter\"\n               ],\n               [\n                  \"getter\"\n               ]\n            ],\n            \"get_enabled\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"set_enabled\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"value\"\n               ]\n            ]\n         }\n      },\n      \"torch.utils.checkpoint\": {\n         \"CheckpointFunction\": {\n            \"backward\": [\n               [\n                  \"ctx\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"ctx\"\n               ],\n               [\n                  \"run_function\"\n               ],\n               [\n                  \"preserve_rng_state\"\n               ]\n            ]\n         }\n      },\n      \"torch.utils.cpp_extension\": {\n         \"BuildExtension\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_add_compile_flag\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"extension\"\n               ],\n               [\n                  \"flag\"\n               ]\n            ],\n            \"_add_gnu_cpp_abi_flag\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"extension\"\n               ]\n            ],\n            \"_check_abi\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_define_torch_extension_name\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"extension\"\n               ]\n            ],\n            \"build_extensions\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"get_ext_filename\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"ext_name\"\n               ]\n            ],\n            \"with_options\": [\n               [\n                  \"cls\"\n               ]\n            ]\n         }\n      },\n      \"torch.utils.data._utils.fetch\": {\n         \"_BaseDatasetFetcher\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"dataset\"\n               ],\n               [\n                  \"auto_collation\"\n               ],\n               [\n                  \"collate_fn\"\n               ],\n               [\n                  \"drop_last\"\n               ]\n            ],\n            \"fetch\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"possibly_batched_index\"\n               ]\n            ]\n         },\n         \"_IterableDatasetFetcher\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"dataset\"\n               ],\n               [\n                  \"auto_collation\"\n               ],\n               [\n                  \"collate_fn\"\n               ],\n               [\n                  \"drop_last\"\n               ]\n            ],\n            \"fetch\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"possibly_batched_index\"\n               ]\n            ]\n         },\n         \"_MapDatasetFetcher\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"dataset\"\n               ],\n               [\n                  \"auto_collation\"\n               ],\n               [\n                  \"collate_fn\"\n               ],\n               [\n                  \"drop_last\"\n               ]\n            ],\n            \"fetch\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"possibly_batched_index\"\n               ]\n            ]\n         }\n      },\n      \"torch.utils.data._utils.worker\": {\n         \"ManagerWatchdog\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"is_alive\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"WorkerInfo\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__setattr__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"key\"\n               ],\n               [\n                  \"val\"\n               ]\n            ]\n         }\n      },\n      \"torch.utils.data.dataloader\": {\n         \"DataLoader\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"dataset\"\n               ],\n               [\n                  \"batch_size\",\n                  1\n               ],\n               [\n                  \"shuffle\",\n                  false\n               ],\n               [\n                  \"sampler\",\n                  null\n               ],\n               [\n                  \"batch_sampler\",\n                  null\n               ],\n               [\n                  \"num_workers\",\n                  0\n               ],\n               [\n                  \"collate_fn\",\n                  null\n               ],\n               [\n                  \"pin_memory\",\n                  false\n               ],\n               [\n                  \"drop_last\",\n                  false\n               ],\n               [\n                  \"timeout\",\n                  0\n               ],\n               [\n                  \"worker_init_fn\",\n                  null\n               ],\n               [\n                  \"multiprocessing_context\",\n                  null\n               ]\n            ],\n            \"__iter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__len__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__setattr__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"attr\"\n               ],\n               [\n                  \"val\"\n               ]\n            ],\n            \"_auto_collation\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_index_sampler\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"multiprocessing_context\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"multiprocessing_context\"\n               ]\n            ]\n         },\n         \"_BaseDataLoaderIter\": {\n            \"__getstate__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"loader\"\n               ]\n            ],\n            \"__iter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__len__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__next__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_next_data\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_next_index\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"_DatasetKind\": {\n            \"create_fetcher\": [\n               [\n                  \"kind\"\n               ],\n               [\n                  \"dataset\"\n               ],\n               [\n                  \"auto_collation\"\n               ],\n               [\n                  \"collate_fn\"\n               ],\n               [\n                  \"drop_last\"\n               ]\n            ]\n         },\n         \"_InfiniteConstantSampler\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__iter__\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"_MultiProcessingDataLoaderIter\": {\n            \"__del__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"loader\"\n               ]\n            ],\n            \"_get_data\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_next_data\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_process_data\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"data\"\n               ]\n            ],\n            \"_shutdown_worker\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"worker_id\"\n               ]\n            ],\n            \"_shutdown_workers\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_try_get_data\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"timeout\",\n                  {\n                     \"col_offset\": 36,\n                     \"ctx\": {},\n                     \"id\": \"_utils\",\n                     \"lineno\": 748\n                  }\n               ]\n            ],\n            \"_try_put_index\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"_SingleProcessDataLoaderIter\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"loader\"\n               ]\n            ],\n            \"_next_data\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.utils.data.dataset\": {\n         \"ChainDataset\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"datasets\"\n               ]\n            ],\n            \"__iter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__len__\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"ConcatDataset\": {\n            \"__getitem__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"idx\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"datasets\"\n               ]\n            ],\n            \"__len__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"cummulative_sizes\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"cumsum\": [\n               [\n                  \"sequence\"\n               ]\n            ]\n         },\n         \"Dataset\": {\n            \"__add__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"other\"\n               ]\n            ],\n            \"__getitem__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"index\"\n               ]\n            ]\n         },\n         \"IterableDataset\": {\n            \"__add__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"other\"\n               ]\n            ],\n            \"__iter__\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"Subset\": {\n            \"__getitem__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"idx\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"dataset\"\n               ],\n               [\n                  \"indices\"\n               ]\n            ],\n            \"__len__\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"TensorDataset\": {\n            \"__getitem__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"index\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__len__\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.utils.data.distributed\": {\n         \"DistributedSampler\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"dataset\"\n               ],\n               [\n                  \"num_replicas\",\n                  null\n               ],\n               [\n                  \"rank\",\n                  null\n               ],\n               [\n                  \"shuffle\",\n                  true\n               ]\n            ],\n            \"__iter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__len__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"set_epoch\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"epoch\"\n               ]\n            ]\n         }\n      },\n      \"torch.utils.data.sampler\": {\n         \"BatchSampler\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"sampler\"\n               ],\n               [\n                  \"batch_size\"\n               ],\n               [\n                  \"drop_last\"\n               ]\n            ],\n            \"__iter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__len__\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"RandomSampler\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"data_source\"\n               ],\n               [\n                  \"replacement\",\n                  false\n               ],\n               [\n                  \"num_samples\",\n                  null\n               ]\n            ],\n            \"__iter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__len__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"num_samples\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"Sampler\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"data_source\"\n               ]\n            ],\n            \"__iter__\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"SequentialSampler\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"data_source\"\n               ]\n            ],\n            \"__iter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__len__\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"SubsetRandomSampler\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"indices\"\n               ]\n            ],\n            \"__iter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__len__\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"WeightedRandomSampler\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"weights\"\n               ],\n               [\n                  \"num_samples\"\n               ],\n               [\n                  \"replacement\",\n                  true\n               ]\n            ],\n            \"__iter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__len__\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.utils.file_baton\": {\n         \"FileBaton\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"lock_file_path\"\n               ],\n               [\n                  \"wait_seconds\",\n                  0.1\n               ]\n            ],\n            \"release\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"try_acquire\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"wait\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.utils.hipify.hipify_python\": {\n         \"InputError\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"message\"\n               ]\n            ],\n            \"__str__\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"Trie\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"_pattern\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"pData\"\n               ]\n            ],\n            \"add\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"word\"\n               ]\n            ],\n            \"dump\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"pattern\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"quote\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"char\"\n               ]\n            ]\n         }\n      },\n      \"torch.utils.hooks\": {\n         \"RemovableHandle\": {\n            \"__enter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__exit__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"type\"\n               ],\n               [\n                  \"value\"\n               ],\n               [\n                  \"tb\"\n               ]\n            ],\n            \"__getstate__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"hooks_dict\"\n               ]\n            ],\n            \"__setstate__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state\"\n               ]\n            ],\n            \"remove\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.utils.mkldnn\": {\n         \"MkldnnBatchNorm2d\": {\n            \"__getstate__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"dense_module\"\n               ]\n            ],\n            \"__setstate__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ]\n         },\n         \"MkldnnConv2d\": {\n            \"__getstate__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"dense_module\"\n               ]\n            ],\n            \"__setstate__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ]\n         },\n         \"MkldnnLinear\": {\n            \"__getstate__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"dense_module\"\n               ]\n            ],\n            \"__setstate__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"state\"\n               ]\n            ],\n            \"forward\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ]\n         }\n      },\n      \"torch.utils.tensorboard._pytorch_graph\": {\n         \"GraphPy\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"append\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"x\"\n               ]\n            ],\n            \"find_common_root\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"populate_namespace_from_OP_to_IO\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"printall\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"to_proto\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"NodeBase\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"debugName\",\n                  null\n               ],\n               [\n                  \"inputs\",\n                  null\n               ],\n               [\n                  \"scope\",\n                  null\n               ],\n               [\n                  \"tensor_size\",\n                  null\n               ],\n               [\n                  \"op_type\",\n                  \"UnSpecified\"\n               ],\n               [\n                  \"attributes\",\n                  \"\"\n               ]\n            ],\n            \"__repr__\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"NodePy\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"node_cpp\"\n               ],\n               [\n                  \"valid_methods\"\n               ]\n            ]\n         },\n         \"NodePyIO\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"node_cpp\"\n               ],\n               [\n                  \"input_or_output\",\n                  null\n               ]\n            ]\n         },\n         \"NodePyOP\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"node_cpp\"\n               ]\n            ]\n         }\n      },\n      \"torch.utils.tensorboard.writer\": {\n         \"FileWriter\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"log_dir\"\n               ],\n               [\n                  \"max_queue\",\n                  10\n               ],\n               [\n                  \"flush_secs\",\n                  120\n               ],\n               [\n                  \"filename_suffix\",\n                  \"\"\n               ]\n            ],\n            \"add_event\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"event\"\n               ],\n               [\n                  \"step\",\n                  null\n               ],\n               [\n                  \"walltime\",\n                  null\n               ]\n            ],\n            \"add_graph\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"graph_profile\"\n               ],\n               [\n                  \"walltime\",\n                  null\n               ]\n            ],\n            \"add_onnx_graph\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"graph\"\n               ],\n               [\n                  \"walltime\",\n                  null\n               ]\n            ],\n            \"add_summary\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"summary\"\n               ],\n               [\n                  \"global_step\",\n                  null\n               ],\n               [\n                  \"walltime\",\n                  null\n               ]\n            ],\n            \"close\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"flush\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"get_logdir\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"reopen\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"SummaryWriter\": {\n            \"__enter__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"__exit__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"exc_type\"\n               ],\n               [\n                  \"exc_val\"\n               ],\n               [\n                  \"exc_tb\"\n               ]\n            ],\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"log_dir\",\n                  null\n               ],\n               [\n                  \"comment\",\n                  \"\"\n               ],\n               [\n                  \"purge_step\",\n                  null\n               ],\n               [\n                  \"max_queue\",\n                  10\n               ],\n               [\n                  \"flush_secs\",\n                  120\n               ],\n               [\n                  \"filename_suffix\",\n                  \"\"\n               ]\n            ],\n            \"_check_caffe2_blob\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"item\"\n               ]\n            ],\n            \"_encode\": [\n               [\n                  \"rawstr\"\n               ]\n            ],\n            \"_get_file_writer\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"add_audio\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"tag\"\n               ],\n               [\n                  \"snd_tensor\"\n               ],\n               [\n                  \"global_step\",\n                  null\n               ],\n               [\n                  \"sample_rate\",\n                  44100\n               ],\n               [\n                  \"walltime\",\n                  null\n               ]\n            ],\n            \"add_custom_scalars\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"layout\"\n               ]\n            ],\n            \"add_custom_scalars_marginchart\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"tags\"\n               ],\n               [\n                  \"category\",\n                  \"default\"\n               ],\n               [\n                  \"title\",\n                  \"untitled\"\n               ]\n            ],\n            \"add_custom_scalars_multilinechart\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"tags\"\n               ],\n               [\n                  \"category\",\n                  \"default\"\n               ],\n               [\n                  \"title\",\n                  \"untitled\"\n               ]\n            ],\n            \"add_embedding\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"mat\"\n               ],\n               [\n                  \"metadata\",\n                  null\n               ],\n               [\n                  \"label_img\",\n                  null\n               ],\n               [\n                  \"global_step\",\n                  null\n               ],\n               [\n                  \"tag\",\n                  \"default\"\n               ],\n               [\n                  \"metadata_header\",\n                  null\n               ]\n            ],\n            \"add_figure\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"tag\"\n               ],\n               [\n                  \"figure\"\n               ],\n               [\n                  \"global_step\",\n                  null\n               ],\n               [\n                  \"close\",\n                  true\n               ],\n               [\n                  \"walltime\",\n                  null\n               ]\n            ],\n            \"add_graph\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"model\"\n               ],\n               [\n                  \"input_to_model\",\n                  null\n               ],\n               [\n                  \"verbose\",\n                  false\n               ]\n            ],\n            \"add_histogram\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"tag\"\n               ],\n               [\n                  \"values\"\n               ],\n               [\n                  \"global_step\",\n                  null\n               ],\n               [\n                  \"bins\",\n                  \"tensorflow\"\n               ],\n               [\n                  \"walltime\",\n                  null\n               ],\n               [\n                  \"max_bins\",\n                  null\n               ]\n            ],\n            \"add_histogram_raw\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"tag\"\n               ],\n               [\n                  \"min\"\n               ],\n               [\n                  \"max\"\n               ],\n               [\n                  \"num\"\n               ],\n               [\n                  \"sum\"\n               ],\n               [\n                  \"sum_squares\"\n               ],\n               [\n                  \"bucket_limits\"\n               ],\n               [\n                  \"bucket_counts\"\n               ],\n               [\n                  \"global_step\",\n                  null\n               ],\n               [\n                  \"walltime\",\n                  null\n               ]\n            ],\n            \"add_hparams\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"hparam_dict\",\n                  null\n               ],\n               [\n                  \"metric_dict\",\n                  null\n               ]\n            ],\n            \"add_image\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"tag\"\n               ],\n               [\n                  \"img_tensor\"\n               ],\n               [\n                  \"global_step\",\n                  null\n               ],\n               [\n                  \"walltime\",\n                  null\n               ],\n               [\n                  \"dataformats\",\n                  \"CHW\"\n               ]\n            ],\n            \"add_image_with_boxes\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"tag\"\n               ],\n               [\n                  \"img_tensor\"\n               ],\n               [\n                  \"box_tensor\"\n               ],\n               [\n                  \"global_step\",\n                  null\n               ],\n               [\n                  \"walltime\",\n                  null\n               ],\n               [\n                  \"rescale\",\n                  1\n               ],\n               [\n                  \"dataformats\",\n                  \"CHW\"\n               ]\n            ],\n            \"add_images\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"tag\"\n               ],\n               [\n                  \"img_tensor\"\n               ],\n               [\n                  \"global_step\",\n                  null\n               ],\n               [\n                  \"walltime\",\n                  null\n               ],\n               [\n                  \"dataformats\",\n                  \"NCHW\"\n               ]\n            ],\n            \"add_mesh\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"tag\"\n               ],\n               [\n                  \"vertices\"\n               ],\n               [\n                  \"colors\",\n                  null\n               ],\n               [\n                  \"faces\",\n                  null\n               ],\n               [\n                  \"config_dict\",\n                  null\n               ],\n               [\n                  \"global_step\",\n                  null\n               ],\n               [\n                  \"walltime\",\n                  null\n               ]\n            ],\n            \"add_onnx_graph\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"prototxt\"\n               ]\n            ],\n            \"add_pr_curve\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"tag\"\n               ],\n               [\n                  \"labels\"\n               ],\n               [\n                  \"predictions\"\n               ],\n               [\n                  \"global_step\",\n                  null\n               ],\n               [\n                  \"num_thresholds\",\n                  127\n               ],\n               [\n                  \"weights\",\n                  null\n               ],\n               [\n                  \"walltime\",\n                  null\n               ]\n            ],\n            \"add_pr_curve_raw\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"tag\"\n               ],\n               [\n                  \"true_positive_counts\"\n               ],\n               [\n                  \"false_positive_counts\"\n               ],\n               [\n                  \"true_negative_counts\"\n               ],\n               [\n                  \"false_negative_counts\"\n               ],\n               [\n                  \"precision\"\n               ],\n               [\n                  \"recall\"\n               ],\n               [\n                  \"global_step\",\n                  null\n               ],\n               [\n                  \"num_thresholds\",\n                  127\n               ],\n               [\n                  \"weights\",\n                  null\n               ],\n               [\n                  \"walltime\",\n                  null\n               ]\n            ],\n            \"add_scalar\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"tag\"\n               ],\n               [\n                  \"scalar_value\"\n               ],\n               [\n                  \"global_step\",\n                  null\n               ],\n               [\n                  \"walltime\",\n                  null\n               ]\n            ],\n            \"add_scalars\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"main_tag\"\n               ],\n               [\n                  \"tag_scalar_dict\"\n               ],\n               [\n                  \"global_step\",\n                  null\n               ],\n               [\n                  \"walltime\",\n                  null\n               ]\n            ],\n            \"add_text\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"tag\"\n               ],\n               [\n                  \"text_string\"\n               ],\n               [\n                  \"global_step\",\n                  null\n               ],\n               [\n                  \"walltime\",\n                  null\n               ]\n            ],\n            \"add_video\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"tag\"\n               ],\n               [\n                  \"vid_tensor\"\n               ],\n               [\n                  \"global_step\",\n                  null\n               ],\n               [\n                  \"fps\",\n                  4\n               ],\n               [\n                  \"walltime\",\n                  null\n               ]\n            ],\n            \"close\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"flush\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"get_logdir\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      },\n      \"torch.utils.throughput_benchmark\": {\n         \"ExecutionStats\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"c_stats\"\n               ],\n               [\n                  \"benchmark_config\"\n               ]\n            ],\n            \"__str__\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"iters_per_second\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"latency_avg_ms\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"num_iters\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"total_time_seconds\": [\n               [\n                  \"self\"\n               ]\n            ]\n         },\n         \"ThroughputBenchmark\": {\n            \"__init__\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"module\"\n               ]\n            ],\n            \"add_input\": [\n               [\n                  \"self\"\n               ]\n            ],\n            \"benchmark\": [\n               [\n                  \"self\"\n               ],\n               [\n                  \"num_calling_threads\",\n                  1\n               ],\n               [\n                  \"num_warmup_iters\",\n                  10\n               ],\n               [\n                  \"num_iters\",\n                  100\n               ]\n            ],\n            \"run_once\": [\n               [\n                  \"self\"\n               ]\n            ]\n         }\n      }\n   },\n   \"package__all__list\": {\n      \"torch\": [\n         \"typename\",\n         \"is_tensor\",\n         \"is_storage\",\n         \"set_default_tensor_type\",\n         \"set_rng_state\",\n         \"get_rng_state\",\n         \"manual_seed\",\n         \"initial_seed\",\n         \"seed\",\n         \"save\",\n         \"load\",\n         \"set_printoptions\",\n         \"chunk\",\n         \"split\",\n         \"stack\",\n         \"matmul\",\n         \"no_grad\",\n         \"enable_grad\",\n         \"rand\",\n         \"randn\",\n         \"DoubleStorage\",\n         \"FloatStorage\",\n         \"LongStorage\",\n         \"IntStorage\",\n         \"ShortStorage\",\n         \"CharStorage\",\n         \"ByteStorage\",\n         \"BoolStorage\",\n         \"DoubleTensor\",\n         \"FloatTensor\",\n         \"LongTensor\",\n         \"IntTensor\",\n         \"ShortTensor\",\n         \"CharTensor\",\n         \"ByteTensor\",\n         \"BoolTensor\",\n         \"Tensor\",\n         \"lobpcg\"\n      ],\n      \"torch.autograd\": [\n         \"variable.Variable\",\n         \"function.Function\",\n         \"backward\",\n         \"grad_mode\"\n      ],\n      \"torch.cuda\": [],\n      \"torch.distributions\": [\n         \"bernoulli.Bernoulli\",\n         \"beta.Beta\",\n         \"binomial.Binomial\",\n         \"categorical.Categorical\",\n         \"cauchy.Cauchy\",\n         \"chi2.Chi2\",\n         \"continuous_bernoulli.ContinuousBernoulli\",\n         \"dirichlet.Dirichlet\",\n         \"distribution.Distribution\",\n         \"exponential.Exponential\",\n         \"exp_family.ExponentialFamily\",\n         \"fishersnedecor.FisherSnedecor\",\n         \"gamma.Gamma\",\n         \"geometric.Geometric\",\n         \"gumbel.Gumbel\",\n         \"half_cauchy.HalfCauchy\",\n         \"half_normal.HalfNormal\",\n         \"independent.Independent\",\n         \"laplace.Laplace\",\n         \"log_normal.LogNormal\",\n         \"logistic_normal.LogisticNormal\",\n         \"lowrank_multivariate_normal.LowRankMultivariateNormal\",\n         \"mixture_same_family.MixtureSameFamily\",\n         \"multinomial.Multinomial\",\n         \"multivariate_normal.MultivariateNormal\",\n         \"negative_binomial.NegativeBinomial\",\n         \"normal.Normal\",\n         \"one_hot_categorical.OneHotCategorical\",\n         \"pareto.Pareto\",\n         \"relaxed_bernoulli.RelaxedBernoulli\",\n         \"relaxed_categorical.RelaxedOneHotCategorical\",\n         \"studentT.StudentT\",\n         \"poisson.Poisson\",\n         \"uniform.Uniform\",\n         \"von_mises.VonMises\",\n         \"weibull.Weibull\",\n         \"transformed_distribution.TransformedDistribution\",\n         \"constraint_registry.biject_to\",\n         \"kl.kl_divergence\",\n         \"kl.register_kl\",\n         \"constraint_registry.transform_to\"\n      ],\n      \"torch.jit\": [\n         \"value\",\n         \"type\"\n      ],\n      \"torch.multiprocessing\": [\n         \"set_sharing_strategy\",\n         \"get_sharing_strategy\",\n         \"get_all_sharing_strategies\"\n      ],\n      \"torch.nn.intrinsic\": [\n         \"modules.ConvBn2d\",\n         \"modules.ConvBnReLU2d\",\n         \"modules.ConvReLU2d\",\n         \"modules.ConvReLU3d\",\n         \"modules.LinearReLU\"\n      ],\n      \"torch.nn.intrinsic.modules\": [\n         \"fused.ConvBn2d\",\n         \"fused.ConvBnReLU2d\",\n         \"fused.ConvReLU2d\",\n         \"fused.ConvReLU3d\",\n         \"fused.LinearReLU\"\n      ],\n      \"torch.nn.intrinsic.qat\": [\n         \"modules.ConvBn2d\",\n         \"modules.ConvBnReLU2d\",\n         \"modules.ConvReLU2d\",\n         \"modules.LinearReLU\",\n         \"modules.update_bn_stats\",\n         \"modules.freeze_bn_stats\"\n      ],\n      \"torch.nn.intrinsic.qat.modules\": [\n         \"linear_relu.LinearReLU\",\n         \"conv_fused.ConvReLU2d\",\n         \"conv_fused.ConvBn2d\",\n         \"conv_fused.ConvBnReLU2d\",\n         \"conv_fused.update_bn_stats\",\n         \"conv_fused.freeze_bn_stats\"\n      ],\n      \"torch.nn.intrinsic.quantized\": [\n         \"modules.LinearReLU\",\n         \"modules.ConvReLU2d\",\n         \"modules.ConvReLU3d\"\n      ],\n      \"torch.nn.intrinsic.quantized.modules\": [\n         \"linear_relu.LinearReLU\",\n         \"conv_relu.ConvReLU2d\",\n         \"conv_relu.ConvReLU3d\"\n      ],\n      \"torch.nn.modules\": [\n         \"module.Module\",\n         \"linear.Identity\",\n         \"linear.Linear\",\n         \"conv.Conv1d\",\n         \"conv.Conv2d\",\n         \"conv.Conv3d\",\n         \"conv.ConvTranspose1d\",\n         \"conv.ConvTranspose2d\",\n         \"conv.ConvTranspose3d\",\n         \"activation.Threshold\",\n         \"activation.ReLU\",\n         \"activation.Hardtanh\",\n         \"activation.ReLU6\",\n         \"activation.Sigmoid\",\n         \"activation.Tanh\",\n         \"activation.Softmax\",\n         \"activation.Softmax2d\",\n         \"activation.LogSoftmax\",\n         \"activation.ELU\",\n         \"activation.SELU\",\n         \"activation.CELU\",\n         \"activation.GLU\",\n         \"activation.GELU\",\n         \"activation.Hardshrink\",\n         \"activation.LeakyReLU\",\n         \"activation.LogSigmoid\",\n         \"activation.Softplus\",\n         \"activation.Softshrink\",\n         \"activation.MultiheadAttention\",\n         \"activation.PReLU\",\n         \"activation.Softsign\",\n         \"activation.Softmin\",\n         \"activation.Tanhshrink\",\n         \"activation.RReLU\",\n         \"loss.L1Loss\",\n         \"loss.NLLLoss\",\n         \"loss.KLDivLoss\",\n         \"loss.MSELoss\",\n         \"loss.BCELoss\",\n         \"loss.BCEWithLogitsLoss\",\n         \"loss.NLLLoss2d\",\n         \"loss.PoissonNLLLoss\",\n         \"loss.CosineEmbeddingLoss\",\n         \"loss.CTCLoss\",\n         \"loss.HingeEmbeddingLoss\",\n         \"loss.MarginRankingLoss\",\n         \"loss.MultiLabelMarginLoss\",\n         \"loss.MultiLabelSoftMarginLoss\",\n         \"loss.MultiMarginLoss\",\n         \"loss.SmoothL1Loss\",\n         \"loss.SoftMarginLoss\",\n         \"loss.CrossEntropyLoss\",\n         \"container.Container\",\n         \"container.Sequential\",\n         \"container.ModuleList\",\n         \"container.ModuleDict\",\n         \"container.ParameterList\",\n         \"container.ParameterDict\",\n         \"pooling.AvgPool1d\",\n         \"pooling.AvgPool2d\",\n         \"pooling.AvgPool3d\",\n         \"pooling.MaxPool1d\",\n         \"pooling.MaxPool2d\",\n         \"pooling.MaxPool3d\",\n         \"pooling.MaxUnpool1d\",\n         \"pooling.MaxUnpool2d\",\n         \"pooling.MaxUnpool3d\",\n         \"pooling.FractionalMaxPool2d\",\n         \"pooling.FractionalMaxPool3d\",\n         \"pooling.LPPool1d\",\n         \"pooling.LPPool2d\",\n         \"normalization.LocalResponseNorm\",\n         \"batchnorm.BatchNorm1d\",\n         \"batchnorm.BatchNorm2d\",\n         \"batchnorm.BatchNorm3d\",\n         \"instancenorm.InstanceNorm1d\",\n         \"instancenorm.InstanceNorm2d\",\n         \"instancenorm.InstanceNorm3d\",\n         \"normalization.LayerNorm\",\n         \"normalization.GroupNorm\",\n         \"batchnorm.SyncBatchNorm\",\n         \"dropout.Dropout\",\n         \"dropout.Dropout2d\",\n         \"dropout.Dropout3d\",\n         \"dropout.AlphaDropout\",\n         \"dropout.FeatureAlphaDropout\",\n         \"padding.ReflectionPad1d\",\n         \"padding.ReflectionPad2d\",\n         \"padding.ReplicationPad2d\",\n         \"padding.ReplicationPad1d\",\n         \"padding.ReplicationPad3d\",\n         \"normalization.CrossMapLRN2d\",\n         \"sparse.Embedding\",\n         \"sparse.EmbeddingBag\",\n         \"rnn.RNNBase\",\n         \"rnn.RNN\",\n         \"rnn.LSTM\",\n         \"rnn.GRU\",\n         \"rnn.RNNCellBase\",\n         \"rnn.RNNCell\",\n         \"rnn.LSTMCell\",\n         \"rnn.GRUCell\",\n         \"pixelshuffle.PixelShuffle\",\n         \"upsampling.Upsample\",\n         \"upsampling.UpsamplingNearest2d\",\n         \"upsampling.UpsamplingBilinear2d\",\n         \"distance.PairwiseDistance\",\n         \"pooling.AdaptiveMaxPool1d\",\n         \"pooling.AdaptiveMaxPool2d\",\n         \"pooling.AdaptiveMaxPool3d\",\n         \"pooling.AdaptiveAvgPool1d\",\n         \"pooling.AdaptiveAvgPool2d\",\n         \"pooling.AdaptiveAvgPool3d\",\n         \"loss.TripletMarginLoss\",\n         \"padding.ZeroPad2d\",\n         \"padding.ConstantPad1d\",\n         \"padding.ConstantPad2d\",\n         \"padding.ConstantPad3d\",\n         \"linear.Bilinear\",\n         \"distance.CosineSimilarity\",\n         \"fold.Unfold\",\n         \"fold.Fold\",\n         \"adaptive.AdaptiveLogSoftmaxWithLoss\",\n         \"transformer.TransformerEncoder\",\n         \"transformer.TransformerDecoder\",\n         \"transformer.TransformerEncoderLayer\",\n         \"transformer.TransformerDecoderLayer\",\n         \"transformer.Transformer\",\n         \"flatten.Flatten\",\n         \"activation.Hardsigmoid\"\n      ],\n      \"torch.nn.parallel\": [\n         \"replicate.replicate\",\n         \"scatter_gather.scatter\",\n         \"parallel_apply.parallel_apply\",\n         \"scatter_gather.gather\",\n         \"data_parallel.data_parallel\",\n         \"data_parallel.DataParallel\",\n         \"distributed.DistributedDataParallel\"\n      ],\n      \"torch.nn.qat.modules\": [\n         \"linear.Linear\",\n         \"conv.Conv2d\"\n      ],\n      \"torch.nn.quantized.dynamic.modules\": [\n         \"linear.Linear\",\n         \"rnn.LSTM\"\n      ],\n      \"torch.nn.quantized.modules\": [\n         \"batchnorm.BatchNorm2d\",\n         \"batchnorm.BatchNorm3d\",\n         \"conv.Conv2d\",\n         \"conv.Conv3d\",\n         \"DeQuantize\",\n         \"linear.Linear\",\n         \"torch.nn.modules.pooling.MaxPool2d\",\n         \"Quantize\",\n         \"activation.ReLU\",\n         \"activation.ReLU6\",\n         \"functional_modules.FloatFunctional\",\n         \"functional_modules.QFunctional\"\n      ],\n      \"torch.quantization\": [\n         \"QuantWrapper\",\n         \"QuantStub\",\n         \"DeQuantStub\",\n         \"quantize\",\n         \"prepare\",\n         \"convert\",\n         \"propagate_qconfig_\",\n         \"add_quant_dequant\",\n         \"add_observer_\",\n         \"swap_module\",\n         \"default_eval_fn\",\n         \"get_observer_dict\",\n         \"ObserverBase\",\n         \"WeightObserver\",\n         \"observer\",\n         \"default_observer\",\n         \"default_weight_observer\",\n         \"QConfig\",\n         \"default_qconfig\",\n         \"default_dynamic_qconfig\",\n         \"float16_dynamic_qconfig\",\n         \"default_qat_qconfig\",\n         \"prepare_qat\",\n         \"quantize_qat\",\n         \"fuse_modules.fuse_modules\",\n         \"quantize_dynamic\"\n      ],\n      \"torch.sparse\": [\n         \"addmm\",\n         \"mm\",\n         \"sum\"\n      ],\n      \"torch.testing\": [\n         \"assert_allclose\",\n         \"make_non_contiguous\",\n         \"rand_like\",\n         \"randn_like\"\n      ]\n   }\n}"