Here is how the comparator works:

The compare method inside the comparator class takes four parameters: self, function name (string), function parameters (list), json directory.

function name: something like class.method OR module.function or similiar..
function parameters: a list like [first_number, second_number] where every element in this list is a string.
json directory: After every function, class, method etc. are saved in a json file, give this file's directory. The method will check the keys in this json file.

First, the code checks every "main key" in the json file. First it will look at the "function" key, then "method" key.
If the function/method name gets found, then it will iterate over the parameter list, checking if every parameter is in the json file. 
If the parameter was not found in the list, a message will get printed.


How to use it: In Marwin's code, right after the print function print("Function call::......."), this method can be called and the parameter given.

To test: Use json_test or the unittest files. In json_test, change the strings at line 17 and 18 to simulate a function name, and the parameters in line 20. Then run the file.

Returns:
	If no function was found: 1
	Else: 0
	
	