"{\n   \"function\": {\n      \"torch.__config__\": {\n         \"parallel_info\": [],\n         \"show\": []\n      },\n      \"torch.__future__\": {\n         \"get_overwrite_module_params_on_conversion\": [],\n         \"set_overwrite_module_params_on_conversion\": [\n            \"value\"\n         ]\n      },\n      \"torch.__init__\": {\n         \"_load_global_deps\": [],\n         \"compiled_with_cxx11_abi\": [],\n         \"is_storage\": [\n            \"obj\"\n         ],\n         \"is_tensor\": [\n            \"obj\"\n         ],\n         \"manager_path\": [],\n         \"set_default_dtype\": [\n            \"d\"\n         ],\n         \"set_default_tensor_type\": [\n            \"t\"\n         ],\n         \"typename\": [\n            \"o\"\n         ]\n      },\n      \"torch._appdirs\": {\n         \"_get_win_folder_from_registry\": [\n            \"csidl_name\"\n         ],\n         \"_get_win_folder_with_ctypes\": [\n            \"csidl_name\"\n         ],\n         \"_get_win_folder_with_jna\": [\n            \"csidl_name\"\n         ],\n         \"_get_win_folder_with_pywin32\": [\n            \"csidl_name\"\n         ],\n         \"site_config_dir\": [\n            \"appname\",\n            \"appauthor\",\n            \"version\",\n            \"multipath\"\n         ],\n         \"site_data_dir\": [\n            \"appname\",\n            \"appauthor\",\n            \"version\",\n            \"multipath\"\n         ],\n         \"user_cache_dir\": [\n            \"appname\",\n            \"appauthor\",\n            \"version\",\n            \"opinion\"\n         ],\n         \"user_config_dir\": [\n            \"appname\",\n            \"appauthor\",\n            \"version\",\n            \"roaming\"\n         ],\n         \"user_data_dir\": [\n            \"appname\",\n            \"appauthor\",\n            \"version\",\n            \"roaming\"\n         ],\n         \"user_log_dir\": [\n            \"appname\",\n            \"appauthor\",\n            \"version\",\n            \"opinion\"\n         ],\n         \"user_state_dir\": [\n            \"appname\",\n            \"appauthor\",\n            \"version\",\n            \"roaming\"\n         ]\n      },\n      \"torch._jit_internal\": {\n         \"_clear_fn_overloads\": [\n            \"qual_name\"\n         ],\n         \"_copy_to_script_wrapper\": [\n            \"fn\"\n         ],\n         \"_get_fn_overloads\": [\n            \"qual_name\"\n         ],\n         \"_get_overloaded_methods\": [\n            \"method\",\n            \"mod_class\"\n         ],\n         \"_overload\": [\n            \"func\"\n         ],\n         \"_overload_method\": [\n            \"func\"\n         ],\n         \"_qualified_name\": [\n            \"obj\"\n         ],\n         \"boolean_dispatch\": [\n            \"arg_name\",\n            \"arg_index\",\n            \"default\",\n            \"if_true\",\n            \"if_false\",\n            \"module_name\",\n            \"func_name\"\n         ],\n         \"can_compile_class\": [\n            \"cls\"\n         ],\n         \"copy_torchscript_modifier\": [\n            \"orig\",\n            \"new\"\n         ],\n         \"createResolutionCallbackForClassMethods\": [\n            \"cls\"\n         ],\n         \"createResolutionCallbackFromClosure\": [\n            \"fn\"\n         ],\n         \"createResolutionCallbackFromEnv\": [\n            \"lookup_base\"\n         ],\n         \"createResolutionCallbackFromFrame\": [\n            \"frames_up\"\n         ],\n         \"export\": [\n            \"fn\"\n         ],\n         \"fake_range\": [],\n         \"get_class_name_lineno\": [\n            \"method\"\n         ],\n         \"get_closure\": [\n            \"fn\"\n         ],\n         \"get_torchscript_modifier\": [\n            \"fn\"\n         ],\n         \"ignore\": [\n            \"drop\"\n         ],\n         \"is_dict\": [\n            \"ann\"\n         ],\n         \"is_final\": [\n            \"ann\"\n         ],\n         \"is_future\": [\n            \"ann\"\n         ],\n         \"is_ignored_fn\": [\n            \"fn\"\n         ],\n         \"is_list\": [\n            \"ann\"\n         ],\n         \"is_optional\": [\n            \"ann\"\n         ],\n         \"is_rref\": [\n            \"ann\"\n         ],\n         \"is_tuple\": [\n            \"ann\"\n         ],\n         \"module_has_exports\": [\n            \"mod\"\n         ],\n         \"should_drop\": [\n            \"fn\"\n         ],\n         \"unused\": [\n            \"fn\"\n         ]\n      },\n      \"torch._linalg_utils\": {\n         \"basis\": [\n            \"A\"\n         ],\n         \"bform\": [\n            \"X\",\n            \"A\",\n            \"Y\"\n         ],\n         \"conjugate\": [\n            \"A\"\n         ],\n         \"get_floating_dtype\": [\n            \"A\"\n         ],\n         \"is_sparse\": [\n            \"A\"\n         ],\n         \"matmul\": [\n            \"A\",\n            \"B\"\n         ],\n         \"qform\": [\n            \"A\",\n            \"S\"\n         ],\n         \"symeig\": [\n            \"A\",\n            \"largest\",\n            \"eigenvectors\"\n         ],\n         \"transjugate\": [\n            \"A\"\n         ],\n         \"transpose\": [\n            \"A\"\n         ]\n      },\n      \"torch._lobpcg\": {\n         \"LOBPCG_call_tracker\": [\n            \"self\"\n         ],\n         \"lobpcg\": [\n            \"A\",\n            \"k\",\n            \"B\",\n            \"X\",\n            \"n\",\n            \"iK\",\n            \"niter\",\n            \"tol\",\n            \"largest\",\n            \"method\",\n            \"tracker\",\n            \"ortho_iparams\",\n            \"ortho_fparams\",\n            \"ortho_bparams\"\n         ]\n      },\n      \"torch._lowrank\": {\n         \"_svd_lowrank\": [\n            \"A\",\n            \"q\",\n            \"niter\",\n            \"M\"\n         ],\n         \"get_approximate_basis\": [\n            \"A\",\n            \"q\",\n            \"niter\",\n            \"M\"\n         ],\n         \"pca_lowrank\": [\n            \"A\",\n            \"q\",\n            \"center\",\n            \"niter\"\n         ],\n         \"svd_lowrank\": [\n            \"A\",\n            \"q\",\n            \"niter\",\n            \"M\"\n         ]\n      },\n      \"torch._namedtensor_internals\": {\n         \"build_dim_map\": [\n            \"tensor\"\n         ],\n         \"check_serializing_named_tensor\": [\n            \"tensor\"\n         ],\n         \"expand_single_ellipsis\": [\n            \"numel_pre_glob\",\n            \"numel_post_glob\",\n            \"names\"\n         ],\n         \"is_ellipsis\": [\n            \"item\"\n         ],\n         \"namer_api_name\": [\n            \"inplace\"\n         ],\n         \"replace_ellipsis_by_position\": [\n            \"ellipsis_idx\",\n            \"names\",\n            \"tensor_names\"\n         ],\n         \"resolve_ellipsis\": [\n            \"names\",\n            \"tensor_names\",\n            \"fn_name\"\n         ],\n         \"single_ellipsis_index\": [\n            \"names\",\n            \"fn_name\"\n         ],\n         \"unzip_namedshape\": [\n            \"namedshape\"\n         ],\n         \"update_names\": [\n            \"tensor\",\n            \"names\",\n            \"rename_map\",\n            \"inplace\"\n         ],\n         \"update_names_with_list\": [\n            \"tensor\",\n            \"names\",\n            \"inplace\"\n         ],\n         \"update_names_with_mapping\": [\n            \"tensor\",\n            \"rename_map\",\n            \"inplace\"\n         ]\n      },\n      \"torch._ops\": {\n         \"dl_open_guard\": []\n      },\n      \"torch._overrides\": {\n         \"_get_overloaded_args\": [\n            \"relevant_args\"\n         ],\n         \"get_ignored_functions\": [],\n         \"get_overridable_functions\": [],\n         \"get_testing_overrides\": [],\n         \"handle_torch_function\": [\n            \"public_api\",\n            \"relevant_args\"\n         ],\n         \"has_torch_function\": [\n            \"relevant_args\"\n         ]\n      },\n      \"torch._six\": {\n         \"bind_method\": [\n            \"fn\",\n            \"obj\",\n            \"obj_type\"\n         ],\n         \"exec_\": [\n            \"_code_\",\n            \"_globs_\",\n            \"_locs_\"\n         ],\n         \"get_function_from_type\": [\n            \"cls\",\n            \"name\"\n         ],\n         \"istuple\": [\n            \"obj\"\n         ],\n         \"raise_from\": [\n            \"value\",\n            \"from_value\"\n         ],\n         \"with_metaclass\": [\n            \"meta\"\n         ]\n      },\n      \"torch._storage_docs\": {\n         \"add_docstr_all\": [\n            \"method\",\n            \"docstr\"\n         ]\n      },\n      \"torch._tensor_docs\": {\n         \"add_docstr_all\": [\n            \"method\",\n            \"docstr\"\n         ]\n      },\n      \"torch._tensor_str\": {\n         \"_add_suffixes\": [\n            \"tensor_str\",\n            \"suffixes\",\n            \"indent\",\n            \"force_newline\"\n         ],\n         \"_scalar_str\": [\n            \"self\",\n            \"formatter\"\n         ],\n         \"_str\": [\n            \"self\"\n         ],\n         \"_tensor_str\": [\n            \"self\",\n            \"indent\"\n         ],\n         \"_tensor_str_with_formatter\": [\n            \"self\",\n            \"indent\",\n            \"formatter\",\n            \"summarize\"\n         ],\n         \"_vector_str\": [\n            \"self\",\n            \"indent\",\n            \"formatter\",\n            \"summarize\"\n         ],\n         \"get_summarized_data\": [\n            \"self\"\n         ],\n         \"set_printoptions\": [\n            \"precision\",\n            \"threshold\",\n            \"edgeitems\",\n            \"linewidth\",\n            \"profile\",\n            \"sci_mode\"\n         ]\n      },\n      \"torch._torch_docs\": {\n         \"merge_dicts\": [],\n         \"parse_kwargs\": [\n            \"desc\"\n         ]\n      },\n      \"torch._utils\": {\n         \"_accumulate\": [\n            \"iterable\",\n            \"fn\"\n         ],\n         \"_cuda\": [\n            \"self\",\n            \"device\",\n            \"non_blocking\"\n         ],\n         \"_flatten_dense_tensors\": [\n            \"tensors\"\n         ],\n         \"_flatten_sparse_tensors\": [\n            \"tensors\"\n         ],\n         \"_get_async_or_non_blocking\": [\n            \"function_name\",\n            \"non_blocking\",\n            \"kwargs\"\n         ],\n         \"_import_dotted_name\": [\n            \"name\"\n         ],\n         \"_rebuild_parameter\": [\n            \"data\",\n            \"requires_grad\",\n            \"backward_hooks\"\n         ],\n         \"_rebuild_qtensor\": [\n            \"storage\",\n            \"storage_offset\",\n            \"size\",\n            \"stride\",\n            \"quantizer_params\",\n            \"requires_grad\",\n            \"backward_hooks\"\n         ],\n         \"_rebuild_sparse_tensor\": [\n            \"layout\",\n            \"data\"\n         ],\n         \"_rebuild_tensor\": [\n            \"storage\",\n            \"storage_offset\",\n            \"size\",\n            \"stride\"\n         ],\n         \"_rebuild_tensor_v2\": [\n            \"storage\",\n            \"storage_offset\",\n            \"size\",\n            \"stride\",\n            \"requires_grad\",\n            \"backward_hooks\"\n         ],\n         \"_rebuild_xla_tensor\": [\n            \"data\",\n            \"dtype\",\n            \"device\",\n            \"requires_grad\"\n         ],\n         \"_reorder_tensors_as\": [\n            \"tensors\",\n            \"ordered_tensors\"\n         ],\n         \"_take_tensors\": [\n            \"tensors\",\n            \"size_limit\"\n         ],\n         \"_type\": [\n            \"self\",\n            \"dtype\",\n            \"non_blocking\"\n         ],\n         \"_unflatten_dense_tensors\": [\n            \"flat\",\n            \"tensors\"\n         ],\n         \"_unflatten_sparse_tensors\": [\n            \"flat\",\n            \"tensors\"\n         ],\n         \"annotate\": [\n            \"ret\"\n         ]\n      },\n      \"torch._utils_internal\": {\n         \"get_file_path\": [],\n         \"get_file_path_2\": [],\n         \"get_source_lines_and_file\": [\n            \"obj\",\n            \"error_msg\"\n         ],\n         \"get_writable_path\": [\n            \"path\"\n         ],\n         \"prepare_multiprocessing_environment\": [\n            \"path\"\n         ],\n         \"resolve_library_path\": [\n            \"path\"\n         ]\n      },\n      \"torch.autograd.__init__\": {\n         \"_is_checkpoint_valid\": [],\n         \"_make_grads\": [\n            \"outputs\",\n            \"grads\"\n         ],\n         \"backward\": [\n            \"tensors\",\n            \"grad_tensors\",\n            \"retain_graph\",\n            \"create_graph\",\n            \"grad_variables\"\n         ],\n         \"grad\": [\n            \"outputs\",\n            \"inputs\",\n            \"grad_outputs\",\n            \"retain_graph\",\n            \"create_graph\",\n            \"only_inputs\",\n            \"allow_unused\"\n         ],\n         \"variable\": []\n      },\n      \"torch.autograd._functions.utils\": {\n         \"check_onnx_broadcast\": [\n            \"dims1\",\n            \"dims2\"\n         ],\n         \"maybe_unexpand\": [\n            \"tensor\",\n            \"old_size\",\n            \"check_same_size\"\n         ],\n         \"maybe_view\": [\n            \"tensor\",\n            \"size\",\n            \"check_same_size\"\n         ]\n      },\n      \"torch.autograd.function\": {\n         \"_iter_filter\": [\n            \"condition\",\n            \"allow_unknown\",\n            \"condition_msg\",\n            \"conversion\"\n         ],\n         \"_jit_unwrap_structured\": [\n            \"obj\"\n         ],\n         \"_nested_map\": [\n            \"condition\",\n            \"fn\",\n            \"condition_msg\"\n         ],\n         \"_unflatten\": [\n            \"input\",\n            \"proto\"\n         ],\n         \"once_differentiable\": [\n            \"fn\"\n         ],\n         \"traceable\": [\n            \"fn_cls\"\n         ]\n      },\n      \"torch.autograd.functional\": {\n         \"_as_tuple\": [\n            \"inp\",\n            \"arg_name\",\n            \"fn_name\"\n         ],\n         \"_autograd_grad\": [\n            \"outputs\",\n            \"inputs\",\n            \"grad_outputs\",\n            \"create_graph\",\n            \"retain_graph\"\n         ],\n         \"_check_requires_grad\": [\n            \"inputs\",\n            \"input_type\",\n            \"strict\"\n         ],\n         \"_fill_in_zeros\": [\n            \"grads\",\n            \"refs\",\n            \"strict\",\n            \"create_graph\",\n            \"stage\"\n         ],\n         \"_grad_postprocess\": [\n            \"inputs\",\n            \"create_graph\"\n         ],\n         \"_grad_preprocess\": [\n            \"inputs\",\n            \"create_graph\",\n            \"need_graph\"\n         ],\n         \"_tuple_postprocess\": [\n            \"res\",\n            \"to_unpack\"\n         ],\n         \"_validate_v\": [\n            \"v\",\n            \"other\",\n            \"is_other_tuple\"\n         ],\n         \"hessian\": [\n            \"func\",\n            \"inputs\",\n            \"create_graph\",\n            \"strict\"\n         ],\n         \"hvp\": [\n            \"func\",\n            \"inputs\",\n            \"v\",\n            \"create_graph\",\n            \"strict\"\n         ],\n         \"jacobian\": [\n            \"func\",\n            \"inputs\",\n            \"create_graph\",\n            \"strict\"\n         ],\n         \"jvp\": [\n            \"func\",\n            \"inputs\",\n            \"v\",\n            \"create_graph\",\n            \"strict\"\n         ],\n         \"vhp\": [\n            \"func\",\n            \"inputs\",\n            \"v\",\n            \"create_graph\",\n            \"strict\"\n         ],\n         \"vjp\": [\n            \"func\",\n            \"inputs\",\n            \"v\",\n            \"create_graph\",\n            \"strict\"\n         ]\n      },\n      \"torch.autograd.gradcheck\": {\n         \"_as_tuple\": [\n            \"x\"\n         ],\n         \"_differentiable_outputs\": [\n            \"x\"\n         ],\n         \"get_analytical_jacobian\": [\n            \"input\",\n            \"output\",\n            \"nondet_tol\"\n         ],\n         \"get_numerical_jacobian\": [\n            \"fn\",\n            \"input\",\n            \"target\",\n            \"eps\"\n         ],\n         \"gradcheck\": [\n            \"func\",\n            \"inputs\",\n            \"eps\",\n            \"atol\",\n            \"rtol\",\n            \"raise_exception\",\n            \"check_sparse_nnz\",\n            \"nondet_tol\"\n         ],\n         \"gradgradcheck\": [\n            \"func\",\n            \"inputs\",\n            \"grad_outputs\",\n            \"eps\",\n            \"atol\",\n            \"rtol\",\n            \"gen_non_contig_grad_outputs\",\n            \"raise_exception\",\n            \"nondet_tol\"\n         ],\n         \"iter_tensors\": [\n            \"x\",\n            \"only_requiring_grad\"\n         ],\n         \"make_jacobian\": [\n            \"input\",\n            \"num_out\"\n         ],\n         \"zero_gradients\": [\n            \"x\"\n         ]\n      },\n      \"torch.autograd.profiler\": {\n         \"attr_formatter\": [\n            \"name\"\n         ],\n         \"build_table\": [\n            \"events\",\n            \"sort_by\",\n            \"header\",\n            \"row_limit\",\n            \"use_cuda\"\n         ],\n         \"format_time\": [\n            \"time_us\"\n         ],\n         \"format_time_share\": [\n            \"time_us\",\n            \"total_time_us\"\n         ],\n         \"load_nvprof\": [\n            \"path\"\n         ],\n         \"parse_cpu_trace\": [\n            \"thread_records\"\n         ],\n         \"parse_nvprof_trace\": [\n            \"path\"\n         ]\n      },\n      \"torch.backends.__init__\": {\n         \"__allow_nonbracketed_mutation\": [],\n         \"disable_global_flags\": [],\n         \"flags_frozen\": []\n      },\n      \"torch.backends.cuda.__init__\": {\n         \"is_built\": []\n      },\n      \"torch.backends.cudnn.__init__\": {\n         \"_init\": [],\n         \"flags\": [\n            \"enabled\",\n            \"benchmark\",\n            \"deterministic\",\n            \"verbose\"\n         ],\n         \"is_acceptable\": [\n            \"tensor\"\n         ],\n         \"is_available\": [],\n         \"set_flags\": [\n            \"_enabled\",\n            \"_benchmark\",\n            \"_deterministic\",\n            \"_verbose\"\n         ],\n         \"version\": []\n      },\n      \"torch.backends.cudnn.rnn\": {\n         \"get_cudnn_mode\": [\n            \"mode\"\n         ],\n         \"init_dropout_state\": [\n            \"dropout\",\n            \"train\",\n            \"dropout_seed\",\n            \"dropout_state\"\n         ]\n      },\n      \"torch.backends.mkl.__init__\": {\n         \"is_available\": []\n      },\n      \"torch.backends.mkldnn.__init__\": {\n         \"flags\": [\n            \"enabled\"\n         ],\n         \"is_available\": [],\n         \"set_flags\": [\n            \"_enabled\"\n         ]\n      },\n      \"torch.backends.openmp.__init__\": {\n         \"is_available\": []\n      },\n      \"torch.backends.quantized.__init__\": {\n         \"_get_qengine_id\": [\n            \"qengine\"\n         ],\n         \"_get_qengine_str\": [\n            \"qengine\"\n         ]\n      },\n      \"torch.contrib._tensorboard_vis\": {\n         \"dump_tensorboard_summary\": [\n            \"graph_executor\",\n            \"logdir\"\n         ],\n         \"visualize\": [\n            \"graph\",\n            \"name_prefix\",\n            \"pb_graph\",\n            \"executors_it\"\n         ],\n         \"visualize_graph_executor\": [\n            \"state\",\n            \"name_prefix\",\n            \"pb_graph\",\n            \"inline_graph\"\n         ],\n         \"visualize_rec\": [\n            \"graph\",\n            \"value_map\",\n            \"name_prefix\",\n            \"pb_graph\",\n            \"executors_it\"\n         ]\n      },\n      \"torch.cuda.__init__\": {\n         \"_check_capability\": [],\n         \"_check_driver\": [],\n         \"_dummy_type\": [\n            \"name\"\n         ],\n         \"_lazy_call\": [\n            \"callable\"\n         ],\n         \"_lazy_init\": [],\n         \"_lazy_new\": [\n            \"cls\"\n         ],\n         \"_sleep\": [\n            \"cycles\"\n         ],\n         \"check_error\": [\n            \"res\"\n         ],\n         \"cudart\": [],\n         \"current_blas_handle\": [],\n         \"current_device\": [],\n         \"current_stream\": [\n            \"device\"\n         ],\n         \"default_stream\": [\n            \"device\"\n         ],\n         \"device_count\": [],\n         \"get_device_capability\": [\n            \"device\"\n         ],\n         \"get_device_name\": [\n            \"device\"\n         ],\n         \"get_device_properties\": [\n            \"device\"\n         ],\n         \"init\": [],\n         \"ipc_collect\": [],\n         \"is_available\": [],\n         \"is_initialized\": [],\n         \"set_device\": [\n            \"device\"\n         ],\n         \"stream\": [\n            \"stream\"\n         ],\n         \"synchronize\": [\n            \"device\"\n         ]\n      },\n      \"torch.cuda._utils\": {\n         \"_get_device_index\": [\n            \"device\",\n            \"optional\"\n         ]\n      },\n      \"torch.cuda.amp.autocast_mode\": {\n         \"_cast\": [\n            \"value\",\n            \"dtype\"\n         ],\n         \"custom_bwd\": [\n            \"bwd\"\n         ],\n         \"custom_fwd\": [\n            \"fwd\"\n         ]\n      },\n      \"torch.cuda.comm\": {\n         \"broadcast\": [\n            \"tensor\",\n            \"devices\"\n         ],\n         \"broadcast_coalesced\": [\n            \"tensors\",\n            \"devices\",\n            \"buffer_size\"\n         ],\n         \"gather\": [\n            \"tensors\",\n            \"dim\",\n            \"destination\"\n         ],\n         \"reduce_add\": [\n            \"inputs\",\n            \"destination\"\n         ],\n         \"reduce_add_coalesced\": [\n            \"inputs\",\n            \"destination\",\n            \"buffer_size\"\n         ],\n         \"scatter\": [\n            \"tensor\",\n            \"devices\",\n            \"chunk_sizes\",\n            \"dim\",\n            \"streams\"\n         ]\n      },\n      \"torch.cuda.memory\": {\n         \"_free_mutex\": [],\n         \"_host_allocator\": [],\n         \"caching_allocator_alloc\": [\n            \"size\",\n            \"device\",\n            \"stream\"\n         ],\n         \"caching_allocator_delete\": [\n            \"mem_ptr\"\n         ],\n         \"empty_cache\": [],\n         \"max_memory_allocated\": [\n            \"device\"\n         ],\n         \"max_memory_cached\": [\n            \"device\"\n         ],\n         \"max_memory_reserved\": [\n            \"device\"\n         ],\n         \"memory_allocated\": [\n            \"device\"\n         ],\n         \"memory_cached\": [\n            \"device\"\n         ],\n         \"memory_reserved\": [\n            \"device\"\n         ],\n         \"memory_snapshot\": [],\n         \"memory_stats\": [\n            \"device\"\n         ],\n         \"memory_stats_as_nested_dict\": [\n            \"device\"\n         ],\n         \"memory_summary\": [\n            \"device\",\n            \"abbreviated\"\n         ],\n         \"reset_accumulated_memory_stats\": [\n            \"device\"\n         ],\n         \"reset_max_memory_allocated\": [\n            \"device\"\n         ],\n         \"reset_max_memory_cached\": [\n            \"device\"\n         ],\n         \"reset_peak_memory_stats\": [\n            \"device\"\n         ]\n      },\n      \"torch.cuda.nccl\": {\n         \"all_gather\": [\n            \"inputs\",\n            \"outputs\",\n            \"streams\",\n            \"comms\"\n         ],\n         \"all_reduce\": [\n            \"inputs\",\n            \"outputs\",\n            \"op\",\n            \"streams\",\n            \"comms\"\n         ],\n         \"broadcast\": [\n            \"inputs\",\n            \"root\",\n            \"streams\",\n            \"comms\"\n         ],\n         \"init_rank\": [\n            \"num_ranks\",\n            \"uid\",\n            \"rank\"\n         ],\n         \"is_available\": [\n            \"tensors\"\n         ],\n         \"reduce\": [\n            \"inputs\",\n            \"outputs\",\n            \"root\",\n            \"op\",\n            \"streams\",\n            \"comms\"\n         ],\n         \"reduce_scatter\": [\n            \"inputs\",\n            \"outputs\",\n            \"op\",\n            \"streams\",\n            \"comms\"\n         ],\n         \"unique_id\": [],\n         \"version\": []\n      },\n      \"torch.cuda.nvtx\": {\n         \"mark\": [\n            \"msg\"\n         ],\n         \"range_pop\": [],\n         \"range_push\": [\n            \"msg\"\n         ]\n      },\n      \"torch.cuda.profiler\": {\n         \"init\": [\n            \"output_file\",\n            \"flags\",\n            \"output_mode\"\n         ],\n         \"profile\": [],\n         \"start\": [],\n         \"stop\": []\n      },\n      \"torch.cuda.random\": {\n         \"get_rng_state\": [\n            \"device\"\n         ],\n         \"get_rng_state_all\": [],\n         \"initial_seed\": [],\n         \"manual_seed\": [\n            \"seed\"\n         ],\n         \"manual_seed_all\": [\n            \"seed\"\n         ],\n         \"seed\": [],\n         \"seed_all\": [],\n         \"set_rng_state\": [\n            \"new_state\",\n            \"device\"\n         ],\n         \"set_rng_state_all\": [\n            \"new_states\"\n         ]\n      },\n      \"torch.distributed.__init__\": {\n         \"is_available\": []\n      },\n      \"torch.distributed.autograd.__init__\": {\n         \"is_available\": []\n      },\n      \"torch.distributed.distributed_c10d\": {\n         \"_check_default_pg\": [],\n         \"_check_single_tensor\": [\n            \"param\",\n            \"param_name\"\n         ],\n         \"_check_tensor_list\": [\n            \"param\",\n            \"param_name\"\n         ],\n         \"_get_default_group\": [],\n         \"_get_default_store\": [],\n         \"_get_global_rank\": [\n            \"group\",\n            \"group_rank\"\n         ],\n         \"_get_group_rank\": [\n            \"group\",\n            \"rank\"\n         ],\n         \"_get_group_size\": [\n            \"group\"\n         ],\n         \"_new_process_group_helper\": [\n            \"world_size\",\n            \"rank\",\n            \"group_ranks\",\n            \"backend\",\n            \"store\",\n            \"group_name\",\n            \"timeout\"\n         ],\n         \"_rank_not_in_group\": [\n            \"group\"\n         ],\n         \"all_gather\": [\n            \"tensor_list\",\n            \"tensor\",\n            \"group\",\n            \"async_op\"\n         ],\n         \"all_gather_coalesced\": [\n            \"output_tensor_lists\",\n            \"input_tensor_list\",\n            \"group\",\n            \"async_op\"\n         ],\n         \"all_gather_multigpu\": [\n            \"output_tensor_lists\",\n            \"input_tensor_list\",\n            \"group\",\n            \"async_op\"\n         ],\n         \"all_reduce\": [\n            \"tensor\",\n            \"op\",\n            \"group\",\n            \"async_op\"\n         ],\n         \"all_reduce_coalesced\": [\n            \"tensors\",\n            \"op\",\n            \"group\",\n            \"async_op\"\n         ],\n         \"all_reduce_multigpu\": [\n            \"tensor_list\",\n            \"op\",\n            \"group\",\n            \"async_op\"\n         ],\n         \"all_to_all\": [\n            \"output_tensor_list\",\n            \"input_tensor_list\",\n            \"group\",\n            \"async_op\"\n         ],\n         \"all_to_all_single\": [\n            \"output\",\n            \"input\",\n            \"output_split_sizes\",\n            \"input_split_sizes\",\n            \"group\",\n            \"async_op\"\n         ],\n         \"barrier\": [\n            \"group\",\n            \"async_op\"\n         ],\n         \"broadcast\": [\n            \"tensor\",\n            \"src\",\n            \"group\",\n            \"async_op\"\n         ],\n         \"broadcast_multigpu\": [\n            \"tensor_list\",\n            \"src\",\n            \"group\",\n            \"async_op\",\n            \"src_tensor\"\n         ],\n         \"destroy_process_group\": [\n            \"group\"\n         ],\n         \"gather\": [\n            \"tensor\",\n            \"gather_list\",\n            \"dst\",\n            \"group\",\n            \"async_op\"\n         ],\n         \"get_backend\": [\n            \"group\"\n         ],\n         \"get_rank\": [\n            \"group\"\n         ],\n         \"get_world_size\": [\n            \"group\"\n         ],\n         \"init_process_group\": [\n            \"backend\",\n            \"init_method\",\n            \"timeout\",\n            \"world_size\",\n            \"rank\",\n            \"store\",\n            \"group_name\"\n         ],\n         \"irecv\": [\n            \"tensor\",\n            \"src\",\n            \"group\",\n            \"tag\"\n         ],\n         \"is_gloo_available\": [],\n         \"is_initialized\": [],\n         \"is_mpi_available\": [],\n         \"is_nccl_available\": [],\n         \"isend\": [\n            \"tensor\",\n            \"dst\",\n            \"group\",\n            \"tag\"\n         ],\n         \"new_group\": [\n            \"ranks\",\n            \"timeout\",\n            \"backend\"\n         ],\n         \"recv\": [\n            \"tensor\",\n            \"src\",\n            \"group\",\n            \"tag\"\n         ],\n         \"reduce\": [\n            \"tensor\",\n            \"dst\",\n            \"op\",\n            \"group\",\n            \"async_op\"\n         ],\n         \"reduce_multigpu\": [\n            \"tensor_list\",\n            \"dst\",\n            \"op\",\n            \"group\",\n            \"async_op\",\n            \"dst_tensor\"\n         ],\n         \"reduce_scatter\": [\n            \"output\",\n            \"input_list\",\n            \"op\",\n            \"group\",\n            \"async_op\"\n         ],\n         \"reduce_scatter_multigpu\": [\n            \"output_tensor_list\",\n            \"input_tensor_lists\",\n            \"op\",\n            \"group\",\n            \"async_op\"\n         ],\n         \"scatter\": [\n            \"tensor\",\n            \"scatter_list\",\n            \"src\",\n            \"group\",\n            \"async_op\"\n         ],\n         \"send\": [\n            \"tensor\",\n            \"dst\",\n            \"group\",\n            \"tag\"\n         ]\n      },\n      \"torch.distributed.launch\": {\n         \"main\": [],\n         \"parse_args\": []\n      },\n      \"torch.distributed.optim.optimizer\": {\n         \"_local_optimizer_step\": [\n            \"local_optim_rref\",\n            \"autograd_ctx_id\"\n         ],\n         \"_new_local_optimizer\": [\n            \"optim_cls\",\n            \"local_params_rref\"\n         ],\n         \"_wait_for_all\": [\n            \"rpc_futs\"\n         ]\n      },\n      \"torch.distributed.rendezvous\": {\n         \"_env_rendezvous_handler\": [\n            \"url\",\n            \"timeout\"\n         ],\n         \"_file_rendezvous_handler\": [\n            \"url\"\n         ],\n         \"_rendezvous_error\": [\n            \"msg\"\n         ],\n         \"_tcp_rendezvous_handler\": [\n            \"url\",\n            \"timeout\"\n         ],\n         \"register_rendezvous_handler\": [\n            \"scheme\",\n            \"handler\"\n         ],\n         \"rendezvous\": [\n            \"url\",\n            \"rank\",\n            \"world_size\"\n         ]\n      },\n      \"torch.distributed.rpc.__init__\": {\n         \"_get_debug_info\": [],\n         \"init_rpc\": [\n            \"name\",\n            \"backend\",\n            \"rank\",\n            \"world_size\",\n            \"rpc_backend_options\"\n         ],\n         \"is_available\": []\n      },\n      \"torch.distributed.rpc._testing.__init__\": {\n         \"is_available\": []\n      },\n      \"torch.distributed.rpc._testing.faulty_agent_backend_registry\": {\n         \"_faulty_process_group_construct_rpc_backend_options_handler\": [\n            \"rpc_timeout\",\n            \"init_method\",\n            \"num_send_recv_threads\",\n            \"messages_to_fail\",\n            \"messages_to_delay\",\n            \"num_fail_sends\"\n         ],\n         \"_faulty_process_group_init_backend_handler\": [\n            \"store\",\n            \"name\",\n            \"rank\",\n            \"world_size\",\n            \"rpc_backend_options\"\n         ]\n      },\n      \"torch.distributed.rpc.api\": {\n         \"_init_rpc_backend\": [\n            \"backend\",\n            \"store\",\n            \"name\",\n            \"rank\",\n            \"world_size\",\n            \"rpc_backend_options\"\n         ],\n         \"_invoke_rpc\": [\n            \"to\",\n            \"func\",\n            \"rpc_type\",\n            \"args\",\n            \"kwargs\",\n            \"rpc_timeout\"\n         ],\n         \"_on_leader_follower_report_shutdown_intent\": [\n            \"sequence_id\",\n            \"worker_name\"\n         ],\n         \"_require_initialized\": [\n            \"func\"\n         ],\n         \"_set_proceed_shutdown_signal\": [\n            \"sequence_id\"\n         ],\n         \"_to_worker_info\": [\n            \"name_or_info\"\n         ],\n         \"_use_rpc_pickler\": [\n            \"rpc_pickler\"\n         ],\n         \"_validate_rpc_args\": [\n            \"backend\",\n            \"store\",\n            \"name\",\n            \"rank\",\n            \"world_size\",\n            \"rpc_backend_options\"\n         ],\n         \"_wait_all_workers\": [],\n         \"get_worker_info\": [\n            \"worker_name\"\n         ],\n         \"remote\": [\n            \"to\",\n            \"func\",\n            \"args\",\n            \"kwargs\"\n         ],\n         \"rpc_async\": [\n            \"to\",\n            \"func\",\n            \"args\",\n            \"kwargs\",\n            \"timeout\"\n         ],\n         \"rpc_sync\": [\n            \"to\",\n            \"func\",\n            \"args\",\n            \"kwargs\",\n            \"timeout\"\n         ],\n         \"shutdown\": [\n            \"graceful\"\n         ]\n      },\n      \"torch.distributed.rpc.backend_registry\": {\n         \"_backend_type_repr\": [\n            \"self\"\n         ],\n         \"_process_group_construct_rpc_backend_options_handler\": [\n            \"rpc_timeout\",\n            \"init_method\",\n            \"num_send_recv_threads\"\n         ],\n         \"_process_group_init_backend_handler\": [\n            \"store\",\n            \"name\",\n            \"rank\",\n            \"world_size\",\n            \"rpc_backend_options\"\n         ],\n         \"_tensorpipe_construct_rpc_backend_options_handler\": [\n            \"rpc_timeout\",\n            \"init_method\",\n            \"worker_name_to_id\"\n         ],\n         \"_tensorpipe_init_backend_handler\": [\n            \"store\",\n            \"name\",\n            \"rank\",\n            \"world_size\",\n            \"rpc_backend_options\"\n         ],\n         \"backend_registered\": [\n            \"backend_name\"\n         ],\n         \"construct_rpc_backend_options\": [\n            \"backend\",\n            \"rpc_timeout\",\n            \"init_method\"\n         ],\n         \"init_backend\": [\n            \"backend\"\n         ],\n         \"register_backend\": [\n            \"backend_name\",\n            \"construct_rpc_backend_options_handler\",\n            \"init_backend_handler\"\n         ]\n      },\n      \"torch.distributed.rpc.internal\": {\n         \"_build_rpc_profiling_key\": [\n            \"exec_type\",\n            \"func_name\",\n            \"current_worker_name\",\n            \"dst_worker_name\"\n         ],\n         \"_handle_exception\": [\n            \"result\"\n         ],\n         \"_run_function\": [\n            \"python_udf\"\n         ],\n         \"_start_record_function\": [\n            \"exec_type\",\n            \"func_name\",\n            \"current_worker_name\",\n            \"dest_worker_name\"\n         ],\n         \"deserialize\": [\n            \"binary_data\",\n            \"tensor_table\"\n         ],\n         \"serialize\": [\n            \"obj\"\n         ]\n      },\n      \"torch.distributed.rpc.rref_proxy\": {\n         \"_invoke_rpc\": [\n            \"rref\",\n            \"rpc_api\",\n            \"func_name\"\n         ],\n         \"_local_invoke\": [\n            \"rref\",\n            \"func_name\",\n            \"args\",\n            \"kwargs\"\n         ]\n      },\n      \"torch.distributions.binomial\": {\n         \"_clamp_by_zero\": [\n            \"x\"\n         ]\n      },\n      \"torch.distributions.constraint_registry\": {\n         \"_biject_to_cat\": [\n            \"constraint\"\n         ],\n         \"_biject_to_simplex\": [\n            \"constraint\"\n         ],\n         \"_biject_to_stack\": [\n            \"constraint\"\n         ],\n         \"_transform_to_cat\": [\n            \"constraint\"\n         ],\n         \"_transform_to_greater_than\": [\n            \"constraint\"\n         ],\n         \"_transform_to_interval\": [\n            \"constraint\"\n         ],\n         \"_transform_to_less_than\": [\n            \"constraint\"\n         ],\n         \"_transform_to_lower_cholesky\": [\n            \"constraint\"\n         ],\n         \"_transform_to_positive\": [\n            \"constraint\"\n         ],\n         \"_transform_to_real\": [\n            \"constraint\"\n         ],\n         \"_transform_to_simplex\": [\n            \"constraint\"\n         ],\n         \"_transform_to_stack\": [\n            \"constraint\"\n         ]\n      },\n      \"torch.distributions.constraints\": {\n         \"is_dependent\": [\n            \"constraint\"\n         ]\n      },\n      \"torch.distributions.dirichlet\": {\n         \"_Dirichlet_backward\": [\n            \"x\",\n            \"concentration\",\n            \"grad_output\"\n         ]\n      },\n      \"torch.distributions.gamma\": {\n         \"_standard_gamma\": [\n            \"concentration\"\n         ]\n      },\n      \"torch.distributions.kl\": {\n         \"_batch_trace_XXT\": [\n            \"bmat\"\n         ],\n         \"_dispatch_kl\": [\n            \"type_p\",\n            \"type_q\"\n         ],\n         \"_infinite_like\": [\n            \"tensor\"\n         ],\n         \"_kl_bernoulli_bernoulli\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_bernoulli_poisson\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_beta_beta\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_beta_continuous_bernoulli\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_beta_exponential\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_beta_gamma\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_beta_infinity\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_beta_normal\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_beta_uniform\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_binomial_binomial\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_categorical_categorical\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_cauchy_cauchy\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_continuous_bernoulli_continuous_bernoulli\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_continuous_bernoulli_exponential\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_continuous_bernoulli_infinity\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_continuous_bernoulli_normal\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_continuous_bernoulli_uniform\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_dirichlet_dirichlet\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_expfamily_expfamily\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_exponential_exponential\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_exponential_gamma\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_exponential_gumbel\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_exponential_infinity\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_exponential_normal\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_gamma_exponential\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_gamma_gamma\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_gamma_gumbel\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_gamma_infinity\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_gamma_normal\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_geometric_geometric\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_gumbel_gumbel\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_gumbel_infinity\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_gumbel_normal\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_halfnormal_halfnormal\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_independent_independent\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_laplace_infinity\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_laplace_laplace\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_laplace_normal\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_lowrankmultivariatenormal_lowrankmultivariatenormal\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_lowrankmultivariatenormal_multivariatenormal\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_multivariatenormal_lowrankmultivariatenormal\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_multivariatenormal_multivariatenormal\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_normal_gumbel\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_normal_infinity\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_normal_normal\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_onehotcategorical_onehotcategorical\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_pareto_exponential\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_pareto_gamma\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_pareto_infinity\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_pareto_normal\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_pareto_pareto\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_poisson_infinity\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_poisson_poisson\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_transformed_transformed\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_uniform_beta\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_uniform_continuous_bernoulli\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_uniform_exponetial\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_uniform_gamma\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_uniform_gumbel\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_uniform_normal\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_uniform_pareto\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_kl_uniform_uniform\": [\n            \"p\",\n            \"q\"\n         ],\n         \"_x_log_x\": [\n            \"tensor\"\n         ],\n         \"kl_divergence\": [\n            \"p\",\n            \"q\"\n         ],\n         \"register_kl\": [\n            \"type_p\",\n            \"type_q\"\n         ]\n      },\n      \"torch.distributions.lowrank_multivariate_normal\": {\n         \"_batch_capacitance_tril\": [\n            \"W\",\n            \"D\"\n         ],\n         \"_batch_lowrank_logdet\": [\n            \"W\",\n            \"D\",\n            \"capacitance_tril\"\n         ],\n         \"_batch_lowrank_mahalanobis\": [\n            \"W\",\n            \"D\",\n            \"x\",\n            \"capacitance_tril\"\n         ]\n      },\n      \"torch.distributions.multivariate_normal\": {\n         \"_batch_mahalanobis\": [\n            \"bL\",\n            \"bx\"\n         ],\n         \"_batch_mv\": [\n            \"bmat\",\n            \"bvec\"\n         ],\n         \"_precision_to_scale_tril\": [\n            \"P\"\n         ]\n      },\n      \"torch.distributions.transforms\": {\n         \"_clipped_sigmoid\": [\n            \"x\"\n         ]\n      },\n      \"torch.distributions.utils\": {\n         \"_standard_normal\": [\n            \"shape\",\n            \"dtype\",\n            \"device\"\n         ],\n         \"_sum_rightmost\": [\n            \"value\",\n            \"dim\"\n         ],\n         \"broadcast_all\": [],\n         \"clamp_probs\": [\n            \"probs\"\n         ],\n         \"logits_to_probs\": [\n            \"logits\",\n            \"is_binary\"\n         ],\n         \"probs_to_logits\": [\n            \"probs\",\n            \"is_binary\"\n         ]\n      },\n      \"torch.distributions.von_mises\": {\n         \"_eval_poly\": [\n            \"y\",\n            \"coef\"\n         ],\n         \"_log_modified_bessel_fn\": [\n            \"x\",\n            \"order\"\n         ],\n         \"_rejection_sample\": [\n            \"loc\",\n            \"concentration\",\n            \"proposal_r\",\n            \"x\"\n         ]\n      },\n      \"torch.functional\": {\n         \"_check_list_size\": [\n            \"out_len\",\n            \"get_infos\",\n            \"out\"\n         ],\n         \"_index_tensor_with_indices_list\": [\n            \"tensor\",\n            \"indices\"\n         ],\n         \"_indices_product\": [\n            \"indices\"\n         ],\n         \"_lu_impl\": [\n            \"A\",\n            \"pivot\",\n            \"get_infos\",\n            \"out\"\n         ],\n         \"_lu_no_infos\": [\n            \"A\",\n            \"pivot\",\n            \"get_infos\",\n            \"out\"\n         ],\n         \"_lu_with_infos\": [\n            \"A\",\n            \"pivot\",\n            \"get_infos\",\n            \"out\"\n         ],\n         \"align_tensors\": [],\n         \"block_diag\": [],\n         \"broadcast_tensors\": [],\n         \"cartesian_prod\": [],\n         \"cdist\": [\n            \"x1\",\n            \"x2\",\n            \"p\",\n            \"compute_mode\"\n         ],\n         \"chain_matmul\": [],\n         \"einsum\": [\n            \"equation\"\n         ],\n         \"istft\": [\n            \"input\",\n            \"n_fft\",\n            \"hop_length\",\n            \"win_length\",\n            \"window\",\n            \"center\",\n            \"normalized\",\n            \"onesided\",\n            \"length\"\n         ],\n         \"lu_unpack\": [\n            \"LU_data\",\n            \"LU_pivots\",\n            \"unpack_data\",\n            \"unpack_pivots\"\n         ],\n         \"meshgrid\": [],\n         \"norm\": [\n            \"input\",\n            \"p\",\n            \"dim\",\n            \"keepdim\",\n            \"out\",\n            \"dtype\"\n         ],\n         \"split\": [\n            \"tensor\",\n            \"split_size_or_sections\",\n            \"dim\"\n         ],\n         \"stft\": [\n            \"input\",\n            \"n_fft\",\n            \"hop_length\",\n            \"win_length\",\n            \"window\",\n            \"center\",\n            \"pad_mode\",\n            \"normalized\",\n            \"onesided\"\n         ],\n         \"tensordot\": [\n            \"a\",\n            \"b\",\n            \"dims\"\n         ],\n         \"unique\": [\n            \"input\",\n            \"sorted\",\n            \"return_inverse\",\n            \"return_counts\",\n            \"dim\"\n         ],\n         \"unique_consecutive\": [\n            \"input\",\n            \"return_inverse\",\n            \"return_counts\",\n            \"dim\"\n         ]\n      },\n      \"torch.hub\": {\n         \"_check_dependencies\": [\n            \"m\"\n         ],\n         \"_check_module_exists\": [\n            \"name\"\n         ],\n         \"_download_url_to_file\": [\n            \"url\",\n            \"dst\",\n            \"hash_prefix\",\n            \"progress\"\n         ],\n         \"_get_cache_or_reload\": [\n            \"github\",\n            \"force_reload\",\n            \"verbose\"\n         ],\n         \"_get_torch_home\": [],\n         \"_git_archive_link\": [\n            \"repo_owner\",\n            \"repo_name\",\n            \"branch\"\n         ],\n         \"_load_attr_from_module\": [\n            \"module\",\n            \"func_name\"\n         ],\n         \"_load_entry_from_hubconf\": [\n            \"m\",\n            \"model\"\n         ],\n         \"_parse_repo_info\": [\n            \"github\"\n         ],\n         \"_remove_if_exists\": [\n            \"path\"\n         ],\n         \"_setup_hubdir\": [],\n         \"download_url_to_file\": [\n            \"url\",\n            \"dst\",\n            \"hash_prefix\",\n            \"progress\"\n         ],\n         \"help\": [\n            \"github\",\n            \"model\",\n            \"force_reload\"\n         ],\n         \"import_module\": [\n            \"name\",\n            \"path\"\n         ],\n         \"list\": [\n            \"github\",\n            \"force_reload\"\n         ],\n         \"load\": [\n            \"github\",\n            \"model\"\n         ],\n         \"load_state_dict_from_url\": [\n            \"url\",\n            \"model_dir\",\n            \"map_location\",\n            \"progress\",\n            \"check_hash\"\n         ],\n         \"set_dir\": [\n            \"d\"\n         ]\n      },\n      \"torch.jit.__init__\": {\n         \"Attribute\": [\n            \"value\",\n            \"type\"\n         ],\n         \"_add_script_class\": [\n            \"cls\",\n            \"name\"\n         ],\n         \"_check_directly_compile_overloaded\": [\n            \"obj\"\n         ],\n         \"_check_overload_defaults\": [\n            \"impl_defaults\",\n            \"overload_defaults\",\n            \"loc\"\n         ],\n         \"_check_trace\": [\n            \"check_inputs\",\n            \"func\",\n            \"traced_func\",\n            \"check_tolerance\",\n            \"strict\",\n            \"force_outplace\",\n            \"is_trace_module\",\n            \"_module_class\"\n         ],\n         \"_clone_inputs\": [\n            \"args\"\n         ],\n         \"_compile_and_register_class\": [\n            \"obj\",\n            \"rcb\",\n            \"qualified_name\"\n         ],\n         \"_compile_function_with_overload\": [\n            \"overload_fn\",\n            \"qual_name\",\n            \"impl_fn\"\n         ],\n         \"_create_interpreter_name_lookup_fn\": [\n            \"frames_up\"\n         ],\n         \"_create_named_tuple\": [\n            \"t\",\n            \"unqual_name\",\n            \"field_names\"\n         ],\n         \"_disable_emit_hooks\": [],\n         \"_get_methods\": [\n            \"cls\"\n         ],\n         \"_get_named_tuple_properties\": [\n            \"obj\"\n         ],\n         \"_get_overloads\": [\n            \"obj\"\n         ],\n         \"_get_script_class\": [\n            \"name\"\n         ],\n         \"_get_trace_graph\": [\n            \"f\",\n            \"args\",\n            \"kwargs\",\n            \"strict\",\n            \"_force_outplace\",\n            \"return_inputs\",\n            \"_return_inputs_states\"\n         ],\n         \"_graph_for\": [\n            \"self\"\n         ],\n         \"_is_new_style_class\": [\n            \"cls\"\n         ],\n         \"_make_fail\": [\n            \"name\"\n         ],\n         \"_parse_env\": [\n            \"name\",\n            \"default\",\n            \"true_message\",\n            \"false_message\"\n         ],\n         \"_script_if_tracing\": [\n            \"fn\"\n         ],\n         \"_set_jit_function_cache\": [\n            \"key\",\n            \"value\"\n         ],\n         \"_set_jit_overload_cache\": [\n            \"key\",\n            \"compiled_fns\"\n         ],\n         \"_time\": [\n            \"trace_name\",\n            \"name\",\n            \"time\"\n         ],\n         \"_try_get_dispatched_fn\": [\n            \"fn\"\n         ],\n         \"_try_get_jit_cached_function\": [\n            \"key\"\n         ],\n         \"_try_get_jit_cached_overloads\": [\n            \"key\"\n         ],\n         \"_try_get_overloaded_fn\": [\n            \"mod\",\n            \"field\"\n         ],\n         \"_unique_state_dict\": [\n            \"module\",\n            \"keep_vars\"\n         ],\n         \"_unwrap_optional\": [\n            \"x\"\n         ],\n         \"_verify_equal\": [\n            \"xs\",\n            \"ys\"\n         ],\n         \"annotate\": [\n            \"the_type\",\n            \"the_value\"\n         ],\n         \"export_opnames\": [\n            \"m\"\n         ],\n         \"indent\": [\n            \"s\"\n         ],\n         \"interface\": [\n            \"obj\"\n         ],\n         \"is_scripting\": [],\n         \"is_tracing\": [],\n         \"load\": [\n            \"f\",\n            \"map_location\",\n            \"_extra_files\"\n         ],\n         \"make_module\": [\n            \"mod\",\n            \"_module_class\",\n            \"_compilation_unit\"\n         ],\n         \"make_tuple\": [\n            \"example_inputs\"\n         ],\n         \"optimized_execution\": [\n            \"should_optimize\"\n         ],\n         \"save\": [\n            \"m\",\n            \"f\",\n            \"_extra_files\"\n         ],\n         \"script\": [\n            \"obj\",\n            \"optimize\",\n            \"_frames_up\",\n            \"_rcb\"\n         ],\n         \"script_method\": [\n            \"fn\"\n         ],\n         \"trace\": [\n            \"func\",\n            \"example_inputs\",\n            \"optimize\",\n            \"check_trace\",\n            \"check_inputs\",\n            \"check_tolerance\",\n            \"strict\",\n            \"_force_outplace\",\n            \"_module_class\",\n            \"_compilation_unit\"\n         ],\n         \"trace_module\": [\n            \"mod\",\n            \"inputs\",\n            \"optimize\",\n            \"check_trace\",\n            \"check_inputs\",\n            \"check_tolerance\",\n            \"strict\",\n            \"_force_outplace\",\n            \"_module_class\",\n            \"_compilation_unit\"\n         ],\n         \"verify\": [\n            \"model\",\n            \"args\",\n            \"loss_fn\",\n            \"devices\"\n         ],\n         \"whichmodule\": [\n            \"obj\"\n         ],\n         \"wrap_check_inputs\": [\n            \"check_inputs\"\n         ]\n      },\n      \"torch.jit._builtins\": {\n         \"_find_builtin\": [\n            \"fn\"\n         ],\n         \"_gen_torch_functional_registered_ops\": [],\n         \"_get_builtin_table\": [],\n         \"_is_special_functional_bound_op\": [\n            \"fn\"\n         ],\n         \"_register_builtin\": [\n            \"fn\",\n            \"op\"\n         ]\n      },\n      \"torch.jit._pickle\": {\n         \"build_boollist\": [\n            \"data\"\n         ],\n         \"build_doublelist\": [\n            \"data\"\n         ],\n         \"build_intlist\": [\n            \"data\"\n         ],\n         \"build_tensor_from_id\": [\n            \"data\"\n         ],\n         \"build_tensorlist\": [\n            \"data\"\n         ],\n         \"restore_type_tag\": [\n            \"value\",\n            \"type_str\"\n         ]\n      },\n      \"torch.jit._recursive\": {\n         \"_check_no_signature\": [\n            \"func\"\n         ],\n         \"_get_valid_constant\": [\n            \"attr\",\n            \"v\"\n         ],\n         \"add_python_attr_to_scripted_model\": [\n            \"script_model\",\n            \"orig\",\n            \"attr\"\n         ],\n         \"check_module_initialized\": [\n            \"mod\"\n         ],\n         \"compile_unbound_method\": [\n            \"concrete_type\",\n            \"fn\"\n         ],\n         \"create_methods_from_stubs\": [\n            \"concrete_type\",\n            \"stubs\"\n         ],\n         \"create_script_module\": [\n            \"nn_module\",\n            \"stubs_fn\",\n            \"share_types\"\n         ],\n         \"create_script_module_impl\": [\n            \"nn_module\",\n            \"concrete_type\",\n            \"stubs_fn\"\n         ],\n         \"get_overload_annotations\": [\n            \"mod\"\n         ],\n         \"get_overload_name_mapping\": [\n            \"overload_info\"\n         ],\n         \"infer_concrete_type_builder\": [\n            \"nn_module\"\n         ],\n         \"infer_methods_to_compile\": [\n            \"nn_module\"\n         ],\n         \"interface_script\": [\n            \"mod_interface\",\n            \"nn_module\"\n         ],\n         \"lazy_bind\": [\n            \"concrete_type\",\n            \"unbound_method\"\n         ],\n         \"make_stub\": [\n            \"func\"\n         ],\n         \"make_stub_from_method\": [\n            \"nn_module\",\n            \"method\"\n         ],\n         \"make_stubs_for_overloads\": [\n            \"overload_info\"\n         ],\n         \"script_model_defines_attr\": [\n            \"script_model\",\n            \"attr\"\n         ],\n         \"try_compile_fn\": [\n            \"fn\",\n            \"loc\"\n         ],\n         \"wrap_cpp_module\": [\n            \"cpp_module\"\n         ]\n      },\n      \"torch.jit.annotations\": {\n         \"ann_to_type\": [\n            \"ann\",\n            \"loc\"\n         ],\n         \"check_fn\": [\n            \"fn\",\n            \"loc\"\n         ],\n         \"get_param_names\": [\n            \"fn\",\n            \"n_args\"\n         ],\n         \"get_signature\": [\n            \"fn\",\n            \"rcb\",\n            \"loc\",\n            \"is_method\"\n         ],\n         \"get_type_line\": [\n            \"source\"\n         ],\n         \"is_function_or_method\": [\n            \"the_callable\"\n         ],\n         \"is_vararg\": [\n            \"the_callable\"\n         ],\n         \"parse_type_line\": [\n            \"type_line\",\n            \"rcb\",\n            \"loc\"\n         ],\n         \"split_type_line\": [\n            \"type_line\"\n         ],\n         \"try_ann_to_type\": [\n            \"ann\",\n            \"loc\"\n         ],\n         \"try_real_annotations\": [\n            \"fn\",\n            \"loc\"\n         ]\n      },\n      \"torch.jit.frontend\": {\n         \"_uses_true_division\": [\n            \"fn\"\n         ],\n         \"build_class_def\": [\n            \"ctx\",\n            \"py_def\",\n            \"methods\",\n            \"self_name\"\n         ],\n         \"build_def\": [\n            \"ctx\",\n            \"py_def\",\n            \"type_line\",\n            \"self_name\"\n         ],\n         \"build_param\": [\n            \"ctx\",\n            \"py_arg\",\n            \"self_name\",\n            \"kwarg_only\"\n         ],\n         \"build_param_list\": [\n            \"ctx\",\n            \"py_args\",\n            \"self_name\"\n         ],\n         \"build_stmts\": [\n            \"ctx\",\n            \"stmts\"\n         ],\n         \"find_before\": [\n            \"ctx\",\n            \"pos\",\n            \"substr\",\n            \"offsets\"\n         ],\n         \"get_default_args\": [\n            \"fn\"\n         ],\n         \"get_jit_class_def\": [\n            \"cls\",\n            \"self_name\"\n         ],\n         \"get_jit_def\": [\n            \"fn\",\n            \"self_name\"\n         ],\n         \"is_reserved_name\": [\n            \"name\"\n         ]\n      },\n      \"torch.jit.quantized\": {\n         \"apply_permutation\": [\n            \"tensor\",\n            \"permutation\",\n            \"dim\"\n         ],\n         \"quantize_linear_modules\": [\n            \"module\",\n            \"dtype\"\n         ],\n         \"quantize_rnn_cell_modules\": [\n            \"module\"\n         ],\n         \"quantize_rnn_modules\": [\n            \"module\",\n            \"dtype\"\n         ]\n      },\n      \"torch.jit.supported_ops\": {\n         \"_emit_arg\": [\n            \"indent\",\n            \"i\",\n            \"arg\"\n         ],\n         \"_emit_args\": [\n            \"indent\",\n            \"arguments\"\n         ],\n         \"_emit_ret\": [\n            \"ret\"\n         ],\n         \"_emit_rets\": [\n            \"returns\"\n         ],\n         \"_emit_schema\": [\n            \"mod\",\n            \"name\",\n            \"schema\",\n            \"arg_start\",\n            \"padding\"\n         ],\n         \"_emit_type\": [\n            \"type\"\n         ],\n         \"_get_builtins_helper\": [],\n         \"_get_global_builtins\": [],\n         \"_get_math_builtins\": [],\n         \"_get_nn_functional_ops\": [],\n         \"_get_tensor_ops\": [],\n         \"_get_torchscript_builtins\": [],\n         \"_hidden\": [\n            \"name\"\n         ],\n         \"_is_math_fn\": [\n            \"fn\"\n         ],\n         \"_list_supported_ops\": []\n      },\n      \"torch.jit.unsupported_tensor_ops\": {\n         \"_gen_unsupported_methods_properties\": [],\n         \"_list_unsupported_tensor_ops\": [],\n         \"execWrapper\": [\n            \"code\",\n            \"glob\",\n            \"loc\"\n         ]\n      },\n      \"torch.multiprocessing.__init__\": {\n         \"get_all_sharing_strategies\": [],\n         \"get_sharing_strategy\": [],\n         \"set_sharing_strategy\": [\n            \"new_strategy\"\n         ]\n      },\n      \"torch.multiprocessing._atfork\": {\n         \"_register\": [\n            \"func\"\n         ],\n         \"register_after_fork\": [\n            \"func\"\n         ]\n      },\n      \"torch.multiprocessing.pool\": {\n         \"clean_worker\": []\n      },\n      \"torch.multiprocessing.reductions\": {\n         \"fd_id\": [\n            \"fd\"\n         ],\n         \"init_reductions\": [],\n         \"rebuild_cuda_tensor\": [\n            \"tensor_cls\",\n            \"tensor_size\",\n            \"tensor_stride\",\n            \"tensor_offset\",\n            \"storage_cls\",\n            \"storage_device\",\n            \"storage_handle\",\n            \"storage_size_bytes\",\n            \"storage_offset_bytes\",\n            \"requires_grad\",\n            \"ref_counter_handle\",\n            \"ref_counter_offset\",\n            \"event_handle\",\n            \"event_sync_required\"\n         ],\n         \"rebuild_event\": [\n            \"device\",\n            \"handle\"\n         ],\n         \"rebuild_storage_empty\": [\n            \"cls\"\n         ],\n         \"rebuild_storage_fd\": [\n            \"cls\",\n            \"df\",\n            \"size\"\n         ],\n         \"rebuild_storage_filename\": [\n            \"cls\",\n            \"manager\",\n            \"handle\",\n            \"size\"\n         ],\n         \"rebuild_tensor\": [\n            \"cls\",\n            \"storage\",\n            \"metadata\"\n         ],\n         \"reduce_event\": [\n            \"event\"\n         ],\n         \"reduce_storage\": [\n            \"storage\"\n         ],\n         \"reduce_tensor\": [\n            \"tensor\"\n         ],\n         \"storage_from_cache\": [\n            \"cls\",\n            \"key\"\n         ]\n      },\n      \"torch.multiprocessing.spawn\": {\n         \"_python_version_check\": [],\n         \"_wrap\": [\n            \"fn\",\n            \"i\",\n            \"args\",\n            \"error_queue\"\n         ],\n         \"spawn\": [\n            \"fn\",\n            \"args\",\n            \"nprocs\",\n            \"join\",\n            \"daemon\",\n            \"start_method\"\n         ],\n         \"start_processes\": [\n            \"fn\",\n            \"args\",\n            \"nprocs\",\n            \"join\",\n            \"daemon\",\n            \"start_method\"\n         ]\n      },\n      \"torch.nn._reduction\": {\n         \"get_enum\": [\n            \"reduction\"\n         ],\n         \"legacy_get_enum\": [\n            \"size_average\",\n            \"reduce\",\n            \"emit_warning\"\n         ],\n         \"legacy_get_string\": [\n            \"size_average\",\n            \"reduce\",\n            \"emit_warning\"\n         ]\n      },\n      \"torch.nn.backends.thnn\": {\n         \"_get_thnn_function_backend\": []\n      },\n      \"torch.nn.functional\": {\n         \"_adaptive_max_pool1d\": [\n            \"input\",\n            \"output_size\",\n            \"return_indices\"\n         ],\n         \"_adaptive_max_pool2d\": [\n            \"input\",\n            \"output_size\",\n            \"return_indices\"\n         ],\n         \"_adaptive_max_pool3d\": [\n            \"input\",\n            \"output_size\",\n            \"return_indices\"\n         ],\n         \"_fractional_max_pool2d\": [\n            \"input\",\n            \"kernel_size\",\n            \"output_size\",\n            \"output_ratio\",\n            \"return_indices\",\n            \"_random_samples\"\n         ],\n         \"_fractional_max_pool3d\": [\n            \"input\",\n            \"kernel_size\",\n            \"output_size\",\n            \"output_ratio\",\n            \"return_indices\",\n            \"_random_samples\"\n         ],\n         \"_get_softmax_dim\": [\n            \"name\",\n            \"ndim\",\n            \"stacklevel\"\n         ],\n         \"_interp_output_size\": [\n            \"closed_over_args\"\n         ],\n         \"_max_pool1d\": [\n            \"input\",\n            \"kernel_size\",\n            \"stride\",\n            \"padding\",\n            \"dilation\",\n            \"ceil_mode\",\n            \"return_indices\"\n         ],\n         \"_max_pool2d\": [\n            \"input\",\n            \"kernel_size\",\n            \"stride\",\n            \"padding\",\n            \"dilation\",\n            \"ceil_mode\",\n            \"return_indices\"\n         ],\n         \"_max_pool3d\": [\n            \"input\",\n            \"kernel_size\",\n            \"stride\",\n            \"padding\",\n            \"dilation\",\n            \"ceil_mode\",\n            \"return_indices\"\n         ],\n         \"_no_grad_embedding_renorm_\": [\n            \"weight\",\n            \"input\",\n            \"max_norm\",\n            \"norm_type\"\n         ],\n         \"_pad\": [\n            \"input\",\n            \"pad\",\n            \"mode\",\n            \"value\"\n         ],\n         \"_pad_circular\": [\n            \"input\",\n            \"padding\"\n         ],\n         \"_pointwise_loss\": [\n            \"lambd\",\n            \"lambd_optimized\",\n            \"input\",\n            \"target\",\n            \"reduction\"\n         ],\n         \"_smooth_l1_loss\": [\n            \"input\",\n            \"target\"\n         ],\n         \"_unpool_output_size\": [\n            \"input\",\n            \"kernel_size\",\n            \"stride\",\n            \"padding\",\n            \"output_size\"\n         ],\n         \"_verify_batch_size\": [\n            \"size\"\n         ],\n         \"adaptive_avg_pool2d\": [\n            \"input\",\n            \"output_size\"\n         ],\n         \"adaptive_avg_pool3d\": [\n            \"input\",\n            \"output_size\"\n         ],\n         \"adaptive_max_pool1d_with_indices\": [\n            \"input\",\n            \"output_size\",\n            \"return_indices\"\n         ],\n         \"adaptive_max_pool2d_with_indices\": [\n            \"input\",\n            \"output_size\",\n            \"return_indices\"\n         ],\n         \"adaptive_max_pool3d_with_indices\": [\n            \"input\",\n            \"output_size\",\n            \"return_indices\"\n         ],\n         \"affine_grid\": [\n            \"theta\",\n            \"size\",\n            \"align_corners\"\n         ],\n         \"alpha_dropout\": [\n            \"input\",\n            \"p\",\n            \"training\",\n            \"inplace\"\n         ],\n         \"assert_int_or_pair\": [\n            \"arg\",\n            \"arg_name\",\n            \"message\"\n         ],\n         \"batch_norm\": [\n            \"input\",\n            \"running_mean\",\n            \"running_var\",\n            \"weight\",\n            \"bias\",\n            \"training\",\n            \"momentum\",\n            \"eps\"\n         ],\n         \"bilinear\": [\n            \"input1\",\n            \"input2\",\n            \"weight\",\n            \"bias\"\n         ],\n         \"binary_cross_entropy\": [\n            \"input\",\n            \"target\",\n            \"weight\",\n            \"size_average\",\n            \"reduce\",\n            \"reduction\"\n         ],\n         \"binary_cross_entropy_with_logits\": [\n            \"input\",\n            \"target\",\n            \"weight\",\n            \"size_average\",\n            \"reduce\",\n            \"reduction\",\n            \"pos_weight\"\n         ],\n         \"celu\": [\n            \"input\",\n            \"alpha\",\n            \"inplace\"\n         ],\n         \"cosine_embedding_loss\": [\n            \"input1\",\n            \"input2\",\n            \"target\",\n            \"margin\",\n            \"size_average\",\n            \"reduce\",\n            \"reduction\"\n         ],\n         \"cross_entropy\": [\n            \"input\",\n            \"target\",\n            \"weight\",\n            \"size_average\",\n            \"ignore_index\",\n            \"reduce\",\n            \"reduction\"\n         ],\n         \"ctc_loss\": [\n            \"log_probs\",\n            \"targets\",\n            \"input_lengths\",\n            \"target_lengths\",\n            \"blank\",\n            \"reduction\",\n            \"zero_infinity\"\n         ],\n         \"dropout\": [\n            \"input\",\n            \"p\",\n            \"training\",\n            \"inplace\"\n         ],\n         \"dropout2d\": [\n            \"input\",\n            \"p\",\n            \"training\",\n            \"inplace\"\n         ],\n         \"dropout3d\": [\n            \"input\",\n            \"p\",\n            \"training\",\n            \"inplace\"\n         ],\n         \"elu\": [\n            \"input\",\n            \"alpha\",\n            \"inplace\"\n         ],\n         \"embedding\": [\n            \"input\",\n            \"weight\",\n            \"padding_idx\",\n            \"max_norm\",\n            \"norm_type\",\n            \"scale_grad_by_freq\",\n            \"sparse\"\n         ],\n         \"embedding_bag\": [\n            \"input\",\n            \"weight\",\n            \"offsets\",\n            \"max_norm\",\n            \"norm_type\",\n            \"scale_grad_by_freq\",\n            \"mode\",\n            \"sparse\",\n            \"per_sample_weights\",\n            \"include_last_offset\"\n         ],\n         \"feature_alpha_dropout\": [\n            \"input\",\n            \"p\",\n            \"training\",\n            \"inplace\"\n         ],\n         \"fold\": [\n            \"input\",\n            \"output_size\",\n            \"kernel_size\",\n            \"dilation\",\n            \"padding\",\n            \"stride\"\n         ],\n         \"fractional_max_pool2d_with_indices\": [\n            \"input\",\n            \"kernel_size\",\n            \"output_size\",\n            \"output_ratio\",\n            \"return_indices\",\n            \"_random_samples\"\n         ],\n         \"fractional_max_pool3d_with_indices\": [\n            \"input\",\n            \"kernel_size\",\n            \"output_size\",\n            \"output_ratio\",\n            \"return_indices\",\n            \"_random_samples\"\n         ],\n         \"gelu\": [\n            \"input\"\n         ],\n         \"glu\": [\n            \"input\",\n            \"dim\"\n         ],\n         \"grid_sample\": [\n            \"input\",\n            \"grid\",\n            \"mode\",\n            \"padding_mode\",\n            \"align_corners\"\n         ],\n         \"group_norm\": [\n            \"input\",\n            \"num_groups\",\n            \"weight\",\n            \"bias\",\n            \"eps\"\n         ],\n         \"gumbel_softmax\": [\n            \"logits\",\n            \"tau\",\n            \"hard\",\n            \"eps\",\n            \"dim\"\n         ],\n         \"hardshrink\": [\n            \"input\",\n            \"lambd\"\n         ],\n         \"hardsigmoid\": [\n            \"input\",\n            \"inplace\"\n         ],\n         \"hardswish\": [\n            \"input\",\n            \"inplace\"\n         ],\n         \"hardtanh\": [\n            \"input\",\n            \"min_val\",\n            \"max_val\",\n            \"inplace\"\n         ],\n         \"hinge_embedding_loss\": [\n            \"input\",\n            \"target\",\n            \"margin\",\n            \"size_average\",\n            \"reduce\",\n            \"reduction\"\n         ],\n         \"instance_norm\": [\n            \"input\",\n            \"running_mean\",\n            \"running_var\",\n            \"weight\",\n            \"bias\",\n            \"use_input_stats\",\n            \"momentum\",\n            \"eps\"\n         ],\n         \"interpolate\": [\n            \"input\",\n            \"size\",\n            \"scale_factor\",\n            \"mode\",\n            \"align_corners\",\n            \"recompute_scale_factor\"\n         ],\n         \"kl_div\": [\n            \"input\",\n            \"target\",\n            \"size_average\",\n            \"reduce\",\n            \"reduction\",\n            \"log_target\"\n         ],\n         \"l1_loss\": [\n            \"input\",\n            \"target\",\n            \"size_average\",\n            \"reduce\",\n            \"reduction\"\n         ],\n         \"layer_norm\": [\n            \"input\",\n            \"normalized_shape\",\n            \"weight\",\n            \"bias\",\n            \"eps\"\n         ],\n         \"leaky_relu\": [\n            \"input\",\n            \"negative_slope\",\n            \"inplace\"\n         ],\n         \"linear\": [\n            \"input\",\n            \"weight\",\n            \"bias\"\n         ],\n         \"local_response_norm\": [\n            \"input\",\n            \"size\",\n            \"alpha\",\n            \"beta\",\n            \"k\"\n         ],\n         \"log_softmax\": [\n            \"input\",\n            \"dim\",\n            \"_stacklevel\",\n            \"dtype\"\n         ],\n         \"lp_pool1d\": [\n            \"input\",\n            \"norm_type\",\n            \"kernel_size\",\n            \"stride\",\n            \"ceil_mode\"\n         ],\n         \"lp_pool2d\": [\n            \"input\",\n            \"norm_type\",\n            \"kernel_size\",\n            \"stride\",\n            \"ceil_mode\"\n         ],\n         \"margin_ranking_loss\": [\n            \"input1\",\n            \"input2\",\n            \"target\",\n            \"margin\",\n            \"size_average\",\n            \"reduce\",\n            \"reduction\"\n         ],\n         \"max_pool1d_with_indices\": [\n            \"input\",\n            \"kernel_size\",\n            \"stride\",\n            \"padding\",\n            \"dilation\",\n            \"ceil_mode\",\n            \"return_indices\"\n         ],\n         \"max_pool2d_with_indices\": [\n            \"input\",\n            \"kernel_size\",\n            \"stride\",\n            \"padding\",\n            \"dilation\",\n            \"ceil_mode\",\n            \"return_indices\"\n         ],\n         \"max_pool3d_with_indices\": [\n            \"input\",\n            \"kernel_size\",\n            \"stride\",\n            \"padding\",\n            \"dilation\",\n            \"ceil_mode\",\n            \"return_indices\"\n         ],\n         \"max_unpool1d\": [\n            \"input\",\n            \"indices\",\n            \"kernel_size\",\n            \"stride\",\n            \"padding\",\n            \"output_size\"\n         ],\n         \"max_unpool2d\": [\n            \"input\",\n            \"indices\",\n            \"kernel_size\",\n            \"stride\",\n            \"padding\",\n            \"output_size\"\n         ],\n         \"max_unpool3d\": [\n            \"input\",\n            \"indices\",\n            \"kernel_size\",\n            \"stride\",\n            \"padding\",\n            \"output_size\"\n         ],\n         \"mse_loss\": [\n            \"input\",\n            \"target\",\n            \"size_average\",\n            \"reduce\",\n            \"reduction\"\n         ],\n         \"multi_head_attention_forward\": [\n            \"query\",\n            \"key\",\n            \"value\",\n            \"embed_dim_to_check\",\n            \"num_heads\",\n            \"in_proj_weight\",\n            \"in_proj_bias\",\n            \"bias_k\",\n            \"bias_v\",\n            \"add_zero_attn\",\n            \"dropout_p\",\n            \"out_proj_weight\",\n            \"out_proj_bias\",\n            \"training\",\n            \"key_padding_mask\",\n            \"need_weights\",\n            \"attn_mask\",\n            \"use_separate_proj_weight\",\n            \"q_proj_weight\",\n            \"k_proj_weight\",\n            \"v_proj_weight\",\n            \"static_k\",\n            \"static_v\"\n         ],\n         \"multi_margin_loss\": [\n            \"input\",\n            \"target\",\n            \"p\",\n            \"margin\",\n            \"weight\",\n            \"size_average\",\n            \"reduce\",\n            \"reduction\"\n         ],\n         \"multilabel_margin_loss\": [\n            \"input\",\n            \"target\",\n            \"size_average\",\n            \"reduce\",\n            \"reduction\"\n         ],\n         \"multilabel_soft_margin_loss\": [\n            \"input\",\n            \"target\",\n            \"weight\",\n            \"size_average\",\n            \"reduce\",\n            \"reduction\"\n         ],\n         \"nll_loss\": [\n            \"input\",\n            \"target\",\n            \"weight\",\n            \"size_average\",\n            \"ignore_index\",\n            \"reduce\",\n            \"reduction\"\n         ],\n         \"normalize\": [\n            \"input\",\n            \"p\",\n            \"dim\",\n            \"eps\",\n            \"out\"\n         ],\n         \"pairwise_distance\": [\n            \"x1\",\n            \"x2\",\n            \"p\",\n            \"eps\",\n            \"keepdim\"\n         ],\n         \"poisson_nll_loss\": [\n            \"input\",\n            \"target\",\n            \"log_input\",\n            \"full\",\n            \"size_average\",\n            \"eps\",\n            \"reduce\",\n            \"reduction\"\n         ],\n         \"prelu\": [\n            \"input\",\n            \"weight\"\n         ],\n         \"relu\": [\n            \"input\",\n            \"inplace\"\n         ],\n         \"relu6\": [\n            \"input\",\n            \"inplace\"\n         ],\n         \"rrelu\": [\n            \"input\",\n            \"lower\",\n            \"upper\",\n            \"training\",\n            \"inplace\"\n         ],\n         \"selu\": [\n            \"input\",\n            \"inplace\"\n         ],\n         \"sigmoid\": [\n            \"input\"\n         ],\n         \"smooth_l1_loss\": [\n            \"input\",\n            \"target\",\n            \"size_average\",\n            \"reduce\",\n            \"reduction\"\n         ],\n         \"soft_margin_loss\": [\n            \"input\",\n            \"target\",\n            \"size_average\",\n            \"reduce\",\n            \"reduction\"\n         ],\n         \"softmax\": [\n            \"input\",\n            \"dim\",\n            \"_stacklevel\",\n            \"dtype\"\n         ],\n         \"softmin\": [\n            \"input\",\n            \"dim\",\n            \"_stacklevel\",\n            \"dtype\"\n         ],\n         \"softsign\": [\n            \"input\"\n         ],\n         \"tanh\": [\n            \"input\"\n         ],\n         \"tanhshrink\": [\n            \"input\"\n         ],\n         \"threshold\": [\n            \"input\",\n            \"threshold\",\n            \"value\",\n            \"inplace\"\n         ],\n         \"triplet_margin_loss\": [\n            \"anchor\",\n            \"positive\",\n            \"negative\",\n            \"margin\",\n            \"p\",\n            \"eps\",\n            \"swap\",\n            \"size_average\",\n            \"reduce\",\n            \"reduction\"\n         ],\n         \"unfold\": [\n            \"input\",\n            \"kernel_size\",\n            \"dilation\",\n            \"padding\",\n            \"stride\"\n         ],\n         \"upsample\": [\n            \"input\",\n            \"size\",\n            \"scale_factor\",\n            \"mode\",\n            \"align_corners\"\n         ],\n         \"upsample_bilinear\": [\n            \"input\",\n            \"size\",\n            \"scale_factor\"\n         ],\n         \"upsample_nearest\": [\n            \"input\",\n            \"size\",\n            \"scale_factor\"\n         ]\n      },\n      \"torch.nn.grad\": {\n         \"_grad_input_padding\": [\n            \"grad_output\",\n            \"input_size\",\n            \"stride\",\n            \"padding\",\n            \"kernel_size\",\n            \"dilation\"\n         ],\n         \"conv1d_input\": [\n            \"input_size\",\n            \"weight\",\n            \"grad_output\",\n            \"stride\",\n            \"padding\",\n            \"dilation\",\n            \"groups\"\n         ],\n         \"conv1d_weight\": [\n            \"input\",\n            \"weight_size\",\n            \"grad_output\",\n            \"stride\",\n            \"padding\",\n            \"dilation\",\n            \"groups\"\n         ],\n         \"conv2d_input\": [\n            \"input_size\",\n            \"weight\",\n            \"grad_output\",\n            \"stride\",\n            \"padding\",\n            \"dilation\",\n            \"groups\"\n         ],\n         \"conv2d_weight\": [\n            \"input\",\n            \"weight_size\",\n            \"grad_output\",\n            \"stride\",\n            \"padding\",\n            \"dilation\",\n            \"groups\"\n         ],\n         \"conv3d_input\": [\n            \"input_size\",\n            \"weight\",\n            \"grad_output\",\n            \"stride\",\n            \"padding\",\n            \"dilation\",\n            \"groups\"\n         ],\n         \"conv3d_weight\": [\n            \"input\",\n            \"weight_size\",\n            \"grad_output\",\n            \"stride\",\n            \"padding\",\n            \"dilation\",\n            \"groups\"\n         ]\n      },\n      \"torch.nn.init\": {\n         \"_calculate_correct_fan\": [\n            \"tensor\",\n            \"mode\"\n         ],\n         \"_calculate_fan_in_and_fan_out\": [\n            \"tensor\"\n         ],\n         \"_make_deprecate\": [\n            \"meth\"\n         ],\n         \"_no_grad_fill_\": [\n            \"tensor\",\n            \"val\"\n         ],\n         \"_no_grad_normal_\": [\n            \"tensor\",\n            \"mean\",\n            \"std\"\n         ],\n         \"_no_grad_trunc_normal_\": [\n            \"tensor\",\n            \"mean\",\n            \"std\",\n            \"a\",\n            \"b\"\n         ],\n         \"_no_grad_uniform_\": [\n            \"tensor\",\n            \"a\",\n            \"b\"\n         ],\n         \"_no_grad_zero_\": [\n            \"tensor\"\n         ],\n         \"calculate_gain\": [\n            \"nonlinearity\",\n            \"param\"\n         ],\n         \"constant_\": [\n            \"tensor\",\n            \"val\"\n         ],\n         \"dirac_\": [\n            \"tensor\",\n            \"groups\"\n         ],\n         \"eye_\": [\n            \"tensor\"\n         ],\n         \"kaiming_normal_\": [\n            \"tensor\",\n            \"a\",\n            \"mode\",\n            \"nonlinearity\"\n         ],\n         \"kaiming_uniform_\": [\n            \"tensor\",\n            \"a\",\n            \"mode\",\n            \"nonlinearity\"\n         ],\n         \"normal_\": [\n            \"tensor\",\n            \"mean\",\n            \"std\"\n         ],\n         \"ones_\": [\n            \"tensor\"\n         ],\n         \"orthogonal_\": [\n            \"tensor\",\n            \"gain\"\n         ],\n         \"sparse_\": [\n            \"tensor\",\n            \"sparsity\",\n            \"std\"\n         ],\n         \"trunc_normal_\": [\n            \"tensor\",\n            \"mean\",\n            \"std\",\n            \"a\",\n            \"b\"\n         ],\n         \"uniform_\": [\n            \"tensor\",\n            \"a\",\n            \"b\"\n         ],\n         \"xavier_normal_\": [\n            \"tensor\",\n            \"gain\"\n         ],\n         \"xavier_uniform_\": [\n            \"tensor\",\n            \"gain\"\n         ],\n         \"zeros_\": [\n            \"tensor\"\n         ]\n      },\n      \"torch.nn.intrinsic.qat.modules.conv_fused\": {\n         \"freeze_bn_stats\": [\n            \"mod\"\n         ],\n         \"update_bn_stats\": [\n            \"mod\"\n         ]\n      },\n      \"torch.nn.modules.module\": {\n         \"_addindent\": [\n            \"s_\",\n            \"numSpaces\"\n         ]\n      },\n      \"torch.nn.modules.rnn\": {\n         \"apply_permutation\": [\n            \"tensor\",\n            \"permutation\",\n            \"dim\"\n         ]\n      },\n      \"torch.nn.modules.transformer\": {\n         \"_get_activation_fn\": [\n            \"activation\"\n         ],\n         \"_get_clones\": [\n            \"module\",\n            \"N\"\n         ]\n      },\n      \"torch.nn.modules.utils\": {\n         \"_list_with_default\": [\n            \"out_size\",\n            \"defaults\"\n         ],\n         \"_ntuple\": [\n            \"n\"\n         ],\n         \"_repeat_tuple\": [\n            \"t\",\n            \"n\"\n         ]\n      },\n      \"torch.nn.parallel.__init__\": {\n         \"DistributedDataParallelCPU\": []\n      },\n      \"torch.nn.parallel._functions\": {\n         \"_get_stream\": [\n            \"device\"\n         ]\n      },\n      \"torch.nn.parallel.data_parallel\": {\n         \"_check_balance\": [\n            \"device_ids\"\n         ],\n         \"data_parallel\": [\n            \"module\",\n            \"inputs\",\n            \"device_ids\",\n            \"output_device\",\n            \"dim\",\n            \"module_kwargs\"\n         ]\n      },\n      \"torch.nn.parallel.distributed\": {\n         \"_find_tensors\": [\n            \"obj\"\n         ]\n      },\n      \"torch.nn.parallel.parallel_apply\": {\n         \"get_a_var\": [\n            \"obj\"\n         ],\n         \"parallel_apply\": [\n            \"modules\",\n            \"inputs\",\n            \"kwargs_tup\",\n            \"devices\"\n         ]\n      },\n      \"torch.nn.parallel.replicate\": {\n         \"_broadcast_coalesced_reshape\": [\n            \"tensors\",\n            \"devices\",\n            \"detach\"\n         ],\n         \"_init_script_module\": [],\n         \"_is_jit_enabled\": [],\n         \"_is_script_method\": [\n            \"module\"\n         ],\n         \"_is_script_module\": [\n            \"module\"\n         ],\n         \"_replicatable_module\": [\n            \"module\",\n            \"memo\"\n         ],\n         \"replicate\": [\n            \"network\",\n            \"devices\",\n            \"detach\"\n         ]\n      },\n      \"torch.nn.parallel.scatter_gather\": {\n         \"gather\": [\n            \"outputs\",\n            \"target_device\",\n            \"dim\"\n         ],\n         \"scatter\": [\n            \"inputs\",\n            \"target_gpus\",\n            \"dim\"\n         ],\n         \"scatter_kwargs\": [\n            \"inputs\",\n            \"kwargs\",\n            \"target_gpus\",\n            \"dim\"\n         ]\n      },\n      \"torch.nn.quantized.dynamic.modules.rnn\": {\n         \"apply_permutation\": [\n            \"tensor\",\n            \"permutation\",\n            \"dim\"\n         ]\n      },\n      \"torch.nn.quantized.functional\": {\n         \"adaptive_avg_pool2d\": [\n            \"input\",\n            \"output_size\"\n         ],\n         \"avg_pool2d\": [\n            \"input\",\n            \"kernel_size\",\n            \"stride\",\n            \"padding\",\n            \"ceil_mode\",\n            \"count_include_pad\",\n            \"divisor_override\"\n         ],\n         \"avg_pool3d\": [\n            \"input\",\n            \"kernel_size\",\n            \"stride\",\n            \"padding\",\n            \"ceil_mode\",\n            \"count_include_pad\",\n            \"divisor_override\"\n         ],\n         \"clamp\": [\n            \"input\",\n            \"min_\",\n            \"max_\"\n         ],\n         \"conv2d\": [\n            \"input\",\n            \"weight\",\n            \"bias\",\n            \"stride\",\n            \"padding\",\n            \"dilation\",\n            \"groups\",\n            \"padding_mode\",\n            \"scale\",\n            \"zero_point\",\n            \"dtype\"\n         ],\n         \"conv3d\": [\n            \"input\",\n            \"weight\",\n            \"bias\",\n            \"stride\",\n            \"padding\",\n            \"dilation\",\n            \"groups\",\n            \"padding_mode\",\n            \"scale\",\n            \"zero_point\",\n            \"dtype\"\n         ],\n         \"elu\": [\n            \"input\",\n            \"alpha\",\n            \"inplace\",\n            \"scale\",\n            \"zero_point\"\n         ],\n         \"hardsigmoid\": [\n            \"input\"\n         ],\n         \"hardswish\": [\n            \"input\",\n            \"scale\",\n            \"zero_point\"\n         ],\n         \"hardtanh\": [\n            \"input\",\n            \"min_val\",\n            \"max_val\",\n            \"inplace\"\n         ],\n         \"interpolate\": [\n            \"input\",\n            \"size\",\n            \"scale_factor\",\n            \"mode\",\n            \"align_corners\"\n         ],\n         \"leaky_relu\": [\n            \"input\",\n            \"negative_slope\",\n            \"inplace\",\n            \"scale\",\n            \"zero_point\"\n         ],\n         \"linear\": [\n            \"input\",\n            \"weight\",\n            \"bias\",\n            \"scale\",\n            \"zero_point\"\n         ],\n         \"max_pool2d\": [\n            \"input\",\n            \"kernel_size\",\n            \"stride\",\n            \"padding\",\n            \"dilation\",\n            \"ceil_mode\",\n            \"return_indices\"\n         ],\n         \"relu\": [\n            \"input\",\n            \"inplace\"\n         ],\n         \"upsample\": [\n            \"input\",\n            \"size\",\n            \"scale_factor\",\n            \"mode\",\n            \"align_corners\"\n         ],\n         \"upsample_bilinear\": [\n            \"input\",\n            \"size\",\n            \"scale_factor\"\n         ],\n         \"upsample_nearest\": [\n            \"input\",\n            \"size\",\n            \"scale_factor\"\n         ]\n      },\n      \"torch.nn.quantized.modules.utils\": {\n         \"_ntuple_from_first\": [\n            \"n\"\n         ],\n         \"_quantize_weight\": [\n            \"float_wt\",\n            \"observer\"\n         ]\n      },\n      \"torch.nn.utils.clip_grad\": {\n         \"clip_grad_norm\": [\n            \"parameters\",\n            \"max_norm\",\n            \"norm_type\"\n         ],\n         \"clip_grad_norm_\": [\n            \"parameters\",\n            \"max_norm\",\n            \"norm_type\"\n         ],\n         \"clip_grad_value_\": [\n            \"parameters\",\n            \"clip_value\"\n         ]\n      },\n      \"torch.nn.utils.convert_parameters\": {\n         \"_check_param_device\": [\n            \"param\",\n            \"old_param_device\"\n         ],\n         \"parameters_to_vector\": [\n            \"parameters\"\n         ],\n         \"vector_to_parameters\": [\n            \"vec\",\n            \"parameters\"\n         ]\n      },\n      \"torch.nn.utils.fusion\": {\n         \"fuse_conv_bn_eval\": [\n            \"conv\",\n            \"bn\"\n         ],\n         \"fuse_conv_bn_weights\": [\n            \"conv_w\",\n            \"conv_b\",\n            \"bn_rm\",\n            \"bn_rv\",\n            \"bn_eps\",\n            \"bn_w\",\n            \"bn_b\"\n         ]\n      },\n      \"torch.nn.utils.memory_format\": {\n         \"convert_conv2d_weight_memory_format\": [\n            \"module\",\n            \"memory_format\"\n         ]\n      },\n      \"torch.nn.utils.prune\": {\n         \"_compute_norm\": [\n            \"t\",\n            \"n\",\n            \"dim\"\n         ],\n         \"_compute_nparams_toprune\": [\n            \"amount\",\n            \"tensor_size\"\n         ],\n         \"_validate_pruning_amount\": [\n            \"amount\",\n            \"tensor_size\"\n         ],\n         \"_validate_pruning_amount_init\": [\n            \"amount\"\n         ],\n         \"_validate_pruning_dim\": [\n            \"t\",\n            \"dim\"\n         ],\n         \"_validate_structured_pruning\": [\n            \"t\"\n         ],\n         \"custom_from_mask\": [\n            \"module\",\n            \"name\",\n            \"mask\"\n         ],\n         \"global_unstructured\": [\n            \"parameters\",\n            \"pruning_method\"\n         ],\n         \"identity\": [\n            \"module\",\n            \"name\"\n         ],\n         \"is_pruned\": [\n            \"module\"\n         ],\n         \"l1_unstructured\": [\n            \"module\",\n            \"name\",\n            \"amount\"\n         ],\n         \"ln_structured\": [\n            \"module\",\n            \"name\",\n            \"amount\",\n            \"n\",\n            \"dim\"\n         ],\n         \"random_structured\": [\n            \"module\",\n            \"name\",\n            \"amount\",\n            \"dim\"\n         ],\n         \"random_unstructured\": [\n            \"module\",\n            \"name\",\n            \"amount\"\n         ],\n         \"remove\": [\n            \"module\",\n            \"name\"\n         ]\n      },\n      \"torch.nn.utils.rnn\": {\n         \"_packed_sequence_init\": [\n            \"data\",\n            \"batch_sizes\",\n            \"sorted_indices\",\n            \"unsorted_indices\"\n         ],\n         \"_packed_sequence_init_args\": [\n            \"data\",\n            \"batch_sizes\",\n            \"sorted_indices\",\n            \"unsorted_indices\"\n         ],\n         \"bind\": [\n            \"optional\",\n            \"fn\"\n         ],\n         \"invert_permutation\": [\n            \"permutation\"\n         ],\n         \"pack_padded_sequence\": [\n            \"input\",\n            \"lengths\",\n            \"batch_first\",\n            \"enforce_sorted\"\n         ],\n         \"pack_sequence\": [\n            \"sequences\",\n            \"enforce_sorted\"\n         ],\n         \"pad_packed_sequence\": [\n            \"sequence\",\n            \"batch_first\",\n            \"padding_value\",\n            \"total_length\"\n         ],\n         \"pad_sequence\": [\n            \"sequences\",\n            \"batch_first\",\n            \"padding_value\"\n         ]\n      },\n      \"torch.nn.utils.spectral_norm\": {\n         \"remove_spectral_norm\": [\n            \"module\",\n            \"name\"\n         ],\n         \"spectral_norm\": [\n            \"module\",\n            \"name\",\n            \"n_power_iterations\",\n            \"eps\",\n            \"dim\"\n         ]\n      },\n      \"torch.nn.utils.weight_norm\": {\n         \"remove_weight_norm\": [\n            \"module\",\n            \"name\"\n         ],\n         \"weight_norm\": [\n            \"module\",\n            \"name\",\n            \"dim\"\n         ]\n      },\n      \"torch.onnx.__init__\": {\n         \"_export\": [],\n         \"_export_to_pretty_string\": [],\n         \"_optimize_trace\": [\n            \"graph\",\n            \"operator_export_type\"\n         ],\n         \"_run_symbolic_function\": [],\n         \"_run_symbolic_method\": [],\n         \"export\": [\n            \"model\",\n            \"args\",\n            \"f\",\n            \"export_params\",\n            \"verbose\",\n            \"training\",\n            \"input_names\",\n            \"output_names\",\n            \"aten\",\n            \"export_raw_ir\",\n            \"operator_export_type\",\n            \"opset_version\",\n            \"_retain_param_name\",\n            \"do_constant_folding\",\n            \"example_outputs\",\n            \"strip_doc_string\",\n            \"dynamic_axes\",\n            \"keep_initializers_as_inputs\",\n            \"custom_opsets\",\n            \"enable_onnx_checker\",\n            \"use_external_data_format\"\n         ],\n         \"export_to_pretty_string\": [],\n         \"is_in_onnx_export\": [],\n         \"register_custom_op_symbolic\": [\n            \"symbolic_name\",\n            \"symbolic_fn\",\n            \"opset_version\"\n         ],\n         \"select_model_mode_for_export\": [\n            \"model\",\n            \"mode\"\n         ]\n      },\n      \"torch.onnx.operators\": {\n         \"reshape_from_tensor_shape\": [\n            \"x\",\n            \"shape\"\n         ],\n         \"shape_as_tensor\": [\n            \"x\"\n         ]\n      },\n      \"torch.onnx.symbolic_caffe2\": {\n         \"_empty_affine_quantized\": [\n            \"g\",\n            \"input\",\n            \"shape\",\n            \"scale\",\n            \"zero_point\",\n            \"dtype\",\n            \"pin_memory\",\n            \"memory_format\",\n            \"layout\"\n         ],\n         \"_permute_helper\": [\n            \"g\",\n            \"input\",\n            \"axes\"\n         ],\n         \"add\": [\n            \"g\",\n            \"input_a\",\n            \"input_b\",\n            \"scale\",\n            \"zero_point\"\n         ],\n         \"avg_pool2d\": [\n            \"g\",\n            \"input\",\n            \"kernel_size\",\n            \"stride\",\n            \"padding\",\n            \"ceil_mode\",\n            \"count_include_pad\",\n            \"divisor_override\"\n         ],\n         \"cat\": [\n            \"g\",\n            \"tensor_list\",\n            \"dim\",\n            \"scale\",\n            \"zero_point\"\n         ],\n         \"conv2d\": [\n            \"g\",\n            \"input\",\n            \"weight\",\n            \"bias\",\n            \"stride\",\n            \"padding\",\n            \"dilation\",\n            \"groups\",\n            \"scale\",\n            \"zero_point\"\n         ],\n         \"conv2d_relu\": [\n            \"g\",\n            \"input\",\n            \"weight\",\n            \"bias\",\n            \"stride\",\n            \"padding\",\n            \"dilation\",\n            \"groups\",\n            \"scale\",\n            \"zero_point\"\n         ],\n         \"conv_prepack\": [\n            \"g\",\n            \"input\",\n            \"weight\",\n            \"bias\",\n            \"stride\",\n            \"padding\",\n            \"dilation\",\n            \"groups\"\n         ],\n         \"dequantize\": [\n            \"g\",\n            \"input\"\n         ],\n         \"linear\": [\n            \"g\",\n            \"input\",\n            \"weight\",\n            \"bias\",\n            \"scale\",\n            \"zero_point\"\n         ],\n         \"linear_prepack\": [\n            \"g\",\n            \"weight\",\n            \"bias\"\n         ],\n         \"max_pool2d\": [\n            \"g\",\n            \"input\",\n            \"kernel_size\",\n            \"stride\",\n            \"padding\",\n            \"dilation\",\n            \"ceil_mode\"\n         ],\n         \"nchw2nhwc\": [\n            \"g\",\n            \"input\"\n         ],\n         \"nhwc2nchw\": [\n            \"g\",\n            \"input\"\n         ],\n         \"quantize_per_tensor\": [\n            \"g\",\n            \"input\",\n            \"scale\",\n            \"zero_point\",\n            \"dtype\"\n         ],\n         \"register_quantized_ops\": [\n            \"domain\",\n            \"version\"\n         ],\n         \"relu\": [\n            \"g\",\n            \"input\"\n         ],\n         \"reshape\": [\n            \"g\",\n            \"input\",\n            \"shape\"\n         ],\n         \"sigmoid\": [\n            \"g\",\n            \"input\"\n         ],\n         \"slice\": [\n            \"g\",\n            \"input\",\n            \"dim\",\n            \"start\",\n            \"end\",\n            \"step\"\n         ],\n         \"upsample_nearest2d\": [\n            \"g\",\n            \"input\",\n            \"output_size\",\n            \"align_corners\",\n            \"scales_h\",\n            \"scales_w\"\n         ]\n      },\n      \"torch.onnx.symbolic_helper\": {\n         \"_arange_cast_helper\": [\n            \"g\",\n            \"end\",\n            \"start\",\n            \"step\",\n            \"dtype\"\n         ],\n         \"_avgpool_helper\": [\n            \"tuple_fn\",\n            \"padding\",\n            \"kernel_size\",\n            \"stride\",\n            \"divisor_override\",\n            \"name\"\n         ],\n         \"_black_list_in_opset\": [\n            \"name\"\n         ],\n         \"_cast_func_template\": [\n            \"to_i\",\n            \"g\",\n            \"input\",\n            \"non_blocking\"\n         ],\n         \"_get_const\": [\n            \"value\",\n            \"desc\",\n            \"arg_name\"\n         ],\n         \"_get_interpolate_attributes\": [\n            \"g\",\n            \"mode\",\n            \"args\"\n         ],\n         \"_if_scalar_type_as\": [\n            \"g\",\n            \"self\",\n            \"tensor\"\n         ],\n         \"_index_fill_reshape_helper\": [\n            \"g\",\n            \"self\",\n            \"dim\",\n            \"index\"\n         ],\n         \"_interpolate_get_scales\": [\n            \"g\",\n            \"scale_factor\",\n            \"dim\"\n         ],\n         \"_interpolate_get_scales_and_mode\": [\n            \"g\",\n            \"input\",\n            \"size\",\n            \"scale_factor\",\n            \"mode\",\n            \"align_corners\"\n         ],\n         \"_interpolate_get_scales_if_available\": [\n            \"g\",\n            \"scales\"\n         ],\n         \"_interpolate_size_to_scales\": [\n            \"g\",\n            \"input\",\n            \"output_size\",\n            \"dim\"\n         ],\n         \"_interpolate_warning\": [\n            \"interpolate_mode\"\n         ],\n         \"_is_fp\": [\n            \"value\"\n         ],\n         \"_is_none\": [\n            \"x\"\n         ],\n         \"_is_packed_list\": [\n            \"list_value\"\n         ],\n         \"_is_tensor_list\": [\n            \"x\"\n         ],\n         \"_is_value\": [\n            \"x\"\n         ],\n         \"_maybe_get_const\": [\n            \"value\",\n            \"desc\"\n         ],\n         \"_maybe_get_scalar\": [\n            \"value\"\n         ],\n         \"_parse_arg\": [\n            \"value\",\n            \"desc\"\n         ],\n         \"_scalar\": [\n            \"x\"\n         ],\n         \"_scatter_helper\": [\n            \"g\",\n            \"self\",\n            \"dim\",\n            \"index\",\n            \"src\"\n         ],\n         \"_set_operator_export_type\": [\n            \"operator_export_type\"\n         ],\n         \"_set_opset_version\": [\n            \"opset_version\"\n         ],\n         \"_set_training_mode\": [\n            \"training_mode\"\n         ],\n         \"_size_helper\": [\n            \"g\",\n            \"self\",\n            \"dim\"\n         ],\n         \"_slice_helper\": [\n            \"g\",\n            \"input\",\n            \"axes\",\n            \"starts\",\n            \"ends\",\n            \"steps\",\n            \"dynamic_slice\"\n         ],\n         \"_sort_helper\": [\n            \"g\",\n            \"input\",\n            \"dim\",\n            \"decending\",\n            \"out\"\n         ],\n         \"_topk_helper\": [\n            \"g\",\n            \"input\",\n            \"k\",\n            \"dim\",\n            \"largest\",\n            \"sorted\",\n            \"out\"\n         ],\n         \"_try_get_scalar_type\": [],\n         \"_unimplemented\": [\n            \"op\",\n            \"msg\"\n         ],\n         \"_unpack_list\": [\n            \"list_value\"\n         ],\n         \"_unsqueeze_helper\": [\n            \"g\",\n            \"input\",\n            \"dim\"\n         ],\n         \"assert_training_mode\": [\n            \"op_mode\",\n            \"op_name\"\n         ],\n         \"parse_args\": []\n      },\n      \"torch.onnx.symbolic_opset10\": {\n         \"__interpolate\": [\n            \"g\",\n            \"input\",\n            \"size\",\n            \"scale_factor\",\n            \"mode\",\n            \"align_corners\",\n            \"recompute_scale_factor\"\n         ],\n         \"_avg_pool\": [\n            \"name\",\n            \"tuple_fn\"\n         ],\n         \"_interpolate\": [\n            \"name\",\n            \"dim\",\n            \"interpolate_mode\"\n         ],\n         \"_max_pool\": [\n            \"name\",\n            \"tuple_fn\",\n            \"ndims\",\n            \"return_indices\"\n         ],\n         \"_slice\": [\n            \"g\",\n            \"input\",\n            \"axes\",\n            \"starts\",\n            \"ends\",\n            \"steps\",\n            \"dynamic_slice\"\n         ],\n         \"flip\": [\n            \"g\",\n            \"input\",\n            \"dims\"\n         ],\n         \"fmod\": [\n            \"g\",\n            \"input\",\n            \"other\"\n         ],\n         \"slice\": [\n            \"g\",\n            \"self\",\n            \"dim\",\n            \"start\",\n            \"end\",\n            \"step\"\n         ],\n         \"sort\": [\n            \"g\",\n            \"self\",\n            \"dim\",\n            \"decending\",\n            \"out\"\n         ],\n         \"topk\": [\n            \"g\",\n            \"self\",\n            \"k\",\n            \"dim\",\n            \"largest\",\n            \"sorted\",\n            \"out\"\n         ]\n      },\n      \"torch.onnx.symbolic_opset11\": {\n         \"__getitem_\": [\n            \"g\",\n            \"self\",\n            \"i\"\n         ],\n         \"__interpolate\": [\n            \"g\",\n            \"input\",\n            \"size\",\n            \"scale_factor\",\n            \"mode\",\n            \"align_corners\",\n            \"recompute_scale_factor\"\n         ],\n         \"__lshift_\": [\n            \"g\",\n            \"self\",\n            \"other\"\n         ],\n         \"__rshift_\": [\n            \"g\",\n            \"self\",\n            \"other\"\n         ],\n         \"_avg_pool\": [\n            \"name\",\n            \"tuple_fn\"\n         ],\n         \"_dim_arange\": [\n            \"g\",\n            \"like\",\n            \"dim\"\n         ],\n         \"_get_im2col_indices_along_dim\": [\n            \"g\",\n            \"input_d\",\n            \"kernel_size_d\",\n            \"dilation_d\",\n            \"padding_d\",\n            \"stride_d\"\n         ],\n         \"_get_im2col_output_shape\": [\n            \"g\",\n            \"input\",\n            \"kernel_h\",\n            \"kernel_w\"\n         ],\n         \"_get_im2col_padded_input\": [\n            \"g\",\n            \"input\",\n            \"padding_h\",\n            \"padding_w\"\n         ],\n         \"_interpolate\": [\n            \"name\",\n            \"dim\",\n            \"interpolate_mode\"\n         ],\n         \"_len\": [\n            \"g\",\n            \"self\"\n         ],\n         \"_prepare_onnx_paddings\": [\n            \"g\",\n            \"dim\",\n            \"pad\"\n         ],\n         \"_unique2\": [\n            \"g\",\n            \"self\",\n            \"sorted\",\n            \"return_inverse\",\n            \"return_counts\"\n         ],\n         \"append\": [\n            \"g\",\n            \"self\",\n            \"tensor\"\n         ],\n         \"arange\": [\n            \"g\"\n         ],\n         \"cat\": [\n            \"g\",\n            \"tensor_list\",\n            \"dim\"\n         ],\n         \"clamp\": [\n            \"g\",\n            \"self\",\n            \"min\",\n            \"max\"\n         ],\n         \"clamp_max\": [\n            \"g\",\n            \"self\",\n            \"max\"\n         ],\n         \"clamp_min\": [\n            \"g\",\n            \"self\",\n            \"min\"\n         ],\n         \"constant_pad_nd\": [\n            \"g\",\n            \"input\",\n            \"padding\",\n            \"value\"\n         ],\n         \"cumsum\": [\n            \"g\",\n            \"self\",\n            \"dim\",\n            \"dtype\"\n         ],\n         \"det\": [\n            \"g\",\n            \"self\"\n         ],\n         \"flatten\": [\n            \"g\",\n            \"input\",\n            \"start_dim\",\n            \"end_dim\"\n         ],\n         \"gather\": [\n            \"g\",\n            \"self\",\n            \"dim\",\n            \"index\",\n            \"sparse_grad\"\n         ],\n         \"hardtanh\": [\n            \"g\",\n            \"self\",\n            \"min_val\",\n            \"max_val\"\n         ],\n         \"im2col\": [\n            \"g\",\n            \"input\",\n            \"kernel_size\",\n            \"dilation\",\n            \"padding\",\n            \"stride\"\n         ],\n         \"index_copy\": [\n            \"g\",\n            \"self\",\n            \"dim\",\n            \"index\",\n            \"source\"\n         ],\n         \"index_fill\": [\n            \"g\",\n            \"self\",\n            \"dim\",\n            \"index\",\n            \"value\"\n         ],\n         \"index_put\": [\n            \"g\",\n            \"self\",\n            \"indices_list_value\",\n            \"values\",\n            \"accumulate\"\n         ],\n         \"insert\": [\n            \"g\",\n            \"self\",\n            \"pos\",\n            \"tensor\"\n         ],\n         \"logdet\": [\n            \"g\",\n            \"input\"\n         ],\n         \"masked_scatter\": [\n            \"g\",\n            \"self\",\n            \"mask\",\n            \"source\"\n         ],\n         \"masked_select\": [\n            \"g\",\n            \"self\",\n            \"mask\"\n         ],\n         \"mm\": [\n            \"g\",\n            \"self\",\n            \"other\"\n         ],\n         \"pixel_shuffle\": [\n            \"g\",\n            \"self\",\n            \"upscale_factor\"\n         ],\n         \"pop\": [\n            \"g\",\n            \"tensor_list\",\n            \"dim\"\n         ],\n         \"reflection_pad\": [\n            \"g\",\n            \"input\",\n            \"padding\"\n         ],\n         \"replication_pad\": [\n            \"g\",\n            \"input\",\n            \"padding\"\n         ],\n         \"round\": [\n            \"g\",\n            \"self\"\n         ],\n         \"scatter\": [\n            \"g\",\n            \"self\",\n            \"dim\",\n            \"index\",\n            \"src\"\n         ],\n         \"select\": [\n            \"g\",\n            \"self\",\n            \"dim\",\n            \"index\"\n         ],\n         \"size\": [\n            \"g\",\n            \"self\",\n            \"dim\"\n         ],\n         \"sort\": [\n            \"g\",\n            \"self\",\n            \"dim\",\n            \"decending\",\n            \"out\"\n         ],\n         \"split_with_sizes\": [\n            \"g\",\n            \"self\",\n            \"split_sizes\",\n            \"dim\"\n         ],\n         \"squeeze\": [\n            \"g\",\n            \"self\",\n            \"dim\"\n         ],\n         \"stack\": [\n            \"g\",\n            \"tensor_list\",\n            \"dim\"\n         ],\n         \"topk\": [\n            \"g\",\n            \"self\",\n            \"k\",\n            \"dim\",\n            \"largest\",\n            \"sorted\",\n            \"out\"\n         ],\n         \"unique_dim\": [\n            \"g\",\n            \"self\",\n            \"dim\",\n            \"sorted\",\n            \"return_inverse\",\n            \"return_counts\"\n         ],\n         \"unsqueeze\": [\n            \"g\",\n            \"self\",\n            \"dim\"\n         ]\n      },\n      \"torch.onnx.symbolic_opset12\": {\n         \"dropout\": [\n            \"g\",\n            \"input\",\n            \"p\",\n            \"train\"\n         ],\n         \"einsum\": [\n            \"g\",\n            \"equation\",\n            \"tensor_list\"\n         ],\n         \"nll_loss\": [\n            \"g\",\n            \"self\",\n            \"target\",\n            \"weight\",\n            \"reduction\",\n            \"ignore_index\"\n         ],\n         \"nll_loss2d\": [\n            \"g\",\n            \"self\",\n            \"target\",\n            \"weight\",\n            \"reduction\",\n            \"ignore_index\"\n         ]\n      },\n      \"torch.onnx.symbolic_opset7\": {\n         \"max\": [\n            \"g\",\n            \"self\",\n            \"dim_or_y\",\n            \"keepdim\"\n         ],\n         \"min\": [\n            \"g\",\n            \"self\",\n            \"dim_or_y\",\n            \"keepdim\"\n         ]\n      },\n      \"torch.onnx.symbolic_opset8\": {\n         \"__interpolate\": [\n            \"g\",\n            \"input\",\n            \"size\",\n            \"scale_factor\",\n            \"mode\",\n            \"align_corners\",\n            \"recompute_scale_factor\"\n         ],\n         \"_cast_to_type\": [\n            \"g\",\n            \"input\",\n            \"to_type\"\n         ],\n         \"_comparison_operator\": [\n            \"g\",\n            \"input\",\n            \"other\",\n            \"op_name\"\n         ],\n         \"_constant_fill\": [\n            \"g\",\n            \"sizes\",\n            \"dtype\",\n            \"const_value\"\n         ],\n         \"_interpolate\": [\n            \"name\",\n            \"dim\",\n            \"interpolate_mode\"\n         ],\n         \"_try_cast_integer_to_float\": [\n            \"g\"\n         ],\n         \"addmm\": [\n            \"g\",\n            \"self\",\n            \"mat1\",\n            \"mat2\",\n            \"beta\",\n            \"alpha\"\n         ],\n         \"bmm\": [\n            \"g\",\n            \"self\",\n            \"other\"\n         ],\n         \"empty\": [\n            \"g\",\n            \"sizes\",\n            \"dtype\",\n            \"layout\",\n            \"device\",\n            \"pin_memory\",\n            \"memory_format\"\n         ],\n         \"empty_like\": [\n            \"g\",\n            \"input\",\n            \"dtype\",\n            \"layout\",\n            \"device\",\n            \"pin_memory\",\n            \"memory_format\"\n         ],\n         \"flatten\": [\n            \"g\",\n            \"input\",\n            \"start_dim\",\n            \"end_dim\"\n         ],\n         \"full\": [\n            \"g\",\n            \"sizes\",\n            \"value\",\n            \"dtype\",\n            \"layout\",\n            \"device\",\n            \"pin_memory\"\n         ],\n         \"full_like\": [\n            \"g\",\n            \"input\",\n            \"fill_value\",\n            \"dtype\",\n            \"layout\",\n            \"device\",\n            \"pin_memory\",\n            \"memory_format\"\n         ],\n         \"gt\": [\n            \"g\",\n            \"input\",\n            \"other\"\n         ],\n         \"lt\": [\n            \"g\",\n            \"input\",\n            \"other\"\n         ],\n         \"matmul\": [\n            \"g\",\n            \"self\",\n            \"other\"\n         ],\n         \"mm\": [\n            \"g\",\n            \"self\",\n            \"other\"\n         ],\n         \"ones\": [\n            \"g\",\n            \"sizes\",\n            \"dtype\",\n            \"layout\",\n            \"device\",\n            \"pin_memory\"\n         ],\n         \"ones_like\": [\n            \"g\",\n            \"input\",\n            \"dtype\",\n            \"layout\",\n            \"device\",\n            \"pin_memory\",\n            \"memory_format\"\n         ],\n         \"prelu\": [\n            \"g\",\n            \"self\",\n            \"weight\"\n         ],\n         \"view\": [\n            \"g\",\n            \"self\",\n            \"size\"\n         ],\n         \"zeros\": [\n            \"g\",\n            \"sizes\",\n            \"dtype\",\n            \"layout\",\n            \"device\",\n            \"pin_memory\"\n         ],\n         \"zeros_like\": [\n            \"g\",\n            \"input\",\n            \"dtype\",\n            \"layout\",\n            \"device\",\n            \"pin_memory\",\n            \"memory_format\"\n         ]\n      },\n      \"torch.onnx.symbolic_opset9\": {\n         \"__and_\": [\n            \"g\",\n            \"input\",\n            \"other\"\n         ],\n         \"__getitem_\": [\n            \"g\",\n            \"self\",\n            \"i\"\n         ],\n         \"__interpolate\": [\n            \"g\",\n            \"input\",\n            \"size\",\n            \"scale_factor\",\n            \"mode\",\n            \"align_corners\",\n            \"recompute_scale_factor\"\n         ],\n         \"__lshift_\": [\n            \"g\",\n            \"self\",\n            \"other\"\n         ],\n         \"__or_\": [\n            \"g\",\n            \"input\",\n            \"other\"\n         ],\n         \"__rshift_\": [\n            \"g\",\n            \"self\",\n            \"other\"\n         ],\n         \"_adaptive_pool\": [\n            \"name\",\n            \"type\",\n            \"tuple_fn\",\n            \"fn\"\n         ],\n         \"_avg_pool\": [\n            \"name\",\n            \"tuple_fn\"\n         ],\n         \"_convolution\": [\n            \"g\",\n            \"input\",\n            \"weight\",\n            \"bias\",\n            \"stride\",\n            \"padding\",\n            \"dilation\",\n            \"transposed\",\n            \"output_padding\",\n            \"groups\",\n            \"benchmark\",\n            \"deterministic\",\n            \"cudnn_enabled\"\n         ],\n         \"_dim_arange\": [\n            \"g\",\n            \"like\",\n            \"dim\"\n         ],\n         \"_generic_rnn\": [\n            \"g\",\n            \"variant\",\n            \"input\",\n            \"initial_states\",\n            \"all_weights\",\n            \"has_biases\",\n            \"num_layers\",\n            \"dropout\",\n            \"train\",\n            \"bidirectional\",\n            \"batch_first\",\n            \"batch_sizes\"\n         ],\n         \"_interpolate\": [\n            \"name\",\n            \"dim\",\n            \"interpolate_mode\"\n         ],\n         \"_lstm_full\": [\n            \"g\",\n            \"input\",\n            \"hidden_v\",\n            \"weight_v\",\n            \"has_biases\",\n            \"num_layers\",\n            \"dropout\",\n            \"train\",\n            \"bidirectional\",\n            \"batch_first\"\n         ],\n         \"_lstm_packed\": [\n            \"g\",\n            \"input\",\n            \"batch_sizes\",\n            \"hidden_v\",\n            \"weight_v\",\n            \"has_biases\",\n            \"num_layers\",\n            \"dropout\",\n            \"train\",\n            \"bidirectional\"\n         ],\n         \"_max_pool\": [\n            \"name\",\n            \"tuple_fn\",\n            \"ndims\",\n            \"return_indices\"\n         ],\n         \"_one_hidden_rnn\": [\n            \"kind\"\n         ],\n         \"_pack_padded_sequence\": [\n            \"g\",\n            \"input\",\n            \"lengths\",\n            \"batch_first\"\n         ],\n         \"_pad_packed_sequence\": [\n            \"g\",\n            \"data\",\n            \"batch_sizes\",\n            \"batch_first\",\n            \"padding_value\",\n            \"total_length\"\n         ],\n         \"_prepare_onnx_paddings\": [\n            \"dim\",\n            \"pad\"\n         ],\n         \"_reduce_op_symbolic\": [\n            \"onnx_op_name\",\n            \"allow_multi_dim_support\"\n         ],\n         \"_reduce_with_dtype\": [\n            \"onnx_op\",\n            \"name\",\n            \"allow_multi_dim_support\"\n         ],\n         \"_reshape_from_tensor\": [\n            \"g\",\n            \"input\",\n            \"shape\"\n         ],\n         \"_sample_dirichlet\": [\n            \"g\",\n            \"self\",\n            \"generator\"\n         ],\n         \"_shape_as_tensor\": [\n            \"g\",\n            \"input\"\n         ],\n         \"_slice\": [\n            \"g\",\n            \"input\",\n            \"axes\",\n            \"starts\",\n            \"ends\"\n         ],\n         \"_standard_gamma\": [\n            \"g\",\n            \"self\",\n            \"generator\"\n         ],\n         \"_std\": [\n            \"g\",\n            \"input\",\n            \"dim\",\n            \"unbiased\",\n            \"keepdim\"\n         ],\n         \"_unique\": [\n            \"g\",\n            \"input\",\n            \"sorted\",\n            \"return_inverse\"\n         ],\n         \"_unique2\": [\n            \"g\",\n            \"input\",\n            \"sorted\",\n            \"return_inverse\",\n            \"return_counts\"\n         ],\n         \"_unsupported_dropout\": [\n            \"name\"\n         ],\n         \"_weight_norm\": [\n            \"g\",\n            \"weight_v\",\n            \"weight_g\",\n            \"dim\"\n         ],\n         \"abs\": [\n            \"g\",\n            \"self\"\n         ],\n         \"absolute\": [\n            \"g\",\n            \"self\"\n         ],\n         \"acos\": [\n            \"g\",\n            \"self\"\n         ],\n         \"add\": [\n            \"g\",\n            \"self\",\n            \"other\",\n            \"alpha\"\n         ],\n         \"addmm\": [\n            \"g\",\n            \"self\",\n            \"mat1\",\n            \"mat2\",\n            \"beta\",\n            \"alpha\"\n         ],\n         \"alias\": [\n            \"g\",\n            \"self\"\n         ],\n         \"arange\": [\n            \"g\"\n         ],\n         \"argmax\": [\n            \"g\",\n            \"input\",\n            \"dim\",\n            \"keepdim\"\n         ],\n         \"argmin\": [\n            \"g\",\n            \"input\",\n            \"dim\",\n            \"keepdim\"\n         ],\n         \"asin\": [\n            \"g\",\n            \"self\"\n         ],\n         \"atan\": [\n            \"g\",\n            \"self\"\n         ],\n         \"baddbmm\": [\n            \"g\",\n            \"self\",\n            \"batch1\",\n            \"batch2\",\n            \"beta\",\n            \"alpha\"\n         ],\n         \"batch_norm\": [\n            \"g\",\n            \"input\",\n            \"weight\",\n            \"bias\",\n            \"running_mean\",\n            \"running_var\",\n            \"training\",\n            \"momentum\",\n            \"eps\",\n            \"cudnn_enabled\"\n         ],\n         \"bitwise_not\": [\n            \"g\",\n            \"inp\"\n         ],\n         \"bmm\": [\n            \"g\",\n            \"self\",\n            \"other\"\n         ],\n         \"cat\": [\n            \"g\",\n            \"tensor_list\",\n            \"dim\"\n         ],\n         \"ceil\": [\n            \"g\",\n            \"input\"\n         ],\n         \"clamp\": [\n            \"g\",\n            \"self\",\n            \"min\",\n            \"max\"\n         ],\n         \"clamp_max\": [\n            \"g\",\n            \"self\",\n            \"max\"\n         ],\n         \"clamp_min\": [\n            \"g\",\n            \"self\",\n            \"min\"\n         ],\n         \"clone\": [\n            \"g\",\n            \"input\",\n            \"unused_memory_format\"\n         ],\n         \"constant_pad_nd\": [\n            \"g\",\n            \"input\",\n            \"padding\",\n            \"value\"\n         ],\n         \"contiguous\": [\n            \"g\",\n            \"input\",\n            \"memory_format\"\n         ],\n         \"conv1d\": [\n            \"g\",\n            \"input\",\n            \"weight\",\n            \"bias\",\n            \"stride\",\n            \"padding\",\n            \"dilation\",\n            \"groups\"\n         ],\n         \"conv2d\": [\n            \"g\",\n            \"input\",\n            \"weight\",\n            \"bias\",\n            \"stride\",\n            \"padding\",\n            \"dilation\",\n            \"groups\"\n         ],\n         \"conv3d\": [\n            \"g\",\n            \"input\",\n            \"weight\",\n            \"bias\",\n            \"stride\",\n            \"padding\",\n            \"dilation\",\n            \"groups\"\n         ],\n         \"conv_tbc\": [\n            \"g\",\n            \"input\",\n            \"weight\",\n            \"bias\",\n            \"pad\"\n         ],\n         \"conv_transpose1d\": [\n            \"g\",\n            \"input\",\n            \"weight\",\n            \"bias\",\n            \"stride\",\n            \"padding\",\n            \"output_padding\",\n            \"groups\",\n            \"dilation\"\n         ],\n         \"conv_transpose2d\": [\n            \"g\",\n            \"input\",\n            \"weight\",\n            \"bias\",\n            \"stride\",\n            \"padding\",\n            \"output_padding\",\n            \"groups\",\n            \"dilation\"\n         ],\n         \"conv_transpose3d\": [\n            \"g\",\n            \"input\",\n            \"weight\",\n            \"bias\",\n            \"stride\",\n            \"padding\",\n            \"output_padding\",\n            \"groups\",\n            \"dilation\"\n         ],\n         \"cos\": [\n            \"g\",\n            \"self\"\n         ],\n         \"cosine_similarity\": [\n            \"g\",\n            \"x1\",\n            \"x2\",\n            \"dim\",\n            \"eps\"\n         ],\n         \"cumsum\": [\n            \"g\",\n            \"input\",\n            \"dim\",\n            \"dtype\"\n         ],\n         \"detach\": [\n            \"g\",\n            \"input\"\n         ],\n         \"dim\": [\n            \"g\",\n            \"self\"\n         ],\n         \"div\": [\n            \"g\",\n            \"self\",\n            \"other\"\n         ],\n         \"dropout\": [\n            \"g\",\n            \"input\",\n            \"p\",\n            \"train\"\n         ],\n         \"elu\": [\n            \"g\",\n            \"input\",\n            \"alpha\",\n            \"scale\",\n            \"input_scale\"\n         ],\n         \"embedding\": [\n            \"g\",\n            \"weight\",\n            \"indices\",\n            \"padding_idx\",\n            \"scale_grad_by_freq\",\n            \"sparse\"\n         ],\n         \"embedding_bag\": [\n            \"g\",\n            \"embedding_matrix\",\n            \"indices\",\n            \"offsets\",\n            \"scale_grad_by_freq\",\n            \"mode\",\n            \"sparse\",\n            \"per_sample_weights\",\n            \"include_last_offset\"\n         ],\n         \"empty\": [\n            \"g\",\n            \"sizes\",\n            \"dtype\",\n            \"layout\",\n            \"device\",\n            \"pin_memory\",\n            \"memory_format\"\n         ],\n         \"empty_like\": [\n            \"g\",\n            \"input\",\n            \"dtype\",\n            \"layout\",\n            \"device\",\n            \"pin_memory\",\n            \"memory_format\"\n         ],\n         \"eq\": [\n            \"g\",\n            \"self\",\n            \"other\"\n         ],\n         \"erf\": [\n            \"g\",\n            \"input\"\n         ],\n         \"exp\": [\n            \"g\",\n            \"self\"\n         ],\n         \"expand\": [\n            \"g\",\n            \"self\",\n            \"size\",\n            \"implicit\"\n         ],\n         \"expand_as\": [\n            \"g\",\n            \"self\",\n            \"other\"\n         ],\n         \"flatten\": [\n            \"g\",\n            \"input\",\n            \"start_dim\",\n            \"end_dim\"\n         ],\n         \"floor\": [\n            \"g\",\n            \"input\"\n         ],\n         \"floor_divide\": [\n            \"g\",\n            \"self\",\n            \"other\"\n         ],\n         \"frobenius_norm\": [\n            \"g\",\n            \"self\",\n            \"dim\",\n            \"keepdim\"\n         ],\n         \"full\": [\n            \"g\",\n            \"sizes\",\n            \"value\",\n            \"dtype\",\n            \"layout\",\n            \"device\",\n            \"pin_memory\"\n         ],\n         \"full_like\": [\n            \"g\",\n            \"input\",\n            \"fill_value\",\n            \"dtype\",\n            \"layout\",\n            \"device\",\n            \"pin_memory\",\n            \"memory_format\"\n         ],\n         \"gather\": [\n            \"g\",\n            \"self\",\n            \"dim\",\n            \"index\",\n            \"sparse_grad\"\n         ],\n         \"ge\": [\n            \"g\",\n            \"input\",\n            \"other\"\n         ],\n         \"gelu\": [\n            \"g\",\n            \"self\"\n         ],\n         \"get_pool_ceil_padding\": [\n            \"input\",\n            \"kernel_size\",\n            \"stride\",\n            \"padding\"\n         ],\n         \"glu\": [\n            \"g\",\n            \"input\",\n            \"dim\"\n         ],\n         \"group_norm\": [\n            \"g\",\n            \"input\",\n            \"num_groups\",\n            \"weight\",\n            \"bias\",\n            \"eps\",\n            \"cudnn_enabled\"\n         ],\n         \"gt\": [\n            \"g\",\n            \"input\",\n            \"other\"\n         ],\n         \"gt_impl\": [\n            \"g\",\n            \"input\",\n            \"other\"\n         ],\n         \"hardtanh\": [\n            \"g\",\n            \"self\",\n            \"min_val\",\n            \"max_val\"\n         ],\n         \"index\": [\n            \"g\",\n            \"self\",\n            \"index\"\n         ],\n         \"index_copy\": [\n            \"g\",\n            \"self\",\n            \"dim\",\n            \"index\",\n            \"source\"\n         ],\n         \"index_fill\": [\n            \"g\",\n            \"self\",\n            \"dim\",\n            \"index\",\n            \"value\"\n         ],\n         \"index_put\": [\n            \"g\",\n            \"self\",\n            \"indices_list_value\",\n            \"values\",\n            \"accumulate\"\n         ],\n         \"index_select\": [\n            \"g\",\n            \"self\",\n            \"dim\",\n            \"index\"\n         ],\n         \"instance_norm\": [\n            \"g\",\n            \"input\",\n            \"weight\",\n            \"bias\",\n            \"running_mean\",\n            \"running_var\",\n            \"use_input_stats\",\n            \"momentum\",\n            \"eps\",\n            \"cudnn_enabled\"\n         ],\n         \"isnan\": [\n            \"g\",\n            \"input\"\n         ],\n         \"layer_norm\": [\n            \"g\",\n            \"input\",\n            \"normalized_shape\",\n            \"weight\",\n            \"bias\",\n            \"eps\",\n            \"cudnn_enable\"\n         ],\n         \"le\": [\n            \"g\",\n            \"input\",\n            \"other\"\n         ],\n         \"leaky_relu\": [\n            \"g\",\n            \"input\",\n            \"negative_slope\",\n            \"inplace\"\n         ],\n         \"log\": [\n            \"g\",\n            \"self\"\n         ],\n         \"log1p\": [\n            \"g\",\n            \"self\"\n         ],\n         \"log2\": [\n            \"g\",\n            \"self\"\n         ],\n         \"log_sigmoid\": [\n            \"g\",\n            \"input\"\n         ],\n         \"log_softmax\": [\n            \"g\",\n            \"input\",\n            \"dim\",\n            \"dtype\"\n         ],\n         \"logsumexp\": [\n            \"g\",\n            \"input\",\n            \"dim\",\n            \"keepdim\"\n         ],\n         \"lstm\": [\n            \"g\"\n         ],\n         \"lt\": [\n            \"g\",\n            \"input\",\n            \"other\"\n         ],\n         \"lt_impl\": [\n            \"g\",\n            \"input\",\n            \"other\"\n         ],\n         \"masked_fill\": [\n            \"g\",\n            \"self\",\n            \"mask\",\n            \"value\"\n         ],\n         \"matmul\": [\n            \"g\",\n            \"self\",\n            \"other\"\n         ],\n         \"max\": [\n            \"g\",\n            \"self\",\n            \"dim_or_y\",\n            \"keepdim\"\n         ],\n         \"meshgrid\": [\n            \"g\",\n            \"tensor_list\"\n         ],\n         \"min\": [\n            \"g\",\n            \"self\",\n            \"dim_or_y\",\n            \"keepdim\"\n         ],\n         \"mm\": [\n            \"g\",\n            \"self\",\n            \"other\"\n         ],\n         \"mul\": [\n            \"g\",\n            \"self\",\n            \"other\"\n         ],\n         \"multinomial\": [\n            \"g\",\n            \"input\",\n            \"num_samples\",\n            \"replacement\",\n            \"generator\"\n         ],\n         \"narrow\": [\n            \"g\",\n            \"input\",\n            \"dim\",\n            \"start\",\n            \"length\"\n         ],\n         \"ne\": [\n            \"g\",\n            \"self\",\n            \"other\"\n         ],\n         \"neg\": [\n            \"g\",\n            \"self\"\n         ],\n         \"new_zeros\": [\n            \"g\",\n            \"self\",\n            \"sizes\",\n            \"dtype\",\n            \"layout\",\n            \"device\",\n            \"pin_memory\"\n         ],\n         \"nonzero\": [\n            \"g\",\n            \"input\"\n         ],\n         \"norm\": [\n            \"g\",\n            \"self\",\n            \"p\",\n            \"dim\",\n            \"keepdim\"\n         ],\n         \"numel\": [\n            \"g\",\n            \"self\"\n         ],\n         \"one_hot\": [\n            \"g\",\n            \"self\",\n            \"num_classes\"\n         ],\n         \"ones\": [\n            \"g\",\n            \"sizes\",\n            \"dtype\",\n            \"layout\",\n            \"device\",\n            \"pin_memory\"\n         ],\n         \"ones_like\": [\n            \"g\",\n            \"input\",\n            \"dtype\",\n            \"layout\",\n            \"device\",\n            \"pin_memory\",\n            \"memory_format\"\n         ],\n         \"overload_by_arg_count\": [\n            \"fn\"\n         ],\n         \"permute\": [\n            \"g\",\n            \"self\",\n            \"dims\"\n         ],\n         \"pixel_shuffle\": [\n            \"g\",\n            \"self\",\n            \"upscale_factor\"\n         ],\n         \"pow\": [\n            \"g\",\n            \"self\",\n            \"exponent\"\n         ],\n         \"prelu\": [\n            \"g\",\n            \"self\",\n            \"weight\"\n         ],\n         \"prim_ConstantChunk\": [\n            \"g\",\n            \"self\",\n            \"chunks\",\n            \"dim\"\n         ],\n         \"prim_ConstantSplit\": [\n            \"g\",\n            \"self\",\n            \"split_size\",\n            \"dim\"\n         ],\n         \"prim_shape\": [\n            \"g\",\n            \"self\"\n         ],\n         \"rand\": [\n            \"g\",\n            \"shapes\",\n            \"dtype\"\n         ],\n         \"rand_like\": [\n            \"g\",\n            \"self\",\n            \"dtype\",\n            \"layout\",\n            \"device\",\n            \"pin_memory\",\n            \"memory_format\"\n         ],\n         \"randn\": [\n            \"g\",\n            \"shapes\",\n            \"dtype\"\n         ],\n         \"randn_like\": [\n            \"g\",\n            \"self\",\n            \"dtype\",\n            \"layout\",\n            \"device\",\n            \"pin_memory\",\n            \"memory_format\"\n         ],\n         \"reciprocal\": [\n            \"g\",\n            \"self\"\n         ],\n         \"reflection_pad\": [\n            \"g\",\n            \"input\",\n            \"padding\"\n         ],\n         \"relu\": [\n            \"g\",\n            \"input\"\n         ],\n         \"remainder\": [\n            \"g\",\n            \"input\",\n            \"other\"\n         ],\n         \"repeat\": [\n            \"g\",\n            \"self\",\n            \"repeats\"\n         ],\n         \"replication_pad\": [\n            \"g\",\n            \"input\",\n            \"padding\"\n         ],\n         \"reshape\": [\n            \"g\",\n            \"self\",\n            \"shape\"\n         ],\n         \"reshape_as\": [\n            \"g\",\n            \"self\",\n            \"other\"\n         ],\n         \"rrelu\": [\n            \"g\",\n            \"input\",\n            \"lower\",\n            \"upper\",\n            \"training\",\n            \"generator\"\n         ],\n         \"rsqrt\": [\n            \"g\",\n            \"self\"\n         ],\n         \"rsub\": [\n            \"g\",\n            \"self\",\n            \"other\",\n            \"alpha\"\n         ],\n         \"scalar_tensor\": [\n            \"g\",\n            \"scalar\",\n            \"dtype\"\n         ],\n         \"scatter\": [\n            \"g\",\n            \"self\",\n            \"dim\",\n            \"index\",\n            \"src\"\n         ],\n         \"scatter_add\": [\n            \"g\",\n            \"self\",\n            \"dim\",\n            \"index\",\n            \"src\"\n         ],\n         \"select\": [\n            \"g\",\n            \"self\",\n            \"dim\",\n            \"index\"\n         ],\n         \"selu\": [\n            \"g\",\n            \"input\"\n         ],\n         \"sigmoid\": [\n            \"g\",\n            \"self\"\n         ],\n         \"sign\": [\n            \"g\",\n            \"self\"\n         ],\n         \"sin\": [\n            \"g\",\n            \"self\"\n         ],\n         \"size\": [\n            \"g\",\n            \"self\",\n            \"dim\"\n         ],\n         \"slice\": [\n            \"g\",\n            \"self\",\n            \"dim\",\n            \"start\",\n            \"end\",\n            \"step\"\n         ],\n         \"softmax\": [\n            \"g\",\n            \"input\",\n            \"dim\",\n            \"dtype\"\n         ],\n         \"softplus\": [\n            \"g\",\n            \"self\",\n            \"beta\",\n            \"threshold\"\n         ],\n         \"sort\": [\n            \"g\",\n            \"self\",\n            \"dim\",\n            \"decending\",\n            \"out\"\n         ],\n         \"split\": [\n            \"g\",\n            \"self\",\n            \"split_size_or_sizes\",\n            \"dim\"\n         ],\n         \"split_with_sizes\": [\n            \"g\",\n            \"self\",\n            \"split_sizes\",\n            \"dim\"\n         ],\n         \"sqrt\": [\n            \"g\",\n            \"self\"\n         ],\n         \"squeeze\": [\n            \"g\",\n            \"self\",\n            \"dim\"\n         ],\n         \"stack\": [\n            \"g\",\n            \"tensor_list\",\n            \"dim\"\n         ],\n         \"std\": [\n            \"g\",\n            \"input\"\n         ],\n         \"sub\": [\n            \"g\",\n            \"self\",\n            \"other\",\n            \"alpha\"\n         ],\n         \"t\": [\n            \"g\",\n            \"self\"\n         ],\n         \"take\": [\n            \"g\",\n            \"self\",\n            \"index\"\n         ],\n         \"tan\": [\n            \"g\",\n            \"self\"\n         ],\n         \"tanh\": [\n            \"g\",\n            \"self\"\n         ],\n         \"threshold\": [\n            \"g\",\n            \"self\",\n            \"threshold\",\n            \"value\"\n         ],\n         \"to\": [\n            \"g\",\n            \"self\"\n         ],\n         \"topk\": [\n            \"g\",\n            \"self\",\n            \"k\",\n            \"dim\",\n            \"largest\",\n            \"sorted\",\n            \"out\"\n         ],\n         \"transpose\": [\n            \"g\",\n            \"self\",\n            \"dim0\",\n            \"dim1\"\n         ],\n         \"true_divide\": [\n            \"g\",\n            \"self\",\n            \"other\"\n         ],\n         \"type_as\": [\n            \"g\",\n            \"self\",\n            \"other\"\n         ],\n         \"unbind\": [\n            \"g\",\n            \"self\",\n            \"dim\"\n         ],\n         \"unfold\": [\n            \"g\",\n            \"input\",\n            \"dimension\",\n            \"size\",\n            \"step\"\n         ],\n         \"unsqueeze\": [\n            \"g\",\n            \"self\",\n            \"dim\"\n         ],\n         \"unused\": [\n            \"g\"\n         ],\n         \"view\": [\n            \"g\",\n            \"self\",\n            \"size\"\n         ],\n         \"where\": [\n            \"g\",\n            \"condition\",\n            \"self\",\n            \"other\"\n         ],\n         \"wrap_logical_op_with_cast_to\": [\n            \"to_type\"\n         ],\n         \"wrap_logical_op_with_cast_to_and_from\": [\n            \"to_type\"\n         ],\n         \"wrap_logical_op_with_negation\": [\n            \"func\"\n         ],\n         \"zeros\": [\n            \"g\",\n            \"sizes\",\n            \"dtype\",\n            \"layout\",\n            \"device\",\n            \"pin_memory\"\n         ],\n         \"zeros_like\": [\n            \"g\",\n            \"input\",\n            \"dtype\",\n            \"layout\",\n            \"device\",\n            \"pin_memory\",\n            \"memory_format\"\n         ]\n      },\n      \"torch.onnx.symbolic_registry\": {\n         \"get_op_supported_version\": [\n            \"opname\",\n            \"domain\",\n            \"version\"\n         ],\n         \"get_ops_in_version\": [\n            \"version\"\n         ],\n         \"get_registered_op\": [\n            \"opname\",\n            \"domain\",\n            \"version\"\n         ],\n         \"is_registered_op\": [\n            \"opname\",\n            \"domain\",\n            \"version\"\n         ],\n         \"is_registered_version\": [\n            \"domain\",\n            \"version\"\n         ],\n         \"register_op\": [\n            \"opname\",\n            \"op\",\n            \"domain\",\n            \"version\"\n         ],\n         \"register_ops_helper\": [\n            \"domain\",\n            \"version\",\n            \"iter_version\"\n         ],\n         \"register_ops_in_version\": [\n            \"domain\",\n            \"version\"\n         ],\n         \"register_version\": [\n            \"domain\",\n            \"version\"\n         ]\n      },\n      \"torch.onnx.utils\": {\n         \"_add_attribute\": [\n            \"node\",\n            \"key\",\n            \"value\",\n            \"aten\"\n         ],\n         \"_decide_add_node_names\": [\n            \"add_node_names\",\n            \"operator_export_type\"\n         ],\n         \"_decide_constant_folding\": [\n            \"do_constant_folding\",\n            \"operator_export_type\"\n         ],\n         \"_decide_external_data_format\": [\n            \"use_external_data_format\",\n            \"operator_export_type\",\n            \"f\"\n         ],\n         \"_decide_keep_init_as_input\": [\n            \"keep_initializers_as_inputs\",\n            \"operator_export_type\",\n            \"opset_version\"\n         ],\n         \"_export\": [\n            \"model\",\n            \"args\",\n            \"f\",\n            \"export_params\",\n            \"verbose\",\n            \"training\",\n            \"input_names\",\n            \"output_names\",\n            \"operator_export_type\",\n            \"export_type\",\n            \"example_outputs\",\n            \"propagate\",\n            \"opset_version\",\n            \"_retain_param_name\",\n            \"do_constant_folding\",\n            \"strip_doc_string\",\n            \"dynamic_axes\",\n            \"keep_initializers_as_inputs\",\n            \"fixed_batch_size\",\n            \"custom_opsets\",\n            \"add_node_names\",\n            \"enable_onnx_checker\",\n            \"use_external_data_format\"\n         ],\n         \"_export_to_pretty_string\": [\n            \"model\",\n            \"args\",\n            \"f\",\n            \"export_params\",\n            \"verbose\",\n            \"training\",\n            \"input_names\",\n            \"output_names\",\n            \"operator_export_type\",\n            \"export_type\",\n            \"example_outputs\",\n            \"propagate\",\n            \"google_printer\",\n            \"opset_version\",\n            \"_retain_param_name\",\n            \"do_constant_folding\",\n            \"keep_initializers_as_inputs\",\n            \"fixed_batch_size\",\n            \"custom_opsets\",\n            \"add_node_names\"\n         ],\n         \"_graph_at\": [\n            \"g\",\n            \"opname\"\n         ],\n         \"_graph_constant\": [\n            \"g\",\n            \"value\",\n            \"dims\",\n            \"type\"\n         ],\n         \"_graph_op\": [\n            \"g\",\n            \"opname\"\n         ],\n         \"_is_constant_tensor_list\": [\n            \"node\"\n         ],\n         \"_is_onnx_list\": [\n            \"value\"\n         ],\n         \"_model_to_graph\": [\n            \"model\",\n            \"args\",\n            \"verbose\",\n            \"input_names\",\n            \"output_names\",\n            \"operator_export_type\",\n            \"example_outputs\",\n            \"propagate\",\n            \"_retain_param_name\",\n            \"do_constant_folding\",\n            \"_disable_torch_constant_prop\",\n            \"fixed_batch_size\"\n         ],\n         \"_newNode\": [\n            \"g\",\n            \"opname\",\n            \"outputs\"\n         ],\n         \"_node_getitem\": [\n            \"self\",\n            \"k\"\n         ],\n         \"_optimize_graph\": [\n            \"graph\",\n            \"operator_export_type\",\n            \"_disable_torch_constant_prop\",\n            \"fixed_batch_size\",\n            \"params_dict\"\n         ],\n         \"_resolve_args_by_export_type\": [\n            \"arg_name\",\n            \"arg_value\",\n            \"operator_export_type\"\n         ],\n         \"_run_symbolic_function\": [\n            \"g\",\n            \"n\",\n            \"inputs\",\n            \"env\",\n            \"operator_export_type\"\n         ],\n         \"_run_symbolic_method\": [\n            \"op_name\",\n            \"symbolic_fn\",\n            \"args\"\n         ],\n         \"_scalar\": [\n            \"x\"\n         ],\n         \"_set_input_and_output_names\": [\n            \"graph\",\n            \"input_names\",\n            \"output_names\"\n         ],\n         \"_split_tensor_list_constants\": [\n            \"g\",\n            \"block\"\n         ],\n         \"_trace\": [\n            \"func\",\n            \"args\",\n            \"operator_export_type\",\n            \"return_outs\"\n         ],\n         \"_trace_and_get_graph_from_model\": [\n            \"model\",\n            \"args\"\n         ],\n         \"_validate_dynamic_axes\": [\n            \"dynamic_axes\",\n            \"model\",\n            \"input_names\",\n            \"output_names\"\n         ],\n         \"export\": [\n            \"model\",\n            \"args\",\n            \"f\",\n            \"export_params\",\n            \"verbose\",\n            \"training\",\n            \"input_names\",\n            \"output_names\",\n            \"aten\",\n            \"export_raw_ir\",\n            \"operator_export_type\",\n            \"opset_version\",\n            \"_retain_param_name\",\n            \"do_constant_folding\",\n            \"example_outputs\",\n            \"strip_doc_string\",\n            \"dynamic_axes\",\n            \"keep_initializers_as_inputs\",\n            \"custom_opsets\",\n            \"enable_onnx_checker\",\n            \"use_external_data_format\"\n         ],\n         \"export_to_pretty_string\": [\n            \"model\",\n            \"args\",\n            \"f\",\n            \"export_params\",\n            \"verbose\",\n            \"training\",\n            \"input_names\",\n            \"output_names\",\n            \"aten\",\n            \"export_raw_ir\",\n            \"operator_export_type\",\n            \"export_type\",\n            \"example_outputs\",\n            \"propagate\",\n            \"google_printer\",\n            \"opset_version\",\n            \"_retain_param_name\",\n            \"keep_initializers_as_inputs\",\n            \"custom_opsets\",\n            \"add_node_names\",\n            \"do_constant_folding\"\n         ],\n         \"is_in_onnx_export\": [],\n         \"register_custom_op_symbolic\": [\n            \"symbolic_name\",\n            \"symbolic_fn\",\n            \"opset_version\"\n         ],\n         \"select_model_mode_for_export\": [\n            \"model\",\n            \"mode\"\n         ],\n         \"warn_on_static_input_change\": [\n            \"input_states\"\n         ]\n      },\n      \"torch.optim.lbfgs\": {\n         \"_cubic_interpolate\": [\n            \"x1\",\n            \"f1\",\n            \"g1\",\n            \"x2\",\n            \"f2\",\n            \"g2\",\n            \"bounds\"\n         ],\n         \"_strong_wolfe\": [\n            \"obj_func\",\n            \"x\",\n            \"t\",\n            \"d\",\n            \"f\",\n            \"g\",\n            \"gtd\",\n            \"c1\",\n            \"c2\",\n            \"tolerance_change\",\n            \"max_ls\"\n         ]\n      },\n      \"torch.optim.swa_utils\": {\n         \"update_bn\": [\n            \"loader\",\n            \"model\",\n            \"device\"\n         ]\n      },\n      \"torch.quantization.__init__\": {\n         \"default_eval_fn\": [\n            \"model\",\n            \"calib_data\"\n         ]\n      },\n      \"torch.quantization._numeric_suite\": {\n         \"_find_match\": [\n            \"str_list\",\n            \"key_str\",\n            \"postfix\"\n         ],\n         \"_get_logger_dict_helper\": [\n            \"mod\",\n            \"target_dict\",\n            \"Logger\",\n            \"prefix\"\n         ],\n         \"compare_model_outputs\": [\n            \"float_model\",\n            \"q_model\",\n            \"data\",\n            \"Logger\",\n            \"white_list\"\n         ],\n         \"compare_model_stub\": [\n            \"float_model\",\n            \"q_model\",\n            \"module_swap_list\",\n            \"data\",\n            \"Logger\"\n         ],\n         \"compare_weights\": [\n            \"float_dict\",\n            \"quantized_dict\"\n         ],\n         \"get_logger_dict\": [\n            \"mod\",\n            \"Logger\",\n            \"prefix\"\n         ],\n         \"get_matching_activations\": [\n            \"float_module\",\n            \"q_module\",\n            \"Logger\"\n         ],\n         \"prepare_model_outputs\": [\n            \"float_module\",\n            \"q_module\",\n            \"Logger\",\n            \"white_list\"\n         ],\n         \"prepare_model_with_stubs\": [\n            \"float_module\",\n            \"q_module\",\n            \"module_swap_list\",\n            \"Logger\"\n         ]\n      },\n      \"torch.quantization._quantize_script\": {\n         \"_check_forward_method\": [\n            \"model\"\n         ],\n         \"_check_is_script_module\": [\n            \"model\"\n         ],\n         \"_convert_script\": [\n            \"model\",\n            \"is_dynamic\",\n            \"debug\"\n         ],\n         \"_prepare_script\": [\n            \"model\",\n            \"qconfig_dict\",\n            \"is_dynamic\"\n         ],\n         \"_quantize_script\": [\n            \"model\",\n            \"qconfig_dict\",\n            \"run_fn\",\n            \"run_args\",\n            \"is_dynamic\",\n            \"debug\"\n         ],\n         \"convert_dynamic_script\": [\n            \"model\",\n            \"debug\"\n         ],\n         \"convert_script\": [\n            \"model\",\n            \"inplace\",\n            \"debug\"\n         ],\n         \"get_scripted_qconfig_dict\": [\n            \"qconfig_dict\"\n         ],\n         \"prepare_dynamic_script\": [\n            \"model\",\n            \"qconfig_dict\"\n         ],\n         \"prepare_script\": [\n            \"model\",\n            \"qconfig_dict\",\n            \"inplace\"\n         ],\n         \"quantize_dynamic_script\": [\n            \"model\",\n            \"qconfig_dict\",\n            \"sample_model_inputs\",\n            \"debug\"\n         ],\n         \"quantize_script\": [\n            \"model\",\n            \"qconfig_dict\",\n            \"run_fn\",\n            \"run_args\",\n            \"inplace\",\n            \"debug\"\n         ],\n         \"script_qconfig\": [\n            \"qconfig\"\n         ]\n      },\n      \"torch.quantization.fake_quantize\": {\n         \"disable_fake_quant\": [\n            \"mod\"\n         ],\n         \"disable_observer\": [\n            \"mod\"\n         ],\n         \"enable_fake_quant\": [\n            \"mod\"\n         ],\n         \"enable_observer\": [\n            \"mod\"\n         ]\n      },\n      \"torch.quantization.fuse_modules\": {\n         \"_fuse_modules\": [\n            \"model\",\n            \"modules_to_fuse\",\n            \"fuser_func\"\n         ],\n         \"_get_module\": [\n            \"model\",\n            \"submodule_key\"\n         ],\n         \"_set_module\": [\n            \"model\",\n            \"submodule_key\",\n            \"module\"\n         ],\n         \"fuse_conv_bn\": [\n            \"conv\",\n            \"bn\"\n         ],\n         \"fuse_conv_bn_relu\": [\n            \"conv\",\n            \"bn\",\n            \"relu\"\n         ],\n         \"fuse_known_modules\": [\n            \"mod_list\"\n         ],\n         \"fuse_modules\": [\n            \"model\",\n            \"modules_to_fuse\",\n            \"inplace\",\n            \"fuser_func\"\n         ]\n      },\n      \"torch.quantization.observer\": {\n         \"_with_args\": [\n            \"cls_or_self\"\n         ]\n      },\n      \"torch.quantization.qconfig\": {\n         \"get_default_qat_qconfig\": [\n            \"backend\"\n         ],\n         \"get_default_qconfig\": [\n            \"backend\"\n         ]\n      },\n      \"torch.quantization.quantize\": {\n         \"_observer_forward_hook\": [\n            \"self\",\n            \"input\",\n            \"output\"\n         ],\n         \"_propagate_qconfig_helper\": [\n            \"module\",\n            \"qconfig_dict\",\n            \"white_list\",\n            \"qconfig_parent\",\n            \"prefix\"\n         ],\n         \"_remove_qconfig\": [\n            \"module\"\n         ],\n         \"add_observer_\": [\n            \"module\"\n         ],\n         \"add_quant_dequant\": [\n            \"module\"\n         ],\n         \"convert\": [\n            \"module\",\n            \"mapping\",\n            \"inplace\"\n         ],\n         \"get_observer_dict\": [\n            \"mod\",\n            \"target_dict\",\n            \"prefix\"\n         ],\n         \"prepare\": [\n            \"model\",\n            \"inplace\",\n            \"white_list\"\n         ],\n         \"prepare_qat\": [\n            \"model\",\n            \"mapping\",\n            \"inplace\"\n         ],\n         \"propagate_qconfig_\": [\n            \"module\",\n            \"qconfig_dict\",\n            \"white_list\"\n         ],\n         \"quantize\": [\n            \"model\",\n            \"run_fn\",\n            \"run_args\",\n            \"mapping\",\n            \"inplace\"\n         ],\n         \"quantize_dynamic\": [\n            \"model\",\n            \"qconfig_spec\",\n            \"dtype\",\n            \"mapping\",\n            \"inplace\"\n         ],\n         \"quantize_qat\": [\n            \"model\",\n            \"run_fn\",\n            \"run_args\",\n            \"inplace\"\n         ],\n         \"swap_module\": [\n            \"mod\",\n            \"mapping\"\n         ]\n      },\n      \"torch.random\": {\n         \"fork_rng\": [\n            \"devices\",\n            \"enabled\",\n            \"_caller\",\n            \"_devices_kw\"\n         ],\n         \"get_rng_state\": [],\n         \"initial_seed\": [],\n         \"manual_seed\": [\n            \"seed\"\n         ],\n         \"seed\": [],\n         \"set_rng_state\": [\n            \"new_state\"\n         ]\n      },\n      \"torch.serialization\": {\n         \"_check_dill_version\": [\n            \"pickle_module\"\n         ],\n         \"_check_seekable\": [\n            \"f\"\n         ],\n         \"_cpu_deserialize\": [\n            \"obj\",\n            \"location\"\n         ],\n         \"_cpu_tag\": [\n            \"obj\"\n         ],\n         \"_cuda_deserialize\": [\n            \"obj\",\n            \"location\"\n         ],\n         \"_cuda_tag\": [\n            \"obj\"\n         ],\n         \"_get_layout\": [\n            \"name\"\n         ],\n         \"_get_restore_location\": [\n            \"map_location\"\n         ],\n         \"_is_compressed_file\": [\n            \"f\"\n         ],\n         \"_is_path\": [\n            \"name_or_buffer\"\n         ],\n         \"_is_torchscript_zip\": [\n            \"zip_file\"\n         ],\n         \"_is_zipfile\": [\n            \"f\"\n         ],\n         \"_legacy_load\": [\n            \"f\",\n            \"map_location\",\n            \"pickle_module\"\n         ],\n         \"_legacy_save\": [\n            \"obj\",\n            \"f\",\n            \"pickle_module\",\n            \"pickle_protocol\"\n         ],\n         \"_load\": [\n            \"zip_file\",\n            \"map_location\",\n            \"pickle_module\"\n         ],\n         \"_maybe_decode_ascii\": [\n            \"bytes_str\"\n         ],\n         \"_open_file_like\": [\n            \"name_or_buffer\",\n            \"mode\"\n         ],\n         \"_open_zipfile_writer\": [\n            \"name_or_buffer\"\n         ],\n         \"_save\": [\n            \"obj\",\n            \"zip_file\",\n            \"pickle_module\",\n            \"pickle_protocol\"\n         ],\n         \"_should_read_directly\": [\n            \"f\"\n         ],\n         \"check_module_version_greater_or_equal\": [\n            \"module\",\n            \"req_version_tuple\",\n            \"error_if_malformed\"\n         ],\n         \"default_restore_location\": [\n            \"storage\",\n            \"location\"\n         ],\n         \"load\": [\n            \"f\",\n            \"map_location\",\n            \"pickle_module\"\n         ],\n         \"location_tag\": [\n            \"storage\"\n         ],\n         \"mkdtemp\": [],\n         \"normalize_storage_type\": [\n            \"storage_type\"\n         ],\n         \"register_package\": [\n            \"priority\",\n            \"tagger\",\n            \"deserializer\"\n         ],\n         \"save\": [\n            \"obj\",\n            \"f\",\n            \"pickle_module\",\n            \"pickle_protocol\",\n            \"_use_new_zipfile_serialization\"\n         ],\n         \"storage_to_tensor_type\": [\n            \"storage\"\n         ],\n         \"validate_cuda_device\": [\n            \"location\"\n         ]\n      },\n      \"torch.sparse.__init__\": {\n         \"addmm\": [\n            \"mat\",\n            \"mat1\",\n            \"mat2\",\n            \"beta\",\n            \"alpha\"\n         ],\n         \"mm\": [\n            \"mat1\",\n            \"mat2\"\n         ],\n         \"sum\": [\n            \"input\",\n            \"dim\",\n            \"dtype\"\n         ]\n      },\n      \"torch.storage\": {\n         \"_load_from_bytes\": [\n            \"b\"\n         ]\n      },\n      \"torch.tensor\": {\n         \"_wrap_type_error_to_not_implemented\": [\n            \"f\"\n         ]\n      },\n      \"torch.testing.__init__\": {\n         \"_get_default_tolerance\": [\n            \"a\",\n            \"b\"\n         ],\n         \"assert_allclose\": [\n            \"actual\",\n            \"expected\",\n            \"rtol\",\n            \"atol\",\n            \"equal_nan\",\n            \"msg\"\n         ],\n         \"get_all_complex_dtypes\": [],\n         \"get_all_device_types\": [],\n         \"get_all_dtypes\": [],\n         \"get_all_math_dtypes\": [\n            \"device\"\n         ],\n         \"make_non_contiguous\": [\n            \"tensor\"\n         ]\n      },\n      \"torch.testing._internal.common_cuda\": {\n         \"initialize_cuda_context_rng\": []\n      },\n      \"torch.testing._internal.common_device_type\": {\n         \"expectedFailureCUDA\": [\n            \"fn\"\n         ],\n         \"instantiate_device_type_tests\": [\n            \"generic_test_class\",\n            \"scope\",\n            \"except_for\",\n            \"only_for\"\n         ],\n         \"largeCUDATensorTest\": [\n            \"size\"\n         ],\n         \"onlyCPU\": [\n            \"fn\"\n         ],\n         \"onlyCUDA\": [\n            \"fn\"\n         ],\n         \"onlyOnCPUAndCUDA\": [\n            \"fn\"\n         ],\n         \"skipCPUIfNoLapack\": [\n            \"fn\"\n         ],\n         \"skipCPUIfNoMkl\": [\n            \"fn\"\n         ],\n         \"skipCUDAIfCudnnVersionLessThan\": [\n            \"version\"\n         ],\n         \"skipCUDAIfNoCudnn\": [\n            \"fn\"\n         ],\n         \"skipCUDAIfNoMagma\": [\n            \"fn\"\n         ],\n         \"skipCUDAIfNotRocm\": [\n            \"fn\"\n         ],\n         \"skipCUDAIfRocm\": [\n            \"fn\"\n         ]\n      },\n      \"torch.testing._internal.common_distributed\": {\n         \"get_timeout\": [\n            \"test_id\"\n         ],\n         \"requires_gloo\": [],\n         \"requires_mpi\": [],\n         \"requires_nccl\": [],\n         \"requires_nccl_version\": [\n            \"version\",\n            \"msg\"\n         ],\n         \"simple_sparse_reduce_tests\": [\n            \"rank\",\n            \"world_size\",\n            \"num_inputs\"\n         ],\n         \"skip_for_known_issues\": [\n            \"func\"\n         ],\n         \"skip_if_lt_x_gpu\": [\n            \"x\"\n         ],\n         \"skip_if_not_multigpu\": [\n            \"func\"\n         ],\n         \"skip_if_rocm\": [\n            \"func\"\n         ]\n      },\n      \"torch.testing._internal.common_methods_invocations\": {\n         \"_compare_large_trilu_indices\": [\n            \"self\",\n            \"row\",\n            \"col\",\n            \"offset\",\n            \"dtype\",\n            \"device\"\n         ],\n         \"_compare_trilu_indices\": [\n            \"self\",\n            \"row\",\n            \"col\",\n            \"offset\",\n            \"dtype\",\n            \"device\"\n         ],\n         \"bernoulli_scalar\": [],\n         \"create_input\": [\n            \"call_args\",\n            \"requires_grad\",\n            \"non_contiguous\",\n            \"call_kwargs\",\n            \"dtype\",\n            \"device\"\n         ],\n         \"exclude_tensor_method\": [\n            \"name\",\n            \"test_name\"\n         ],\n         \"gather_variable\": [\n            \"shape\",\n            \"index_dim\",\n            \"max_indices\",\n            \"duplicate\"\n         ],\n         \"ident\": [\n            \"x\"\n         ],\n         \"index_perm_variable\": [\n            \"shape\",\n            \"max_indices\"\n         ],\n         \"index_variable\": [\n            \"shape\",\n            \"max_indices\"\n         ],\n         \"mask_not_all_zeros\": [\n            \"shape\"\n         ],\n         \"method_tests\": [],\n         \"normal_scalar_clamp\": [\n            \"amin\",\n            \"amax\",\n            \"requires_grad\"\n         ],\n         \"prod_zeros\": [\n            \"dim_size\",\n            \"dim_select\"\n         ],\n         \"run_additional_tri_tests\": [\n            \"self\",\n            \"device\"\n         ],\n         \"uniform_scalar\": [\n            \"offset\",\n            \"requires_grad\"\n         ],\n         \"unpack_variables\": [\n            \"args\"\n         ]\n      },\n      \"torch.testing._internal.common_nn\": {\n         \"_multilabelmarginloss_reference\": [\n            \"input\",\n            \"target\"\n         ],\n         \"_multimarginloss_reference\": [\n            \"input\",\n            \"target_idx\",\n            \"p\",\n            \"margin\",\n            \"weight\"\n         ],\n         \"_rand_tensor_non_equal\": [],\n         \"bce_with_logistic_legacy_enum_test\": [],\n         \"bce_with_logistic_no_reduce_scalar_test\": [],\n         \"bce_with_logistic_no_reduce_test\": [],\n         \"bceloss_no_reduce_scalar_test\": [],\n         \"bceloss_no_reduce_test\": [],\n         \"bceloss_weights_no_reduce_scalar_test\": [],\n         \"bceloss_weights_no_reduce_test\": [],\n         \"cosineembeddingloss_reference\": [\n            \"input1\",\n            \"input2\",\n            \"target\",\n            \"margin\",\n            \"reduction\"\n         ],\n         \"ctcloss_reference\": [\n            \"log_probs\",\n            \"targets\",\n            \"input_lengths\",\n            \"target_lengths\",\n            \"blank\",\n            \"reduction\"\n         ],\n         \"fractional_max_pool2d_test\": [\n            \"test_case\"\n         ],\n         \"fractional_max_pool3d_test\": [\n            \"test_case\"\n         ],\n         \"get_reduction\": [\n            \"m\"\n         ],\n         \"get_weight\": [\n            \"m\"\n         ],\n         \"hingeembeddingloss_margin_no_reduce_test\": [],\n         \"hingeembeddingloss_no_reduce_test\": [],\n         \"hingeembeddingloss_reference\": [\n            \"input\",\n            \"target\",\n            \"margin\",\n            \"reduction\"\n         ],\n         \"kldivloss_log_target_reference\": [\n            \"input\",\n            \"target\",\n            \"reduction\"\n         ],\n         \"kldivloss_no_reduce_log_target_test\": [],\n         \"kldivloss_no_reduce_scalar_log_target_test\": [],\n         \"kldivloss_no_reduce_scalar_test\": [],\n         \"kldivloss_no_reduce_test\": [],\n         \"kldivloss_reference\": [\n            \"input\",\n            \"target\",\n            \"reduction\"\n         ],\n         \"kldivloss_with_log_target_no_reduce_test\": [],\n         \"kldivloss_with_target_no_reduce_test\": [],\n         \"l1loss_no_reduce_scalar_test\": [],\n         \"l1loss_no_reduce_test\": [],\n         \"marginrankingloss_reference\": [\n            \"input1\",\n            \"input2\",\n            \"target\",\n            \"margin\",\n            \"reduction\"\n         ],\n         \"mseloss_no_reduce_scalar_test\": [],\n         \"mseloss_no_reduce_test\": [],\n         \"multilabelmarginloss_0d_no_reduce_test\": [],\n         \"multilabelmarginloss_1d_no_reduce_test\": [],\n         \"multilabelmarginloss_index_neg_test\": [],\n         \"multilabelmarginloss_no_reduce_test\": [],\n         \"multilabelmarginloss_reference\": [\n            \"input\",\n            \"target\",\n            \"reduction\"\n         ],\n         \"multilabelsoftmarginloss_no_reduce_test\": [],\n         \"multilabelsoftmarginloss_weights_no_reduce_test\": [],\n         \"multimarginloss_1d_input_0d_target_no_reduce_test\": [],\n         \"multimarginloss_1d_no_reduce_test\": [],\n         \"multimarginloss_margin_no_reduce_test\": [],\n         \"multimarginloss_no_reduce_test\": [],\n         \"multimarginloss_p_no_reduce_test\": [],\n         \"multimarginloss_reference\": [\n            \"input\",\n            \"target\",\n            \"p\",\n            \"margin\",\n            \"weight\",\n            \"reduction\"\n         ],\n         \"multimarginloss_weights_no_reduce_test\": [],\n         \"nllloss2d_no_reduce_ignore_index_test\": [],\n         \"nllloss2d_no_reduce_test\": [],\n         \"nllloss2d_no_reduce_weights_test\": [],\n         \"nlllossNd_no_reduce_ignore_index_test\": [],\n         \"nlllossNd_no_reduce_test\": [],\n         \"nlllossNd_no_reduce_weights_test\": [],\n         \"nlllossNd_reference\": [\n            \"input\",\n            \"target\",\n            \"weight\",\n            \"ignore_index\",\n            \"reduction\"\n         ],\n         \"nllloss_no_reduce_ignore_index_test\": [],\n         \"nllloss_no_reduce_test\": [],\n         \"nllloss_no_reduce_weights_ignore_index_neg_test\": [],\n         \"nllloss_no_reduce_weights_ignore_index_test\": [],\n         \"nllloss_no_reduce_weights_test\": [],\n         \"nllloss_reference\": [\n            \"input\",\n            \"target\",\n            \"weight\",\n            \"ignore_index\",\n            \"reduction\"\n         ],\n         \"padding1d_circular\": [\n            \"input\",\n            \"pad\"\n         ],\n         \"padding2d_circular\": [\n            \"input\",\n            \"pad\"\n         ],\n         \"padding3d_circular\": [\n            \"input\",\n            \"pad\"\n         ],\n         \"poissonnllloss_no_reduce_test\": [],\n         \"smoothl1loss_no_reduce_scalar_test\": [],\n         \"smoothl1loss_no_reduce_test\": [],\n         \"smoothl1loss_reference\": [\n            \"input\",\n            \"target\",\n            \"reduction\"\n         ],\n         \"softmarginloss_no_reduce_test\": [],\n         \"softmarginloss_reference\": [\n            \"input\",\n            \"target\",\n            \"reduction\"\n         ],\n         \"tripletmarginloss_reference\": [\n            \"anchor\",\n            \"positive\",\n            \"negative\",\n            \"margin\",\n            \"p\",\n            \"eps\",\n            \"swap\",\n            \"reduction\"\n         ],\n         \"wrap_functional\": [\n            \"fn\"\n         ]\n      },\n      \"torch.testing._internal.common_quantization\": {\n         \"__init__\": [\n            \"self\"\n         ],\n         \"_make_conv_test_input\": [\n            \"batch_size\",\n            \"in_channels_per_group\",\n            \"input_feature_map_size\",\n            \"out_channels_per_group\",\n            \"groups\",\n            \"kernel_size\",\n            \"X_scale\",\n            \"X_zero_point\",\n            \"W_scale\",\n            \"W_zero_point\",\n            \"use_bias\",\n            \"use_channelwise\"\n         ],\n         \"convert_dynamic\": [\n            \"module\"\n         ],\n         \"forward\": [\n            \"self\",\n            \"x\"\n         ],\n         \"prepare_dynamic\": [\n            \"model\",\n            \"qconfig_dict\"\n         ],\n         \"skipIfNoFBGEMM\": [\n            \"fn\"\n         ],\n         \"test_only_eval_fn\": [\n            \"model\",\n            \"calib_data\"\n         ],\n         \"test_only_train_fn\": [\n            \"model\",\n            \"train_data\",\n            \"loss_fn\"\n         ]\n      },\n      \"torch.testing._internal.common_quantized\": {\n         \"_calculate_dynamic_per_channel_qparams\": [\n            \"X\",\n            \"dtype\"\n         ],\n         \"_calculate_dynamic_qparams\": [\n            \"X\",\n            \"dtype\",\n            \"reduce_range\"\n         ],\n         \"_conv_output_shape\": [\n            \"input_size\",\n            \"kernel_size\",\n            \"padding\",\n            \"stride\",\n            \"dilation\",\n            \"output_padding\"\n         ],\n         \"_dequantize\": [\n            \"qx\",\n            \"scale\",\n            \"zero_point\"\n         ],\n         \"_quantize\": [\n            \"x\",\n            \"scale\",\n            \"zero_point\",\n            \"qmin\",\n            \"qmax\",\n            \"dtype\"\n         ],\n         \"_requantize\": [\n            \"x\",\n            \"multiplier\",\n            \"zero_point\",\n            \"qmin\",\n            \"qmax\",\n            \"qtype\"\n         ],\n         \"override_qengines\": [\n            \"qfunction\"\n         ],\n         \"override_quantized_engine\": [\n            \"qengine\"\n         ]\n      },\n      \"torch.testing._internal.common_utils\": {\n         \"TemporaryFileName\": [],\n         \"_assertGradAndGradgradChecks\": [\n            \"test_case\",\n            \"apply_fn\",\n            \"inputs\"\n         ],\n         \"_check_module_exists\": [\n            \"name\"\n         ],\n         \"_get_test_report_path\": [],\n         \"_test_function\": [\n            \"fn\",\n            \"device\"\n         ],\n         \"check_disabled\": [\n            \"test_name\"\n         ],\n         \"check_test_defined_in_running_script\": [\n            \"test_case\"\n         ],\n         \"chunk_list\": [\n            \"lst\",\n            \"nchunks\"\n         ],\n         \"discover_test_cases_recursively\": [\n            \"suite_or_case\"\n         ],\n         \"do_test_dtypes\": [\n            \"self\",\n            \"dtypes\",\n            \"layout\",\n            \"device\"\n         ],\n         \"do_test_empty_full\": [\n            \"self\",\n            \"dtypes\",\n            \"layout\",\n            \"device\"\n         ],\n         \"download_file\": [\n            \"url\",\n            \"binary\"\n         ],\n         \"enable_profiling_mode\": [],\n         \"enable_profiling_mode_for_profiling_tests\": [],\n         \"find_free_port\": [],\n         \"freeze_rng_state\": [],\n         \"get_cpu_type\": [\n            \"type_name\"\n         ],\n         \"get_function_arglist\": [\n            \"func\"\n         ],\n         \"get_gpu_type\": [\n            \"type_name\"\n         ],\n         \"get_test_names\": [\n            \"test_cases\"\n         ],\n         \"is_iterable\": [\n            \"obj\"\n         ],\n         \"iter_indices\": [\n            \"tensor\"\n         ],\n         \"load_tests\": [\n            \"loader\",\n            \"tests\",\n            \"pattern\"\n         ],\n         \"make_nonzero_det\": [\n            \"A\",\n            \"sign\",\n            \"min_singular_value\"\n         ],\n         \"prod_single_zero\": [\n            \"dim_size\"\n         ],\n         \"prof_callable\": [\n            \"callable\"\n         ],\n         \"prof_func_call\": [],\n         \"prof_meth_call\": [],\n         \"random_fullrank_matrix_distinct_singular_value\": [\n            \"matrix_size\"\n         ],\n         \"random_lowrank_matrix\": [\n            \"rank\",\n            \"rows\",\n            \"columns\"\n         ],\n         \"random_matrix\": [\n            \"rows\",\n            \"columns\"\n         ],\n         \"random_sparse_matrix\": [\n            \"rows\",\n            \"columns\",\n            \"density\"\n         ],\n         \"random_sparse_pd_matrix\": [\n            \"matrix_size\",\n            \"density\"\n         ],\n         \"random_square_matrix_of_rank\": [\n            \"l\",\n            \"rank\",\n            \"dtype\",\n            \"device\"\n         ],\n         \"random_symmetric_matrix\": [\n            \"l\"\n         ],\n         \"random_symmetric_pd_matrix\": [\n            \"matrix_size\"\n         ],\n         \"random_symmetric_psd_matrix\": [\n            \"l\"\n         ],\n         \"repeat_test_for_types\": [\n            \"dtypes\"\n         ],\n         \"retry\": [\n            \"ExceptionToCheck\",\n            \"tries\",\n            \"delay\"\n         ],\n         \"retry_on_connect_failures\": [\n            \"func\",\n            \"connect_errors\"\n         ],\n         \"run_tests\": [\n            \"argv\"\n         ],\n         \"set_default_dtype\": [\n            \"dtype\"\n         ],\n         \"set_rng_seed\": [\n            \"seed\"\n         ],\n         \"set_running_script_path\": [],\n         \"shell\": [\n            \"command\",\n            \"cwd\",\n            \"env\"\n         ],\n         \"skipCUDAMemoryLeakCheckIf\": [\n            \"condition\"\n         ],\n         \"skipCUDANonDefaultStreamIf\": [\n            \"condition\"\n         ],\n         \"skipIfCompiledWithoutNumpy\": [\n            \"fn\"\n         ],\n         \"skipIfNoLapack\": [\n            \"fn\"\n         ],\n         \"skipIfNotRegistered\": [\n            \"op_name\",\n            \"message\"\n         ],\n         \"skipIfRocm\": [\n            \"fn\"\n         ],\n         \"slowTest\": [\n            \"fn\"\n         ],\n         \"suppress_warnings\": [\n            \"fn\"\n         ],\n         \"to_gpu\": [\n            \"obj\",\n            \"type_map\"\n         ],\n         \"wait_for_process\": [\n            \"p\"\n         ]\n      },\n      \"torch.testing._internal.dist_utils\": {\n         \"_build_faulty_backend_options\": [\n            \"faulty_agent_fixture\",\n            \"faulty_messages\",\n            \"messages_to_delay\"\n         ],\n         \"dist_init\": [\n            \"old_test_method\",\n            \"setup_rpc\",\n            \"clean_shutdown\",\n            \"faulty_messages\",\n            \"messages_to_delay\"\n         ],\n         \"get_function_event\": [\n            \"function_events\",\n            \"partial_event_name\"\n         ],\n         \"get_shutdown_error_regex\": [\n            \"rpc_backend\"\n         ],\n         \"get_timeout_error_regex\": [\n            \"rpc_backend_name\"\n         ],\n         \"initialize_pg\": [\n            \"init_method\",\n            \"rank\",\n            \"world_size\"\n         ],\n         \"noop\": [],\n         \"wait_until_node_failure\": [\n            \"rank\",\n            \"expected_error_regex\"\n         ],\n         \"wait_until_pending_users_flushed\": [],\n         \"worker_name\": [\n            \"rank\"\n         ]\n      },\n      \"torch.testing._internal.distributed.rpc.dist_autograd_test\": {\n         \"_all_contexts_cleaned_up\": [\n            \"timeout_seconds\"\n         ],\n         \"_call_remote_embedding\": [\n            \"cls\",\n            \"embedding_rref\",\n            \"input\",\n            \"offsets\",\n            \"per_sample_weights\"\n         ],\n         \"_check_rpc_done\": [\n            \"rank_distance\"\n         ],\n         \"_compare_owner_value\": [\n            \"context_id\",\n            \"rref\",\n            \"grad\"\n         ],\n         \"_get_grad\": [\n            \"cls\",\n            \"embedding_rref\",\n            \"context_id\"\n         ],\n         \"_mixed_requires_grad\": [\n            \"cls\",\n            \"t1\",\n            \"t2\"\n         ],\n         \"_run_trainer\": [\n            \"rref_t1\",\n            \"t2\",\n            \"ps\",\n            \"rank_diff\"\n         ],\n         \"_run_trainer_torchscript\": [\n            \"rref_t1\",\n            \"t2\",\n            \"ps\",\n            \"rank_diff\"\n         ],\n         \"_set_rpc_done\": [\n            \"ctx_id\",\n            \"rank_distance\"\n         ],\n         \"_test_nested_backward_accumulate_grads\": [\n            \"t1\",\n            \"t2\",\n            \"dst_rank\"\n         ],\n         \"_torch_ones\": [\n            \"sizes\",\n            \"requires_grad\"\n         ],\n         \"_workload_thread\": [],\n         \"create_tensor\": [],\n         \"create_torchscript_tensor\": [],\n         \"my_nested_rref_add\": [\n            \"dst\",\n            \"rref_t1\",\n            \"t2\"\n         ],\n         \"my_py_add\": [\n            \"t1\",\n            \"t2\"\n         ],\n         \"my_py_nested_call\": [\n            \"t1\",\n            \"t2\",\n            \"dst\",\n            \"world_size\",\n            \"hops\"\n         ],\n         \"my_rref_add\": [\n            \"rref_t1\",\n            \"t2\"\n         ],\n         \"my_scalar_add\": [\n            \"a\",\n            \"b\"\n         ],\n         \"my_script_add\": [\n            \"t1\",\n            \"t2\"\n         ],\n         \"my_script_ref_add\": [\n            \"ref_t1\",\n            \"t2\"\n         ],\n         \"ret_requires_grad\": [],\n         \"test_async_dist_autograd\": [\n            \"self\"\n         ],\n         \"test_backward_accumulate_grads\": [\n            \"self\"\n         ],\n         \"test_backward_verify_hooks\": [\n            \"self\"\n         ],\n         \"test_clean_context_during_backward\": [\n            \"self\"\n         ],\n         \"test_debug_info\": [\n            \"self\"\n         ],\n         \"test_embedding_bag_with_no_grad_tensors\": [\n            \"self\"\n         ],\n         \"test_grad_copy_sparse_indices_extra_ref\": [\n            \"self\"\n         ],\n         \"test_mixed_requires_grad\": [\n            \"self\"\n         ],\n         \"test_multiple_backward\": [\n            \"self\"\n         ],\n         \"test_multiple_backward_with_errors\": [\n            \"self\"\n         ],\n         \"test_nested_backward_accumulate_grads\": [\n            \"self\"\n         ],\n         \"test_no_grad_copy\": [\n            \"self\"\n         ],\n         \"test_no_grad_copy_sparse\": [\n            \"self\"\n         ],\n         \"test_post_hooks\": [\n            \"self\"\n         ]\n      },\n      \"torch.testing._internal.distributed.rpc.dist_optimizer_test\": {\n         \"_call_method\": [\n            \"method\",\n            \"obj_rref\"\n         ],\n         \"remote_method\": [\n            \"method\",\n            \"obj_rref\"\n         ],\n         \"rpc_async_method\": [\n            \"method\",\n            \"obj_rref\"\n         ]\n      },\n      \"torch.testing._internal.distributed.rpc.jit.dist_autograd_test\": {\n         \"fork_add\": [\n            \"t1\",\n            \"t2\",\n            \"dst\"\n         ],\n         \"local_add\": [\n            \"t1\",\n            \"t2\"\n         ],\n         \"remote_add\": [\n            \"t1\",\n            \"t2\",\n            \"dst\"\n         ]\n      },\n      \"torch.testing._internal.distributed.rpc.jit.rpc_test\": {\n         \"assorted_types_args_kwargs\": [\n            \"tensor_arg\",\n            \"str_arg\",\n            \"int_arg\",\n            \"tensor_kwarg\",\n            \"str_kwarg\",\n            \"int_kwarg\"\n         ],\n         \"call_fork_with_profiling\": [\n            \"handle\"\n         ],\n         \"call_rpc_with_profiling\": [\n            \"handle\",\n            \"dst_worker_name\"\n         ],\n         \"construct_my_script_module\": [\n            \"rank\"\n         ],\n         \"my_script_module_init\": [\n            \"rank\"\n         ],\n         \"no_arg\": [],\n         \"one_arg\": [\n            \"value\"\n         ],\n         \"owner_create_rref_my_script_class\": [\n            \"a\"\n         ],\n         \"owner_create_rref_my_script_module\": [\n            \"a\"\n         ],\n         \"python_function\": [],\n         \"raise_script\": [],\n         \"return_rref\": [\n            \"rref_var\"\n         ],\n         \"return_value\": [\n            \"value\"\n         ],\n         \"rpc_async_call_remote_torchscript_in_torchscript\": [\n            \"dst_worker_name\",\n            \"args\",\n            \"kwargs\"\n         ],\n         \"rpc_return_rref\": [\n            \"dst\"\n         ],\n         \"rref_local_value\": [\n            \"rref\"\n         ],\n         \"rref_python_annotation\": [\n            \"rref_var\"\n         ],\n         \"rref_script_annotation\": [\n            \"rref_var\"\n         ],\n         \"rref_to_here\": [\n            \"rref_var\"\n         ],\n         \"run_ref_script_module\": [\n            \"ref_script_module\",\n            \"t\"\n         ],\n         \"save_rref\": [\n            \"rref_var\",\n            \"fname\"\n         ],\n         \"script_add_ones\": [\n            \"x\"\n         ],\n         \"script_check_rref_confirmed\": [\n            \"rref\"\n         ],\n         \"script_fork_wait_throw\": [\n            \"invalue\"\n         ],\n         \"script_fork_wait_udf\": [\n            \"tensor\"\n         ],\n         \"script_raise_func\": [\n            \"value\"\n         ],\n         \"script_run_forward_rref_my_script_module\": [\n            \"rref\"\n         ],\n         \"script_run_get_value_rref_my_script_class\": [\n            \"rref\"\n         ],\n         \"sleep\": [\n            \"t\"\n         ],\n         \"two_args_two_kwargs\": [\n            \"first_arg\",\n            \"second_arg\",\n            \"first_kwarg\",\n            \"second_kwarg\"\n         ]\n      },\n      \"torch.testing._internal.distributed.rpc.rpc_test\": {\n         \"_call_method_on_rref\": [\n            \"method\",\n            \"rref\"\n         ],\n         \"_stub_construct_rpc_backend_options_handler\": [],\n         \"_stub_init_rpc_backend_handler\": [\n            \"store\",\n            \"name\",\n            \"rank\",\n            \"world_size\",\n            \"rpc_backend_options\"\n         ],\n         \"add_rref_to_value\": [\n            \"rref\",\n            \"value\"\n         ],\n         \"build_complex_tensors\": [],\n         \"check_rref_confirmed\": [\n            \"rref\"\n         ],\n         \"clear_global_rref\": [],\n         \"delayed_add\": [\n            \"a\",\n            \"b\",\n            \"seconds\"\n         ],\n         \"foo_add\": [],\n         \"get_rref_debug_info\": [],\n         \"get_rref_list\": [\n            \"values\"\n         ],\n         \"heavy_rpc\": [\n            \"tensor\"\n         ],\n         \"heavy_rpc_torchscript\": [\n            \"tensor\"\n         ],\n         \"light_rpc\": [],\n         \"multi_layer_nested_async_rpc\": [\n            \"dst\",\n            \"world_size\",\n            \"ttl\"\n         ],\n         \"my_complex_tensor_function\": [\n            \"list_input\",\n            \"tensor_class_input\",\n            \"dict_input\"\n         ],\n         \"my_function\": [\n            \"a\",\n            \"b\",\n            \"c\"\n         ],\n         \"my_rref_function\": [\n            \"rref_a\",\n            \"rref_b\"\n         ],\n         \"my_script_func\": [\n            \"tensor\"\n         ],\n         \"my_sleep_func\": [\n            \"seconds\"\n         ],\n         \"my_tensor_function\": [\n            \"a\",\n            \"b\"\n         ],\n         \"nested_remote\": [\n            \"dst\"\n         ],\n         \"nested_rpc\": [\n            \"dst\"\n         ],\n         \"nested_rref\": [\n            \"dst\"\n         ],\n         \"no_result\": [],\n         \"non_cont_test\": [\n            \"t_view\",\n            \"t_cont\"\n         ],\n         \"raise_func\": [],\n         \"raise_or_inc\": [\n            \"value\"\n         ],\n         \"requires_process_group_agent\": [\n            \"message\"\n         ],\n         \"rpc_return_rref\": [\n            \"dst\"\n         ],\n         \"rref_forward_chain\": [\n            \"dst\",\n            \"world_size\",\n            \"rref\",\n            \"ttl\"\n         ],\n         \"run_nested_pickle\": [\n            \"pickle_cls_instance\",\n            \"tensor\"\n         ],\n         \"set_and_check_done\": [\n            \"value\"\n         ],\n         \"set_global_rref\": [\n            \"rref\"\n         ],\n         \"set_value\": [\n            \"value\"\n         ],\n         \"wait_for_value_future\": []\n      },\n      \"torch.testing._internal.expecttest\": {\n         \"escape_trailing_quote\": [\n            \"s\",\n            \"quote\"\n         ],\n         \"normalize_nl\": [\n            \"t\"\n         ],\n         \"nth_eol\": [\n            \"src\",\n            \"lineno\"\n         ],\n         \"nth_line\": [\n            \"src\",\n            \"lineno\"\n         ],\n         \"ok_for_raw_triple_quoted_string\": [\n            \"s\",\n            \"quote\"\n         ],\n         \"replace_string_literal\": [\n            \"src\",\n            \"lineno\",\n            \"new_string\"\n         ]\n      },\n      \"torch.testing._internal.hypothesis_utils\": {\n         \"_floats_wrapper\": [],\n         \"_get_valid_min_max\": [\n            \"qparams\"\n         ],\n         \"array_shapes\": [\n            \"draw\",\n            \"min_dims\",\n            \"max_dims\",\n            \"min_side\",\n            \"max_side\"\n         ],\n         \"assert_deadline_disabled\": [],\n         \"assume_not_overflowing\": [\n            \"tensor\",\n            \"qparams\"\n         ],\n         \"floats\": [],\n         \"per_channel_tensor\": [\n            \"draw\",\n            \"shapes\",\n            \"elements\",\n            \"qparams\"\n         ],\n         \"qparams\": [\n            \"draw\",\n            \"dtypes\",\n            \"scale_min\",\n            \"scale_max\",\n            \"zero_point_min\",\n            \"zero_point_max\"\n         ],\n         \"tensor\": [\n            \"draw\",\n            \"shapes\",\n            \"elements\",\n            \"qparams\"\n         ],\n         \"tensor_conv\": [\n            \"draw\",\n            \"spatial_dim\",\n            \"batch_size_range\",\n            \"input_channels_per_group_range\",\n            \"output_channels_per_group_range\",\n            \"feature_map_range\",\n            \"kernel_range\",\n            \"max_groups\",\n            \"elements\",\n            \"qparams\"\n         ]\n      },\n      \"torch.testing._internal.jit_metaprogramming_utils\": {\n         \"create_script_fn\": [\n            \"self\",\n            \"method_name\",\n            \"func_type\",\n            \"output_process_fn\"\n         ],\n         \"create_script_module\": [\n            \"self\",\n            \"nn_module\",\n            \"constructor_args\"\n         ],\n         \"gen_script_fn_and_args\": [\n            \"method_name\",\n            \"func_type\"\n         ],\n         \"get_all_nn_module_tests\": [],\n         \"get_call\": [\n            \"method_name\",\n            \"func_type\",\n            \"args\",\n            \"kwargs\"\n         ],\n         \"get_constant\": [\n            \"x\"\n         ],\n         \"get_nn_functional_compiled_fn_and_inputs\": [\n            \"name\",\n            \"self_size\",\n            \"args\",\n            \"variant_name\"\n         ],\n         \"get_nn_mod_test_name\": [],\n         \"get_nn_module_class_from_kwargs\": [],\n         \"get_nn_module_name_from_kwargs\": [],\n         \"get_script_args\": [\n            \"args\"\n         ],\n         \"try_get_nn_module_compiled_mod_and_inputs\": []\n      },\n      \"torch.testing._internal.jit_utils\": {\n         \"_compared_saved_loaded\": [\n            \"self\",\n            \"m\"\n         ],\n         \"_inline_everything\": [\n            \"fn\"\n         ],\n         \"_isHookExceptionOk\": [\n            \"self\",\n            \"e\"\n         ],\n         \"_tmp_donotuse_dont_inline_everything\": [\n            \"fn\"\n         ],\n         \"_trace\": [],\n         \"assertAutodiffNode\": [\n            \"self\",\n            \"graph\",\n            \"should_autodiff_node\",\n            \"nonfusible_nodes\",\n            \"fusible_nodes\"\n         ],\n         \"assertExpectedGraph\": [\n            \"self\",\n            \"trace\"\n         ],\n         \"assertExpectedONNXGraph\": [\n            \"self\",\n            \"g\"\n         ],\n         \"assertExportImport\": [\n            \"self\",\n            \"trace\",\n            \"inputs\"\n         ],\n         \"assertExportImportModule\": [\n            \"self\",\n            \"m\",\n            \"inputs\"\n         ],\n         \"assertGraphContains\": [\n            \"self\",\n            \"graph\",\n            \"kind\"\n         ],\n         \"assertGraphContainsExactly\": [\n            \"self\",\n            \"graph\",\n            \"kind\",\n            \"num_kind_nodes\",\n            \"consider_subgraphs\"\n         ],\n         \"attrs_with_prefix\": [\n            \"module\",\n            \"prefix\"\n         ],\n         \"checkBailouts\": [\n            \"self\",\n            \"model\",\n            \"inputs\",\n            \"expected\"\n         ],\n         \"checkModule\": [\n            \"self\",\n            \"nn_module\",\n            \"args\"\n         ],\n         \"checkScript\": [\n            \"self\",\n            \"script\",\n            \"inputs\",\n            \"name\",\n            \"optimize\",\n            \"inputs_requires_grad\",\n            \"capture_output\",\n            \"frames_up\",\n            \"profiling\"\n         ],\n         \"checkScriptRaisesRegex\": [\n            \"self\",\n            \"script\",\n            \"inputs\",\n            \"exception\",\n            \"regex\",\n            \"outputs\",\n            \"capture_output\",\n            \"profiling\"\n         ],\n         \"checkTrace\": [\n            \"self\",\n            \"func\",\n            \"reference_tensors\",\n            \"input_tensors\",\n            \"drop\",\n            \"allow_unused\",\n            \"verbose\",\n            \"inputs_require_grads\",\n            \"check_tolerance\",\n            \"export_import\",\n            \"_force_outplace\"\n         ],\n         \"clearHooks\": [\n            \"self\"\n         ],\n         \"clear_class_registry\": [],\n         \"createFunctionFromGraph\": [\n            \"self\",\n            \"trace\"\n         ],\n         \"disable_autodiff_subgraph_inlining\": [\n            \"enabled\"\n         ],\n         \"do_input_map\": [\n            \"fn\",\n            \"input\"\n         ],\n         \"emitFunctionHook\": [\n            \"self\",\n            \"func\"\n         ],\n         \"emitModuleHook\": [\n            \"self\",\n            \"module\"\n         ],\n         \"enable_cpu_fuser\": [\n            \"fn\"\n         ],\n         \"enable_cpu_fuser_if\": [\n            \"cond\"\n         ],\n         \"execWrapper\": [\n            \"code\",\n            \"glob\",\n            \"loc\"\n         ],\n         \"getExportImportCopy\": [\n            \"self\",\n            \"m\",\n            \"also_test_file\",\n            \"map_location\"\n         ],\n         \"getExportImportCopyWithPacking\": [\n            \"self\",\n            \"m\",\n            \"also_test_file\",\n            \"map_location\"\n         ],\n         \"get_execution_plan\": [\n            \"graph_executor_state\"\n         ],\n         \"get_forward\": [\n            \"c\"\n         ],\n         \"get_forward_graph\": [\n            \"c\"\n         ],\n         \"get_frame_vars\": [\n            \"self\",\n            \"frames_up\"\n         ],\n         \"get_module_method\": [\n            \"m\",\n            \"module\",\n            \"method\"\n         ],\n         \"inline_everything_mode\": [\n            \"should_inline\"\n         ],\n         \"runAndSaveRNG\": [\n            \"self\",\n            \"func\",\n            \"inputs\",\n            \"kwargs\"\n         ],\n         \"run_pass\": [\n            \"self\",\n            \"name\",\n            \"trace\"\n         ],\n         \"setHooks\": [\n            \"self\"\n         ],\n         \"setUp\": [\n            \"self\"\n         ],\n         \"tearDown\": [\n            \"self\"\n         ]\n      },\n      \"torch.testing._internal.test_module.future_div\": {\n         \"div_float_future\": [],\n         \"div_int_future\": []\n      },\n      \"torch.testing._internal.test_module.no_future_div\": {\n         \"div_float_nofuture\": [],\n         \"div_int_nofuture\": []\n      },\n      \"torch.utils.__init__\": {\n         \"set_module\": [\n            \"obj\",\n            \"mod\"\n         ]\n      },\n      \"torch.utils._cpp_extension_versioner\": {\n         \"hash_build_arguments\": [\n            \"hash_value\",\n            \"build_arguments\"\n         ],\n         \"hash_source_files\": [\n            \"hash_value\",\n            \"source_files\"\n         ],\n         \"update_hash\": [\n            \"seed\",\n            \"value\"\n         ]\n      },\n      \"torch.utils.bottleneck.__main__\": {\n         \"compiled_with_cuda\": [\n            \"sysinfo\"\n         ],\n         \"cpu_time_total\": [\n            \"autograd_prof\"\n         ],\n         \"main\": [],\n         \"parse_args\": [],\n         \"print_autograd_prof_summary\": [\n            \"prof\",\n            \"mode\",\n            \"sortby\",\n            \"topk\"\n         ],\n         \"print_cprofile_summary\": [\n            \"prof\",\n            \"sortby\",\n            \"topk\"\n         ],\n         \"redirect_argv\": [\n            \"new_argv\"\n         ],\n         \"run_autograd_prof\": [\n            \"code\",\n            \"globs\"\n         ],\n         \"run_cprofile\": [\n            \"code\",\n            \"globs\",\n            \"launch_blocking\"\n         ],\n         \"run_env_analysis\": []\n      },\n      \"torch.utils.bundled_inputs\": {\n         \"_inflate_expr\": [\n            \"arg\",\n            \"ref\"\n         ],\n         \"augment_model_with_bundled_inputs\": [\n            \"model\",\n            \"inputs\",\n            \"_receive_inflate_expr\"\n         ],\n         \"bundle_randn\": []\n      },\n      \"torch.utils.checkpoint\": {\n         \"check_backward_validity\": [\n            \"inputs\"\n         ],\n         \"checkpoint\": [\n            \"function\"\n         ],\n         \"checkpoint_sequential\": [\n            \"functions\",\n            \"segments\",\n            \"input\"\n         ],\n         \"detach_variable\": [\n            \"inputs\"\n         ],\n         \"get_device_states\": [],\n         \"set_device_states\": [\n            \"devices\",\n            \"states\"\n         ]\n      },\n      \"torch.utils.collect_env\": {\n         \"check_release_file\": [\n            \"run_lambda\"\n         ],\n         \"get_cmake_version\": [\n            \"run_lambda\"\n         ],\n         \"get_conda_packages\": [\n            \"run_lambda\"\n         ],\n         \"get_cudnn_version\": [\n            \"run_lambda\"\n         ],\n         \"get_env_info\": [],\n         \"get_gcc_version\": [\n            \"run_lambda\"\n         ],\n         \"get_gpu_info\": [\n            \"run_lambda\"\n         ],\n         \"get_lsb_version\": [\n            \"run_lambda\"\n         ],\n         \"get_mac_version\": [\n            \"run_lambda\"\n         ],\n         \"get_nvidia_driver_version\": [\n            \"run_lambda\"\n         ],\n         \"get_nvidia_smi\": [],\n         \"get_os\": [\n            \"run_lambda\"\n         ],\n         \"get_pip_packages\": [\n            \"run_lambda\"\n         ],\n         \"get_platform\": [],\n         \"get_pretty_env_info\": [],\n         \"get_running_cuda_version\": [\n            \"run_lambda\"\n         ],\n         \"get_windows_version\": [\n            \"run_lambda\"\n         ],\n         \"main\": [],\n         \"pretty_str\": [\n            \"envinfo\"\n         ],\n         \"run\": [\n            \"command\"\n         ],\n         \"run_and_parse_first_match\": [\n            \"run_lambda\",\n            \"command\",\n            \"regex\"\n         ],\n         \"run_and_read_all\": [\n            \"run_lambda\",\n            \"command\"\n         ]\n      },\n      \"torch.utils.cpp_extension\": {\n         \"CUDAExtension\": [\n            \"name\",\n            \"sources\"\n         ],\n         \"CppExtension\": [\n            \"name\",\n            \"sources\"\n         ],\n         \"_accepted_compilers_for_platform\": [],\n         \"_find_cuda_home\": [],\n         \"_find_rocm_home\": [],\n         \"_get_build_directory\": [\n            \"name\",\n            \"verbose\"\n         ],\n         \"_get_cuda_arch_flags\": [\n            \"cflags\"\n         ],\n         \"_get_num_workers\": [\n            \"verbose\"\n         ],\n         \"_get_rocm_arch_flags\": [\n            \"cflags\"\n         ],\n         \"_import_module_from_library\": [\n            \"module_name\",\n            \"path\",\n            \"is_python_module\"\n         ],\n         \"_is_binary_build\": [],\n         \"_is_cuda_file\": [\n            \"path\"\n         ],\n         \"_is_ninja_available\": [],\n         \"_jit_compile\": [\n            \"name\",\n            \"sources\",\n            \"extra_cflags\",\n            \"extra_cuda_cflags\",\n            \"extra_ldflags\",\n            \"extra_include_paths\",\n            \"build_directory\",\n            \"verbose\",\n            \"with_cuda\",\n            \"is_python_module\",\n            \"keep_intermediates\"\n         ],\n         \"_join_cuda_home\": [],\n         \"_join_rocm_home\": [],\n         \"_prepare_ldflags\": [\n            \"extra_ldflags\",\n            \"with_cuda\",\n            \"verbose\"\n         ],\n         \"_run_ninja_build\": [\n            \"build_directory\",\n            \"verbose\",\n            \"error_prefix\"\n         ],\n         \"_write_ninja_file\": [\n            \"path\",\n            \"cflags\",\n            \"post_cflags\",\n            \"cuda_cflags\",\n            \"cuda_post_cflags\",\n            \"sources\",\n            \"objects\",\n            \"ldflags\",\n            \"library_target\",\n            \"with_cuda\"\n         ],\n         \"_write_ninja_file_and_build_library\": [\n            \"name\",\n            \"sources\",\n            \"extra_cflags\",\n            \"extra_cuda_cflags\",\n            \"extra_ldflags\",\n            \"extra_include_paths\",\n            \"build_directory\",\n            \"verbose\",\n            \"with_cuda\"\n         ],\n         \"_write_ninja_file_and_compile_objects\": [\n            \"sources\",\n            \"objects\",\n            \"cflags\",\n            \"post_cflags\",\n            \"cuda_cflags\",\n            \"cuda_post_cflags\",\n            \"build_directory\",\n            \"verbose\",\n            \"with_cuda\"\n         ],\n         \"_write_ninja_file_to_build_library\": [\n            \"path\",\n            \"name\",\n            \"sources\",\n            \"extra_cflags\",\n            \"extra_cuda_cflags\",\n            \"extra_ldflags\",\n            \"extra_include_paths\",\n            \"with_cuda\"\n         ],\n         \"check_compiler_abi_compatibility\": [\n            \"compiler\"\n         ],\n         \"check_compiler_ok_for_platform\": [\n            \"compiler\"\n         ],\n         \"get_default_build_root\": [],\n         \"include_paths\": [\n            \"cuda\"\n         ],\n         \"library_paths\": [\n            \"cuda\"\n         ],\n         \"load\": [\n            \"name\",\n            \"sources\",\n            \"extra_cflags\",\n            \"extra_cuda_cflags\",\n            \"extra_ldflags\",\n            \"extra_include_paths\",\n            \"build_directory\",\n            \"verbose\",\n            \"with_cuda\",\n            \"is_python_module\",\n            \"keep_intermediates\"\n         ],\n         \"load_inline\": [\n            \"name\",\n            \"cpp_sources\",\n            \"cuda_sources\",\n            \"functions\",\n            \"extra_cflags\",\n            \"extra_cuda_cflags\",\n            \"extra_ldflags\",\n            \"extra_include_paths\",\n            \"build_directory\",\n            \"verbose\",\n            \"with_cuda\",\n            \"is_python_module\",\n            \"with_pytorch_error_handling\",\n            \"keep_intermediates\"\n         ],\n         \"verify_ninja_availability\": []\n      },\n      \"torch.utils.data._utils.__init__\": {\n         \"_set_python_exit_flag\": []\n      },\n      \"torch.utils.data._utils.collate\": {\n         \"default_collate\": [\n            \"batch\"\n         ],\n         \"default_convert\": [\n            \"data\"\n         ]\n      },\n      \"torch.utils.data._utils.pin_memory\": {\n         \"_pin_memory_loop\": [\n            \"in_queue\",\n            \"out_queue\",\n            \"device_id\",\n            \"done_event\"\n         ],\n         \"pin_memory\": [\n            \"data\"\n         ]\n      },\n      \"torch.utils.data._utils.signal_handling\": {\n         \"_set_SIGCHLD_handler\": []\n      },\n      \"torch.utils.data._utils.worker\": {\n         \"_worker_loop\": [\n            \"dataset_kind\",\n            \"dataset\",\n            \"index_queue\",\n            \"data_queue\",\n            \"done_event\",\n            \"auto_collation\",\n            \"collate_fn\",\n            \"drop_last\",\n            \"seed\",\n            \"init_fn\",\n            \"worker_id\",\n            \"num_workers\"\n         ],\n         \"get_worker_info\": []\n      },\n      \"torch.utils.data.dataset\": {\n         \"random_split\": [\n            \"dataset\",\n            \"lengths\",\n            \"generator\"\n         ]\n      },\n      \"torch.utils.hipify.hipify_python\": {\n         \"add_dim3\": [\n            \"kernel_string\",\n            \"cuda_kernel\"\n         ],\n         \"compute_stats\": [\n            \"stats\"\n         ],\n         \"extract_arguments\": [\n            \"start\",\n            \"string\"\n         ],\n         \"file_add_header\": [\n            \"filepath\",\n            \"header\"\n         ],\n         \"file_specific_replacement\": [\n            \"filepath\",\n            \"search_string\",\n            \"replace_string\",\n            \"strict\"\n         ],\n         \"find_bracket_group\": [\n            \"input_string\",\n            \"start\"\n         ],\n         \"find_closure_group\": [\n            \"input_string\",\n            \"start\",\n            \"group\"\n         ],\n         \"find_parentheses_group\": [\n            \"input_string\",\n            \"start\"\n         ],\n         \"fix_static_global_kernels\": [\n            \"in_txt\"\n         ],\n         \"get_hip_file_path\": [\n            \"filepath\"\n         ],\n         \"hip_header_magic\": [\n            \"input_string\"\n         ],\n         \"hipify\": [\n            \"project_directory\",\n            \"show_detailed\",\n            \"extensions\",\n            \"output_directory\",\n            \"includes\",\n            \"extra_files\",\n            \"out_of_place_only\",\n            \"ignores\",\n            \"show_progress\",\n            \"hip_clang_launch\",\n            \"is_pytorch_extension\",\n            \"clean_ctx\"\n         ],\n         \"is_caffe2_gpu_file\": [\n            \"filepath\"\n         ],\n         \"is_out_of_place\": [\n            \"filepath\"\n         ],\n         \"is_pytorch_file\": [\n            \"filepath\"\n         ],\n         \"matched_files_iter\": [\n            \"root_path\",\n            \"includes\",\n            \"ignores\",\n            \"extensions\",\n            \"out_of_place_only\"\n         ],\n         \"openf\": [\n            \"filename\",\n            \"mode\"\n         ],\n         \"preprocess\": [\n            \"output_directory\",\n            \"all_files\",\n            \"show_detailed\",\n            \"show_progress\",\n            \"hip_clang_launch\",\n            \"is_pytorch_extension\",\n            \"clean_ctx\"\n         ],\n         \"preprocessor\": [\n            \"output_directory\",\n            \"filepath\",\n            \"stats\",\n            \"hip_clang_launch\",\n            \"is_pytorch_extension\",\n            \"clean_ctx\"\n         ],\n         \"processKernelLaunches\": [\n            \"string\",\n            \"stats\"\n         ],\n         \"replace_extern_shared\": [\n            \"input_string\"\n         ],\n         \"replace_math_functions\": [\n            \"input_string\"\n         ],\n         \"str2bool\": [\n            \"v\"\n         ]\n      },\n      \"torch.utils.hooks\": {\n         \"unserializable_hook\": [\n            \"f\"\n         ],\n         \"warn_if_has_hooks\": [\n            \"tensor\"\n         ]\n      },\n      \"torch.utils.mkldnn\": {\n         \"to_mkldnn\": [\n            \"module\"\n         ]\n      },\n      \"torch.utils.mobile_optimizer\": {\n         \"generate_mobile_module_lints\": [\n            \"script_module\"\n         ],\n         \"optimize_for_mobile\": [\n            \"script_module\"\n         ]\n      },\n      \"torch.utils.show_pickle\": {\n         \"main\": [\n            \"argv\",\n            \"output_stream\"\n         ]\n      },\n      \"torch.utils.tensorboard._caffe2_graph\": {\n         \"_add_gradient_scope\": [\n            \"shapes\",\n            \"blob_name_tracker\",\n            \"ops\"\n         ],\n         \"_add_tf_shape\": [\n            \"attr_dict\",\n            \"ints\"\n         ],\n         \"_blob_to_node\": [\n            \"producing_ops\",\n            \"shapes\",\n            \"name\"\n         ],\n         \"_check_if_cpu\": [\n            \"blob\"\n         ],\n         \"_check_if_forward\": [\n            \"blob\"\n         ],\n         \"_clear_debug_info\": [\n            \"ops\",\n            \"perform_clear\"\n         ],\n         \"_compute_in_out\": [\n            \"ops\"\n         ],\n         \"_convert_to_ssa\": [\n            \"shapes\",\n            \"blob_name_tracker\",\n            \"ops\"\n         ],\n         \"_fill_missing_operator_names\": [\n            \"ops\"\n         ],\n         \"_filter_ops\": [\n            \"ops\",\n            \"filter_fn\",\n            \"perform_filter\"\n         ],\n         \"_get_blob_names\": [\n            \"ops\"\n         ],\n         \"_make_unique_name\": [\n            \"seen\",\n            \"name\",\n            \"min_version\"\n         ],\n         \"_operator_to_node\": [\n            \"shapes\",\n            \"op\"\n         ],\n         \"_operator_to_node_simp\": [\n            \"op\",\n            \"inter_blobs\",\n            \"seen\"\n         ],\n         \"_operators_to_graph_def\": [\n            \"shapes\",\n            \"ops\",\n            \"colon_replacement\",\n            \"with_ssa\",\n            \"with_gradient_scope\",\n            \"blob_name_tracker\",\n            \"show_simplified\",\n            \"custom_rename\"\n         ],\n         \"_propagate_device_option\": [\n            \"net_def\"\n         ],\n         \"_remap_keys\": [\n            \"old_dict\",\n            \"rename_fn\"\n         ],\n         \"_rename_all\": [\n            \"shapes\",\n            \"blob_name_tracker\",\n            \"ops\",\n            \"rename_fn\"\n         ],\n         \"_rename_tensorflow_style\": [\n            \"shapes\",\n            \"blob_name_tracker\",\n            \"ops\"\n         ],\n         \"_replace_colons\": [\n            \"shapes\",\n            \"blob_name_tracker\",\n            \"ops\",\n            \"repl\"\n         ],\n         \"_set_tf_attr\": [\n            \"attr_dict\",\n            \"arg\"\n         ],\n         \"_tf_device\": [\n            \"device_option\"\n         ],\n         \"_try_get_shapes\": [\n            \"nets\"\n         ],\n         \"model_to_graph_def\": [\n            \"model\"\n         ],\n         \"nets_to_graph_def\": [\n            \"nets\",\n            \"shapes\"\n         ],\n         \"protos_to_graph_def\": [\n            \"net_defs\",\n            \"shapes\"\n         ]\n      },\n      \"torch.utils.tensorboard._convert_np\": {\n         \"_prepare_caffe2\": [\n            \"x\"\n         ],\n         \"_prepare_pytorch\": [\n            \"x\"\n         ],\n         \"make_np\": [\n            \"x\"\n         ]\n      },\n      \"torch.utils.tensorboard._embedding\": {\n         \"get_embedding_info\": [\n            \"metadata\",\n            \"label_img\",\n            \"filesys\",\n            \"subdir\",\n            \"global_step\",\n            \"tag\"\n         ],\n         \"make_mat\": [\n            \"matlist\",\n            \"save_path\"\n         ],\n         \"make_sprite\": [\n            \"label_img\",\n            \"save_path\"\n         ],\n         \"make_tsv\": [\n            \"metadata\",\n            \"save_path\",\n            \"metadata_header\"\n         ],\n         \"write_pbtxt\": [\n            \"save_path\",\n            \"contents\"\n         ]\n      },\n      \"torch.utils.tensorboard._onnx_graph\": {\n         \"load_onnx_graph\": [\n            \"fname\"\n         ],\n         \"parse\": [\n            \"graph\"\n         ]\n      },\n      \"torch.utils.tensorboard._proto_graph\": {\n         \"attr_value_proto\": [\n            \"dtype\",\n            \"shape\",\n            \"s\"\n         ],\n         \"node_proto\": [\n            \"name\",\n            \"op\",\n            \"input\",\n            \"dtype\",\n            \"shape\",\n            \"outputsize\",\n            \"attributes\"\n         ],\n         \"tensor_shape_proto\": [\n            \"outputsize\"\n         ]\n      },\n      \"torch.utils.tensorboard._pytorch_graph\": {\n         \"graph\": [\n            \"model\",\n            \"args\",\n            \"verbose\"\n         ],\n         \"parse\": [\n            \"graph\",\n            \"trace\",\n            \"args\",\n            \"omit_useless_nodes\"\n         ]\n      },\n      \"torch.utils.tensorboard._utils\": {\n         \"_prepare_video\": [\n            \"V\"\n         ],\n         \"convert_to_HWC\": [\n            \"tensor\",\n            \"input_format\"\n         ],\n         \"figure_to_image\": [\n            \"figures\",\n            \"close\"\n         ],\n         \"make_grid\": [\n            \"I\",\n            \"ncols\"\n         ]\n      },\n      \"torch.utils.tensorboard.summary\": {\n         \"_calc_scale_factor\": [\n            \"tensor\"\n         ],\n         \"_draw_single_box\": [\n            \"image\",\n            \"xmin\",\n            \"ymin\",\n            \"xmax\",\n            \"ymax\",\n            \"display_str\",\n            \"color\",\n            \"color_text\",\n            \"thickness\"\n         ],\n         \"_get_json_config\": [\n            \"config_dict\"\n         ],\n         \"_get_tensor_summary\": [\n            \"name\",\n            \"display_name\",\n            \"description\",\n            \"tensor\",\n            \"content_type\",\n            \"components\",\n            \"json_config\"\n         ],\n         \"audio\": [\n            \"tag\",\n            \"tensor\",\n            \"sample_rate\"\n         ],\n         \"compute_curve\": [\n            \"labels\",\n            \"predictions\",\n            \"num_thresholds\",\n            \"weights\"\n         ],\n         \"custom_scalars\": [\n            \"layout\"\n         ],\n         \"draw_boxes\": [\n            \"disp_image\",\n            \"boxes\",\n            \"labels\"\n         ],\n         \"histogram\": [\n            \"name\",\n            \"values\",\n            \"bins\",\n            \"max_bins\"\n         ],\n         \"histogram_raw\": [\n            \"name\",\n            \"min\",\n            \"max\",\n            \"num\",\n            \"sum\",\n            \"sum_squares\",\n            \"bucket_limits\",\n            \"bucket_counts\"\n         ],\n         \"hparams\": [\n            \"hparam_dict\",\n            \"metric_dict\"\n         ],\n         \"image\": [\n            \"tag\",\n            \"tensor\",\n            \"rescale\",\n            \"dataformats\"\n         ],\n         \"image_boxes\": [\n            \"tag\",\n            \"tensor_image\",\n            \"tensor_boxes\",\n            \"rescale\",\n            \"dataformats\",\n            \"labels\"\n         ],\n         \"make_histogram\": [\n            \"values\",\n            \"bins\",\n            \"max_bins\"\n         ],\n         \"make_image\": [\n            \"tensor\",\n            \"rescale\",\n            \"rois\",\n            \"labels\"\n         ],\n         \"make_video\": [\n            \"tensor\",\n            \"fps\"\n         ],\n         \"mesh\": [\n            \"tag\",\n            \"vertices\",\n            \"colors\",\n            \"faces\",\n            \"config_dict\",\n            \"display_name\",\n            \"description\"\n         ],\n         \"pr_curve\": [\n            \"tag\",\n            \"labels\",\n            \"predictions\",\n            \"num_thresholds\",\n            \"weights\"\n         ],\n         \"pr_curve_raw\": [\n            \"tag\",\n            \"tp\",\n            \"fp\",\n            \"tn\",\n            \"fn\",\n            \"precision\",\n            \"recall\",\n            \"num_thresholds\",\n            \"weights\"\n         ],\n         \"scalar\": [\n            \"name\",\n            \"scalar\",\n            \"collections\"\n         ],\n         \"text\": [\n            \"tag\",\n            \"text\"\n         ],\n         \"video\": [\n            \"tag\",\n            \"tensor\",\n            \"fps\"\n         ]\n      },\n      \"torch.utils.throughput_benchmark\": {\n         \"format_time\": [\n            \"time_us\",\n            \"time_ms\",\n            \"time_s\"\n         ]\n      }\n   },\n   \"method\": {\n      \"torch._VF\": {\n         \"VFModule\": {\n            \"__getattr__\": [\n               \"self\",\n               \"attr\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"name\"\n            ]\n         }\n      },\n      \"torch.__init__\": {\n         \"QInt32Storage\": {}\n      },\n      \"torch._appdirs\": {\n         \"AppDirs\": {\n            \"__init__\": [\n               \"self\",\n               \"appname\",\n               \"appauthor\",\n               \"version\",\n               \"roaming\",\n               \"multipath\"\n            ],\n            \"site_config_dir\": [\n               \"self\"\n            ],\n            \"site_data_dir\": [\n               \"self\"\n            ],\n            \"user_cache_dir\": [\n               \"self\"\n            ],\n            \"user_config_dir\": [\n               \"self\"\n            ],\n            \"user_data_dir\": [\n               \"self\"\n            ],\n            \"user_log_dir\": [\n               \"self\"\n            ],\n            \"user_state_dir\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch._classes\": {\n         \"_Classes\": {\n            \"__getattr__\": [\n               \"self\",\n               \"name\"\n            ],\n            \"__init__\": [\n               \"self\"\n            ],\n            \"load_library\": [\n               \"self\",\n               \"path\"\n            ],\n            \"loaded_libraries\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch._jit_internal\": {\n         \"SourceContext\": {\n            \"__init__\": [\n               \"self\",\n               \"source\",\n               \"filename\",\n               \"file_lineno\",\n               \"leading_whitespace_len\",\n               \"uses_true_division\"\n            ]\n         }\n      },\n      \"torch._lobpcg\": {\n         \"LOBPCG\": {\n            \"__init__\": [\n               \"self\",\n               \"A\",\n               \"B\",\n               \"X\",\n               \"iK\",\n               \"iparams\",\n               \"fparams\",\n               \"bparams\",\n               \"method\",\n               \"tracker\"\n            ],\n            \"__str__\": [\n               \"self\"\n            ],\n            \"_get_ortho\": [\n               \"self\",\n               \"U\",\n               \"V\"\n            ],\n            \"_get_rayleigh_ritz_transform\": [\n               \"self\",\n               \"S\"\n            ],\n            \"_get_svqb\": [\n               \"self\",\n               \"U\",\n               \"drop\",\n               \"tau\"\n            ],\n            \"_update_basic\": [\n               \"self\"\n            ],\n            \"_update_ortho\": [\n               \"self\"\n            ],\n            \"call_tracker\": [\n               \"self\"\n            ],\n            \"run\": [\n               \"self\"\n            ],\n            \"stop_iteration\": [\n               \"self\"\n            ],\n            \"update\": [\n               \"self\"\n            ],\n            \"update_converged_count\": [\n               \"self\"\n            ],\n            \"update_residual\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch._ops\": {\n         \"_Ops\": {\n            \"__getattr__\": [\n               \"self\",\n               \"name\"\n            ],\n            \"__init__\": [\n               \"self\"\n            ],\n            \"load_library\": [\n               \"self\",\n               \"path\"\n            ]\n         }\n      },\n      \"torch._tensor_str\": {\n         \"_Formatter\": {\n            \"__init__\": [\n               \"self\",\n               \"tensor\"\n            ],\n            \"format\": [\n               \"self\",\n               \"value\"\n            ],\n            \"width\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch._utils\": {\n         \"ExceptionWrapper\": {\n            \"__init__\": [\n               \"self\",\n               \"exc_info\",\n               \"where\"\n            ],\n            \"reraise\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.autograd._functions.tensor\": {\n         \"Resize\": {\n            \"backward\": [\n               \"ctx\",\n               \"grad_output\"\n            ],\n            \"forward\": [\n               \"ctx\",\n               \"tensor\",\n               \"sizes\"\n            ]\n         }\n      },\n      \"torch.autograd.anomaly_mode\": {\n         \"set_detect_anomaly\": {\n            \"__enter__\": [\n               \"self\"\n            ],\n            \"__exit__\": [\n               \"self\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"mode\"\n            ]\n         }\n      },\n      \"torch.autograd.function\": {\n         \"NestedIOFunction\": {\n            \"_do_backward\": [\n               \"self\",\n               \"gradients\",\n               \"retain_variables\"\n            ],\n            \"_do_forward\": [\n               \"self\"\n            ],\n            \"backward\": [\n               \"self\"\n            ],\n            \"backward_extended\": [\n               \"self\"\n            ],\n            \"forward\": [\n               \"self\"\n            ],\n            \"forward_extended\": [\n               \"self\"\n            ],\n            \"mark_dirty\": [\n               \"self\"\n            ],\n            \"mark_non_differentiable\": [\n               \"self\"\n            ],\n            \"save_for_backward\": [\n               \"self\"\n            ],\n            \"saved_tensors\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.autograd.grad_mode\": {\n         \"set_grad_enabled\": {\n            \"__enter__\": [\n               \"self\"\n            ],\n            \"__exit__\": [\n               \"self\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"mode\"\n            ]\n         }\n      },\n      \"torch.autograd.profiler\": {\n         \"EnforceUnique\": {\n            \"__init__\": [\n               \"self\"\n            ],\n            \"see\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.autograd.variable\": {\n         \"Variable\": {}\n      },\n      \"torch.backends.__init__\": {\n         \"PropModule\": {\n            \"__getattr__\": [\n               \"self\",\n               \"attr\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"m\",\n               \"name\"\n            ]\n         }\n      },\n      \"torch.backends.cuda.__init__\": {\n         \"CUDAModule\": {\n            \"__init__\": [\n               \"self\",\n               \"m\"\n            ]\n         }\n      },\n      \"torch.backends.cudnn.__init__\": {\n         \"CudnnModule\": {\n            \"__init__\": [\n               \"self\",\n               \"m\",\n               \"name\"\n            ]\n         }\n      },\n      \"torch.backends.cudnn.rnn\": {\n         \"Unserializable\": {\n            \"__getstate__\": [\n               \"self\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"inner\"\n            ],\n            \"__setstate__\": [\n               \"self\",\n               \"state\"\n            ],\n            \"get\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.backends.mkldnn.__init__\": {\n         \"MkldnnModule\": {\n            \"__init__\": [\n               \"self\",\n               \"m\",\n               \"name\"\n            ]\n         }\n      },\n      \"torch.backends.quantized.__init__\": {\n         \"QuantizedEngine\": {\n            \"__getattr__\": [\n               \"self\",\n               \"attr\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"m\",\n               \"name\"\n            ]\n         }\n      },\n      \"torch.backends.xnnpack.__init__\": {\n         \"XNNPACKEngine\": {\n            \"__getattr__\": [\n               \"self\",\n               \"attr\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"m\",\n               \"name\"\n            ]\n         }\n      },\n      \"torch.cuda.__init__\": {\n         \"ComplexFloatStorage\": {}\n      },\n      \"torch.cuda.amp.autocast_mode\": {\n         \"autocast\": {\n            \"__call__\": [\n               \"self\",\n               \"func\"\n            ],\n            \"__enter__\": [\n               \"self\"\n            ],\n            \"__exit__\": [\n               \"self\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"enabled\"\n            ]\n         }\n      },\n      \"torch.cuda.amp.grad_scaler\": {\n         \"GradScaler\": {\n            \"__init__\": [\n               \"self\",\n               \"init_scale\",\n               \"growth_factor\",\n               \"backoff_factor\",\n               \"growth_interval\",\n               \"enabled\"\n            ],\n            \"_check_inf_per_device\": [\n               \"self\",\n               \"optimizer\"\n            ],\n            \"_check_scale_growth_tracker\": [\n               \"self\",\n               \"funcname\"\n            ],\n            \"_found_inf_per_device\": [\n               \"self\",\n               \"optimizer\"\n            ],\n            \"_get_growth_tracker\": [\n               \"self\"\n            ],\n            \"_get_scale_async\": [\n               \"self\"\n            ],\n            \"_lazy_init_scale_growth_tracker\": [\n               \"self\",\n               \"dev\"\n            ],\n            \"_unscale_grads_\": [\n               \"self\",\n               \"optimizer\",\n               \"inv_scale\",\n               \"found_inf\",\n               \"allow_fp16\"\n            ],\n            \"get_backoff_factor\": [\n               \"self\"\n            ],\n            \"get_growth_factor\": [\n               \"self\"\n            ],\n            \"get_growth_interval\": [\n               \"self\"\n            ],\n            \"get_scale\": [\n               \"self\"\n            ],\n            \"is_enabled\": [\n               \"self\"\n            ],\n            \"load_state_dict\": [\n               \"self\",\n               \"state_dict\"\n            ],\n            \"scale\": [\n               \"self\",\n               \"outputs\"\n            ],\n            \"set_backoff_factor\": [\n               \"self\",\n               \"new_factor\"\n            ],\n            \"set_growth_factor\": [\n               \"self\",\n               \"new_factor\"\n            ],\n            \"set_growth_interval\": [\n               \"self\",\n               \"new_interval\"\n            ],\n            \"state_dict\": [\n               \"self\"\n            ],\n            \"step\": [\n               \"self\",\n               \"optimizer\"\n            ],\n            \"unscale_\": [\n               \"self\",\n               \"optimizer\"\n            ],\n            \"update\": [\n               \"self\",\n               \"new_scale\"\n            ]\n         }\n      },\n      \"torch.cuda.nvtx\": {\n         \"_NVTXStub\": {\n            \"_fail\": []\n         }\n      },\n      \"torch.cuda.streams\": {\n         \"Event\": {\n            \"__new__\": [\n               \"cls\",\n               \"enable_timing\",\n               \"blocking\",\n               \"interprocess\"\n            ],\n            \"__repr__\": [\n               \"self\"\n            ],\n            \"_as_parameter_\": [\n               \"self\"\n            ],\n            \"elapsed_time\": [\n               \"self\",\n               \"end_event\"\n            ],\n            \"from_ipc_handle\": [\n               \"cls\",\n               \"device\",\n               \"handle\"\n            ],\n            \"ipc_handle\": [\n               \"self\"\n            ],\n            \"query\": [\n               \"self\"\n            ],\n            \"record\": [\n               \"self\",\n               \"stream\"\n            ],\n            \"synchronize\": [\n               \"self\"\n            ],\n            \"wait\": [\n               \"self\",\n               \"stream\"\n            ]\n         }\n      },\n      \"torch.distributed.autograd.__init__\": {\n         \"context\": {\n            \"__enter__\": [\n               \"self\"\n            ],\n            \"__exit__\": [\n               \"self\",\n               \"type\",\n               \"value\",\n               \"traceback\"\n            ]\n         }\n      },\n      \"torch.distributed.distributed_c10d\": {\n         \"GroupMember\": {}\n      },\n      \"torch.distributed.optim.optimizer\": {\n         \"DistributedOptimizer\": {\n            \"__init__\": [\n               \"self\",\n               \"optimizer_class\",\n               \"params_rref\"\n            ],\n            \"step\": [\n               \"self\",\n               \"context_id\"\n            ]\n         }\n      },\n      \"torch.distributed.rpc.api\": {\n         \"WaitAllWorkersStates\": {\n            \"__init__\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.distributed.rpc.internal\": {\n         \"_InternalRPCPickler\": {\n            \"__init__\": [\n               \"self\"\n            ],\n            \"_rref_receiver\": [\n               \"cls\",\n               \"rref_fork_data\"\n            ],\n            \"_rref_reducer\": [\n               \"self\",\n               \"rref\"\n            ],\n            \"_tensor_receiver\": [\n               \"cls\",\n               \"tensor_index\"\n            ],\n            \"_tensor_reducer\": [\n               \"self\",\n               \"tensor\"\n            ],\n            \"deserialize\": [\n               \"self\",\n               \"binary_data\",\n               \"tensor_table\"\n            ],\n            \"serialize\": [\n               \"self\",\n               \"obj\"\n            ]\n         }\n      },\n      \"torch.distributed.rpc.rref_proxy\": {\n         \"RRefProxy\": {\n            \"__getattr__\": [\n               \"self\",\n               \"func_name\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"rref\",\n               \"rpc_api\"\n            ]\n         }\n      },\n      \"torch.distributions.bernoulli\": {\n         \"Bernoulli\": {\n            \"__init__\": [\n               \"self\",\n               \"probs\",\n               \"logits\",\n               \"validate_args\"\n            ],\n            \"_log_normalizer\": [\n               \"self\",\n               \"x\"\n            ],\n            \"_natural_params\": [\n               \"self\"\n            ],\n            \"_new\": [\n               \"self\"\n            ],\n            \"entropy\": [\n               \"self\"\n            ],\n            \"enumerate_support\": [\n               \"self\",\n               \"expand\"\n            ],\n            \"expand\": [\n               \"self\",\n               \"batch_shape\",\n               \"_instance\"\n            ],\n            \"log_prob\": [\n               \"self\",\n               \"value\"\n            ],\n            \"logits\": [\n               \"self\"\n            ],\n            \"mean\": [\n               \"self\"\n            ],\n            \"param_shape\": [\n               \"self\"\n            ],\n            \"probs\": [\n               \"self\"\n            ],\n            \"sample\": [\n               \"self\",\n               \"sample_shape\"\n            ],\n            \"variance\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.distributions.beta\": {\n         \"Beta\": {\n            \"__init__\": [\n               \"self\",\n               \"concentration1\",\n               \"concentration0\",\n               \"validate_args\"\n            ],\n            \"_log_normalizer\": [\n               \"self\",\n               \"x\",\n               \"y\"\n            ],\n            \"_natural_params\": [\n               \"self\"\n            ],\n            \"concentration0\": [\n               \"self\"\n            ],\n            \"concentration1\": [\n               \"self\"\n            ],\n            \"entropy\": [\n               \"self\"\n            ],\n            \"expand\": [\n               \"self\",\n               \"batch_shape\",\n               \"_instance\"\n            ],\n            \"log_prob\": [\n               \"self\",\n               \"value\"\n            ],\n            \"mean\": [\n               \"self\"\n            ],\n            \"rsample\": [\n               \"self\",\n               \"sample_shape\"\n            ],\n            \"variance\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.distributions.binomial\": {\n         \"Binomial\": {\n            \"__init__\": [\n               \"self\",\n               \"total_count\",\n               \"probs\",\n               \"logits\",\n               \"validate_args\"\n            ],\n            \"_new\": [\n               \"self\"\n            ],\n            \"enumerate_support\": [\n               \"self\",\n               \"expand\"\n            ],\n            \"expand\": [\n               \"self\",\n               \"batch_shape\",\n               \"_instance\"\n            ],\n            \"log_prob\": [\n               \"self\",\n               \"value\"\n            ],\n            \"logits\": [\n               \"self\"\n            ],\n            \"mean\": [\n               \"self\"\n            ],\n            \"param_shape\": [\n               \"self\"\n            ],\n            \"probs\": [\n               \"self\"\n            ],\n            \"sample\": [\n               \"self\",\n               \"sample_shape\"\n            ],\n            \"support\": [\n               \"self\"\n            ],\n            \"variance\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.distributions.categorical\": {\n         \"Categorical\": {\n            \"__init__\": [\n               \"self\",\n               \"probs\",\n               \"logits\",\n               \"validate_args\"\n            ],\n            \"_new\": [\n               \"self\"\n            ],\n            \"entropy\": [\n               \"self\"\n            ],\n            \"enumerate_support\": [\n               \"self\",\n               \"expand\"\n            ],\n            \"expand\": [\n               \"self\",\n               \"batch_shape\",\n               \"_instance\"\n            ],\n            \"log_prob\": [\n               \"self\",\n               \"value\"\n            ],\n            \"logits\": [\n               \"self\"\n            ],\n            \"mean\": [\n               \"self\"\n            ],\n            \"param_shape\": [\n               \"self\"\n            ],\n            \"probs\": [\n               \"self\"\n            ],\n            \"sample\": [\n               \"self\",\n               \"sample_shape\"\n            ],\n            \"support\": [\n               \"self\"\n            ],\n            \"variance\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.distributions.cauchy\": {\n         \"Cauchy\": {\n            \"__init__\": [\n               \"self\",\n               \"loc\",\n               \"scale\",\n               \"validate_args\"\n            ],\n            \"cdf\": [\n               \"self\",\n               \"value\"\n            ],\n            \"entropy\": [\n               \"self\"\n            ],\n            \"expand\": [\n               \"self\",\n               \"batch_shape\",\n               \"_instance\"\n            ],\n            \"icdf\": [\n               \"self\",\n               \"value\"\n            ],\n            \"log_prob\": [\n               \"self\",\n               \"value\"\n            ],\n            \"mean\": [\n               \"self\"\n            ],\n            \"rsample\": [\n               \"self\",\n               \"sample_shape\"\n            ],\n            \"variance\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.distributions.chi2\": {\n         \"Chi2\": {\n            \"__init__\": [\n               \"self\",\n               \"df\",\n               \"validate_args\"\n            ],\n            \"df\": [\n               \"self\"\n            ],\n            \"expand\": [\n               \"self\",\n               \"batch_shape\",\n               \"_instance\"\n            ]\n         }\n      },\n      \"torch.distributions.constraint_registry\": {\n         \"ConstraintRegistry\": {\n            \"__call__\": [\n               \"self\",\n               \"constraint\"\n            ],\n            \"__init__\": [\n               \"self\"\n            ],\n            \"register\": [\n               \"self\",\n               \"constraint\",\n               \"factory\"\n            ]\n         }\n      },\n      \"torch.distributions.constraints\": {\n         \"_Stack\": {\n            \"__init__\": [\n               \"self\",\n               \"cseq\",\n               \"dim\"\n            ],\n            \"check\": [\n               \"self\",\n               \"value\"\n            ]\n         }\n      },\n      \"torch.distributions.continuous_bernoulli\": {\n         \"ContinuousBernoulli\": {\n            \"__init__\": [\n               \"self\",\n               \"probs\",\n               \"logits\",\n               \"lims\",\n               \"validate_args\"\n            ],\n            \"_cont_bern_log_norm\": [\n               \"self\"\n            ],\n            \"_cut_probs\": [\n               \"self\"\n            ],\n            \"_log_normalizer\": [\n               \"self\",\n               \"x\"\n            ],\n            \"_natural_params\": [\n               \"self\"\n            ],\n            \"_new\": [\n               \"self\"\n            ],\n            \"_outside_unstable_region\": [\n               \"self\"\n            ],\n            \"cdf\": [\n               \"self\",\n               \"value\"\n            ],\n            \"entropy\": [\n               \"self\"\n            ],\n            \"expand\": [\n               \"self\",\n               \"batch_shape\",\n               \"_instance\"\n            ],\n            \"icdf\": [\n               \"self\",\n               \"value\"\n            ],\n            \"log_prob\": [\n               \"self\",\n               \"value\"\n            ],\n            \"logits\": [\n               \"self\"\n            ],\n            \"mean\": [\n               \"self\"\n            ],\n            \"param_shape\": [\n               \"self\"\n            ],\n            \"probs\": [\n               \"self\"\n            ],\n            \"rsample\": [\n               \"self\",\n               \"sample_shape\"\n            ],\n            \"sample\": [\n               \"self\",\n               \"sample_shape\"\n            ],\n            \"stddev\": [\n               \"self\"\n            ],\n            \"variance\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.distributions.dirichlet\": {\n         \"Dirichlet\": {\n            \"__init__\": [\n               \"self\",\n               \"concentration\",\n               \"validate_args\"\n            ],\n            \"_log_normalizer\": [\n               \"self\",\n               \"x\"\n            ],\n            \"_natural_params\": [\n               \"self\"\n            ],\n            \"entropy\": [\n               \"self\"\n            ],\n            \"expand\": [\n               \"self\",\n               \"batch_shape\",\n               \"_instance\"\n            ],\n            \"log_prob\": [\n               \"self\",\n               \"value\"\n            ],\n            \"mean\": [\n               \"self\"\n            ],\n            \"rsample\": [\n               \"self\",\n               \"sample_shape\"\n            ],\n            \"variance\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.distributions.distribution\": {\n         \"Distribution\": {\n            \"__init__\": [\n               \"self\",\n               \"batch_shape\",\n               \"event_shape\",\n               \"validate_args\"\n            ],\n            \"__repr__\": [\n               \"self\"\n            ],\n            \"_extended_shape\": [\n               \"self\",\n               \"sample_shape\"\n            ],\n            \"_get_checked_instance\": [\n               \"self\",\n               \"cls\",\n               \"_instance\"\n            ],\n            \"_validate_sample\": [\n               \"self\",\n               \"value\"\n            ],\n            \"arg_constraints\": [\n               \"self\"\n            ],\n            \"batch_shape\": [\n               \"self\"\n            ],\n            \"cdf\": [\n               \"self\",\n               \"value\"\n            ],\n            \"entropy\": [\n               \"self\"\n            ],\n            \"enumerate_support\": [\n               \"self\",\n               \"expand\"\n            ],\n            \"event_shape\": [\n               \"self\"\n            ],\n            \"expand\": [\n               \"self\",\n               \"batch_shape\",\n               \"_instance\"\n            ],\n            \"icdf\": [\n               \"self\",\n               \"value\"\n            ],\n            \"log_prob\": [\n               \"self\",\n               \"value\"\n            ],\n            \"mean\": [\n               \"self\"\n            ],\n            \"perplexity\": [\n               \"self\"\n            ],\n            \"rsample\": [\n               \"self\",\n               \"sample_shape\"\n            ],\n            \"sample\": [\n               \"self\",\n               \"sample_shape\"\n            ],\n            \"sample_n\": [\n               \"self\",\n               \"n\"\n            ],\n            \"set_default_validate_args\": [\n               \"value\"\n            ],\n            \"stddev\": [\n               \"self\"\n            ],\n            \"support\": [\n               \"self\"\n            ],\n            \"variance\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.distributions.exp_family\": {\n         \"ExponentialFamily\": {\n            \"_log_normalizer\": [\n               \"self\"\n            ],\n            \"_mean_carrier_measure\": [\n               \"self\"\n            ],\n            \"_natural_params\": [\n               \"self\"\n            ],\n            \"entropy\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.distributions.exponential\": {\n         \"Exponential\": {\n            \"__init__\": [\n               \"self\",\n               \"rate\",\n               \"validate_args\"\n            ],\n            \"_log_normalizer\": [\n               \"self\",\n               \"x\"\n            ],\n            \"_natural_params\": [\n               \"self\"\n            ],\n            \"cdf\": [\n               \"self\",\n               \"value\"\n            ],\n            \"entropy\": [\n               \"self\"\n            ],\n            \"expand\": [\n               \"self\",\n               \"batch_shape\",\n               \"_instance\"\n            ],\n            \"icdf\": [\n               \"self\",\n               \"value\"\n            ],\n            \"log_prob\": [\n               \"self\",\n               \"value\"\n            ],\n            \"mean\": [\n               \"self\"\n            ],\n            \"rsample\": [\n               \"self\",\n               \"sample_shape\"\n            ],\n            \"stddev\": [\n               \"self\"\n            ],\n            \"variance\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.distributions.fishersnedecor\": {\n         \"FisherSnedecor\": {\n            \"__init__\": [\n               \"self\",\n               \"df1\",\n               \"df2\",\n               \"validate_args\"\n            ],\n            \"expand\": [\n               \"self\",\n               \"batch_shape\",\n               \"_instance\"\n            ],\n            \"log_prob\": [\n               \"self\",\n               \"value\"\n            ],\n            \"mean\": [\n               \"self\"\n            ],\n            \"rsample\": [\n               \"self\",\n               \"sample_shape\"\n            ],\n            \"variance\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.distributions.gamma\": {\n         \"Gamma\": {\n            \"__init__\": [\n               \"self\",\n               \"concentration\",\n               \"rate\",\n               \"validate_args\"\n            ],\n            \"_log_normalizer\": [\n               \"self\",\n               \"x\",\n               \"y\"\n            ],\n            \"_natural_params\": [\n               \"self\"\n            ],\n            \"entropy\": [\n               \"self\"\n            ],\n            \"expand\": [\n               \"self\",\n               \"batch_shape\",\n               \"_instance\"\n            ],\n            \"log_prob\": [\n               \"self\",\n               \"value\"\n            ],\n            \"mean\": [\n               \"self\"\n            ],\n            \"rsample\": [\n               \"self\",\n               \"sample_shape\"\n            ],\n            \"variance\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.distributions.geometric\": {\n         \"Geometric\": {\n            \"__init__\": [\n               \"self\",\n               \"probs\",\n               \"logits\",\n               \"validate_args\"\n            ],\n            \"entropy\": [\n               \"self\"\n            ],\n            \"expand\": [\n               \"self\",\n               \"batch_shape\",\n               \"_instance\"\n            ],\n            \"log_prob\": [\n               \"self\",\n               \"value\"\n            ],\n            \"logits\": [\n               \"self\"\n            ],\n            \"mean\": [\n               \"self\"\n            ],\n            \"probs\": [\n               \"self\"\n            ],\n            \"sample\": [\n               \"self\",\n               \"sample_shape\"\n            ],\n            \"variance\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.distributions.gumbel\": {\n         \"Gumbel\": {\n            \"__init__\": [\n               \"self\",\n               \"loc\",\n               \"scale\",\n               \"validate_args\"\n            ],\n            \"entropy\": [\n               \"self\"\n            ],\n            \"expand\": [\n               \"self\",\n               \"batch_shape\",\n               \"_instance\"\n            ],\n            \"log_prob\": [\n               \"self\",\n               \"value\"\n            ],\n            \"mean\": [\n               \"self\"\n            ],\n            \"stddev\": [\n               \"self\"\n            ],\n            \"variance\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.distributions.half_cauchy\": {\n         \"HalfCauchy\": {\n            \"__init__\": [\n               \"self\",\n               \"scale\",\n               \"validate_args\"\n            ],\n            \"cdf\": [\n               \"self\",\n               \"value\"\n            ],\n            \"entropy\": [\n               \"self\"\n            ],\n            \"expand\": [\n               \"self\",\n               \"batch_shape\",\n               \"_instance\"\n            ],\n            \"icdf\": [\n               \"self\",\n               \"prob\"\n            ],\n            \"log_prob\": [\n               \"self\",\n               \"value\"\n            ],\n            \"mean\": [\n               \"self\"\n            ],\n            \"scale\": [\n               \"self\"\n            ],\n            \"variance\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.distributions.half_normal\": {\n         \"HalfNormal\": {\n            \"__init__\": [\n               \"self\",\n               \"scale\",\n               \"validate_args\"\n            ],\n            \"cdf\": [\n               \"self\",\n               \"value\"\n            ],\n            \"entropy\": [\n               \"self\"\n            ],\n            \"expand\": [\n               \"self\",\n               \"batch_shape\",\n               \"_instance\"\n            ],\n            \"icdf\": [\n               \"self\",\n               \"prob\"\n            ],\n            \"log_prob\": [\n               \"self\",\n               \"value\"\n            ],\n            \"mean\": [\n               \"self\"\n            ],\n            \"scale\": [\n               \"self\"\n            ],\n            \"variance\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.distributions.independent\": {\n         \"Independent\": {\n            \"__init__\": [\n               \"self\",\n               \"base_distribution\",\n               \"reinterpreted_batch_ndims\",\n               \"validate_args\"\n            ],\n            \"__repr__\": [\n               \"self\"\n            ],\n            \"entropy\": [\n               \"self\"\n            ],\n            \"enumerate_support\": [\n               \"self\",\n               \"expand\"\n            ],\n            \"expand\": [\n               \"self\",\n               \"batch_shape\",\n               \"_instance\"\n            ],\n            \"has_enumerate_support\": [\n               \"self\"\n            ],\n            \"has_rsample\": [\n               \"self\"\n            ],\n            \"log_prob\": [\n               \"self\",\n               \"value\"\n            ],\n            \"mean\": [\n               \"self\"\n            ],\n            \"rsample\": [\n               \"self\",\n               \"sample_shape\"\n            ],\n            \"sample\": [\n               \"self\",\n               \"sample_shape\"\n            ],\n            \"support\": [\n               \"self\"\n            ],\n            \"variance\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.distributions.kl\": {\n         \"_Match\": {\n            \"__eq__\": [\n               \"self\",\n               \"other\"\n            ],\n            \"__init__\": [\n               \"self\"\n            ],\n            \"__le__\": [\n               \"self\",\n               \"other\"\n            ]\n         }\n      },\n      \"torch.distributions.laplace\": {\n         \"Laplace\": {\n            \"__init__\": [\n               \"self\",\n               \"loc\",\n               \"scale\",\n               \"validate_args\"\n            ],\n            \"cdf\": [\n               \"self\",\n               \"value\"\n            ],\n            \"entropy\": [\n               \"self\"\n            ],\n            \"expand\": [\n               \"self\",\n               \"batch_shape\",\n               \"_instance\"\n            ],\n            \"icdf\": [\n               \"self\",\n               \"value\"\n            ],\n            \"log_prob\": [\n               \"self\",\n               \"value\"\n            ],\n            \"mean\": [\n               \"self\"\n            ],\n            \"rsample\": [\n               \"self\",\n               \"sample_shape\"\n            ],\n            \"stddev\": [\n               \"self\"\n            ],\n            \"variance\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.distributions.log_normal\": {\n         \"LogNormal\": {\n            \"__init__\": [\n               \"self\",\n               \"loc\",\n               \"scale\",\n               \"validate_args\"\n            ],\n            \"entropy\": [\n               \"self\"\n            ],\n            \"expand\": [\n               \"self\",\n               \"batch_shape\",\n               \"_instance\"\n            ],\n            \"loc\": [\n               \"self\"\n            ],\n            \"mean\": [\n               \"self\"\n            ],\n            \"scale\": [\n               \"self\"\n            ],\n            \"variance\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.distributions.logistic_normal\": {\n         \"LogisticNormal\": {\n            \"__init__\": [\n               \"self\",\n               \"loc\",\n               \"scale\",\n               \"validate_args\"\n            ],\n            \"expand\": [\n               \"self\",\n               \"batch_shape\",\n               \"_instance\"\n            ],\n            \"loc\": [\n               \"self\"\n            ],\n            \"scale\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.distributions.lowrank_multivariate_normal\": {\n         \"LowRankMultivariateNormal\": {\n            \"__init__\": [\n               \"self\",\n               \"loc\",\n               \"cov_factor\",\n               \"cov_diag\",\n               \"validate_args\"\n            ],\n            \"covariance_matrix\": [\n               \"self\"\n            ],\n            \"entropy\": [\n               \"self\"\n            ],\n            \"expand\": [\n               \"self\",\n               \"batch_shape\",\n               \"_instance\"\n            ],\n            \"log_prob\": [\n               \"self\",\n               \"value\"\n            ],\n            \"mean\": [\n               \"self\"\n            ],\n            \"precision_matrix\": [\n               \"self\"\n            ],\n            \"rsample\": [\n               \"self\",\n               \"sample_shape\"\n            ],\n            \"scale_tril\": [\n               \"self\"\n            ],\n            \"variance\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.distributions.mixture_same_family\": {\n         \"MixtureSameFamily\": {\n            \"__init__\": [\n               \"self\",\n               \"mixture_distribution\",\n               \"component_distribution\",\n               \"validate_args\"\n            ],\n            \"__repr__\": [\n               \"self\"\n            ],\n            \"_pad\": [\n               \"self\",\n               \"x\"\n            ],\n            \"_pad_mixture_dimensions\": [\n               \"self\",\n               \"x\"\n            ],\n            \"cdf\": [\n               \"self\",\n               \"x\"\n            ],\n            \"component_distribution\": [\n               \"self\"\n            ],\n            \"expand\": [\n               \"self\",\n               \"batch_shape\",\n               \"_instance\"\n            ],\n            \"log_prob\": [\n               \"self\",\n               \"x\"\n            ],\n            \"mean\": [\n               \"self\"\n            ],\n            \"mixture_distribution\": [\n               \"self\"\n            ],\n            \"sample\": [\n               \"self\",\n               \"sample_shape\"\n            ],\n            \"support\": [\n               \"self\"\n            ],\n            \"variance\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.distributions.multinomial\": {\n         \"Multinomial\": {\n            \"__init__\": [\n               \"self\",\n               \"total_count\",\n               \"probs\",\n               \"logits\",\n               \"validate_args\"\n            ],\n            \"_new\": [\n               \"self\"\n            ],\n            \"expand\": [\n               \"self\",\n               \"batch_shape\",\n               \"_instance\"\n            ],\n            \"log_prob\": [\n               \"self\",\n               \"value\"\n            ],\n            \"logits\": [\n               \"self\"\n            ],\n            \"mean\": [\n               \"self\"\n            ],\n            \"param_shape\": [\n               \"self\"\n            ],\n            \"probs\": [\n               \"self\"\n            ],\n            \"sample\": [\n               \"self\",\n               \"sample_shape\"\n            ],\n            \"support\": [\n               \"self\"\n            ],\n            \"variance\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.distributions.multivariate_normal\": {\n         \"MultivariateNormal\": {\n            \"__init__\": [\n               \"self\",\n               \"loc\",\n               \"covariance_matrix\",\n               \"precision_matrix\",\n               \"scale_tril\",\n               \"validate_args\"\n            ],\n            \"covariance_matrix\": [\n               \"self\"\n            ],\n            \"entropy\": [\n               \"self\"\n            ],\n            \"expand\": [\n               \"self\",\n               \"batch_shape\",\n               \"_instance\"\n            ],\n            \"log_prob\": [\n               \"self\",\n               \"value\"\n            ],\n            \"mean\": [\n               \"self\"\n            ],\n            \"precision_matrix\": [\n               \"self\"\n            ],\n            \"rsample\": [\n               \"self\",\n               \"sample_shape\"\n            ],\n            \"scale_tril\": [\n               \"self\"\n            ],\n            \"variance\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.distributions.negative_binomial\": {\n         \"NegativeBinomial\": {\n            \"__init__\": [\n               \"self\",\n               \"total_count\",\n               \"probs\",\n               \"logits\",\n               \"validate_args\"\n            ],\n            \"_gamma\": [\n               \"self\"\n            ],\n            \"_new\": [\n               \"self\"\n            ],\n            \"expand\": [\n               \"self\",\n               \"batch_shape\",\n               \"_instance\"\n            ],\n            \"log_prob\": [\n               \"self\",\n               \"value\"\n            ],\n            \"logits\": [\n               \"self\"\n            ],\n            \"mean\": [\n               \"self\"\n            ],\n            \"param_shape\": [\n               \"self\"\n            ],\n            \"probs\": [\n               \"self\"\n            ],\n            \"sample\": [\n               \"self\",\n               \"sample_shape\"\n            ],\n            \"variance\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.distributions.normal\": {\n         \"Normal\": {\n            \"__init__\": [\n               \"self\",\n               \"loc\",\n               \"scale\",\n               \"validate_args\"\n            ],\n            \"_log_normalizer\": [\n               \"self\",\n               \"x\",\n               \"y\"\n            ],\n            \"_natural_params\": [\n               \"self\"\n            ],\n            \"cdf\": [\n               \"self\",\n               \"value\"\n            ],\n            \"entropy\": [\n               \"self\"\n            ],\n            \"expand\": [\n               \"self\",\n               \"batch_shape\",\n               \"_instance\"\n            ],\n            \"icdf\": [\n               \"self\",\n               \"value\"\n            ],\n            \"log_prob\": [\n               \"self\",\n               \"value\"\n            ],\n            \"mean\": [\n               \"self\"\n            ],\n            \"rsample\": [\n               \"self\",\n               \"sample_shape\"\n            ],\n            \"sample\": [\n               \"self\",\n               \"sample_shape\"\n            ],\n            \"stddev\": [\n               \"self\"\n            ],\n            \"variance\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.distributions.one_hot_categorical\": {\n         \"OneHotCategorical\": {\n            \"__init__\": [\n               \"self\",\n               \"probs\",\n               \"logits\",\n               \"validate_args\"\n            ],\n            \"_new\": [\n               \"self\"\n            ],\n            \"_param\": [\n               \"self\"\n            ],\n            \"entropy\": [\n               \"self\"\n            ],\n            \"enumerate_support\": [\n               \"self\",\n               \"expand\"\n            ],\n            \"expand\": [\n               \"self\",\n               \"batch_shape\",\n               \"_instance\"\n            ],\n            \"log_prob\": [\n               \"self\",\n               \"value\"\n            ],\n            \"logits\": [\n               \"self\"\n            ],\n            \"mean\": [\n               \"self\"\n            ],\n            \"param_shape\": [\n               \"self\"\n            ],\n            \"probs\": [\n               \"self\"\n            ],\n            \"sample\": [\n               \"self\",\n               \"sample_shape\"\n            ],\n            \"variance\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.distributions.pareto\": {\n         \"Pareto\": {\n            \"__init__\": [\n               \"self\",\n               \"scale\",\n               \"alpha\",\n               \"validate_args\"\n            ],\n            \"entropy\": [\n               \"self\"\n            ],\n            \"expand\": [\n               \"self\",\n               \"batch_shape\",\n               \"_instance\"\n            ],\n            \"mean\": [\n               \"self\"\n            ],\n            \"support\": [\n               \"self\"\n            ],\n            \"variance\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.distributions.poisson\": {\n         \"Poisson\": {\n            \"__init__\": [\n               \"self\",\n               \"rate\",\n               \"validate_args\"\n            ],\n            \"_log_normalizer\": [\n               \"self\",\n               \"x\"\n            ],\n            \"_natural_params\": [\n               \"self\"\n            ],\n            \"expand\": [\n               \"self\",\n               \"batch_shape\",\n               \"_instance\"\n            ],\n            \"log_prob\": [\n               \"self\",\n               \"value\"\n            ],\n            \"mean\": [\n               \"self\"\n            ],\n            \"sample\": [\n               \"self\",\n               \"sample_shape\"\n            ],\n            \"variance\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.distributions.relaxed_bernoulli\": {\n         \"RelaxedBernoulli\": {\n            \"__init__\": [\n               \"self\",\n               \"temperature\",\n               \"probs\",\n               \"logits\",\n               \"validate_args\"\n            ],\n            \"expand\": [\n               \"self\",\n               \"batch_shape\",\n               \"_instance\"\n            ],\n            \"logits\": [\n               \"self\"\n            ],\n            \"probs\": [\n               \"self\"\n            ],\n            \"temperature\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.distributions.relaxed_categorical\": {\n         \"RelaxedOneHotCategorical\": {\n            \"__init__\": [\n               \"self\",\n               \"temperature\",\n               \"probs\",\n               \"logits\",\n               \"validate_args\"\n            ],\n            \"expand\": [\n               \"self\",\n               \"batch_shape\",\n               \"_instance\"\n            ],\n            \"logits\": [\n               \"self\"\n            ],\n            \"probs\": [\n               \"self\"\n            ],\n            \"temperature\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.distributions.studentT\": {\n         \"StudentT\": {\n            \"__init__\": [\n               \"self\",\n               \"df\",\n               \"loc\",\n               \"scale\",\n               \"validate_args\"\n            ],\n            \"entropy\": [\n               \"self\"\n            ],\n            \"expand\": [\n               \"self\",\n               \"batch_shape\",\n               \"_instance\"\n            ],\n            \"log_prob\": [\n               \"self\",\n               \"value\"\n            ],\n            \"mean\": [\n               \"self\"\n            ],\n            \"rsample\": [\n               \"self\",\n               \"sample_shape\"\n            ],\n            \"variance\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.distributions.transformed_distribution\": {\n         \"TransformedDistribution\": {\n            \"__init__\": [\n               \"self\",\n               \"base_distribution\",\n               \"transforms\",\n               \"validate_args\"\n            ],\n            \"_monotonize_cdf\": [\n               \"self\",\n               \"value\"\n            ],\n            \"cdf\": [\n               \"self\",\n               \"value\"\n            ],\n            \"expand\": [\n               \"self\",\n               \"batch_shape\",\n               \"_instance\"\n            ],\n            \"has_rsample\": [\n               \"self\"\n            ],\n            \"icdf\": [\n               \"self\",\n               \"value\"\n            ],\n            \"log_prob\": [\n               \"self\",\n               \"value\"\n            ],\n            \"rsample\": [\n               \"self\",\n               \"sample_shape\"\n            ],\n            \"sample\": [\n               \"self\",\n               \"sample_shape\"\n            ],\n            \"support\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.distributions.transforms\": {\n         \"StackTransform\": {\n            \"__init__\": [\n               \"self\",\n               \"tseq\",\n               \"dim\",\n               \"cache_size\"\n            ],\n            \"_call\": [\n               \"self\",\n               \"x\"\n            ],\n            \"_inverse\": [\n               \"self\",\n               \"y\"\n            ],\n            \"_slice\": [\n               \"self\",\n               \"z\"\n            ],\n            \"bijective\": [\n               \"self\"\n            ],\n            \"codomain\": [\n               \"self\"\n            ],\n            \"domain\": [\n               \"self\"\n            ],\n            \"log_abs_det_jacobian\": [\n               \"self\",\n               \"x\",\n               \"y\"\n            ],\n            \"with_cache\": [\n               \"self\",\n               \"cache_size\"\n            ]\n         }\n      },\n      \"torch.distributions.uniform\": {\n         \"Uniform\": {\n            \"__init__\": [\n               \"self\",\n               \"low\",\n               \"high\",\n               \"validate_args\"\n            ],\n            \"cdf\": [\n               \"self\",\n               \"value\"\n            ],\n            \"entropy\": [\n               \"self\"\n            ],\n            \"expand\": [\n               \"self\",\n               \"batch_shape\",\n               \"_instance\"\n            ],\n            \"icdf\": [\n               \"self\",\n               \"value\"\n            ],\n            \"log_prob\": [\n               \"self\",\n               \"value\"\n            ],\n            \"mean\": [\n               \"self\"\n            ],\n            \"rsample\": [\n               \"self\",\n               \"sample_shape\"\n            ],\n            \"stddev\": [\n               \"self\"\n            ],\n            \"support\": [\n               \"self\"\n            ],\n            \"variance\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.distributions.utils\": {\n         \"lazy_property\": {\n            \"__get__\": [\n               \"self\",\n               \"instance\",\n               \"obj_type\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"wrapped\"\n            ]\n         }\n      },\n      \"torch.distributions.von_mises\": {\n         \"VonMises\": {\n            \"__init__\": [\n               \"self\",\n               \"loc\",\n               \"concentration\",\n               \"validate_args\"\n            ],\n            \"expand\": [\n               \"self\",\n               \"batch_shape\"\n            ],\n            \"log_prob\": [\n               \"self\",\n               \"value\"\n            ],\n            \"mean\": [\n               \"self\"\n            ],\n            \"sample\": [\n               \"self\",\n               \"sample_shape\"\n            ],\n            \"variance\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.distributions.weibull\": {\n         \"Weibull\": {\n            \"__init__\": [\n               \"self\",\n               \"scale\",\n               \"concentration\",\n               \"validate_args\"\n            ],\n            \"entropy\": [\n               \"self\"\n            ],\n            \"expand\": [\n               \"self\",\n               \"batch_shape\",\n               \"_instance\"\n            ],\n            \"mean\": [\n               \"self\"\n            ],\n            \"variance\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.hub\": {\n         \"tqdm\": {\n            \"__enter__\": [\n               \"self\"\n            ],\n            \"__exit__\": [\n               \"self\",\n               \"exc_type\",\n               \"exc_val\",\n               \"exc_tb\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"total\",\n               \"disable\",\n               \"unit\",\n               \"unit_scale\",\n               \"unit_divisor\"\n            ],\n            \"update\": [\n               \"self\",\n               \"n\"\n            ]\n         }\n      },\n      \"torch.jit.__init__\": {\n         \"_disable_tracing\": {\n            \"__enter__\": [\n               \"self\"\n            ],\n            \"__exit__\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.jit._recursive\": {\n         \"ConcreteTypeStore\": {\n            \"__init__\": [\n               \"self\"\n            ],\n            \"get_or_create_concrete_type\": [\n               \"self\",\n               \"nn_module\"\n            ]\n         }\n      },\n      \"torch.jit.annotations\": {\n         \"EvalEnv\": {\n            \"__getitem__\": [\n               \"self\",\n               \"name\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"rcb\"\n            ]\n         }\n      },\n      \"torch.jit.frontend\": {\n         \"ExprBuilder\": {\n            \"build_Attribute\": [\n               \"ctx\",\n               \"expr\"\n            ],\n            \"build_BinOp\": [\n               \"ctx\",\n               \"expr\"\n            ],\n            \"build_BoolOp\": [\n               \"ctx\",\n               \"expr\"\n            ],\n            \"build_Call\": [\n               \"ctx\",\n               \"expr\"\n            ],\n            \"build_Compare\": [\n               \"ctx\",\n               \"expr\"\n            ],\n            \"build_Constant\": [\n               \"ctx\",\n               \"expr\"\n            ],\n            \"build_Dict\": [\n               \"ctx\",\n               \"expr\"\n            ],\n            \"build_Ellipsis\": [\n               \"ctx\",\n               \"expr\"\n            ],\n            \"build_IfExp\": [\n               \"ctx\",\n               \"expr\"\n            ],\n            \"build_JoinedStr\": [\n               \"ctx\",\n               \"expr\"\n            ],\n            \"build_List\": [\n               \"ctx\",\n               \"expr\"\n            ],\n            \"build_ListComp\": [\n               \"ctx\",\n               \"stmt\"\n            ],\n            \"build_Name\": [\n               \"ctx\",\n               \"expr\"\n            ],\n            \"build_NameConstant\": [\n               \"ctx\",\n               \"expr\"\n            ],\n            \"build_Num\": [\n               \"ctx\",\n               \"expr\"\n            ],\n            \"build_Starred\": [\n               \"ctx\",\n               \"expr\"\n            ],\n            \"build_Str\": [\n               \"ctx\",\n               \"expr\"\n            ],\n            \"build_Subscript\": [\n               \"ctx\",\n               \"expr\"\n            ],\n            \"build_Tuple\": [\n               \"ctx\",\n               \"expr\"\n            ],\n            \"build_UnaryOp\": [\n               \"ctx\",\n               \"expr\"\n            ]\n         }\n      },\n      \"torch.jit.quantized\": {\n         \"QuantizedGRU\": {\n            \"forward\": [\n               \"self\",\n               \"input\",\n               \"hx\"\n            ],\n            \"forward_impl\": [\n               \"self\",\n               \"input\",\n               \"hx\",\n               \"batch_sizes\",\n               \"max_batch_size\",\n               \"sorted_indices\"\n            ],\n            \"forward_packed\": [\n               \"self\",\n               \"input\",\n               \"hx\"\n            ],\n            \"forward_tensor\": [\n               \"self\",\n               \"input\",\n               \"hx\"\n            ]\n         }\n      },\n      \"torch.multiprocessing.pool\": {\n         \"Pool\": {\n            \"_repopulate_pool\": [\n               \"self\"\n            ],\n            \"_setup_queues\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.multiprocessing.queue\": {\n         \"SimpleQueue\": {\n            \"_make_methods\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.multiprocessing.reductions\": {\n         \"SharedCache\": {\n            \"__init__\": [\n               \"self\"\n            ],\n            \"__setitem__\": [\n               \"self\",\n               \"key\",\n               \"storage_ref\"\n            ],\n            \"_after_fork\": [\n               \"self\"\n            ],\n            \"free_dead_references\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.multiprocessing.spawn\": {\n         \"SpawnContext\": {\n            \"__init__\": [\n               \"self\",\n               \"processes\",\n               \"error_queues\"\n            ]\n         }\n      },\n      \"torch.nn.cpp\": {\n         \"ModuleWrapper\": {\n            \"__init__\": [\n               \"self\",\n               \"cpp_module\"\n            ],\n            \"__repr__\": [\n               \"self\"\n            ],\n            \"_apply\": [\n               \"self\",\n               \"fn\"\n            ],\n            \"training\": [\n               \"self\",\n               \"mode\"\n            ]\n         }\n      },\n      \"torch.nn.intrinsic.modules.fused\": {\n         \"BNReLU3d\": {\n            \"__init__\": [\n               \"self\",\n               \"batch_norm\",\n               \"relu\"\n            ]\n         }\n      },\n      \"torch.nn.intrinsic.qat.modules.conv_fused\": {\n         \"ConvReLU2d\": {\n            \"__init__\": [\n               \"self\",\n               \"in_channels\",\n               \"out_channels\",\n               \"kernel_size\",\n               \"stride\",\n               \"padding\",\n               \"dilation\",\n               \"groups\",\n               \"bias\",\n               \"padding_mode\",\n               \"qconfig\"\n            ],\n            \"forward\": [\n               \"self\",\n               \"input\"\n            ],\n            \"from_float\": [\n               \"cls\",\n               \"mod\",\n               \"qconfig\"\n            ]\n         }\n      },\n      \"torch.nn.intrinsic.qat.modules.linear_relu\": {\n         \"LinearReLU\": {\n            \"__init__\": [\n               \"self\",\n               \"in_features\",\n               \"out_features\",\n               \"bias\",\n               \"qconfig\"\n            ],\n            \"forward\": [\n               \"self\",\n               \"input\"\n            ],\n            \"from_float\": [\n               \"cls\",\n               \"mod\",\n               \"qconfig\"\n            ]\n         }\n      },\n      \"torch.nn.intrinsic.quantized.modules.bn_relu\": {\n         \"BNReLU3d\": {\n            \"__init__\": [\n               \"self\",\n               \"num_features\",\n               \"eps\",\n               \"momentum\"\n            ],\n            \"_get_name\": [\n               \"self\"\n            ],\n            \"forward\": [\n               \"self\",\n               \"input\"\n            ],\n            \"from_float\": [\n               \"cls\",\n               \"mod\"\n            ]\n         }\n      },\n      \"torch.nn.intrinsic.quantized.modules.conv_relu\": {\n         \"ConvReLU3d\": {\n            \"__init__\": [\n               \"self\",\n               \"in_channels\",\n               \"out_channels\",\n               \"kernel_size\",\n               \"stride\",\n               \"padding\",\n               \"dilation\",\n               \"groups\",\n               \"bias\",\n               \"padding_mode\"\n            ],\n            \"_get_name\": [\n               \"self\"\n            ],\n            \"forward\": [\n               \"self\",\n               \"input\"\n            ],\n            \"from_float\": [\n               \"cls\",\n               \"mod\"\n            ]\n         }\n      },\n      \"torch.nn.intrinsic.quantized.modules.linear_relu\": {\n         \"LinearReLU\": {\n            \"__init__\": [\n               \"self\",\n               \"in_features\",\n               \"out_features\",\n               \"bias\",\n               \"dtype\"\n            ],\n            \"_get_name\": [\n               \"self\"\n            ],\n            \"forward\": [\n               \"self\",\n               \"input\"\n            ],\n            \"from_float\": [\n               \"cls\",\n               \"mod\"\n            ]\n         }\n      },\n      \"torch.nn.modules._functions\": {\n         \"CrossMapLRN2d\": {\n            \"backward\": [\n               \"ctx\",\n               \"grad_output\"\n            ],\n            \"forward\": [\n               \"ctx\",\n               \"input\",\n               \"size\",\n               \"alpha\",\n               \"beta\",\n               \"k\"\n            ]\n         }\n      },\n      \"torch.nn.modules.activation\": {\n         \"LogSoftmax\": {\n            \"__init__\": [\n               \"self\",\n               \"dim\"\n            ],\n            \"__setstate__\": [\n               \"self\",\n               \"state\"\n            ],\n            \"forward\": [\n               \"self\",\n               \"input\"\n            ]\n         }\n      },\n      \"torch.nn.modules.adaptive\": {\n         \"AdaptiveLogSoftmaxWithLoss\": {\n            \"__init__\": [\n               \"self\",\n               \"in_features\",\n               \"n_classes\",\n               \"cutoffs\",\n               \"div_value\",\n               \"head_bias\"\n            ],\n            \"_get_full_log_prob\": [\n               \"self\",\n               \"input\",\n               \"head_output\"\n            ],\n            \"forward\": [\n               \"self\",\n               \"input\",\n               \"target\"\n            ],\n            \"log_prob\": [\n               \"self\",\n               \"input\"\n            ],\n            \"predict\": [\n               \"self\",\n               \"input\"\n            ],\n            \"reset_parameters\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.nn.modules.batchnorm\": {\n         \"SyncBatchNorm\": {\n            \"__init__\": [\n               \"self\",\n               \"num_features\",\n               \"eps\",\n               \"momentum\",\n               \"affine\",\n               \"track_running_stats\",\n               \"process_group\"\n            ],\n            \"_check_input_dim\": [\n               \"self\",\n               \"input\"\n            ],\n            \"_specify_ddp_gpu_num\": [\n               \"self\",\n               \"gpu_size\"\n            ],\n            \"convert_sync_batchnorm\": [\n               \"cls\",\n               \"module\",\n               \"process_group\"\n            ],\n            \"forward\": [\n               \"self\",\n               \"input\"\n            ]\n         }\n      },\n      \"torch.nn.modules.channelshuffle\": {\n         \"ChannelShuffle\": {\n            \"__init__\": [\n               \"self\",\n               \"groups\"\n            ],\n            \"extra_repr\": [\n               \"self\"\n            ],\n            \"forward\": [\n               \"self\",\n               \"input\"\n            ]\n         }\n      },\n      \"torch.nn.modules.container\": {\n         \"ParameterDict\": {\n            \"__call__\": [\n               \"self\",\n               \"input\"\n            ],\n            \"__contains__\": [\n               \"self\",\n               \"key\"\n            ],\n            \"__delitem__\": [\n               \"self\",\n               \"key\"\n            ],\n            \"__getitem__\": [\n               \"self\",\n               \"key\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"parameters\"\n            ],\n            \"__iter__\": [\n               \"self\"\n            ],\n            \"__len__\": [\n               \"self\"\n            ],\n            \"__setitem__\": [\n               \"self\",\n               \"key\",\n               \"parameter\"\n            ],\n            \"clear\": [\n               \"self\"\n            ],\n            \"extra_repr\": [\n               \"self\"\n            ],\n            \"items\": [\n               \"self\"\n            ],\n            \"keys\": [\n               \"self\"\n            ],\n            \"pop\": [\n               \"self\",\n               \"key\"\n            ],\n            \"update\": [\n               \"self\",\n               \"parameters\"\n            ],\n            \"values\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.nn.modules.conv\": {\n         \"_ConvTransposeMixin\": {\n            \"__init__\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.nn.modules.distance\": {\n         \"CosineSimilarity\": {\n            \"__init__\": [\n               \"self\",\n               \"dim\",\n               \"eps\"\n            ],\n            \"forward\": [\n               \"self\",\n               \"x1\",\n               \"x2\"\n            ]\n         }\n      },\n      \"torch.nn.modules.dropout\": {\n         \"FeatureAlphaDropout\": {\n            \"forward\": [\n               \"self\",\n               \"input\"\n            ]\n         }\n      },\n      \"torch.nn.modules.flatten\": {\n         \"Flatten\": {\n            \"__init__\": [\n               \"self\",\n               \"start_dim\",\n               \"end_dim\"\n            ],\n            \"forward\": [\n               \"self\",\n               \"input\"\n            ]\n         }\n      },\n      \"torch.nn.modules.fold\": {\n         \"Unfold\": {\n            \"__init__\": [\n               \"self\",\n               \"kernel_size\",\n               \"dilation\",\n               \"padding\",\n               \"stride\"\n            ],\n            \"extra_repr\": [\n               \"self\"\n            ],\n            \"forward\": [\n               \"self\",\n               \"input\"\n            ]\n         }\n      },\n      \"torch.nn.modules.instancenorm\": {\n         \"InstanceNorm3d\": {\n            \"_check_input_dim\": [\n               \"self\",\n               \"input\"\n            ]\n         }\n      },\n      \"torch.nn.modules.linear\": {\n         \"Bilinear\": {\n            \"__init__\": [\n               \"self\",\n               \"in1_features\",\n               \"in2_features\",\n               \"out_features\",\n               \"bias\"\n            ],\n            \"extra_repr\": [\n               \"self\"\n            ],\n            \"forward\": [\n               \"self\",\n               \"input1\",\n               \"input2\"\n            ],\n            \"reset_parameters\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.nn.modules.loss\": {\n         \"CTCLoss\": {\n            \"__init__\": [\n               \"self\",\n               \"blank\",\n               \"reduction\",\n               \"zero_infinity\"\n            ],\n            \"forward\": [\n               \"self\",\n               \"log_probs\",\n               \"targets\",\n               \"input_lengths\",\n               \"target_lengths\"\n            ]\n         }\n      },\n      \"torch.nn.modules.module\": {\n         \"Module\": {\n            \"__call__\": [\n               \"self\"\n            ],\n            \"__delattr__\": [\n               \"self\",\n               \"name\"\n            ],\n            \"__dir__\": [\n               \"self\"\n            ],\n            \"__getattr__\": [\n               \"self\",\n               \"name\"\n            ],\n            \"__init__\": [\n               \"self\"\n            ],\n            \"__repr__\": [\n               \"self\"\n            ],\n            \"__setattr__\": [\n               \"self\",\n               \"name\",\n               \"value\"\n            ],\n            \"__setstate__\": [\n               \"self\",\n               \"state\"\n            ],\n            \"_apply\": [\n               \"self\",\n               \"fn\"\n            ],\n            \"_get_name\": [\n               \"self\"\n            ],\n            \"_load_from_state_dict\": [\n               \"self\",\n               \"state_dict\",\n               \"prefix\",\n               \"local_metadata\",\n               \"strict\",\n               \"missing_keys\",\n               \"unexpected_keys\",\n               \"error_msgs\"\n            ],\n            \"_named_members\": [\n               \"self\",\n               \"get_members_fn\",\n               \"prefix\",\n               \"recurse\"\n            ],\n            \"_register_load_state_dict_pre_hook\": [\n               \"self\",\n               \"hook\"\n            ],\n            \"_register_state_dict_hook\": [\n               \"self\",\n               \"hook\"\n            ],\n            \"_replicate_for_data_parallel\": [\n               \"self\"\n            ],\n            \"_save_to_state_dict\": [\n               \"self\",\n               \"destination\",\n               \"prefix\",\n               \"keep_vars\"\n            ],\n            \"_slow_forward\": [\n               \"self\"\n            ],\n            \"add_module\": [\n               \"self\",\n               \"name\",\n               \"module\"\n            ],\n            \"apply\": [\n               \"self\",\n               \"fn\"\n            ],\n            \"bfloat16\": [\n               \"self\"\n            ],\n            \"buffers\": [\n               \"self\",\n               \"recurse\"\n            ],\n            \"children\": [\n               \"self\"\n            ],\n            \"cpu\": [\n               \"self\"\n            ],\n            \"cuda\": [\n               \"self\",\n               \"device\"\n            ],\n            \"double\": [\n               \"self\"\n            ],\n            \"eval\": [\n               \"self\"\n            ],\n            \"extra_repr\": [\n               \"self\"\n            ],\n            \"float\": [\n               \"self\"\n            ],\n            \"forward\": [\n               \"self\"\n            ],\n            \"half\": [\n               \"self\"\n            ],\n            \"load_state_dict\": [\n               \"self\",\n               \"state_dict\",\n               \"strict\"\n            ],\n            \"modules\": [\n               \"self\"\n            ],\n            \"named_buffers\": [\n               \"self\",\n               \"prefix\",\n               \"recurse\"\n            ],\n            \"named_children\": [\n               \"self\"\n            ],\n            \"named_modules\": [\n               \"self\",\n               \"memo\",\n               \"prefix\"\n            ],\n            \"named_parameters\": [\n               \"self\",\n               \"prefix\",\n               \"recurse\"\n            ],\n            \"parameters\": [\n               \"self\",\n               \"recurse\"\n            ],\n            \"register_backward_hook\": [\n               \"self\",\n               \"hook\"\n            ],\n            \"register_buffer\": [\n               \"self\",\n               \"name\",\n               \"tensor\",\n               \"persistent\"\n            ],\n            \"register_forward_hook\": [\n               \"self\",\n               \"hook\"\n            ],\n            \"register_forward_pre_hook\": [\n               \"self\",\n               \"hook\"\n            ],\n            \"register_parameter\": [\n               \"self\",\n               \"name\",\n               \"param\"\n            ],\n            \"requires_grad_\": [\n               \"self\",\n               \"requires_grad\"\n            ],\n            \"share_memory\": [\n               \"self\"\n            ],\n            \"state_dict\": [\n               \"self\",\n               \"destination\",\n               \"prefix\",\n               \"keep_vars\"\n            ],\n            \"to\": [\n               \"self\"\n            ],\n            \"train\": [\n               \"self\",\n               \"mode\"\n            ],\n            \"type\": [\n               \"self\",\n               \"dst_type\"\n            ],\n            \"zero_grad\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.nn.modules.normalization\": {\n         \"GroupNorm\": {\n            \"__init__\": [\n               \"self\",\n               \"num_groups\",\n               \"num_channels\",\n               \"eps\",\n               \"affine\"\n            ],\n            \"extra_repr\": [\n               \"self\"\n            ],\n            \"forward\": [\n               \"self\",\n               \"input\"\n            ],\n            \"reset_parameters\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.nn.modules.padding\": {\n         \"ZeroPad2d\": {\n            \"__init__\": [\n               \"self\",\n               \"padding\"\n            ]\n         }\n      },\n      \"torch.nn.modules.pixelshuffle\": {\n         \"PixelShuffle\": {\n            \"__init__\": [\n               \"self\",\n               \"upscale_factor\"\n            ],\n            \"extra_repr\": [\n               \"self\"\n            ],\n            \"forward\": [\n               \"self\",\n               \"input\"\n            ]\n         }\n      },\n      \"torch.nn.modules.pooling\": {\n         \"AdaptiveAvgPool3d\": {\n            \"forward\": [\n               \"self\",\n               \"input\"\n            ]\n         }\n      },\n      \"torch.nn.modules.rnn\": {\n         \"GRUCell\": {\n            \"__init__\": [\n               \"self\",\n               \"input_size\",\n               \"hidden_size\",\n               \"bias\"\n            ],\n            \"forward\": [\n               \"self\",\n               \"input\",\n               \"hx\"\n            ]\n         }\n      },\n      \"torch.nn.modules.sparse\": {\n         \"EmbeddingBag\": {\n            \"__init__\": [\n               \"self\",\n               \"num_embeddings\",\n               \"embedding_dim\",\n               \"max_norm\",\n               \"norm_type\",\n               \"scale_grad_by_freq\",\n               \"mode\",\n               \"sparse\",\n               \"_weight\",\n               \"include_last_offset\"\n            ],\n            \"extra_repr\": [\n               \"self\"\n            ],\n            \"forward\": [\n               \"self\",\n               \"input\",\n               \"offsets\",\n               \"per_sample_weights\"\n            ],\n            \"from_pretrained\": [\n               \"cls\",\n               \"embeddings\",\n               \"freeze\",\n               \"max_norm\",\n               \"norm_type\",\n               \"scale_grad_by_freq\",\n               \"mode\",\n               \"sparse\",\n               \"include_last_offset\"\n            ],\n            \"reset_parameters\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.nn.modules.transformer\": {\n         \"TransformerDecoderLayer\": {\n            \"__init__\": [\n               \"self\",\n               \"d_model\",\n               \"nhead\",\n               \"dim_feedforward\",\n               \"dropout\",\n               \"activation\"\n            ],\n            \"__setstate__\": [\n               \"self\",\n               \"state\"\n            ],\n            \"forward\": [\n               \"self\",\n               \"tgt\",\n               \"memory\",\n               \"tgt_mask\",\n               \"memory_mask\",\n               \"tgt_key_padding_mask\",\n               \"memory_key_padding_mask\"\n            ]\n         }\n      },\n      \"torch.nn.modules.upsampling\": {\n         \"UpsamplingBilinear2d\": {\n            \"__init__\": [\n               \"self\",\n               \"size\",\n               \"scale_factor\"\n            ]\n         }\n      },\n      \"torch.nn.parallel._functions\": {\n         \"Scatter\": {\n            \"backward\": [\n               \"ctx\"\n            ],\n            \"forward\": [\n               \"ctx\",\n               \"target_gpus\",\n               \"chunk_sizes\",\n               \"dim\",\n               \"input\"\n            ]\n         }\n      },\n      \"torch.nn.parallel.data_parallel\": {\n         \"DataParallel\": {\n            \"__init__\": [\n               \"self\",\n               \"module\",\n               \"device_ids\",\n               \"output_device\",\n               \"dim\"\n            ],\n            \"forward\": [\n               \"self\"\n            ],\n            \"gather\": [\n               \"self\",\n               \"outputs\",\n               \"output_device\"\n            ],\n            \"parallel_apply\": [\n               \"self\",\n               \"replicas\",\n               \"inputs\",\n               \"kwargs\"\n            ],\n            \"replicate\": [\n               \"self\",\n               \"module\",\n               \"device_ids\"\n            ],\n            \"scatter\": [\n               \"self\",\n               \"inputs\",\n               \"kwargs\",\n               \"device_ids\"\n            ]\n         }\n      },\n      \"torch.nn.parallel.distributed\": {\n         \"DistributedDataParallel\": {\n            \"__getstate__\": [\n               \"self\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"module\",\n               \"device_ids\",\n               \"output_device\",\n               \"dim\",\n               \"broadcast_buffers\",\n               \"process_group\",\n               \"bucket_cap_mb\",\n               \"find_unused_parameters\",\n               \"check_reduction\"\n            ],\n            \"__setstate__\": [\n               \"self\",\n               \"state\"\n            ],\n            \"_check_default_group\": [\n               \"self\"\n            ],\n            \"_ddp_init_helper\": [\n               \"self\"\n            ],\n            \"_distributed_broadcast_coalesced\": [\n               \"self\",\n               \"tensors\",\n               \"buffer_size\"\n            ],\n            \"_passing_sync_batchnorm_handle\": [\n               \"self\",\n               \"module_copies\"\n            ],\n            \"_sync_params\": [\n               \"self\"\n            ],\n            \"forward\": [\n               \"self\"\n            ],\n            \"gather\": [\n               \"self\",\n               \"outputs\",\n               \"output_device\"\n            ],\n            \"no_sync\": [\n               \"self\"\n            ],\n            \"parallel_apply\": [\n               \"self\",\n               \"replicas\",\n               \"inputs\",\n               \"kwargs\"\n            ],\n            \"scatter\": [\n               \"self\",\n               \"inputs\",\n               \"kwargs\",\n               \"device_ids\"\n            ],\n            \"train\": [\n               \"self\",\n               \"mode\"\n            ]\n         }\n      },\n      \"torch.nn.parameter\": {\n         \"Parameter\": {\n            \"__deepcopy__\": [\n               \"self\",\n               \"memo\"\n            ],\n            \"__new__\": [\n               \"cls\",\n               \"data\",\n               \"requires_grad\"\n            ],\n            \"__reduce_ex__\": [\n               \"self\",\n               \"proto\"\n            ],\n            \"__repr__\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.nn.qat.modules.activations\": {\n         \"Hardswish\": {\n            \"__init__\": [\n               \"self\",\n               \"qconfig\"\n            ],\n            \"forward\": [\n               \"self\",\n               \"input\"\n            ],\n            \"from_float\": [\n               \"cls\",\n               \"mod\",\n               \"qconfig\"\n            ]\n         }\n      },\n      \"torch.nn.qat.modules.conv\": {\n         \"Conv2d\": {\n            \"__init__\": [\n               \"self\",\n               \"in_channels\",\n               \"out_channels\",\n               \"kernel_size\",\n               \"stride\",\n               \"padding\",\n               \"dilation\",\n               \"groups\",\n               \"bias\",\n               \"padding_mode\",\n               \"qconfig\"\n            ],\n            \"forward\": [\n               \"self\",\n               \"input\"\n            ],\n            \"from_float\": [\n               \"cls\",\n               \"mod\",\n               \"qconfig\"\n            ]\n         }\n      },\n      \"torch.nn.qat.modules.linear\": {\n         \"Linear\": {\n            \"__init__\": [\n               \"self\",\n               \"in_features\",\n               \"out_features\",\n               \"bias\",\n               \"qconfig\"\n            ],\n            \"forward\": [\n               \"self\",\n               \"input\"\n            ],\n            \"from_float\": [\n               \"cls\",\n               \"mod\",\n               \"qconfig\"\n            ]\n         }\n      },\n      \"torch.nn.quantized.dynamic.modules.linear\": {\n         \"Linear\": {\n            \"__init__\": [\n               \"self\",\n               \"in_features\",\n               \"out_features\",\n               \"bias_\",\n               \"dtype\"\n            ],\n            \"_get_name\": [\n               \"self\"\n            ],\n            \"extra_repr\": [\n               \"self\"\n            ],\n            \"forward\": [\n               \"self\",\n               \"x\"\n            ],\n            \"from_float\": [\n               \"cls\",\n               \"mod\"\n            ]\n         }\n      },\n      \"torch.nn.quantized.dynamic.modules.rnn\": {\n         \"LSTM\": {\n            \"__init__\": [\n               \"self\"\n            ],\n            \"_get_name\": [\n               \"self\"\n            ],\n            \"check_forward_args\": [\n               \"self\",\n               \"input\",\n               \"hidden\",\n               \"batch_sizes\"\n            ],\n            \"forward\": [\n               \"self\",\n               \"input\",\n               \"hx\"\n            ],\n            \"forward_impl\": [\n               \"self\",\n               \"input\",\n               \"hx\",\n               \"batch_sizes\",\n               \"max_batch_size\",\n               \"sorted_indices\"\n            ],\n            \"forward_packed\": [\n               \"self\",\n               \"input\",\n               \"hx\"\n            ],\n            \"forward_tensor\": [\n               \"self\",\n               \"input\",\n               \"hx\"\n            ],\n            \"from_float\": [\n               \"cls\",\n               \"mod\"\n            ],\n            \"permute_hidden\": [\n               \"self\",\n               \"hx\",\n               \"permutation\"\n            ]\n         }\n      },\n      \"torch.nn.quantized.modules.__init__\": {\n         \"DeQuantize\": {\n            \"__init__\": [\n               \"self\"\n            ],\n            \"forward\": [\n               \"self\",\n               \"Xq\"\n            ],\n            \"from_float\": [\n               \"mod\"\n            ]\n         }\n      },\n      \"torch.nn.quantized.modules.activation\": {\n         \"Hardswish\": {\n            \"__init__\": [\n               \"self\",\n               \"scale\",\n               \"zero_point\"\n            ],\n            \"_get_name\": [\n               \"self\"\n            ],\n            \"forward\": [\n               \"self\",\n               \"input\"\n            ],\n            \"from_float\": [\n               \"mod\"\n            ]\n         }\n      },\n      \"torch.nn.quantized.modules.batchnorm\": {\n         \"BatchNorm3d\": {\n            \"__init__\": [\n               \"self\",\n               \"num_features\",\n               \"eps\",\n               \"momentum\"\n            ],\n            \"_get_name\": [\n               \"self\"\n            ],\n            \"forward\": [\n               \"self\",\n               \"input\"\n            ],\n            \"from_float\": [\n               \"cls\",\n               \"mod\"\n            ]\n         }\n      },\n      \"torch.nn.quantized.modules.conv\": {\n         \"_ConvTransposeNd\": {\n            \"__init__\": [\n               \"self\",\n               \"in_channels\",\n               \"out_channels\",\n               \"kernel_size\",\n               \"stride\",\n               \"padding\",\n               \"dilation\",\n               \"transposed\",\n               \"output_padding\",\n               \"groups\",\n               \"bias\",\n               \"padding_mode\"\n            ],\n            \"_input_padding\": [\n               \"self\",\n               \"kernel_size\",\n               \"dilation\",\n               \"padding\"\n            ]\n         }\n      },\n      \"torch.nn.quantized.modules.functional_modules\": {\n         \"QFunctional\": {\n            \"__init__\": [\n               \"self\"\n            ],\n            \"_get_name\": [\n               \"self\"\n            ],\n            \"_load_from_state_dict\": [\n               \"self\",\n               \"state_dict\",\n               \"prefix\",\n               \"local_metadata\",\n               \"strict\",\n               \"missing_keys\",\n               \"unexpected_keys\",\n               \"error_msgs\"\n            ],\n            \"_save_to_state_dict\": [\n               \"self\",\n               \"destination\",\n               \"prefix\",\n               \"keep_vars\"\n            ],\n            \"add\": [\n               \"self\",\n               \"x\",\n               \"y\"\n            ],\n            \"add_relu\": [\n               \"self\",\n               \"x\",\n               \"y\"\n            ],\n            \"add_scalar\": [\n               \"self\",\n               \"x\",\n               \"y\"\n            ],\n            \"cat\": [\n               \"self\",\n               \"x\",\n               \"dim\"\n            ],\n            \"extra_repr\": [\n               \"self\"\n            ],\n            \"forward\": [\n               \"self\",\n               \"x\"\n            ],\n            \"from_float\": [\n               \"cls\",\n               \"mod\"\n            ],\n            \"mul\": [\n               \"self\",\n               \"x\",\n               \"y\"\n            ],\n            \"mul_scalar\": [\n               \"self\",\n               \"x\",\n               \"y\"\n            ]\n         }\n      },\n      \"torch.nn.quantized.modules.linear\": {\n         \"Linear\": {\n            \"__init__\": [\n               \"self\",\n               \"in_features\",\n               \"out_features\",\n               \"bias_\",\n               \"dtype\"\n            ],\n            \"__repr__\": [\n               \"self\"\n            ],\n            \"_get_name\": [\n               \"self\"\n            ],\n            \"_load_from_state_dict\": [\n               \"self\",\n               \"state_dict\",\n               \"prefix\",\n               \"local_metadata\",\n               \"strict\",\n               \"missing_keys\",\n               \"unexpected_keys\",\n               \"error_msgs\"\n            ],\n            \"_save_to_state_dict\": [\n               \"self\",\n               \"destination\",\n               \"prefix\",\n               \"keep_vars\"\n            ],\n            \"_weight_bias\": [\n               \"self\"\n            ],\n            \"bias\": [\n               \"self\"\n            ],\n            \"extra_repr\": [\n               \"self\"\n            ],\n            \"forward\": [\n               \"self\",\n               \"x\"\n            ],\n            \"from_float\": [\n               \"cls\",\n               \"mod\"\n            ],\n            \"set_weight_bias\": [\n               \"self\",\n               \"w\",\n               \"b\"\n            ],\n            \"weight\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.nn.quantized.modules.normalization\": {\n         \"LayerNorm\": {\n            \"__init__\": [\n               \"self\",\n               \"normalized_shape\",\n               \"weight\",\n               \"bias\",\n               \"scale\",\n               \"zero_point\",\n               \"eps\",\n               \"elementwise_affine\"\n            ],\n            \"_get_name\": [\n               \"self\"\n            ],\n            \"forward\": [\n               \"self\",\n               \"input\"\n            ],\n            \"from_float\": [\n               \"cls\",\n               \"mod\"\n            ]\n         }\n      },\n      \"torch.nn.utils.prune\": {\n         \"CustomFromMask\": {\n            \"__init__\": [\n               \"self\",\n               \"mask\"\n            ],\n            \"apply\": [\n               \"cls\",\n               \"module\",\n               \"name\",\n               \"mask\"\n            ],\n            \"compute_mask\": [\n               \"self\",\n               \"t\",\n               \"default_mask\"\n            ]\n         }\n      },\n      \"torch.nn.utils.rnn\": {\n         \"PackedSequence\": {\n            \"__new__\": [\n               \"cls\",\n               \"data\",\n               \"batch_sizes\",\n               \"sorted_indices\",\n               \"unsorted_indices\"\n            ],\n            \"byte\": [\n               \"self\"\n            ],\n            \"char\": [\n               \"self\"\n            ],\n            \"cpu\": [\n               \"self\"\n            ],\n            \"cuda\": [\n               \"self\"\n            ],\n            \"double\": [\n               \"self\"\n            ],\n            \"float\": [\n               \"self\"\n            ],\n            \"half\": [\n               \"self\"\n            ],\n            \"int\": [\n               \"self\"\n            ],\n            \"is_cuda\": [\n               \"self\"\n            ],\n            \"is_pinned\": [\n               \"self\"\n            ],\n            \"long\": [\n               \"self\"\n            ],\n            \"pin_memory\": [\n               \"self\"\n            ],\n            \"short\": [\n               \"self\"\n            ],\n            \"to\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.nn.utils.spectral_norm\": {\n         \"SpectralNormStateDictHook\": {\n            \"__call__\": [\n               \"self\",\n               \"module\",\n               \"state_dict\",\n               \"prefix\",\n               \"local_metadata\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"fn\"\n            ]\n         }\n      },\n      \"torch.nn.utils.weight_norm\": {\n         \"WeightNorm\": {\n            \"__call__\": [\n               \"self\",\n               \"module\",\n               \"inputs\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"name\",\n               \"dim\"\n            ],\n            \"apply\": [\n               \"module\",\n               \"name\",\n               \"dim\"\n            ],\n            \"compute_weight\": [\n               \"self\",\n               \"module\"\n            ],\n            \"remove\": [\n               \"self\",\n               \"module\"\n            ]\n         }\n      },\n      \"torch.onnx.__init__\": {\n         \"ExportTypes\": {}\n      },\n      \"torch.optim.adadelta\": {\n         \"Adadelta\": {\n            \"__init__\": [\n               \"self\",\n               \"params\",\n               \"lr\",\n               \"rho\",\n               \"eps\",\n               \"weight_decay\"\n            ],\n            \"step\": [\n               \"self\",\n               \"closure\"\n            ]\n         }\n      },\n      \"torch.optim.adagrad\": {\n         \"Adagrad\": {\n            \"__init__\": [\n               \"self\",\n               \"params\",\n               \"lr\",\n               \"lr_decay\",\n               \"weight_decay\",\n               \"initial_accumulator_value\",\n               \"eps\"\n            ],\n            \"share_memory\": [\n               \"self\"\n            ],\n            \"step\": [\n               \"self\",\n               \"closure\"\n            ]\n         }\n      },\n      \"torch.optim.adam\": {\n         \"Adam\": {\n            \"__init__\": [\n               \"self\",\n               \"params\",\n               \"lr\",\n               \"betas\",\n               \"eps\",\n               \"weight_decay\",\n               \"amsgrad\"\n            ],\n            \"__setstate__\": [\n               \"self\",\n               \"state\"\n            ],\n            \"step\": [\n               \"self\",\n               \"closure\"\n            ]\n         }\n      },\n      \"torch.optim.adamax\": {\n         \"Adamax\": {\n            \"__init__\": [\n               \"self\",\n               \"params\",\n               \"lr\",\n               \"betas\",\n               \"eps\",\n               \"weight_decay\"\n            ],\n            \"step\": [\n               \"self\",\n               \"closure\"\n            ]\n         }\n      },\n      \"torch.optim.adamw\": {\n         \"AdamW\": {\n            \"__init__\": [\n               \"self\",\n               \"params\",\n               \"lr\",\n               \"betas\",\n               \"eps\",\n               \"weight_decay\",\n               \"amsgrad\"\n            ],\n            \"__setstate__\": [\n               \"self\",\n               \"state\"\n            ],\n            \"step\": [\n               \"self\",\n               \"closure\"\n            ]\n         }\n      },\n      \"torch.optim.asgd\": {\n         \"ASGD\": {\n            \"__init__\": [\n               \"self\",\n               \"params\",\n               \"lr\",\n               \"lambd\",\n               \"alpha\",\n               \"t0\",\n               \"weight_decay\"\n            ],\n            \"step\": [\n               \"self\",\n               \"closure\"\n            ]\n         }\n      },\n      \"torch.optim.lbfgs\": {\n         \"LBFGS\": {\n            \"__init__\": [\n               \"self\",\n               \"params\",\n               \"lr\",\n               \"max_iter\",\n               \"max_eval\",\n               \"tolerance_grad\",\n               \"tolerance_change\",\n               \"history_size\",\n               \"line_search_fn\"\n            ],\n            \"_add_grad\": [\n               \"self\",\n               \"step_size\",\n               \"update\"\n            ],\n            \"_clone_param\": [\n               \"self\"\n            ],\n            \"_directional_evaluate\": [\n               \"self\",\n               \"closure\",\n               \"x\",\n               \"t\",\n               \"d\"\n            ],\n            \"_gather_flat_grad\": [\n               \"self\"\n            ],\n            \"_numel\": [\n               \"self\"\n            ],\n            \"_set_param\": [\n               \"self\",\n               \"params_data\"\n            ],\n            \"step\": [\n               \"self\",\n               \"closure\"\n            ]\n         }\n      },\n      \"torch.optim.lr_scheduler\": {\n         \"OneCycleLR\": {\n            \"__init__\": [\n               \"self\",\n               \"optimizer\",\n               \"max_lr\",\n               \"total_steps\",\n               \"epochs\",\n               \"steps_per_epoch\",\n               \"pct_start\",\n               \"anneal_strategy\",\n               \"cycle_momentum\",\n               \"base_momentum\",\n               \"max_momentum\",\n               \"div_factor\",\n               \"final_div_factor\",\n               \"last_epoch\"\n            ],\n            \"_annealing_cos\": [\n               \"self\",\n               \"start\",\n               \"end\",\n               \"pct\"\n            ],\n            \"_annealing_linear\": [\n               \"self\",\n               \"start\",\n               \"end\",\n               \"pct\"\n            ],\n            \"_format_param\": [\n               \"self\",\n               \"name\",\n               \"optimizer\",\n               \"param\"\n            ],\n            \"get_lr\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.optim.optimizer\": {\n         \"Optimizer\": {\n            \"__getstate__\": [\n               \"self\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"params\",\n               \"defaults\"\n            ],\n            \"__repr__\": [\n               \"self\"\n            ],\n            \"__setstate__\": [\n               \"self\",\n               \"state\"\n            ],\n            \"add_param_group\": [\n               \"self\",\n               \"param_group\"\n            ],\n            \"load_state_dict\": [\n               \"self\",\n               \"state_dict\"\n            ],\n            \"state_dict\": [\n               \"self\"\n            ],\n            \"step\": [\n               \"self\",\n               \"closure\"\n            ],\n            \"zero_grad\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.optim.rmsprop\": {\n         \"RMSprop\": {\n            \"__init__\": [\n               \"self\",\n               \"params\",\n               \"lr\",\n               \"alpha\",\n               \"eps\",\n               \"weight_decay\",\n               \"momentum\",\n               \"centered\"\n            ],\n            \"__setstate__\": [\n               \"self\",\n               \"state\"\n            ],\n            \"step\": [\n               \"self\",\n               \"closure\"\n            ]\n         }\n      },\n      \"torch.optim.rprop\": {\n         \"Rprop\": {\n            \"__init__\": [\n               \"self\",\n               \"params\",\n               \"lr\",\n               \"etas\",\n               \"step_sizes\"\n            ],\n            \"step\": [\n               \"self\",\n               \"closure\"\n            ]\n         }\n      },\n      \"torch.optim.sgd\": {\n         \"SGD\": {\n            \"__init__\": [\n               \"self\",\n               \"params\",\n               \"lr\",\n               \"momentum\",\n               \"dampening\",\n               \"weight_decay\",\n               \"nesterov\"\n            ],\n            \"__setstate__\": [\n               \"self\",\n               \"state\"\n            ],\n            \"step\": [\n               \"self\",\n               \"closure\"\n            ]\n         }\n      },\n      \"torch.optim.sparse_adam\": {\n         \"SparseAdam\": {\n            \"__init__\": [\n               \"self\",\n               \"params\",\n               \"lr\",\n               \"betas\",\n               \"eps\"\n            ],\n            \"step\": [\n               \"self\",\n               \"closure\"\n            ]\n         }\n      },\n      \"torch.optim.swa_utils\": {\n         \"SWALR\": {\n            \"__init__\": [\n               \"self\",\n               \"optimizer\",\n               \"swa_lr\",\n               \"anneal_epochs\",\n               \"anneal_strategy\",\n               \"last_epoch\"\n            ],\n            \"_cosine_anneal\": [\n               \"t\"\n            ],\n            \"_format_param\": [\n               \"optimizer\",\n               \"swa_lrs\"\n            ],\n            \"_get_initial_lr\": [\n               \"lr\",\n               \"swa_lr\",\n               \"alpha\"\n            ],\n            \"_linear_anneal\": [\n               \"t\"\n            ],\n            \"get_lr\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.quantization._numeric_suite\": {\n         \"Shadow\": {\n            \"__init__\": [\n               \"self\",\n               \"q_module\",\n               \"float_module\",\n               \"Logger\"\n            ],\n            \"add\": [\n               \"self\",\n               \"x\",\n               \"y\"\n            ],\n            \"add_relu\": [\n               \"self\",\n               \"x\",\n               \"y\"\n            ],\n            \"add_scalar\": [\n               \"self\",\n               \"x\",\n               \"y\"\n            ],\n            \"cat\": [\n               \"self\",\n               \"x\",\n               \"dim\"\n            ],\n            \"forward\": [\n               \"self\",\n               \"x\"\n            ],\n            \"mul\": [\n               \"self\",\n               \"x\",\n               \"y\"\n            ],\n            \"mul_scalar\": [\n               \"self\",\n               \"x\",\n               \"y\"\n            ]\n         }\n      },\n      \"torch.quantization._quantize_script\": {\n         \"ConvPackedParams\": {\n            \"__getstate__\": [\n               \"self\"\n            ],\n            \"__init__\": [\n               \"self\"\n            ],\n            \"__setstate__\": [\n               \"self\",\n               \"state\"\n            ],\n            \"_weight_bias\": [\n               \"self\"\n            ],\n            \"forward\": [\n               \"self\",\n               \"x\"\n            ],\n            \"set_conv_params\": [\n               \"self\",\n               \"stride\",\n               \"padding\",\n               \"dilation\",\n               \"groups\"\n            ],\n            \"set_weight_bias\": [\n               \"self\",\n               \"weight\",\n               \"bias\"\n            ]\n         }\n      },\n      \"torch.quantization.fake_quantize\": {\n         \"FakeQuantize\": {\n            \"__init__\": [\n               \"self\",\n               \"observer\",\n               \"quant_min\",\n               \"quant_max\"\n            ],\n            \"_load_from_state_dict\": [\n               \"self\",\n               \"state_dict\",\n               \"prefix\",\n               \"local_metadata\",\n               \"strict\",\n               \"missing_keys\",\n               \"unexpected_keys\",\n               \"error_msgs\"\n            ],\n            \"_save_to_state_dict\": [\n               \"self\",\n               \"destination\",\n               \"prefix\",\n               \"keep_vars\"\n            ],\n            \"calculate_qparams\": [\n               \"self\"\n            ],\n            \"disable_fake_quant\": [\n               \"self\"\n            ],\n            \"disable_observer\": [\n               \"self\"\n            ],\n            \"enable_fake_quant\": [\n               \"self\",\n               \"enabled\"\n            ],\n            \"enable_observer\": [\n               \"self\",\n               \"enabled\"\n            ],\n            \"extra_repr\": [\n               \"self\"\n            ],\n            \"forward\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"torch.quantization.observer\": {\n         \"NoopObserver\": {\n            \"__init__\": [\n               \"self\",\n               \"dtype\"\n            ],\n            \"calculate_qparams\": [\n               \"self\"\n            ],\n            \"forward\": [\n               \"self\",\n               \"x\"\n            ],\n            \"get_qparams\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.quantization.qconfig\": {\n         \"QConfigDynamic\": {\n            \"__new__\": [\n               \"cls\",\n               \"activation\",\n               \"weight\"\n            ]\n         }\n      },\n      \"torch.quantization.stubs\": {\n         \"QuantWrapper\": {\n            \"__init__\": [\n               \"self\",\n               \"module\"\n            ],\n            \"forward\": [\n               \"self\",\n               \"X\"\n            ]\n         }\n      },\n      \"torch.quasirandom\": {\n         \"SobolEngine\": {\n            \"__init__\": [\n               \"self\",\n               \"dimension\",\n               \"scramble\",\n               \"seed\"\n            ],\n            \"__repr__\": [\n               \"self\"\n            ],\n            \"draw\": [\n               \"self\",\n               \"n\",\n               \"out\",\n               \"dtype\"\n            ],\n            \"fast_forward\": [\n               \"self\",\n               \"n\"\n            ],\n            \"reset\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.serialization\": {\n         \"_open_zipfile_writer_buffer\": {\n            \"__exit__\": [\n               \"self\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"buffer\"\n            ]\n         }\n      },\n      \"torch.storage\": {\n         \"_StorageBase\": {\n            \"__copy__\": [\n               \"self\"\n            ],\n            \"__deepcopy__\": [\n               \"self\",\n               \"memo\"\n            ],\n            \"__iter__\": [\n               \"self\"\n            ],\n            \"__reduce__\": [\n               \"self\"\n            ],\n            \"__repr__\": [\n               \"self\"\n            ],\n            \"__sizeof__\": [\n               \"self\"\n            ],\n            \"__str__\": [\n               \"self\"\n            ],\n            \"_new_shared\": [\n               \"cls\",\n               \"size\"\n            ],\n            \"bfloat16\": [\n               \"self\"\n            ],\n            \"bool\": [\n               \"self\"\n            ],\n            \"byte\": [\n               \"self\"\n            ],\n            \"char\": [\n               \"self\"\n            ],\n            \"clone\": [\n               \"self\"\n            ],\n            \"complex_double\": [\n               \"self\"\n            ],\n            \"complex_float\": [\n               \"self\"\n            ],\n            \"cpu\": [\n               \"self\"\n            ],\n            \"double\": [\n               \"self\"\n            ],\n            \"float\": [\n               \"self\"\n            ],\n            \"half\": [\n               \"self\"\n            ],\n            \"int\": [\n               \"self\"\n            ],\n            \"long\": [\n               \"self\"\n            ],\n            \"pin_memory\": [\n               \"self\"\n            ],\n            \"share_memory_\": [\n               \"self\"\n            ],\n            \"short\": [\n               \"self\"\n            ],\n            \"tolist\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.tensor\": {\n         \"Tensor\": {\n            \"__array__\": [\n               \"self\",\n               \"dtype\"\n            ],\n            \"__array_wrap__\": [\n               \"self\",\n               \"array\"\n            ],\n            \"__contains__\": [\n               \"self\",\n               \"element\"\n            ],\n            \"__cuda_array_interface__\": [\n               \"self\"\n            ],\n            \"__deepcopy__\": [\n               \"self\",\n               \"memo\"\n            ],\n            \"__dir__\": [\n               \"self\"\n            ],\n            \"__floordiv__\": [\n               \"self\",\n               \"other\"\n            ],\n            \"__format__\": [\n               \"self\",\n               \"format_spec\"\n            ],\n            \"__hash__\": [\n               \"self\"\n            ],\n            \"__ipow__\": [\n               \"self\",\n               \"other\"\n            ],\n            \"__iter__\": [\n               \"self\"\n            ],\n            \"__len__\": [\n               \"self\"\n            ],\n            \"__rdiv__\": [\n               \"self\",\n               \"other\"\n            ],\n            \"__reduce_ex__\": [\n               \"self\",\n               \"proto\"\n            ],\n            \"__repr__\": [\n               \"self\"\n            ],\n            \"__reversed__\": [\n               \"self\"\n            ],\n            \"__rfloordiv__\": [\n               \"self\",\n               \"other\"\n            ],\n            \"__rpow__\": [\n               \"self\",\n               \"other\"\n            ],\n            \"__rsub__\": [\n               \"self\",\n               \"other\"\n            ],\n            \"__setstate__\": [\n               \"self\",\n               \"state\"\n            ],\n            \"_update_names\": [\n               \"self\",\n               \"names\",\n               \"inplace\"\n            ],\n            \"align_to\": [\n               \"self\"\n            ],\n            \"backward\": [\n               \"self\",\n               \"gradient\",\n               \"retain_graph\",\n               \"create_graph\"\n            ],\n            \"grad\": [\n               \"self\"\n            ],\n            \"is_shared\": [\n               \"self\"\n            ],\n            \"istft\": [\n               \"self\",\n               \"n_fft\",\n               \"hop_length\",\n               \"win_length\",\n               \"window\",\n               \"center\",\n               \"normalized\",\n               \"onesided\",\n               \"length\"\n            ],\n            \"lu\": [\n               \"self\",\n               \"pivot\",\n               \"get_infos\"\n            ],\n            \"norm\": [\n               \"self\",\n               \"p\",\n               \"dim\",\n               \"keepdim\",\n               \"dtype\"\n            ],\n            \"refine_names\": [\n               \"self\"\n            ],\n            \"register_hook\": [\n               \"self\",\n               \"hook\"\n            ],\n            \"reinforce\": [\n               \"self\",\n               \"reward\"\n            ],\n            \"rename\": [\n               \"self\"\n            ],\n            \"rename_\": [\n               \"self\"\n            ],\n            \"resize\": [\n               \"self\"\n            ],\n            \"resize_as\": [\n               \"self\",\n               \"tensor\"\n            ],\n            \"retain_grad\": [\n               \"self\"\n            ],\n            \"share_memory_\": [\n               \"self\"\n            ],\n            \"split\": [\n               \"self\",\n               \"split_size\",\n               \"dim\"\n            ],\n            \"stft\": [\n               \"self\",\n               \"n_fft\",\n               \"hop_length\",\n               \"win_length\",\n               \"window\",\n               \"center\",\n               \"pad_mode\",\n               \"normalized\",\n               \"onesided\"\n            ],\n            \"unflatten\": [\n               \"self\",\n               \"dim\",\n               \"namedshape\"\n            ],\n            \"unique\": [\n               \"self\",\n               \"sorted\",\n               \"return_inverse\",\n               \"return_counts\",\n               \"dim\"\n            ],\n            \"unique_consecutive\": [\n               \"self\",\n               \"return_inverse\",\n               \"return_counts\",\n               \"dim\"\n            ]\n         }\n      },\n      \"torch.testing._internal.autocast_test_lists\": {\n         \"AutocastTestLists\": {\n            \"__init__\": [\n               \"self\",\n               \"dev\"\n            ]\n         }\n      },\n      \"torch.testing._internal.common_device_type\": {\n         \"dtypesIfCUDA\": {\n            \"__init__\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.testing._internal.common_distributed\": {\n         \"MultiProcessTestCase\": {\n            \"__init__\": [\n               \"self\",\n               \"method_name\"\n            ],\n            \"_check_no_test_errors\": [\n               \"self\",\n               \"elapsed_time\"\n            ],\n            \"_check_return_codes\": [\n               \"self\",\n               \"elapsed_time\"\n            ],\n            \"_current_test_name\": [\n               \"self\"\n            ],\n            \"_fork_processes\": [\n               \"self\"\n            ],\n            \"_join_processes\": [\n               \"self\",\n               \"fn\"\n            ],\n            \"_run\": [\n               \"cls\",\n               \"rank\",\n               \"test_name\",\n               \"file_name\"\n            ],\n            \"_spawn_processes\": [\n               \"self\"\n            ],\n            \"_start_processes\": [\n               \"self\",\n               \"proc\"\n            ],\n            \"is_master\": [\n               \"self\"\n            ],\n            \"join_or_run\": [\n               \"self\",\n               \"fn\"\n            ],\n            \"setUp\": [\n               \"self\"\n            ],\n            \"tearDown\": [\n               \"self\"\n            ],\n            \"world_size\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.testing._internal.common_methods_invocations\": {\n         \"NoArgsClass\": {\n            \"__iter__\": [\n               \"self\"\n            ],\n            \"__len__\": [\n               \"self\"\n            ],\n            \"__next__\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.testing._internal.common_nn\": {\n         \"NewCriterionTest\": {\n            \"__init__\": [\n               \"self\"\n            ],\n            \"_do_extra_tests\": [\n               \"self\",\n               \"test_case\",\n               \"module\",\n               \"input\",\n               \"target\"\n            ],\n            \"_get_target\": [\n               \"self\"\n            ],\n            \"constructor_args\": [\n               \"self\"\n            ],\n            \"extra_args\": [\n               \"self\"\n            ],\n            \"test_cuda\": [\n               \"self\",\n               \"test_case\",\n               \"dtype\",\n               \"extra_args\"\n            ]\n         }\n      },\n      \"torch.testing._internal.common_quantization\": {\n         \"ListOutModule\": {\n            \"__init__\": [\n               \"self\"\n            ],\n            \"forward\": [\n               \"self\",\n               \"x\"\n            ]\n         }\n      },\n      \"torch.testing._internal.common_utils\": {\n         \"BytesIOContext\": {\n            \"__enter__\": [\n               \"self\"\n            ],\n            \"__exit__\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.testing._internal.data.network1\": {\n         \"Net\": {\n            \"__init__\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.testing._internal.data.network2\": {\n         \"Net\": {\n            \"__init__\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.testing._internal.dist_utils\": {\n         \"TestConfig\": {\n            \"__init__\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.testing._internal.distributed.rpc.dist_autograd_test\": {\n         \"FaultyAgentDistAutogradTest\": {\n            \"context_cleanup_test_helper\": [\n               \"self\",\n               \"rpc_args\",\n               \"func\"\n            ],\n            \"test_context_cleanup_tensor_with_grad\": [\n               \"self\"\n            ],\n            \"test_verify_backend_options\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.testing._internal.distributed.rpc.dist_optimizer_test\": {\n         \"DistOptimizerTest\": {\n            \"test_dist_optim\": [\n               \"self\"\n            ],\n            \"test_dist_optim_exception\": [\n               \"self\"\n            ],\n            \"test_dist_optim_exception_on_constructor\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.testing._internal.distributed.rpc.faulty_rpc_agent_test_fixture\": {\n         \"FaultyRpcAgentTestFixture\": {\n            \"default_messages_to_delay\": [\n               \"self\"\n            ],\n            \"num_fail_sends\": [\n               \"self\"\n            ],\n            \"retryable_message_types\": [\n               \"self\"\n            ],\n            \"rpc_backend\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.testing._internal.distributed.rpc.jit.dist_autograd_test\": {\n         \"JitDistAutogradTest\": {\n            \"test_get_gradients\": [\n               \"self\"\n            ],\n            \"test_jit_fork_within_context\": [\n               \"self\"\n            ],\n            \"test_restore_context_after_swtich_to_jit_thread\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.testing._internal.distributed.rpc.jit.rpc_test\": {\n         \"JitRpcTest\": {\n            \"_create_rref\": [\n               \"self\"\n            ],\n            \"test_async_script_throw\": [\n               \"self\"\n            ],\n            \"test_async_script_udf\": [\n               \"self\"\n            ],\n            \"test_call_fork_in_jit_with_profiling\": [\n               \"self\"\n            ],\n            \"test_call_rpc_with_profiling\": [\n               \"self\"\n            ],\n            \"test_my_script_module_with_rrefs\": [\n               \"self\"\n            ],\n            \"test_python_future_with_jit\": [\n               \"self\"\n            ],\n            \"test_record_function_jit_end_callbacks_with_fork\": [\n               \"self\"\n            ],\n            \"test_remote_script_module\": [\n               \"self\"\n            ],\n            \"test_remote_script_throw\": [\n               \"self\"\n            ],\n            \"test_remote_script_udf\": [\n               \"self\"\n            ],\n            \"test_rref_as_arg_and_return\": [\n               \"self\"\n            ],\n            \"test_rref_jit_pickle_not_supported\": [\n               \"self\"\n            ],\n            \"test_rref_python_annotation\": [\n               \"self\"\n            ],\n            \"test_torchscript_function\": [\n               \"self\"\n            ],\n            \"test_torchscript_function_exception\": [\n               \"self\"\n            ],\n            \"test_torchscript_functions_not_supported\": [\n               \"self\"\n            ],\n            \"test_user_rrefs_confirmed\": [\n               \"self\"\n            ],\n            \"test_user_rrefs_confirmed_remote\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.testing._internal.distributed.rpc.rpc_agent_test_fixture\": {\n         \"RpcAgentTestFixture\": {\n            \"init_method\": [\n               \"self\"\n            ],\n            \"rpc_backend\": [\n               \"self\"\n            ],\n            \"rpc_backend_options\": [\n               \"self\"\n            ],\n            \"world_size\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.testing._internal.distributed.rpc.rpc_test\": {\n         \"FaultyAgentRpcTest\": {\n            \"test_check_failed_messages\": [\n               \"self\"\n            ],\n            \"test_custom_faulty_messages\": [\n               \"self\"\n            ],\n            \"test_custom_messages_to_delay\": [\n               \"self\"\n            ],\n            \"test_no_faulty_messages\": [\n               \"self\"\n            ],\n            \"test_rpc_builtin_timeout\": [\n               \"self\"\n            ],\n            \"test_rpc_script_timeout\": [\n               \"self\"\n            ],\n            \"test_verify_backend_options\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.testing._internal.expecttest\": {\n         \"TestCase\": {\n            \"assertExpectedInline\": [\n               \"self\",\n               \"actual\",\n               \"expect\",\n               \"skip\"\n            ],\n            \"assertExpectedRaisesInline\": [\n               \"self\",\n               \"exc_type\",\n               \"callable\",\n               \"expect\"\n            ]\n         }\n      },\n      \"torch.testing._internal.jit_utils\": {\n         \"capture_stdout\": {\n            \"__enter__\": [\n               \"self\"\n            ],\n            \"__exit__\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.utils._cpp_extension_versioner\": {\n         \"ExtensionVersioner\": {\n            \"__init__\": [\n               \"self\"\n            ],\n            \"bump_version_if_changed\": [\n               \"self\",\n               \"name\",\n               \"source_files\",\n               \"build_arguments\",\n               \"build_directory\",\n               \"with_cuda\"\n            ],\n            \"get_version\": [\n               \"self\",\n               \"name\"\n            ]\n         }\n      },\n      \"torch.utils.backcompat.__init__\": {\n         \"Warning\": {\n            \"__init__\": [\n               \"self\",\n               \"setter\",\n               \"getter\"\n            ],\n            \"get_enabled\": [\n               \"self\"\n            ],\n            \"set_enabled\": [\n               \"self\",\n               \"value\"\n            ]\n         }\n      },\n      \"torch.utils.bundled_inputs\": {\n         \"InflatableArg\": {}\n      },\n      \"torch.utils.checkpoint\": {\n         \"CheckpointFunction\": {\n            \"backward\": [\n               \"ctx\"\n            ],\n            \"forward\": [\n               \"ctx\",\n               \"run_function\",\n               \"preserve_rng_state\"\n            ]\n         }\n      },\n      \"torch.utils.cpp_extension\": {\n         \"BuildExtension\": {\n            \"__init__\": [\n               \"self\"\n            ],\n            \"_add_compile_flag\": [\n               \"self\",\n               \"extension\",\n               \"flag\"\n            ],\n            \"_add_gnu_cpp_abi_flag\": [\n               \"self\",\n               \"extension\"\n            ],\n            \"_check_abi\": [\n               \"self\"\n            ],\n            \"_define_torch_extension_name\": [\n               \"self\",\n               \"extension\"\n            ],\n            \"build_extensions\": [\n               \"self\"\n            ],\n            \"get_ext_filename\": [\n               \"self\",\n               \"ext_name\"\n            ],\n            \"with_options\": [\n               \"cls\"\n            ]\n         }\n      },\n      \"torch.utils.data._utils.fetch\": {\n         \"_MapDatasetFetcher\": {\n            \"__init__\": [\n               \"self\",\n               \"dataset\",\n               \"auto_collation\",\n               \"collate_fn\",\n               \"drop_last\"\n            ],\n            \"fetch\": [\n               \"self\",\n               \"possibly_batched_index\"\n            ]\n         }\n      },\n      \"torch.utils.data._utils.worker\": {\n         \"WorkerInfo\": {\n            \"__init__\": [\n               \"self\"\n            ],\n            \"__setattr__\": [\n               \"self\",\n               \"key\",\n               \"val\"\n            ]\n         }\n      },\n      \"torch.utils.data.dataloader\": {\n         \"_MultiProcessingDataLoaderIter\": {\n            \"__del__\": [\n               \"self\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"loader\"\n            ],\n            \"_get_data\": [\n               \"self\"\n            ],\n            \"_next_data\": [\n               \"self\"\n            ],\n            \"_process_data\": [\n               \"self\",\n               \"data\"\n            ],\n            \"_shutdown_worker\": [\n               \"self\",\n               \"worker_id\"\n            ],\n            \"_shutdown_workers\": [\n               \"self\"\n            ],\n            \"_try_get_data\": [\n               \"self\",\n               \"timeout\"\n            ],\n            \"_try_put_index\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.utils.data.dataset\": {\n         \"Subset\": {\n            \"__getitem__\": [\n               \"self\",\n               \"idx\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"dataset\",\n               \"indices\"\n            ],\n            \"__len__\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.utils.data.distributed\": {\n         \"DistributedSampler\": {\n            \"__init__\": [\n               \"self\",\n               \"dataset\",\n               \"num_replicas\",\n               \"rank\",\n               \"shuffle\"\n            ],\n            \"__iter__\": [\n               \"self\"\n            ],\n            \"__len__\": [\n               \"self\"\n            ],\n            \"set_epoch\": [\n               \"self\",\n               \"epoch\"\n            ]\n         }\n      },\n      \"torch.utils.data.sampler\": {\n         \"BatchSampler\": {\n            \"__init__\": [\n               \"self\",\n               \"sampler\",\n               \"batch_size\",\n               \"drop_last\"\n            ],\n            \"__iter__\": [\n               \"self\"\n            ],\n            \"__len__\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.utils.file_baton\": {\n         \"FileBaton\": {\n            \"__init__\": [\n               \"self\",\n               \"lock_file_path\",\n               \"wait_seconds\"\n            ],\n            \"release\": [\n               \"self\"\n            ],\n            \"try_acquire\": [\n               \"self\"\n            ],\n            \"wait\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.utils.hipify.hipify_python\": {\n         \"Trie\": {\n            \"__init__\": [\n               \"self\"\n            ],\n            \"_pattern\": [\n               \"self\",\n               \"pData\"\n            ],\n            \"add\": [\n               \"self\",\n               \"word\"\n            ],\n            \"dump\": [\n               \"self\"\n            ],\n            \"pattern\": [\n               \"self\"\n            ],\n            \"quote\": [\n               \"self\",\n               \"char\"\n            ]\n         }\n      },\n      \"torch.utils.hooks\": {\n         \"RemovableHandle\": {\n            \"__enter__\": [\n               \"self\"\n            ],\n            \"__exit__\": [\n               \"self\",\n               \"type\",\n               \"value\",\n               \"tb\"\n            ],\n            \"__getstate__\": [\n               \"self\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"hooks_dict\"\n            ],\n            \"__setstate__\": [\n               \"self\",\n               \"state\"\n            ],\n            \"remove\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.utils.mkldnn\": {\n         \"MkldnnBatchNorm2d\": {\n            \"__getstate__\": [\n               \"self\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"dense_module\"\n            ],\n            \"__setstate__\": [\n               \"self\",\n               \"state\"\n            ],\n            \"forward\": [\n               \"self\",\n               \"x\"\n            ]\n         }\n      },\n      \"torch.utils.mobile_optimizer\": {\n         \"LintCode\": {}\n      },\n      \"torch.utils.show_pickle\": {\n         \"DumpUnpickler\": {\n            \"dump\": [\n               \"cls\",\n               \"in_stream\",\n               \"out_stream\"\n            ],\n            \"find_class\": [\n               \"self\",\n               \"module\",\n               \"name\"\n            ],\n            \"persistent_load\": [\n               \"self\",\n               \"pid\"\n            ]\n         }\n      },\n      \"torch.utils.tensorboard._pytorch_graph\": {\n         \"GraphPy\": {\n            \"__init__\": [\n               \"self\"\n            ],\n            \"append\": [\n               \"self\",\n               \"x\"\n            ],\n            \"find_common_root\": [\n               \"self\"\n            ],\n            \"populate_namespace_from_OP_to_IO\": [\n               \"self\"\n            ],\n            \"printall\": [\n               \"self\"\n            ],\n            \"to_proto\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.utils.tensorboard.writer\": {\n         \"SummaryWriter\": {\n            \"__enter__\": [\n               \"self\"\n            ],\n            \"__exit__\": [\n               \"self\",\n               \"exc_type\",\n               \"exc_val\",\n               \"exc_tb\"\n            ],\n            \"__init__\": [\n               \"self\",\n               \"log_dir\",\n               \"comment\",\n               \"purge_step\",\n               \"max_queue\",\n               \"flush_secs\",\n               \"filename_suffix\"\n            ],\n            \"_check_caffe2_blob\": [\n               \"self\",\n               \"item\"\n            ],\n            \"_encode\": [\n               \"rawstr\"\n            ],\n            \"_get_file_writer\": [\n               \"self\"\n            ],\n            \"add_audio\": [\n               \"self\",\n               \"tag\",\n               \"snd_tensor\",\n               \"global_step\",\n               \"sample_rate\",\n               \"walltime\"\n            ],\n            \"add_custom_scalars\": [\n               \"self\",\n               \"layout\"\n            ],\n            \"add_custom_scalars_marginchart\": [\n               \"self\",\n               \"tags\",\n               \"category\",\n               \"title\"\n            ],\n            \"add_custom_scalars_multilinechart\": [\n               \"self\",\n               \"tags\",\n               \"category\",\n               \"title\"\n            ],\n            \"add_embedding\": [\n               \"self\",\n               \"mat\",\n               \"metadata\",\n               \"label_img\",\n               \"global_step\",\n               \"tag\",\n               \"metadata_header\"\n            ],\n            \"add_figure\": [\n               \"self\",\n               \"tag\",\n               \"figure\",\n               \"global_step\",\n               \"close\",\n               \"walltime\"\n            ],\n            \"add_graph\": [\n               \"self\",\n               \"model\",\n               \"input_to_model\",\n               \"verbose\"\n            ],\n            \"add_histogram\": [\n               \"self\",\n               \"tag\",\n               \"values\",\n               \"global_step\",\n               \"bins\",\n               \"walltime\",\n               \"max_bins\"\n            ],\n            \"add_histogram_raw\": [\n               \"self\",\n               \"tag\",\n               \"min\",\n               \"max\",\n               \"num\",\n               \"sum\",\n               \"sum_squares\",\n               \"bucket_limits\",\n               \"bucket_counts\",\n               \"global_step\",\n               \"walltime\"\n            ],\n            \"add_hparams\": [\n               \"self\",\n               \"hparam_dict\",\n               \"metric_dict\"\n            ],\n            \"add_image\": [\n               \"self\",\n               \"tag\",\n               \"img_tensor\",\n               \"global_step\",\n               \"walltime\",\n               \"dataformats\"\n            ],\n            \"add_image_with_boxes\": [\n               \"self\",\n               \"tag\",\n               \"img_tensor\",\n               \"box_tensor\",\n               \"global_step\",\n               \"walltime\",\n               \"rescale\",\n               \"dataformats\",\n               \"labels\"\n            ],\n            \"add_images\": [\n               \"self\",\n               \"tag\",\n               \"img_tensor\",\n               \"global_step\",\n               \"walltime\",\n               \"dataformats\"\n            ],\n            \"add_mesh\": [\n               \"self\",\n               \"tag\",\n               \"vertices\",\n               \"colors\",\n               \"faces\",\n               \"config_dict\",\n               \"global_step\",\n               \"walltime\"\n            ],\n            \"add_onnx_graph\": [\n               \"self\",\n               \"prototxt\"\n            ],\n            \"add_pr_curve\": [\n               \"self\",\n               \"tag\",\n               \"labels\",\n               \"predictions\",\n               \"global_step\",\n               \"num_thresholds\",\n               \"weights\",\n               \"walltime\"\n            ],\n            \"add_pr_curve_raw\": [\n               \"self\",\n               \"tag\",\n               \"true_positive_counts\",\n               \"false_positive_counts\",\n               \"true_negative_counts\",\n               \"false_negative_counts\",\n               \"precision\",\n               \"recall\",\n               \"global_step\",\n               \"num_thresholds\",\n               \"weights\",\n               \"walltime\"\n            ],\n            \"add_scalar\": [\n               \"self\",\n               \"tag\",\n               \"scalar_value\",\n               \"global_step\",\n               \"walltime\"\n            ],\n            \"add_scalars\": [\n               \"self\",\n               \"main_tag\",\n               \"tag_scalar_dict\",\n               \"global_step\",\n               \"walltime\"\n            ],\n            \"add_text\": [\n               \"self\",\n               \"tag\",\n               \"text_string\",\n               \"global_step\",\n               \"walltime\"\n            ],\n            \"add_video\": [\n               \"self\",\n               \"tag\",\n               \"vid_tensor\",\n               \"global_step\",\n               \"fps\",\n               \"walltime\"\n            ],\n            \"close\": [\n               \"self\"\n            ],\n            \"flush\": [\n               \"self\"\n            ],\n            \"get_logdir\": [\n               \"self\"\n            ]\n         }\n      },\n      \"torch.utils.throughput_benchmark\": {\n         \"ThroughputBenchmark\": {\n            \"__init__\": [\n               \"self\",\n               \"module\"\n            ],\n            \"add_input\": [\n               \"self\"\n            ],\n            \"benchmark\": [\n               \"self\",\n               \"num_calling_threads\",\n               \"num_warmup_iters\",\n               \"num_iters\",\n               \"profiler_output_path\"\n            ],\n            \"run_once\": [\n               \"self\"\n            ]\n         }\n      }\n   },\n   \"package__all__list\": {\n      \"torch\": [\n         [\n            \"\",\n            \"typename\"\n         ],\n         [\n            \"\",\n            \"is_tensor\"\n         ],\n         [\n            \"\",\n            \"is_storage\"\n         ],\n         [\n            \"\",\n            \"set_default_tensor_type\"\n         ],\n         [\n            \"\",\n            \"set_rng_state\"\n         ],\n         [\n            \"\",\n            \"get_rng_state\"\n         ],\n         [\n            \"\",\n            \"manual_seed\"\n         ],\n         [\n            \"\",\n            \"initial_seed\"\n         ],\n         [\n            \"\",\n            \"seed\"\n         ],\n         [\n            \"\",\n            \"save\"\n         ],\n         [\n            \"\",\n            \"load\"\n         ],\n         [\n            \"\",\n            \"set_printoptions\"\n         ],\n         [\n            \"\",\n            \"chunk\"\n         ],\n         [\n            \"dataset\",\n            \"random_split\"\n         ],\n         [\n            \"\",\n            \"stack\"\n         ],\n         [\n            \"\",\n            \"matmul\"\n         ],\n         [\n            \"\",\n            \"no_grad\"\n         ],\n         [\n            \"\",\n            \"enable_grad\"\n         ],\n         [\n            \"dataset\",\n            \"random_split\"\n         ],\n         [\n            \"\",\n            \"randn\"\n         ],\n         [\n            \"\",\n            \"DoubleStorage\"\n         ],\n         [\n            \"\",\n            \"FloatStorage\"\n         ],\n         [\n            \"\",\n            \"LongStorage\"\n         ],\n         [\n            \"\",\n            \"IntStorage\"\n         ],\n         [\n            \"\",\n            \"ShortStorage\"\n         ],\n         [\n            \"\",\n            \"CharStorage\"\n         ],\n         [\n            \"\",\n            \"ByteStorage\"\n         ],\n         [\n            \"\",\n            \"BoolStorage\"\n         ],\n         [\n            \"\",\n            \"DoubleTensor\"\n         ],\n         [\n            \"\",\n            \"FloatTensor\"\n         ],\n         [\n            \"\",\n            \"LongTensor\"\n         ],\n         [\n            \"\",\n            \"IntTensor\"\n         ],\n         [\n            \"\",\n            \"ShortTensor\"\n         ],\n         [\n            \"\",\n            \"CharTensor\"\n         ],\n         [\n            \"\",\n            \"ByteTensor\"\n         ],\n         [\n            \"\",\n            \"BoolTensor\"\n         ],\n         [\n            \"dataset\",\n            \"TensorDataset\"\n         ],\n         [\n            \"\",\n            \"lobpcg\"\n         ]\n      ],\n      \"torch.autograd\": [\n         [\n            \"variable\",\n            \"Variable\"\n         ],\n         [\n            \"function\",\n            \"Function\"\n         ],\n         [\n            \"\",\n            \"backward\"\n         ],\n         [\n            \"\",\n            \"grad_mode\"\n         ]\n      ],\n      \"torch.cuda\": [],\n      \"torch.distributions\": [\n         [\n            \"bernoulli\",\n            \"Bernoulli\"\n         ],\n         [\n            \"beta\",\n            \"Beta\"\n         ],\n         [\n            \"binomial\",\n            \"Binomial\"\n         ],\n         [\n            \"categorical\",\n            \"Categorical\"\n         ],\n         [\n            \"cauchy\",\n            \"Cauchy\"\n         ],\n         [\n            \"chi2\",\n            \"Chi2\"\n         ],\n         [\n            \"continuous_bernoulli\",\n            \"ContinuousBernoulli\"\n         ],\n         [\n            \"dirichlet\",\n            \"Dirichlet\"\n         ],\n         [\n            \"distribution\",\n            \"Distribution\"\n         ],\n         [\n            \"exp_family\",\n            \"ExponentialFamily\"\n         ],\n         [\n            \"exp_family\",\n            \"ExponentialFamily\"\n         ],\n         [\n            \"fishersnedecor\",\n            \"FisherSnedecor\"\n         ],\n         [\n            \"gamma\",\n            \"Gamma\"\n         ],\n         [\n            \"geometric\",\n            \"Geometric\"\n         ],\n         [\n            \"gumbel\",\n            \"Gumbel\"\n         ],\n         [\n            \"half_cauchy\",\n            \"HalfCauchy\"\n         ],\n         [\n            \"half_normal\",\n            \"HalfNormal\"\n         ],\n         [\n            \"independent\",\n            \"Independent\"\n         ],\n         [\n            \"laplace\",\n            \"Laplace\"\n         ],\n         [\n            \"log_normal\",\n            \"LogNormal\"\n         ],\n         [\n            \"logistic_normal\",\n            \"LogisticNormal\"\n         ],\n         [\n            \"lowrank_multivariate_normal\",\n            \"LowRankMultivariateNormal\"\n         ],\n         [\n            \"mixture_same_family\",\n            \"MixtureSameFamily\"\n         ],\n         [\n            \"multinomial\",\n            \"Multinomial\"\n         ],\n         [\n            \"lowrank_multivariate_normal\",\n            \"LowRankMultivariateNormal\"\n         ],\n         [\n            \"negative_binomial\",\n            \"NegativeBinomial\"\n         ],\n         [\n            \"half_normal\",\n            \"HalfNormal\"\n         ],\n         [\n            \"one_hot_categorical\",\n            \"OneHotCategorical\"\n         ],\n         [\n            \"pareto\",\n            \"Pareto\"\n         ],\n         [\n            \"relaxed_bernoulli\",\n            \"RelaxedBernoulli\"\n         ],\n         [\n            \"relaxed_categorical\",\n            \"RelaxedOneHotCategorical\"\n         ],\n         [\n            \"studentT\",\n            \"StudentT\"\n         ],\n         [\n            \"poisson\",\n            \"Poisson\"\n         ],\n         [\n            \"uniform\",\n            \"Uniform\"\n         ],\n         [\n            \"von_mises\",\n            \"VonMises\"\n         ],\n         [\n            \"weibull\",\n            \"Weibull\"\n         ],\n         [\n            \"transformed_distribution\",\n            \"TransformedDistribution\"\n         ],\n         [\n            \"constraint_registry\",\n            \"biject_to\"\n         ],\n         [\n            \"kl\",\n            \"kl_divergence\"\n         ],\n         [\n            \"kl\",\n            \"register_kl\"\n         ],\n         [\n            \"constraint_registry\",\n            \"transform_to\"\n         ]\n      ],\n      \"torch.jit\": [\n         [\n            \"\",\n            \"value\"\n         ],\n         [\n            \"torch._six\",\n            \"get_function_from_type\"\n         ]\n      ],\n      \"torch.multiprocessing\": [\n         [\n            \"\",\n            \"set_sharing_strategy\"\n         ],\n         [\n            \"\",\n            \"get_sharing_strategy\"\n         ],\n         [\n            \"\",\n            \"get_all_sharing_strategies\"\n         ]\n      ],\n      \"torch.nn.intrinsic\": [\n         [\n            \"modules\",\n            \"ConvBn2d\"\n         ],\n         [\n            \"modules\",\n            \"ConvBn3d\"\n         ],\n         [\n            \"modules\",\n            \"ConvBnReLU2d\"\n         ],\n         [\n            \"modules\",\n            \"ConvBnReLU3d\"\n         ],\n         [\n            \"modules\",\n            \"ConvReLU2d\"\n         ],\n         [\n            \"modules\",\n            \"ConvReLU3d\"\n         ],\n         [\n            \"modules\",\n            \"LinearReLU\"\n         ],\n         [\n            \"modules\",\n            \"BNReLU2d\"\n         ],\n         [\n            \"modules\",\n            \"BNReLU3d\"\n         ]\n      ],\n      \"torch.nn.intrinsic.modules\": [\n         [\n            \"fused\",\n            \"ConvBn2d\"\n         ],\n         [\n            \"fused\",\n            \"ConvBn3d\"\n         ],\n         [\n            \"fused\",\n            \"ConvBnReLU2d\"\n         ],\n         [\n            \"fused\",\n            \"ConvBnReLU3d\"\n         ],\n         [\n            \"fused\",\n            \"ConvReLU2d\"\n         ],\n         [\n            \"fused\",\n            \"ConvReLU3d\"\n         ],\n         [\n            \"fused\",\n            \"LinearReLU\"\n         ],\n         [\n            \"fused\",\n            \"BNReLU2d\"\n         ],\n         [\n            \"fused\",\n            \"BNReLU3d\"\n         ]\n      ],\n      \"torch.nn.intrinsic.qat\": [\n         [\n            \"modules\",\n            \"ConvBn2d\"\n         ],\n         [\n            \"modules\",\n            \"ConvBnReLU2d\"\n         ],\n         [\n            \"modules\",\n            \"ConvReLU2d\"\n         ],\n         [\n            \"modules\",\n            \"LinearReLU\"\n         ],\n         [\n            \"modules\",\n            \"update_bn_stats\"\n         ],\n         [\n            \"modules\",\n            \"freeze_bn_stats\"\n         ]\n      ],\n      \"torch.nn.intrinsic.qat.modules\": [\n         [\n            \"linear_relu\",\n            \"LinearReLU\"\n         ],\n         [\n            \"conv_fused\",\n            \"ConvReLU2d\"\n         ],\n         [\n            \"conv_fused\",\n            \"ConvBn2d\"\n         ],\n         [\n            \"conv_fused\",\n            \"ConvBnReLU2d\"\n         ],\n         [\n            \"conv_fused\",\n            \"update_bn_stats\"\n         ],\n         [\n            \"conv_fused\",\n            \"freeze_bn_stats\"\n         ]\n      ],\n      \"torch.nn.intrinsic.quantized\": [\n         [\n            \"modules\",\n            \"LinearReLU\"\n         ],\n         [\n            \"modules\",\n            \"ConvReLU2d\"\n         ],\n         [\n            \"modules\",\n            \"ConvReLU3d\"\n         ],\n         [\n            \"modules\",\n            \"BNReLU2d\"\n         ],\n         [\n            \"modules\",\n            \"BNReLU3d\"\n         ]\n      ],\n      \"torch.nn.intrinsic.quantized.modules\": [\n         [\n            \"linear_relu\",\n            \"LinearReLU\"\n         ],\n         [\n            \"conv_relu\",\n            \"ConvReLU2d\"\n         ],\n         [\n            \"conv_relu\",\n            \"ConvReLU3d\"\n         ],\n         [\n            \"bn_relu\",\n            \"BNReLU2d\"\n         ],\n         [\n            \"bn_relu\",\n            \"BNReLU3d\"\n         ]\n      ],\n      \"torch.nn.modules\": [\n         [\n            \"module\",\n            \"Module\"\n         ],\n         [\n            \"linear\",\n            \"Identity\"\n         ],\n         [\n            \"linear\",\n            \"Linear\"\n         ],\n         [\n            \"conv\",\n            \"Conv1d\"\n         ],\n         [\n            \"conv\",\n            \"Conv2d\"\n         ],\n         [\n            \"conv\",\n            \"Conv3d\"\n         ],\n         [\n            \"conv\",\n            \"ConvTranspose1d\"\n         ],\n         [\n            \"conv\",\n            \"ConvTranspose2d\"\n         ],\n         [\n            \"conv\",\n            \"ConvTranspose3d\"\n         ],\n         [\n            \"activation\",\n            \"Threshold\"\n         ],\n         [\n            \"activation\",\n            \"ReLU\"\n         ],\n         [\n            \"activation\",\n            \"Hardtanh\"\n         ],\n         [\n            \"activation\",\n            \"ReLU6\"\n         ],\n         [\n            \"activation\",\n            \"Sigmoid\"\n         ],\n         [\n            \"activation\",\n            \"Tanh\"\n         ],\n         [\n            \"activation\",\n            \"Softmax\"\n         ],\n         [\n            \"activation\",\n            \"Softmax2d\"\n         ],\n         [\n            \"activation\",\n            \"LogSoftmax\"\n         ],\n         [\n            \"activation\",\n            \"ELU\"\n         ],\n         [\n            \"activation\",\n            \"SELU\"\n         ],\n         [\n            \"activation\",\n            \"CELU\"\n         ],\n         [\n            \"activation\",\n            \"GLU\"\n         ],\n         [\n            \"activation\",\n            \"GELU\"\n         ],\n         [\n            \"activation\",\n            \"Hardshrink\"\n         ],\n         [\n            \"activation\",\n            \"LeakyReLU\"\n         ],\n         [\n            \"activation\",\n            \"LogSigmoid\"\n         ],\n         [\n            \"activation\",\n            \"Softplus\"\n         ],\n         [\n            \"activation\",\n            \"Softshrink\"\n         ],\n         [\n            \"activation\",\n            \"MultiheadAttention\"\n         ],\n         [\n            \"activation\",\n            \"PReLU\"\n         ],\n         [\n            \"activation\",\n            \"Softsign\"\n         ],\n         [\n            \"activation\",\n            \"Softmin\"\n         ],\n         [\n            \"activation\",\n            \"Tanhshrink\"\n         ],\n         [\n            \"activation\",\n            \"RReLU\"\n         ],\n         [\n            \"loss\",\n            \"L1Loss\"\n         ],\n         [\n            \"loss\",\n            \"NLLLoss\"\n         ],\n         [\n            \"loss\",\n            \"KLDivLoss\"\n         ],\n         [\n            \"loss\",\n            \"MSELoss\"\n         ],\n         [\n            \"loss\",\n            \"BCELoss\"\n         ],\n         [\n            \"loss\",\n            \"BCEWithLogitsLoss\"\n         ],\n         [\n            \"loss\",\n            \"NLLLoss2d\"\n         ],\n         [\n            \"loss\",\n            \"PoissonNLLLoss\"\n         ],\n         [\n            \"loss\",\n            \"CosineEmbeddingLoss\"\n         ],\n         [\n            \"loss\",\n            \"CTCLoss\"\n         ],\n         [\n            \"loss\",\n            \"HingeEmbeddingLoss\"\n         ],\n         [\n            \"loss\",\n            \"MarginRankingLoss\"\n         ],\n         [\n            \"loss\",\n            \"MultiLabelMarginLoss\"\n         ],\n         [\n            \"loss\",\n            \"MultiLabelSoftMarginLoss\"\n         ],\n         [\n            \"loss\",\n            \"MultiMarginLoss\"\n         ],\n         [\n            \"loss\",\n            \"SmoothL1Loss\"\n         ],\n         [\n            \"loss\",\n            \"MultiLabelSoftMarginLoss\"\n         ],\n         [\n            \"loss\",\n            \"CrossEntropyLoss\"\n         ],\n         [\n            \"container\",\n            \"Container\"\n         ],\n         [\n            \"container\",\n            \"Sequential\"\n         ],\n         [\n            \"container\",\n            \"ModuleList\"\n         ],\n         [\n            \"container\",\n            \"ModuleDict\"\n         ],\n         [\n            \"container\",\n            \"ParameterList\"\n         ],\n         [\n            \"container\",\n            \"ParameterDict\"\n         ],\n         [\n            \"pooling\",\n            \"AvgPool1d\"\n         ],\n         [\n            \"pooling\",\n            \"AvgPool2d\"\n         ],\n         [\n            \"pooling\",\n            \"AvgPool3d\"\n         ],\n         [\n            \"pooling\",\n            \"MaxPool1d\"\n         ],\n         [\n            \"pooling\",\n            \"MaxPool2d\"\n         ],\n         [\n            \"pooling\",\n            \"MaxPool3d\"\n         ],\n         [\n            \"pooling\",\n            \"MaxUnpool1d\"\n         ],\n         [\n            \"pooling\",\n            \"MaxUnpool2d\"\n         ],\n         [\n            \"pooling\",\n            \"MaxUnpool3d\"\n         ],\n         [\n            \"pooling\",\n            \"FractionalMaxPool2d\"\n         ],\n         [\n            \"pooling\",\n            \"FractionalMaxPool3d\"\n         ],\n         [\n            \"pooling\",\n            \"LPPool1d\"\n         ],\n         [\n            \"pooling\",\n            \"LPPool2d\"\n         ],\n         [\n            \"normalization\",\n            \"LocalResponseNorm\"\n         ],\n         [\n            \"batchnorm\",\n            \"BatchNorm1d\"\n         ],\n         [\n            \"batchnorm\",\n            \"BatchNorm2d\"\n         ],\n         [\n            \"batchnorm\",\n            \"BatchNorm3d\"\n         ],\n         [\n            \"instancenorm\",\n            \"InstanceNorm1d\"\n         ],\n         [\n            \"instancenorm\",\n            \"InstanceNorm2d\"\n         ],\n         [\n            \"instancenorm\",\n            \"InstanceNorm3d\"\n         ],\n         [\n            \"normalization\",\n            \"LayerNorm\"\n         ],\n         [\n            \"normalization\",\n            \"GroupNorm\"\n         ],\n         [\n            \"batchnorm\",\n            \"SyncBatchNorm\"\n         ],\n         [\n            \"dropout\",\n            \"Dropout\"\n         ],\n         [\n            \"dropout\",\n            \"Dropout2d\"\n         ],\n         [\n            \"dropout\",\n            \"Dropout3d\"\n         ],\n         [\n            \"dropout\",\n            \"AlphaDropout\"\n         ],\n         [\n            \"dropout\",\n            \"FeatureAlphaDropout\"\n         ],\n         [\n            \"padding\",\n            \"ReflectionPad1d\"\n         ],\n         [\n            \"padding\",\n            \"ReflectionPad2d\"\n         ],\n         [\n            \"padding\",\n            \"ReplicationPad2d\"\n         ],\n         [\n            \"padding\",\n            \"ReplicationPad1d\"\n         ],\n         [\n            \"padding\",\n            \"ReplicationPad3d\"\n         ],\n         [\n            \"normalization\",\n            \"CrossMapLRN2d\"\n         ],\n         [\n            \"loss\",\n            \"CosineEmbeddingLoss\"\n         ],\n         [\n            \"sparse\",\n            \"EmbeddingBag\"\n         ],\n         [\n            \"rnn\",\n            \"RNNBase\"\n         ],\n         [\n            \"rnn\",\n            \"RNNBase\"\n         ],\n         [\n            \"rnn\",\n            \"LSTM\"\n         ],\n         [\n            \"rnn\",\n            \"GRU\"\n         ],\n         [\n            \"rnn\",\n            \"RNNCellBase\"\n         ],\n         [\n            \"rnn\",\n            \"RNNCellBase\"\n         ],\n         [\n            \"rnn\",\n            \"LSTMCell\"\n         ],\n         [\n            \"rnn\",\n            \"GRUCell\"\n         ],\n         [\n            \"pixelshuffle\",\n            \"PixelShuffle\"\n         ],\n         [\n            \"upsampling\",\n            \"Upsample\"\n         ],\n         [\n            \"upsampling\",\n            \"UpsamplingNearest2d\"\n         ],\n         [\n            \"upsampling\",\n            \"UpsamplingBilinear2d\"\n         ],\n         [\n            \"distance\",\n            \"PairwiseDistance\"\n         ],\n         [\n            \"pooling\",\n            \"AdaptiveMaxPool1d\"\n         ],\n         [\n            \"pooling\",\n            \"AdaptiveMaxPool2d\"\n         ],\n         [\n            \"pooling\",\n            \"AdaptiveMaxPool3d\"\n         ],\n         [\n            \"pooling\",\n            \"AdaptiveAvgPool1d\"\n         ],\n         [\n            \"pooling\",\n            \"AdaptiveAvgPool2d\"\n         ],\n         [\n            \"pooling\",\n            \"AdaptiveAvgPool3d\"\n         ],\n         [\n            \"loss\",\n            \"TripletMarginLoss\"\n         ],\n         [\n            \"padding\",\n            \"ZeroPad2d\"\n         ],\n         [\n            \"padding\",\n            \"ConstantPad1d\"\n         ],\n         [\n            \"padding\",\n            \"ConstantPad2d\"\n         ],\n         [\n            \"padding\",\n            \"ConstantPad3d\"\n         ],\n         [\n            \"linear\",\n            \"Bilinear\"\n         ],\n         [\n            \"distance\",\n            \"CosineSimilarity\"\n         ],\n         [\n            \"fold\",\n            \"Unfold\"\n         ],\n         [\n            \"fold\",\n            \"Fold\"\n         ],\n         [\n            \"adaptive\",\n            \"AdaptiveLogSoftmaxWithLoss\"\n         ],\n         [\n            \"transformer\",\n            \"TransformerEncoder\"\n         ],\n         [\n            \"transformer\",\n            \"TransformerDecoder\"\n         ],\n         [\n            \"transformer\",\n            \"TransformerEncoderLayer\"\n         ],\n         [\n            \"transformer\",\n            \"TransformerDecoderLayer\"\n         ],\n         [\n            \"transformer\",\n            \"TransformerEncoder\"\n         ],\n         [\n            \"flatten\",\n            \"Flatten\"\n         ],\n         [\n            \"activation\",\n            \"Hardsigmoid\"\n         ],\n         [\n            \"activation\",\n            \"Hardswish\"\n         ]\n      ],\n      \"torch.nn.parallel\": [\n         [\n            \"replicate\",\n            \"replicate\"\n         ],\n         [\n            \"scatter_gather\",\n            \"scatter\"\n         ],\n         [\n            \"parallel_apply\",\n            \"parallel_apply\"\n         ],\n         [\n            \"scatter_gather\",\n            \"gather\"\n         ],\n         [\n            \"data_parallel\",\n            \"data_parallel\"\n         ],\n         [\n            \"data_parallel\",\n            \"DataParallel\"\n         ],\n         [\n            \"distributed\",\n            \"DistributedDataParallel\"\n         ]\n      ],\n      \"torch.nn.qat.modules\": [\n         [\n            \"linear\",\n            \"Linear\"\n         ],\n         [\n            \"conv\",\n            \"Conv2d\"\n         ],\n         [\n            \"activations\",\n            \"Hardswish\"\n         ]\n      ],\n      \"torch.nn.quantized.dynamic.modules\": [\n         [\n            \"linear\",\n            \"Linear\"\n         ],\n         [\n            \"rnn\",\n            \"LSTM\"\n         ]\n      ],\n      \"torch.nn.quantized.modules\": [\n         [\n            \"batchnorm\",\n            \"BatchNorm2d\"\n         ],\n         [\n            \"batchnorm\",\n            \"BatchNorm3d\"\n         ],\n         [\n            \"conv\",\n            \"Conv1d\"\n         ],\n         [\n            \"conv\",\n            \"Conv2d\"\n         ],\n         [\n            \"conv\",\n            \"Conv3d\"\n         ],\n         [\n            \"\",\n            \"DeQuantize\"\n         ],\n         [\n            \"linear\",\n            \"Linear\"\n         ],\n         [\n            \"torch.nn.modules.pooling\",\n            \"MaxPool2d\"\n         ],\n         [\n            \"\",\n            \"Quantize\"\n         ],\n         [\n            \"activation\",\n            \"ReLU\"\n         ],\n         [\n            \"activation\",\n            \"ReLU6\"\n         ],\n         [\n            \"activation\",\n            \"Hardswish\"\n         ],\n         [\n            \"normalization\",\n            \"LayerNorm\"\n         ],\n         [\n            \"functional_modules\",\n            \"FloatFunctional\"\n         ],\n         [\n            \"functional_modules\",\n            \"QFunctional\"\n         ]\n      ],\n      \"torch.sparse\": [\n         [\n            \"\",\n            \"addmm\"\n         ],\n         [\n            \"\",\n            \"mm\"\n         ],\n         [\n            \"\",\n            \"sum\"\n         ]\n      ],\n      \"torch.testing\": [\n         [\n            \"\",\n            \"assert_allclose\"\n         ],\n         [\n            \"\",\n            \"make_non_contiguous\"\n         ],\n         [\n            \"\",\n            \"rand_like\"\n         ],\n         [\n            \"\",\n            \"randn_like\"\n         ]\n      ]\n   }\n}"